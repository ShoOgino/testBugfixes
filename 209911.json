{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","commits":[{"id":"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","date":1484565333,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"/dev/null","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa21040dd19564fdcf4d807ed15fbc5de3c74df0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"/dev/null","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, \"v * s\", (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, \"v * s\", (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ea72350b903b90cb4fda2a5adbce31aa00c074","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = scoringFunction(iii, (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, \"v * s\", (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = scoringFunction(iii, (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, \"v * s\", (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = scoringFunction(iii, (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = DoubleValuesSource.scoringFunction(iii, \"v * s\", (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62f3efc82b1ead830448bb27e2af9f89417401ea","date":1513619223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    bindings.add(\"iii\", DoubleValuesSource.fromIntField(\"iii\"));\n    Expression expr = JavascriptCompiler.compile(\"score * iii\");\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, expr.getDoubleValuesSource(bindings));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    DoubleValuesSource iii = DoubleValuesSource.fromIntField(\"iii\");\n    DoubleValuesSource score = scoringFunction(iii, (v, s) -> v * s);\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, score);\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4016d158b4de63a6bee48c193507e736737121","date":1515144725,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    bindings.add(\"iii\", DoubleValuesSource.fromIntField(\"iii\"));\n    Expression expr = JavascriptCompiler.compile(\"score * iii\");\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, expr.getDoubleValuesSource(bindings));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    SimpleBindings bindings = new SimpleBindings();\n    bindings.add(\"score\", DoubleValuesSource.SCORES);\n    bindings.add(\"iii\", DoubleValuesSource.fromIntField(\"iii\"));\n    Expression expr = JavascriptCompiler.compile(\"score * iii\");\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = new FunctionScoreQuery(bq, expr.getDoubleValuesSource(bindings));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa21040dd19564fdcf4d807ed15fbc5de3c74df0","date":1528970850,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 4);\n    assertTrue(expl.toString().contains(\"first\"));\n    assertTrue(expl.toString().contains(\"iii\"));\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 4);\n    assertTrue(expl.toString().contains(\"first\"));\n    assertTrue(expl.toString().contains(\"iii\"));\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 4);\n    assertTrue(expl.toString().contains(\"first\"));\n    assertTrue(expl.toString().contains(\"iii\"));\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testScoreModifyingSource().mjava","sourceNew":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits.value, docs.totalHits.value);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 4);\n    assertTrue(expl.toString().contains(\"first\"));\n    assertTrue(expl.toString().contains(\"iii\"));\n\n  }\n\n","sourceOld":"  // CustomScoreQuery and BoostedQuery equivalent\n  public void testScoreModifyingSource() throws Exception {\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs plain = searcher.search(bq, 1);\n\n    FunctionScoreQuery fq = FunctionScoreQuery.boostByValue(bq, DoubleValuesSource.fromIntField(\"iii\"));\n\n    QueryUtils.check(random(), fq, searcher, rarely());\n\n    int[] expectedDocs = new int[]{ 4, 7, 9, 8, 12 };\n    TopDocs docs = searcher.search(fq, 5);\n    assertEquals(plain.totalHits, docs.totalHits);\n    for (int i = 0; i < expectedDocs.length; i++) {\n      assertEquals(expectedDocs[i], docs.scoreDocs[i].doc);\n    }\n\n    Explanation expl = searcher.explain(fq, 4);\n    assertTrue(expl.toString().contains(\"first\"));\n    assertTrue(expl.toString().contains(\"iii\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"b94236357aaa22b76c10629851fe4e376e0cea82":["62f3efc82b1ead830448bb27e2af9f89417401ea","3e4016d158b4de63a6bee48c193507e736737121"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["28288370235ed02234a64753cdbf0c6ec096304a"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"28288370235ed02234a64753cdbf0c6ec096304a":["501fdb8d708778ae5368dd5c44879e1d46487e43","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","501fdb8d708778ae5368dd5c44879e1d46487e43"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","fa21040dd19564fdcf4d807ed15fbc5de3c74df0"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"fa21040dd19564fdcf4d807ed15fbc5de3c74df0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fa21040dd19564fdcf4d807ed15fbc5de3c74df0"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","41ea72350b903b90cb4fda2a5adbce31aa00c074"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4016d158b4de63a6bee48c193507e736737121":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","fa21040dd19564fdcf4d807ed15fbc5de3c74df0"]},"commit2Childs":{"41ea72350b903b90cb4fda2a5adbce31aa00c074":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fa21040dd19564fdcf4d807ed15fbc5de3c74df0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["b94236357aaa22b76c10629851fe4e376e0cea82","3e4016d158b4de63a6bee48c193507e736737121"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"28288370235ed02234a64753cdbf0c6ec096304a":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"501fdb8d708778ae5368dd5c44879e1d46487e43":["41ea72350b903b90cb4fda2a5adbce31aa00c074","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["507e7decdf00981d09a74632ea30299a4ce6ba72","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"fa21040dd19564fdcf4d807ed15fbc5de3c74df0":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"3e4016d158b4de63a6bee48c193507e736737121":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["507e7decdf00981d09a74632ea30299a4ce6ba72","e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}