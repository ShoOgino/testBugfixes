{"path":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this name\n   * it will append the collection\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      this.setField( name, value );\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this name\n   * it will append the collection\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      this.setField( name, value );\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this name\n   * it will append the collection\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      this.setField( name, value );\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this name\n   * it will append the collection\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      this.setField( name, value );\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this name\n   * it will append the collection\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      this.setField( name, value );\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this name\n   * it will append the collection\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      this.setField( name, value );\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"974ef146a791a4fadf1226b30089cd7ad7d2983f","date":1347388725,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<Object>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this name\n   * it will append the collection\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      this.setField( name, value );\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":["2090964b44752cbb9eef4d981d8df1e2c13cec1f","ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcede1b4eab17943b211f8bf2c39965619153b7d","date":1359206377,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently. \n   * \n   * The class type of value and the name parameter should match schema.xml. \n   * schema.xml can be found in conf directory under the solr home by default.\n   * \n   * @param name Name of the field, should match one of the field names defined under \"fields\" tag in schema.xml.\n   * @param value Value of the field, should be of same class type as defined by \"type\" attribute of the corresponding field in schema.xml. \n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<Object>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<Object>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently. \n   * \n   * The class type of value and the name parameter should match schema.xml. \n   * schema.xml can be found in conf directory under the solr home by default.\n   * \n   * @param name Name of the field, should match one of the field names defined under \"fields\" tag in schema.xml.\n   * @param value Value of the field, should be of same class type as defined by \"type\" attribute of the corresponding field in schema.xml. \n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<Object>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<Object>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently. \n   * \n   * The class type of value and the name parameter should match schema.xml. \n   * schema.xml can be found in conf directory under the solr home by default.\n   * \n   * @param name Name of the field, should match one of the field names defined under \"fields\" tag in schema.xml.\n   * @param value Value of the field, should be of same class type as defined by \"type\" attribute of the corresponding field in schema.xml. \n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently. \n   * \n   * The class type of value and the name parameter should match schema.xml. \n   * schema.xml can be found in conf directory under the solr home by default.\n   * \n   * @param name Name of the field, should match one of the field names defined under \"fields\" tag in schema.xml.\n   * @param value Value of the field, should be of same class type as defined by \"type\" attribute of the corresponding field in schema.xml. \n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<Object>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bebc91ac0c6b933a0cadfd8d94534755078a5445","date":1449071777,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently. \n   * \n   * The class type of value and the name parameter should match schema.xml. \n   * schema.xml can be found in conf directory under the solr home by default.\n   * \n   * @param name Name of the field, should match one of the field names defined under \"fields\" tag in schema.xml.\n   * @param value Value of the field, should be of same class type as defined by \"type\" attribute of the corresponding field in schema.xml. \n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently. \n   * \n   * The class type of value and the name parameter should match schema.xml. \n   * schema.xml can be found in conf directory under the solr home by default.\n   * \n   * @param name Name of the field, should match one of the field names defined under \"fields\" tag in schema.xml.\n   * @param value Value of the field, should be of same class type as defined by \"type\" attribute of the corresponding field in schema.xml. \n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/SolrDocument#addField(String,Object).mjava","sourceNew":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently. \n   * \n   * The class type of value and the name parameter should match schema.xml. \n   * schema.xml can be found in conf directory under the solr home by default.\n   * \n   * @param name Name of the field, should match one of the field names defined under \"fields\" tag in schema.xml.\n   * @param value Value of the field, should be of same class type as defined by \"type\" attribute of the corresponding field in schema.xml. \n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable && !(value instanceof SolrDocumentBase)) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","sourceOld":"  /**\n   * This will add a field to the document.  If fields already exist with this\n   * name it will append value to the collection. If the value is Collection,\n   * each value will be added independently. \n   * \n   * The class type of value and the name parameter should match schema.xml. \n   * schema.xml can be found in conf directory under the solr home by default.\n   * \n   * @param name Name of the field, should match one of the field names defined under \"fields\" tag in schema.xml.\n   * @param value Value of the field, should be of same class type as defined by \"type\" attribute of the corresponding field in schema.xml. \n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void addField(String name, Object value) \n  { \n    Object existing = _fields.get(name);\n    if (existing == null) {\n      if( value instanceof Collection ) {\n        Collection<Object> c = new ArrayList<>( 3 );\n        for ( Object o : (Collection<Object>)value ) {\n          c.add(o);\n        }\n        this.setField( name, c );\n      } else {\n        this.setField( name, value );\n      }\n      return;\n    }\n    \n    Collection<Object> vals = null;\n    if( existing instanceof Collection ) {\n      vals = (Collection<Object>)existing;\n    }\n    else {\n      vals = new ArrayList<>( 3 );\n      vals.add( existing );\n    }\n    \n    // Add the values to the collection\n    if( value instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)value ) {\n        vals.add( o );\n      }\n    }\n    else if( value instanceof Object[] ) {\n      for( Object o : (Object[])value ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( value );\n    }\n    _fields.put( name, vals );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fcede1b4eab17943b211f8bf2c39965619153b7d"],"fcede1b4eab17943b211f8bf2c39965619153b7d":["974ef146a791a4fadf1226b30089cd7ad7d2983f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bebc91ac0c6b933a0cadfd8d94534755078a5445":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["974ef146a791a4fadf1226b30089cd7ad7d2983f","fcede1b4eab17943b211f8bf2c39965619153b7d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"974ef146a791a4fadf1226b30089cd7ad7d2983f":["c26f00b574427b55127e869b935845554afde1fa"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["bebc91ac0c6b933a0cadfd8d94534755078a5445"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bebc91ac0c6b933a0cadfd8d94534755078a5445"],"fcede1b4eab17943b211f8bf2c39965619153b7d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["974ef146a791a4fadf1226b30089cd7ad7d2983f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bebc91ac0c6b933a0cadfd8d94534755078a5445":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"974ef146a791a4fadf1226b30089cd7ad7d2983f":["fcede1b4eab17943b211f8bf2c39965619153b7d","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}