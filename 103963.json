{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","commits":[{"id":"b5fa1c8367f821057f943ece929329485ec708ba","date":1475186606,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(\"_version_\");\n        if (v >= tuple.getLong(\"_version_\")) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(\"_version_\");\n        if (v >= tuple.getLong(\"_version_\")) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(\"_version_\");\n        if (v >= tuple.getLong(\"_version_\")) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","sourceNew":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(VERSION_FIELD);\n        if (v >= tuple.getLong(VERSION_FIELD)) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(\"_version_\");\n        if (v >= tuple.getLong(\"_version_\")) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","sourceNew":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(SORT, \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(VERSION_FIELD);\n        if (v >= tuple.getLong(VERSION_FIELD)) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(VERSION_FIELD);\n        if (v >= tuple.getLong(VERSION_FIELD)) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","sourceNew":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(VERSION_FIELD);\n        if (v >= tuple.getLong(VERSION_FIELD)) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(\"_version_\");\n        if (v >= tuple.getLong(\"_version_\")) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ModelCache#getModel(String,String,String,long).mjava","sourceNew":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(SORT, \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(VERSION_FIELD);\n        if (v >= tuple.getLong(VERSION_FIELD)) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple getModel(String zkHost,\n                        String collection,\n                        String modelID,\n                        long checkMillis) throws IOException {\n    Model model = null;\n    long currentTime = new Date().getTime();\n    synchronized (this) {\n      model = models.get(modelID);\n      if(model != null && ((currentTime - model.getLastChecked()) <= checkMillis)) {\n        return model.getTuple();\n      }\n\n      if(model != null){\n        //model is expired\n        models.remove(modelID);\n      }\n    }\n\n    //Model is not in cache or has expired so fetch the model\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"q\",\"name_s:\"+modelID);\n    params.set(\"fl\", \"terms_ss, idfs_ds, weights_ds, iteration_i, _version_\");\n    params.set(\"sort\", \"iteration_i desc\");\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(solrClientCache);\n    CloudSolrStream stream = new CloudSolrStream(zkHost, collection, params);\n    stream.setStreamContext(streamContext);\n    Tuple tuple = null;\n    try {\n      stream.open();\n      tuple = stream.read();\n      if (tuple.EOF) {\n        return null;\n      }\n    } finally {\n      stream.close();\n    }\n\n    synchronized (this) {\n      //check again to see if another thread has updated the same model\n      Model m = models.get(modelID);\n      if (m != null) {\n        Tuple t = m.getTuple();\n        long v = t.getLong(VERSION_FIELD);\n        if (v >= tuple.getLong(VERSION_FIELD)) {\n          return t;\n        } else {\n          models.put(modelID, new Model(tuple, currentTime));\n          return tuple;\n        }\n      } else {\n        models.put(modelID, new Model(tuple, currentTime));\n        return tuple;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b5fa1c8367f821057f943ece929329485ec708ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5fa1c8367f821057f943ece929329485ec708ba"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["e5fa6615014cd2288fe930f8c8bb726f9504961d"],"01624b85de12fb02335810bdf325124e59040772":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"b5fa1c8367f821057f943ece929329485ec708ba":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5fa1c8367f821057f943ece929329485ec708ba","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["01624b85de12fb02335810bdf325124e59040772"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}