{"path":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","commits":[{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseExceptions() {\n    try {\n      Version.parse(\"1.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"LUCENE_4_0_0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.256\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.256\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.3\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.2\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.0.0.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"6.0.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06476b5ee325ba90e00769cfbbf5a0f3bce69941","date":1411049854,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","sourceNew":"  public void testParseExceptions() {\n    try {\n      Version.parse(\"1.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"LUCENE_4_0_0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.256\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.256\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.3\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.2\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.0.0.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","sourceOld":"  public void testParseExceptions() {\n    try {\n      Version.parse(\"1.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"LUCENE_4_0_0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.256\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.256\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.3\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.2\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.0.0.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"6.0.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","sourceNew":"  public void testParseExceptions() {\n    try {\n      Version.parse(\"LUCENE_4_0_0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_4_0_0\"));\n    }\n\n    try {\n      Version.parse(\"4.256\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.256\"));\n    }\n\n    try {\n      Version.parse(\"4.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.-1\"));\n    }\n\n    try {\n      Version.parse(\"4.1.256\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.256\"));\n    }\n\n    try {\n      Version.parse(\"4.1.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.-1\"));\n    }\n\n    try {\n      Version.parse(\"4.1.1.3\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.1.3\"));\n    }\n\n    try {\n      Version.parse(\"4.1.1.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.1.-1\"));\n    }\n\n    try {\n      Version.parse(\"4.1.1.1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.1.1\"));\n    }\n\n    try {\n      Version.parse(\"4.1.1.2\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.1.2\"));\n    }\n\n    try {\n      Version.parse(\"4.0.0.0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.0.0.0\"));\n    }\n\n    try {\n      Version.parse(\"4.0.0.1.42\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.0.0.1.42\"));\n    }\n\n    try {\n      Version.parse(\"4..0.1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4..0.1\"));\n    }\n  }\n\n","sourceOld":"  public void testParseExceptions() {\n    try {\n      Version.parse(\"1.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"LUCENE_4_0_0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.256\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.256\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.3\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.-1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.1\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.1.1.2\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n\n    try {\n      Version.parse(\"4.0.0.0\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","sourceNew":"  public void testParseExceptions() {\n    try {\n      Version.parse(\"LUCENE_6_0_0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_6_0_0\"));\n    }\n\n    try {\n      Version.parse(\"6.256\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.256\"));\n    }\n\n    try {\n      Version.parse(\"6.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.-1\"));\n    }\n\n    try {\n      Version.parse(\"6.1.256\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.256\"));\n    }\n\n    try {\n      Version.parse(\"6.1.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.-1\"));\n    }\n\n    try {\n      Version.parse(\"6.1.1.3\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.1.3\"));\n    }\n\n    try {\n      Version.parse(\"6.1.1.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.1.-1\"));\n    }\n\n    try {\n      Version.parse(\"6.1.1.1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.1.1\"));\n    }\n\n    try {\n      Version.parse(\"6.1.1.2\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.1.2\"));\n    }\n\n    try {\n      Version.parse(\"6.0.0.0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.0.0.0\"));\n    }\n\n    try {\n      Version.parse(\"6.0.0.1.42\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.0.0.1.42\"));\n    }\n\n    try {\n      Version.parse(\"6..0.1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6..0.1\"));\n    }\n  }\n\n","sourceOld":"  public void testParseExceptions() {\n    try {\n      Version.parse(\"LUCENE_4_0_0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_4_0_0\"));\n    }\n\n    try {\n      Version.parse(\"4.256\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.256\"));\n    }\n\n    try {\n      Version.parse(\"4.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.-1\"));\n    }\n\n    try {\n      Version.parse(\"4.1.256\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.256\"));\n    }\n\n    try {\n      Version.parse(\"4.1.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.-1\"));\n    }\n\n    try {\n      Version.parse(\"4.1.1.3\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.1.3\"));\n    }\n\n    try {\n      Version.parse(\"4.1.1.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.1.-1\"));\n    }\n\n    try {\n      Version.parse(\"4.1.1.1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.1.1\"));\n    }\n\n    try {\n      Version.parse(\"4.1.1.2\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.1.1.2\"));\n    }\n\n    try {\n      Version.parse(\"4.0.0.0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.0.0.0\"));\n    }\n\n    try {\n      Version.parse(\"4.0.0.1.42\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4.0.0.1.42\"));\n    }\n\n    try {\n      Version.parse(\"4..0.1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"4..0.1\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","sourceNew":"  public void testParseExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"LUCENE_6_0_0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_6_0_0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.3\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.3\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.2\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.2\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.0.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.0.0.0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.0.0.1.42\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.0.0.1.42\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6..0.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6..0.1\"));\n  }\n\n","sourceOld":"  public void testParseExceptions() {\n    try {\n      Version.parse(\"LUCENE_6_0_0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_6_0_0\"));\n    }\n\n    try {\n      Version.parse(\"6.256\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.256\"));\n    }\n\n    try {\n      Version.parse(\"6.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.-1\"));\n    }\n\n    try {\n      Version.parse(\"6.1.256\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.256\"));\n    }\n\n    try {\n      Version.parse(\"6.1.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.-1\"));\n    }\n\n    try {\n      Version.parse(\"6.1.1.3\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.1.3\"));\n    }\n\n    try {\n      Version.parse(\"6.1.1.-1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.1.-1\"));\n    }\n\n    try {\n      Version.parse(\"6.1.1.1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.1.1\"));\n    }\n\n    try {\n      Version.parse(\"6.1.1.2\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.1.1.2\"));\n    }\n\n    try {\n      Version.parse(\"6.0.0.0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.0.0.0\"));\n    }\n\n    try {\n      Version.parse(\"6.0.0.1.42\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6.0.0.1.42\"));\n    }\n\n    try {\n      Version.parse(\"6..0.1\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"6..0.1\"));\n    }\n  }\n\n","bugFix":["057a1793765d068ea9302f1a29e21734ee58d41e","46ff533a28b45377dffc601931e60e19492e6384","71387d8cb6923eb831b17a8b734608ba2e21c653"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b9829d27224bda451a373a47f081afb1c664b8","date":1498846708,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","sourceNew":"  public void testParseExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"LUCENE_7_0_0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_7_0_0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.3\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.3\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.2\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.2\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.0.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.0.0.0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.0.0.1.42\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.0.0.1.42\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7..0.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7..0.1\"));\n  }\n\n","sourceOld":"  public void testParseExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"LUCENE_6_0_0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_6_0_0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.3\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.3\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.2\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.2\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.0.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.0.0.0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.0.0.1.42\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.0.0.1.42\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6..0.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6..0.1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","sourceNew":"  public void testParseExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"LUCENE_7_0_0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_7_0_0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.3\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.3\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.2\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.2\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.0.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.0.0.0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.0.0.1.42\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.0.0.1.42\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7..0.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7..0.1\"));\n  }\n\n","sourceOld":"  public void testParseExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"LUCENE_6_0_0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_6_0_0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.3\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.3\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.2\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.2\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.0.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.0.0.0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.0.0.1.42\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.0.0.1.42\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6..0.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6..0.1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseExceptions().mjava","sourceNew":"  public void testParseExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"LUCENE_7_0_0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_7_0_0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.3\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.3\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.1.1.2\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.1.1.2\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.0.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.0.0.0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7.0.0.1.42\");\n    });\n    assertTrue(expected.getMessage().contains(\"7.0.0.1.42\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"7..0.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"7..0.1\"));\n  }\n\n","sourceOld":"  public void testParseExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"LUCENE_6_0_0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_6_0_0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.256\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.256\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.3\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.3\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.-1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.-1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.1\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.1.1.2\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.1.1.2\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.0.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.0.0.0\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6.0.0.1.42\");\n    });\n    assertTrue(expected.getMessage().contains(\"6.0.0.1.42\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parse(\"6..0.1\");\n    });\n    assertTrue(expected.getMessage().contains(\"6..0.1\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06476b5ee325ba90e00769cfbbf5a0f3bce69941":["057a1793765d068ea9302f1a29e21734ee58d41e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cc018b79379c67835b40b1259cd3dc931df60944":["05fe562aa248790944d43cdd478f512572835ba0","85b9829d27224bda451a373a47f081afb1c664b8"],"30c8e5574b55d57947e989443dfde611646530ee":["05fe562aa248790944d43cdd478f512572835ba0","cc018b79379c67835b40b1259cd3dc931df60944"],"46ff533a28b45377dffc601931e60e19492e6384":["06476b5ee325ba90e00769cfbbf5a0f3bce69941"],"057a1793765d068ea9302f1a29e21734ee58d41e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85b9829d27224bda451a373a47f081afb1c664b8":["05fe562aa248790944d43cdd478f512572835ba0"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["46ff533a28b45377dffc601931e60e19492e6384"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"]},"commit2Childs":{"06476b5ee325ba90e00769cfbbf5a0f3bce69941":["46ff533a28b45377dffc601931e60e19492e6384"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["057a1793765d068ea9302f1a29e21734ee58d41e"],"05fe562aa248790944d43cdd478f512572835ba0":["cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","85b9829d27224bda451a373a47f081afb1c664b8"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"46ff533a28b45377dffc601931e60e19492e6384":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"057a1793765d068ea9302f1a29e21734ee58d41e":["06476b5ee325ba90e00769cfbbf5a0f3bce69941"],"85b9829d27224bda451a373a47f081afb1c664b8":["cc018b79379c67835b40b1259cd3dc931df60944"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}