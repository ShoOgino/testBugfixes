{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#loadNorms(FieldInfo).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#loadNorms(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#loadNorms(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNorms(FieldInfo field) throws IOException {\n    NormsEntry entry = norms.get(field.name);\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        if (!merging) {\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"constant\", 8));\n          ramBytesUsed.addAndGet(8);\n        }\n        final long v = entry.offset;\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n        };\n      case UNCOMPRESSED:\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case DELTA_COMPRESSED:\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(reader.ramBytesUsed());\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"delta compressed\", reader));\n        }\n        return reader;\n      case TABLE_COMPRESSED:\n        data.seek(entry.offset);\n        int packedVersion = data.readVInt();\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedVersion, maxDoc, bitsPerValue);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"table compressed\", ordsReader));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNorms(FieldInfo field) throws IOException {\n    NormsEntry entry = norms.get(field.name);\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        instancesInfo.put(field.name, Accountables.namedAccountable(\"constant\", 8));\n        ramBytesUsed.addAndGet(8);\n        final long v = entry.offset;\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n        };\n      case UNCOMPRESSED:\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        instancesInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case DELTA_COMPRESSED:\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        instancesInfo.put(field.name, Accountables.namedAccountable(\"delta compressed\", reader));\n        return reader;\n      case TABLE_COMPRESSED:\n        data.seek(entry.offset);\n        int packedVersion = data.readVInt();\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        instancesInfo.put(field.name, Accountables.namedAccountable(\"table compressed\", ordsReader));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#loadNorms(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#loadNorms(FieldInfo).mjava","sourceNew":"  private NumericDocValues loadNorms(FieldInfo field) throws IOException {\n    NormsEntry entry = norms.get(field.name);\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        if (!merging) {\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"constant\", 8));\n          ramBytesUsed.addAndGet(8);\n        }\n        final long v = entry.offset;\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n        };\n      case UNCOMPRESSED:\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case DELTA_COMPRESSED:\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(reader.ramBytesUsed());\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"delta compressed\", reader));\n        }\n        return reader;\n      case TABLE_COMPRESSED:\n        data.seek(entry.offset);\n        int packedVersion = data.readVInt();\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedVersion, maxDoc, bitsPerValue);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"table compressed\", ordsReader));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNorms(FieldInfo field) throws IOException {\n    NormsEntry entry = norms.get(field.name);\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        instancesInfo.put(field.name, Accountables.namedAccountable(\"constant\", 8));\n        ramBytesUsed.addAndGet(8);\n        final long v = entry.offset;\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n        };\n      case UNCOMPRESSED:\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n        instancesInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case DELTA_COMPRESSED:\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, maxDoc, false);\n        ramBytesUsed.addAndGet(reader.ramBytesUsed());\n        instancesInfo.put(field.name, Accountables.namedAccountable(\"delta compressed\", reader));\n        return reader;\n      case TABLE_COMPRESSED:\n        data.seek(entry.offset);\n        int packedVersion = data.readVInt();\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedVersion, maxDoc, bitsPerValue);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n        instancesInfo.put(field.name, Accountables.namedAccountable(\"table compressed\", ordsReader));\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsProducer#loadNorms(FieldInfo).mjava","sourceNew":null,"sourceOld":"  private NumericDocValues loadNorms(FieldInfo field) throws IOException {\n    NormsEntry entry = norms.get(field.name);\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        if (!merging) {\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"constant\", 8));\n          ramBytesUsed.addAndGet(8);\n        }\n        final long v = entry.offset;\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return v;\n          }\n        };\n      case UNCOMPRESSED:\n        data.seek(entry.offset);\n        final byte bytes[] = new byte[maxDoc];\n        data.readBytes(bytes, 0, bytes.length);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes));\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"byte array\", maxDoc));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return bytes[docID];\n          }\n        };\n      case DELTA_COMPRESSED:\n        data.seek(entry.offset);\n        int packedIntsVersion = data.readVInt();\n        int blockSize = data.readVInt();\n        final BlockPackedReader reader = new BlockPackedReader(data, packedIntsVersion, blockSize, maxDoc, false);\n        if (!merging) {\n          ramBytesUsed.addAndGet(reader.ramBytesUsed());\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"delta compressed\", reader));\n        }\n        return reader;\n      case TABLE_COMPRESSED:\n        data.seek(entry.offset);\n        int packedVersion = data.readVInt();\n        int size = data.readVInt();\n        if (size > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + size, data);\n        }\n        final long decode[] = new long[size];\n        for (int i = 0; i < decode.length; i++) {\n          decode[i] = data.readLong();\n        }\n        final int formatID = data.readVInt();\n        final int bitsPerValue = data.readVInt();\n        final PackedInts.Reader ordsReader = PackedInts.getReaderNoHeader(data, PackedInts.Format.byId(formatID), packedVersion, maxDoc, bitsPerValue);\n        if (!merging) {\n          ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(decode) + ordsReader.ramBytesUsed());\n          instancesInfo.put(field.name, Accountables.namedAccountable(\"table compressed\", ordsReader));\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return decode[(int)ordsReader.get(docID)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}