{"path":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getSparseScorer(LeafReader,Weight,float,ScoreMode).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getSparseScorer(LeafReader,Weight,float,ScoreMode).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getSparseScorer(LeafReader,Weight,float,ScoreMode).mjava","sourceNew":"    /** Scorer used for INTERSECTS **/\n    private Scorer getSparseScorer(final LeafReader reader, final Weight weight, final float boost, final ScoreMode scoreMode) throws IOException {\n      if (values.getDocCount() == reader.maxDoc()\n          && values.getDocCount() == values.size()\n          && cost() > reader.maxDoc() / 2) {\n        // If all docs have exactly one value and the cost is greater\n        // than half the leaf size then maybe we can make things faster\n        // by computing the set of documents that do NOT match the query\n        final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        result.set(0, reader.maxDoc());\n        final long[] cost = new long[]{reader.maxDoc()};\n        values.intersect(getInverseDenseVisitor(query, result, cost));\n        final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n        return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n      }\n      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","sourceOld":"    /** Scorer used for INTERSECTS **/\n    private Scorer getSparseScorer(final LeafReader reader, final Weight weight, final float boost, final ScoreMode scoreMode) throws IOException {\n      if (values.getDocCount() == reader.maxDoc()\n          && values.getDocCount() == values.size()\n          && cost() > reader.maxDoc() / 2) {\n        // If all docs have exactly one value and the cost is greater\n        // than half the leaf size then maybe we can make things faster\n        // by computing the set of documents that do NOT match the query\n        final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        result.set(0, reader.maxDoc());\n        final long[] cost = new long[]{reader.maxDoc()};\n        values.intersect(getInverseDenseVisitor(query, result, cost));\n        final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n        return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n      }\n      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb33f7f48bf40ff978c9494feddc80c8701678","date":1600408258,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getSparseScorer(LeafReader,Weight,float,ScoreMode).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getSparseScorer(LeafReader,Weight,float,ScoreMode).mjava","sourceNew":"    /** Scorer used for INTERSECTS **/\n    private Scorer getSparseScorer(final LeafReader reader, final Weight weight, final float boost, final ScoreMode scoreMode) throws IOException {\n      if (values.getDocCount() == reader.maxDoc()\n          && values.getDocCount() == values.size()\n          && cost() > reader.maxDoc() / 2) {\n        // If all docs have exactly one value and the cost is greater\n        // than half the leaf size then maybe we can make things faster\n        // by computing the set of documents that do NOT match the query\n        final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        result.set(0, reader.maxDoc());\n        final long[] cost = new long[]{reader.maxDoc()};\n        values.intersect(getInverseDenseVisitor(query, result, cost));\n        final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n        return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n      }\n      if (values.getDocCount() < (values.size() >>> 2)) {\n        // we use a dense structure so we can skip already visited documents\n        final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        final long[] cost = new long[]{0};\n        values.intersect(getIntersectsDenseVisitor(query, result, cost));\n        assert cost[0] > 0 || result.cardinality() == 0;\n        final DocIdSetIterator iterator = cost[0] == 0 ? DocIdSetIterator.empty() : new BitSetIterator(result, cost[0]);\n        return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n      } else {\n        final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n        values.intersect(getSparseVisitor(query, docIdSetBuilder));\n        final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n        return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n      }\n    }\n\n","sourceOld":"    /** Scorer used for INTERSECTS **/\n    private Scorer getSparseScorer(final LeafReader reader, final Weight weight, final float boost, final ScoreMode scoreMode) throws IOException {\n      if (values.getDocCount() == reader.maxDoc()\n          && values.getDocCount() == values.size()\n          && cost() > reader.maxDoc() / 2) {\n        // If all docs have exactly one value and the cost is greater\n        // than half the leaf size then maybe we can make things faster\n        // by computing the set of documents that do NOT match the query\n        final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n        result.set(0, reader.maxDoc());\n        final long[] cost = new long[]{reader.maxDoc()};\n        values.intersect(getInverseDenseVisitor(query, result, cost));\n        final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n        return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n      }\n      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73bb33f7f48bf40ff978c9494feddc80c8701678":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73bb33f7f48bf40ff978c9494feddc80c8701678"]},"commit2Childs":{"73bb33f7f48bf40ff978c9494feddc80c8701678":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["73bb33f7f48bf40ff978c9494feddc80c8701678"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}