{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","commits":[{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        boolean updated = false;\n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection.\");\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice.\");\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n              if (wasLeader == null) {\n                updated = true;\n              }\n            } else {\n              if (wasLeader != null) {\n                updated = true;\n              }\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        if (updated) {\n          return new CloudState(state.getLiveNodes(), newStates);\n        } else {\n          return state;\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        boolean updated = false;\n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection.\");\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice.\");\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n              if (wasLeader == null) {\n                updated = true;\n              }\n            } else {\n              if (wasLeader != null) {\n                updated = true;\n              }\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        if (updated) {\n          return new CloudState(state.getLiveNodes(), newStates);\n        } else {\n          return state;\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        boolean updated = false;\n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection.\");\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice.\");\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n              if (wasLeader == null) {\n                updated = true;\n              }\n            } else {\n              if (wasLeader != null) {\n                updated = true;\n              }\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        if (updated) {\n          return new CloudState(state.getLiveNodes(), newStates);\n        } else {\n          return state;\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","sourceNew":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection.\");\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice.\");\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        boolean updated = false;\n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection.\");\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice.\");\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n              if (wasLeader == null) {\n                updated = true;\n              }\n            } else {\n              if (wasLeader != null) {\n                updated = true;\n              }\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        if (updated) {\n          return new CloudState(state.getLiveNodes(), newStates);\n        } else {\n          return state;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","sourceNew":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection.\");\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice.\");\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        boolean updated = false;\n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection.\");\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice.\");\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n              if (wasLeader == null) {\n                updated = true;\n              }\n            } else {\n              if (wasLeader != null) {\n                updated = true;\n              }\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        if (updated) {\n          return new CloudState(state.getLiveNodes(), newStates);\n        } else {\n          return state;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","sourceNew":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection:\" + collection);\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice:\" + sliceName);\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection.\");\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice.\");\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#setShardLeader(ClusterState,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","sourceNew":"      private ClusterState setShardLeader(ClusterState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection:\" + collection);\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice:\" + sliceName);\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection:\" + collection);\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice:\" + sliceName);\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#setShardLeader(ClusterState,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","sourceNew":"      private ClusterState setShardLeader(ClusterState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection:\" + collection);\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice:\" + sliceName);\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection:\" + collection);\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice:\" + sliceName);\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#setShardLeader(CloudState,String,String,String).mjava","sourceNew":null,"sourceOld":"      private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n\n        if(slices==null) {\n          log.error(\"Could not mark shard leader for non existing collection:\" + collection);\n          return state;\n        }\n        \n        if (!slices.containsKey(sliceName)) {\n          log.error(\"Could not mark leader for non existing slice:\" + sliceName);\n          return state;\n        } else {\n          final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n          for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n            Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n            newShardProps.putAll(shard.getValue().getProperties());\n            \n            newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n            \n            ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n            if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n              newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n            }\n            newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n          }\n          Slice slice = new Slice(sliceName, newShards);\n          slices.put(sliceName, slice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a5093a9e893633cc091cf2f729d7863671c2b715"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["d0492616b11aace806d95ec9df44f57a60160bf7","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0492616b11aace806d95ec9df44f57a60160bf7"],"d0492616b11aace806d95ec9df44f57a60160bf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0492616b11aace806d95ec9df44f57a60160bf7"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["d0492616b11aace806d95ec9df44f57a60160bf7"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd92b8bcc88e969302510acf77bd6970da3994c4","d0492616b11aace806d95ec9df44f57a60160bf7","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"a5093a9e893633cc091cf2f729d7863671c2b715":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"d0492616b11aace806d95ec9df44f57a60160bf7":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}