{"path":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#weight(Searcher).mjava","sourceNew":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarity(searcher).queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(Searcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarity(searcher).queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarity(searcher).queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarity(searcher).queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","sourceNew":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarity().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarity(searcher).queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","sourceNew":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarity().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarity(searcher).queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","sourceNew":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarity().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","sourceNew":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarity().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","sourceNew":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = getSimilarity(searcher).queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Query#weight(IndexSearcher).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Constructs and initializes a Weight for a top-level query.\n   */\n  public Weight weight(IndexSearcher searcher) throws IOException {\n    Query query = searcher.rewrite(this);\n    Weight weight = query.createWeight(searcher);\n    float sum = weight.sumOfSquaredWeights();\n    float norm = searcher.getSimilarityProvider().queryNorm(sum);\n    if (Float.isInfinite(norm) || Float.isNaN(norm))\n      norm = 1.0f;\n    weight.normalize(norm);\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","6f7fee42303a18cc146043c96f66491311b345d9"],"6f7fee42303a18cc146043c96f66491311b345d9":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f7fee42303a18cc146043c96f66491311b345d9"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"6f7fee42303a18cc146043c96f66491311b345d9":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}