{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/LookaheadTokenFilter#peekToken().mjava","commits":[{"id":"914394e583f0258b2fe327df337ea44c908a0aab","date":1333904214,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/LookaheadTokenFilter#peekToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if there is a new token. */\n  protected boolean peekToken() throws IOException {\n    if (DEBUG) {\n      System.out.println(\"LTF.peekToken inputPos=\" + inputPos + \" outputPos=\" + outputPos + \" tokenPending=\" + tokenPending);\n    }\n    assert !end;\n    assert inputPos == -1 || outputPos <= inputPos;\n    if (tokenPending) {\n      positions.get(inputPos).add(captureState());\n      tokenPending = false;\n    }\n    final boolean gotToken = input.incrementToken();\n    if (DEBUG) {\n      System.out.println(\"  input.incrToken() returned \" + gotToken);\n    }\n    if (gotToken) {\n      inputPos += posIncAtt.getPositionIncrement();\n      assert inputPos >= 0;\n      if (DEBUG) {\n        System.out.println(\"  now inputPos=\" + inputPos);\n      }\n      \n      final Position startPosData = positions.get(inputPos);\n      final Position endPosData = positions.get(inputPos + posLenAtt.getPositionLength());\n\n      final int startOffset = offsetAtt.startOffset();\n      if (startPosData.startOffset == -1) {\n        startPosData.startOffset = startOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert startPosData.startOffset == startOffset;\n      }\n\n      final int endOffset = offsetAtt.endOffset();\n      if (endPosData.endOffset == -1) {\n        endPosData.endOffset = endOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert endPosData.endOffset == endOffset;\n      }\n\n      tokenPending = true;\n    } else {\n      end = true;\n    }\n\n    return gotToken;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa380b0ac7fa6c578259afbb8eaa19927570010d","date":1333998347,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/LookaheadTokenFilter#peekToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/LookaheadTokenFilter#peekToken().mjava","sourceNew":"  /** Returns true if there is a new token. */\n  protected boolean peekToken() throws IOException {\n    if (DEBUG) {\n      System.out.println(\"LTF.peekToken inputPos=\" + inputPos + \" outputPos=\" + outputPos + \" tokenPending=\" + tokenPending);\n    }\n    assert !end;\n    assert inputPos == -1 || outputPos <= inputPos;\n    if (tokenPending) {\n      positions.get(inputPos).add(captureState());\n      tokenPending = false;\n    }\n    final boolean gotToken = input.incrementToken();\n    if (DEBUG) {\n      System.out.println(\"  input.incrToken() returned \" + gotToken);\n    }\n    if (gotToken) {\n      inputPos += posIncAtt.getPositionIncrement();\n      assert inputPos >= 0;\n      if (DEBUG) {\n        System.out.println(\"  now inputPos=\" + inputPos);\n      }\n      \n      final Position startPosData = positions.get(inputPos);\n      final Position endPosData = positions.get(inputPos + posLenAtt.getPositionLength());\n\n      final int startOffset = offsetAtt.startOffset();\n      if (startPosData.startOffset == -1) {\n        startPosData.startOffset = startOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert startPosData.startOffset == startOffset: \"prev startOffset=\" + startPosData.startOffset + \" vs new startOffset=\" + startOffset + \" inputPos=\" + inputPos;\n      }\n\n      final int endOffset = offsetAtt.endOffset();\n      if (endPosData.endOffset == -1) {\n        endPosData.endOffset = endOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert endPosData.endOffset == endOffset: \"prev endOffset=\" + endPosData.endOffset + \" vs new endOffset=\" + endOffset + \" inputPos=\" + inputPos;\n      }\n\n      tokenPending = true;\n    } else {\n      end = true;\n    }\n\n    return gotToken;\n  }\n\n","sourceOld":"  /** Returns true if there is a new token. */\n  protected boolean peekToken() throws IOException {\n    if (DEBUG) {\n      System.out.println(\"LTF.peekToken inputPos=\" + inputPos + \" outputPos=\" + outputPos + \" tokenPending=\" + tokenPending);\n    }\n    assert !end;\n    assert inputPos == -1 || outputPos <= inputPos;\n    if (tokenPending) {\n      positions.get(inputPos).add(captureState());\n      tokenPending = false;\n    }\n    final boolean gotToken = input.incrementToken();\n    if (DEBUG) {\n      System.out.println(\"  input.incrToken() returned \" + gotToken);\n    }\n    if (gotToken) {\n      inputPos += posIncAtt.getPositionIncrement();\n      assert inputPos >= 0;\n      if (DEBUG) {\n        System.out.println(\"  now inputPos=\" + inputPos);\n      }\n      \n      final Position startPosData = positions.get(inputPos);\n      final Position endPosData = positions.get(inputPos + posLenAtt.getPositionLength());\n\n      final int startOffset = offsetAtt.startOffset();\n      if (startPosData.startOffset == -1) {\n        startPosData.startOffset = startOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert startPosData.startOffset == startOffset;\n      }\n\n      final int endOffset = offsetAtt.endOffset();\n      if (endPosData.endOffset == -1) {\n        endPosData.endOffset = endOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert endPosData.endOffset == endOffset;\n      }\n\n      tokenPending = true;\n    } else {\n      end = true;\n    }\n\n    return gotToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/LookaheadTokenFilter#peekToken().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/LookaheadTokenFilter#peekToken().mjava","sourceNew":"  /** Returns true if there is a new token. */\n  protected boolean peekToken() throws IOException {\n    if (DEBUG) {\n      System.out.println(\"LTF.peekToken inputPos=\" + inputPos + \" outputPos=\" + outputPos + \" tokenPending=\" + tokenPending);\n    }\n    assert !end;\n    assert inputPos == -1 || outputPos <= inputPos;\n    if (tokenPending) {\n      positions.get(inputPos).add(captureState());\n      tokenPending = false;\n    }\n    final boolean gotToken = input.incrementToken();\n    if (DEBUG) {\n      System.out.println(\"  input.incrToken() returned \" + gotToken);\n    }\n    if (gotToken) {\n      inputPos += posIncAtt.getPositionIncrement();\n      assert inputPos >= 0;\n      if (DEBUG) {\n        System.out.println(\"  now inputPos=\" + inputPos);\n      }\n      \n      final Position startPosData = positions.get(inputPos);\n      final Position endPosData = positions.get(inputPos + posLenAtt.getPositionLength());\n\n      final int startOffset = offsetAtt.startOffset();\n      if (startPosData.startOffset == -1) {\n        startPosData.startOffset = startOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert startPosData.startOffset == startOffset: \"prev startOffset=\" + startPosData.startOffset + \" vs new startOffset=\" + startOffset + \" inputPos=\" + inputPos;\n      }\n\n      final int endOffset = offsetAtt.endOffset();\n      if (endPosData.endOffset == -1) {\n        endPosData.endOffset = endOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert endPosData.endOffset == endOffset: \"prev endOffset=\" + endPosData.endOffset + \" vs new endOffset=\" + endOffset + \" inputPos=\" + inputPos;\n      }\n\n      tokenPending = true;\n    } else {\n      end = true;\n    }\n\n    return gotToken;\n  }\n\n","sourceOld":"  /** Returns true if there is a new token. */\n  protected boolean peekToken() throws IOException {\n    if (DEBUG) {\n      System.out.println(\"LTF.peekToken inputPos=\" + inputPos + \" outputPos=\" + outputPos + \" tokenPending=\" + tokenPending);\n    }\n    assert !end;\n    assert inputPos == -1 || outputPos <= inputPos;\n    if (tokenPending) {\n      positions.get(inputPos).add(captureState());\n      tokenPending = false;\n    }\n    final boolean gotToken = input.incrementToken();\n    if (DEBUG) {\n      System.out.println(\"  input.incrToken() returned \" + gotToken);\n    }\n    if (gotToken) {\n      inputPos += posIncAtt.getPositionIncrement();\n      assert inputPos >= 0;\n      if (DEBUG) {\n        System.out.println(\"  now inputPos=\" + inputPos);\n      }\n      \n      final Position startPosData = positions.get(inputPos);\n      final Position endPosData = positions.get(inputPos + posLenAtt.getPositionLength());\n\n      final int startOffset = offsetAtt.startOffset();\n      if (startPosData.startOffset == -1) {\n        startPosData.startOffset = startOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert startPosData.startOffset == startOffset;\n      }\n\n      final int endOffset = offsetAtt.endOffset();\n      if (endPosData.endOffset == -1) {\n        endPosData.endOffset = endOffset;\n      } else {\n        // Make sure our input isn't messing up offsets:\n        assert endPosData.endOffset == endOffset;\n      }\n\n      tokenPending = true;\n    } else {\n      end = true;\n    }\n\n    return gotToken;\n  }\n\n","bugFix":["914394e583f0258b2fe327df337ea44c908a0aab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["914394e583f0258b2fe327df337ea44c908a0aab","aa380b0ac7fa6c578259afbb8eaa19927570010d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"914394e583f0258b2fe327df337ea44c908a0aab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa380b0ac7fa6c578259afbb8eaa19927570010d":["914394e583f0258b2fe327df337ea44c908a0aab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"]},"commit2Childs":{"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["914394e583f0258b2fe327df337ea44c908a0aab"],"914394e583f0258b2fe327df337ea44c908a0aab":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","aa380b0ac7fa6c578259afbb8eaa19927570010d"],"aa380b0ac7fa6c578259afbb8eaa19927570010d":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}