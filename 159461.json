{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","commits":[{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","pathOld":"/dev/null","sourceNew":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        final Query q2 = new TermsQuery(queryTerms);\n        q2.setBoost(boost);\n        assertSameMatches(searcher, q1, q2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3988baec043ad7d049ce6d82d3e2ac2f2e9b809d","date":1424595399,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","sourceNew":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        final Query q2 = new TermsQuery(queryTerms);\n        q2.setBoost(boost);\n        assertSameMatches(searcher, q1, q2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        final Query q2 = new TermsQuery(queryTerms);\n        q2.setBoost(boost);\n        assertSameMatches(searcher, q1, q2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98b75ce7511290cd8d4597ebca197f989ce8ccc0","date":1424748496,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","sourceNew":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        final Query q2 = new TermsQuery(queryTerms);\n        q2.setBoost(boost);\n        assertSameMatches(searcher, q1, q2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        final Query q2 = new TermsQuery(queryTerms);\n        q2.setBoost(boost);\n        assertSameMatches(searcher, q1, q2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","sourceNew":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq.build());\n        q1.setBoost(boost);\n        final Query q2 = new TermsQuery(queryTerms);\n        q2.setBoost(boost);\n        assertSameMatches(searcher, q1, q2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery bq = new BooleanQuery();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq);\n        q1.setBoost(boost);\n        final Query q2 = new TermsQuery(queryTerms);\n        q2.setBoost(boost);\n        assertSameMatches(searcher, q1, q2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","sourceNew":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq.build());\n        final Query q2 = new TermsQuery(queryTerms);\n        assertSameMatches(searcher, new BoostQuery(q1, boost), new BoostQuery(q2, boost), true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq.build());\n        q1.setBoost(boost);\n        final Query q2 = new TermsQuery(queryTerms);\n        q2.setBoost(boost);\n        assertSameMatches(searcher, q1, q2, true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testDuel().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","sourceNew":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq.build());\n        final Query q2 = new TermInSetQuery(queryTerms);\n        assertSameMatches(searcher, new BoostQuery(q1, boost), new BoostQuery(q2, boost), true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq.build());\n        final Query q2 = new TermsQuery(queryTerms);\n        assertSameMatches(searcher, new BoostQuery(q1, boost), new BoostQuery(q2, boost), true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testDuel().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testDuel().mjava","sourceNew":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq.build());\n        final Query q2 = new TermInSetQuery(queryTerms);\n        assertSameMatches(searcher, new BoostQuery(q1, boost), new BoostQuery(q2, boost), true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDuel() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final List<Term> allTerms = new ArrayList<>();\n      final int numTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 10));\n      for (int i = 0; i < numTerms; ++i) {\n        final String field = usually() ? \"f\" : \"g\";\n        final String value = TestUtil.randomAnalysisString(random(), 10, true);\n        allTerms.add(new Term(field, value));\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final Term term = allTerms.get(random().nextInt(allTerms.size()));\n        doc.add(new StringField(term.field(), term.text(), Store.NO));\n        iw.addDocument(doc);\n      }\n      if (numTerms > 1 && random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(allTerms.get(0)));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      if (reader.numDocs() == 0) {\n        // may occasionally happen if all documents got the same term\n        IOUtils.close(reader, dir);\n        continue;\n      }\n\n      for (int i = 0; i < 100; ++i) {\n        final float boost = random().nextFloat() * 10;\n        final int numQueryTerms = TestUtil.nextInt(random(), 1, 1 << TestUtil.nextInt(random(), 1, 8));\n        List<Term> queryTerms = new ArrayList<>();\n        for (int j = 0; j < numQueryTerms; ++j) {\n          queryTerms.add(allTerms.get(random().nextInt(allTerms.size())));\n        }\n        final BooleanQuery.Builder bq = new BooleanQuery.Builder();\n        for (Term t : queryTerms) {\n          bq.add(new TermQuery(t), Occur.SHOULD);\n        }\n        final Query q1 = new ConstantScoreQuery(bq.build());\n        final Query q2 = new TermsQuery(queryTerms);\n        assertSameMatches(searcher, new BoostQuery(q1, boost), new BoostQuery(q2, boost), true);\n      }\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["98b75ce7511290cd8d4597ebca197f989ce8ccc0"],"98b75ce7511290cd8d4597ebca197f989ce8ccc0":["3988baec043ad7d049ce6d82d3e2ac2f2e9b809d"],"3988baec043ad7d049ce6d82d3e2ac2f2e9b809d":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["2dfdf766e55e943d942055d7de53c7ad6bc45283","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"98b75ce7511290cd8d4597ebca197f989ce8ccc0":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3988baec043ad7d049ce6d82d3e2ac2f2e9b809d":["98b75ce7511290cd8d4597ebca197f989ce8ccc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["3988baec043ad7d049ce6d82d3e2ac2f2e9b809d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}