{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#next().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        int start = term.offset + term.length;\n        if (start >= end) {\n          // switch byte blocks\n          if (currentBlockNumber +1 >= blocks.length) {\n            return null;\n          }\n          currentBlockNumber++;\n          term.bytes = blocks[currentBlockNumber];\n          end = blockEnds[currentBlockNumber];\n          start = 0;\n          if (end<=0) return null;  // special case of empty last array\n        }\n\n        currentOrd++;\n\n        byte[] block = term.bytes;\n        if ((block[start] & 128) == 0) {\n          term.length = block[start];\n          term.offset = start+1;\n        } else {\n          term.length = (((block[start] & 0x7f)) << 8) | (block[1+start] & 0xff);\n          term.offset = start+2;\n        }\n\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        int start = term.offset + term.length;\n        if (start >= end) {\n          // switch byte blocks\n          if (currentBlockNumber +1 >= blocks.length) {\n            return null;\n          }\n          currentBlockNumber++;\n          term.bytes = blocks[currentBlockNumber];\n          end = blockEnds[currentBlockNumber];\n          start = 0;\n          if (end<=0) return null;  // special case of empty last array\n        }\n\n        currentOrd++;\n\n        byte[] block = term.bytes;\n        if ((block[start] & 128) == 0) {\n          term.length = block[start];\n          term.offset = start+1;\n        } else {\n          term.length = (((block[start] & 0x7f)) << 8) | (block[1+start] & 0xff);\n          term.offset = start+2;\n        }\n\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f7cc7c185412da66c1d0089d9e75da01329a00","date":1353364851,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        int start = term.offset + term.length;\n        if (start >= end) {\n          // switch byte blocks\n          if (currentBlockNumber+1 >= blocks.length) {\n            assert currentOrd+1 == numOrd: \"currentOrd=\" + currentOrd + \" numOrd=\" + numOrd;\n            return null;\n          }\n          currentBlockNumber++;\n          term.bytes = blocks[currentBlockNumber];\n          end = blockEnds[currentBlockNumber];\n          start = 0;\n          if (end<=0) {\n            assert currentOrd+1 == numOrd;\n            return null;  // special case of empty last array\n          }\n        }\n\n        currentOrd++;\n\n        byte[] block = term.bytes;\n        if ((block[start] & 128) == 0) {\n          term.length = block[start];\n          term.offset = start+1;\n        } else {\n          term.length = (((block[start] & 0x7f)) << 8) | (block[1+start] & 0xff);\n          term.offset = start+2;\n        }\n\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        int start = term.offset + term.length;\n        if (start >= end) {\n          // switch byte blocks\n          if (currentBlockNumber +1 >= blocks.length) {\n            return null;\n          }\n          currentBlockNumber++;\n          term.bytes = blocks[currentBlockNumber];\n          end = blockEnds[currentBlockNumber];\n          start = 0;\n          if (end<=0) return null;  // special case of empty last array\n        }\n\n        currentOrd++;\n\n        byte[] block = term.bytes;\n        if ((block[start] & 128) == 0) {\n          term.length = block[start];\n          term.offset = start+1;\n        } else {\n          term.length = (((block[start] & 0x7f)) << 8) | (block[1+start] & 0xff);\n          term.offset = start+2;\n        }\n\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.SortedDocValuesImpl.SortedDocValuesEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        int start = term.offset + term.length;\n        if (start >= end) {\n          // switch byte blocks\n          if (currentBlockNumber+1 >= blocks.length) {\n            assert currentOrd+1 == numOrd: \"currentOrd=\" + currentOrd + \" numOrd=\" + numOrd;\n            return null;\n          }\n          currentBlockNumber++;\n          term.bytes = blocks[currentBlockNumber];\n          end = blockEnds[currentBlockNumber];\n          start = 0;\n          if (end<=0) {\n            assert currentOrd+1 == numOrd;\n            return null;  // special case of empty last array\n          }\n        }\n\n        currentOrd++;\n\n        byte[] block = term.bytes;\n        if ((block[start] & 128) == 0) {\n          term.length = block[start];\n          term.offset = start+1;\n        } else {\n          term.length = (((block[start] & 0x7f)) << 8) | (block[1+start] & 0xff);\n          term.offset = start+2;\n        }\n\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        int start = term.offset + term.length;\n        if (start >= end) {\n          // switch byte blocks\n          if (currentBlockNumber+1 >= blocks.length) {\n            assert currentOrd+1 == numOrd: \"currentOrd=\" + currentOrd + \" numOrd=\" + numOrd;\n            return null;\n          }\n          currentBlockNumber++;\n          term.bytes = blocks[currentBlockNumber];\n          end = blockEnds[currentBlockNumber];\n          start = 0;\n          if (end<=0) {\n            assert currentOrd+1 == numOrd;\n            return null;  // special case of empty last array\n          }\n        }\n\n        currentOrd++;\n\n        byte[] block = term.bytes;\n        if ((block[start] & 128) == 0) {\n          term.length = block[start];\n          term.offset = start+1;\n        } else {\n          term.length = (((block[start] & 0x7f)) << 8) | (block[1+start] & 0xff);\n          term.offset = start+2;\n        }\n\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#next().mjava","sourceNew":null,"sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        int start = term.offset + term.length;\n        if (start >= end) {\n          // switch byte blocks\n          if (currentBlockNumber +1 >= blocks.length) {\n            return null;\n          }\n          currentBlockNumber++;\n          term.bytes = blocks[currentBlockNumber];\n          end = blockEnds[currentBlockNumber];\n          start = 0;\n          if (end<=0) return null;  // special case of empty last array\n        }\n\n        currentOrd++;\n\n        byte[] block = term.bytes;\n        if ((block[start] & 128) == 0) {\n          term.length = block[start];\n          term.offset = start+1;\n        } else {\n          term.length = (((block[start] & 0x7f)) << 8) | (block[1+start] & 0xff);\n          term.offset = start+2;\n        }\n\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["29f7cc7c185412da66c1d0089d9e75da01329a00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29f7cc7c185412da66c1d0089d9e75da01329a00":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","29f7cc7c185412da66c1d0089d9e75da01329a00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}