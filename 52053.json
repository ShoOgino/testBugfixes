{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      writer2.commit();\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      writer2.commit();\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      writer2.commit();\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      writer2.commit();\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n      cms = (ConcurrentMergeScheduler) writer2.getConfig().getMergeScheduler();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockDirectoryWrapper(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockDirectoryWrapper(new RAMDirectory());\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockDirectoryWrapper(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockDirectoryWrapper(new RAMDirectory());\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockDirectoryWrapper(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockDirectoryWrapper(new RAMDirectory());\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockDirectoryWrapper(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockDirectoryWrapper(new RAMDirectory());\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockDirectoryWrapper(new RAMDirectory());\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockDirectoryWrapper(new RAMDirectory());\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#RunAddIndexesThreads(int).mjava","sourceNew":null,"sourceOld":"    public RunAddIndexesThreads(int numCopy) throws Throwable {\n      NUM_COPY = numCopy;\n      dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setMaxBufferedDocs(2));\n      for (int i = 0; i < NUM_INIT_DOCS; i++)\n        addDoc(writer);\n      writer.close();\n\n      dir2 = new MockRAMDirectory();\n      writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer2.commit();\n\n      readers = new IndexReader[NUM_COPY];\n      for(int i=0;i<NUM_COPY;i++)\n        readers[i] = IndexReader.open(dir, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a05409176bd65129d67a785ee70e881e238a9aef","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a05409176bd65129d67a785ee70e881e238a9aef"],"a05409176bd65129d67a785ee70e881e238a9aef":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"a05409176bd65129d67a785ee70e881e238a9aef":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d572389229127c297dd1fa5ce4758e1cec41e799":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}