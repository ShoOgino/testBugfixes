{"path":"contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","commits":[{"id":"422a649a45aaa37e53615faeca74d891f876a139","date":1255445670,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader((IndexReader[])indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader((IndexReader[])indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 5) {\n      System.err.println(\"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]\");\n      System.err.println(\"\\tinputIndex\\tpath to input index, multiple values are ok\");\n      System.err.println(\"\\t-out ouputDir\\tpath to output directory to contain partial indexes\");\n      System.err.println(\"\\t-num numParts\\tnumber of parts to produce\");\n      System.err.println(\"\\t-seq\\tsequential docid-range split (default is round-robin)\");\n      System.exit(-1);\n    }\n    ArrayList<IndexReader> indexes = new ArrayList<IndexReader>();\n    String outDir = null;\n    int numParts = -1;\n    boolean seq = false;\n    for (int i = 0; i < args.length; i++) {\n      if (args[i].equals(\"-out\")) {\n        outDir = args[++i];\n      } else if (args[i].equals(\"-num\")) {\n        numParts = Integer.parseInt(args[++i]);\n      } else if (args[i].equals(\"-seq\")) {\n        seq = true;\n      } else {\n        File file = new File(args[i]);\n        if (!file.exists() || !file.isDirectory()) {\n          System.err.println(\"Invalid input path - skipping: \" + file);\n          continue;\n        }\n        Directory dir = FSDirectory.open(new File(args[i]));\n        try {\n          if (!IndexReader.indexExists(dir)) {\n            System.err.println(\"Invalid input index - skipping: \" + file);\n            continue;\n          }\n        } catch (Exception e) {\n          System.err.println(\"Invalid input index - skipping: \" + file);\n          continue;\n        }\n        indexes.add(IndexReader.open(dir, true));\n      }\n    }\n    if (outDir == null) {\n      throw new Exception(\"Required argument missing: -out outputDir\");\n    }\n    if (numParts < 2) {\n      throw new Exception(\"Invalid value of required argument: -num numParts\");\n    }\n    if (indexes.size() == 0) {\n      throw new Exception(\"No input indexes to process\");\n    }\n    File out = new File(outDir);\n    if (!out.mkdirs()) {\n      throw new Exception(\"Can't create output directory: \" + out);\n    }\n    Directory[] dirs = new Directory[numParts];\n    for (int i = 0; i < numParts; i++) {\n      dirs[i] = FSDirectory.open(new File(out, \"part-\" + i));\n    }\n    MultiPassIndexSplitter splitter = new MultiPassIndexSplitter();\n    IndexReader input;\n    if (indexes.size() == 1) {\n      input = indexes.get(0);\n    } else {\n      input = new MultiReader(indexes.toArray(new IndexReader[indexes.size()]));\n    }\n    splitter.split(input, dirs, seq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"422a649a45aaa37e53615faeca74d891f876a139":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["422a649a45aaa37e53615faeca74d891f876a139"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["422a649a45aaa37e53615faeca74d891f876a139"],"422a649a45aaa37e53615faeca74d891f876a139":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}