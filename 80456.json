{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeCeil().mjava","commits":[{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeCeil().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecodeCeil() throws Exception {\n\n    // just for testing quantization error\n    final double ENCODING_TOLERANCE = Geo3DUtil.DECODE;\n\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n      double xEnc = Geo3DUtil.decodeValue(Geo3DUtil.encodeValue(point.x));\n      assertEquals(\"x=\" + point.x + \" xEnc=\" + xEnc + \" diff=\" + (point.x - xEnc), point.x, xEnc, ENCODING_TOLERANCE);\n\n      double yEnc = Geo3DUtil.decodeValue(Geo3DUtil.encodeValue(point.y));\n      assertEquals(\"y=\" + point.y + \" yEnc=\" + yEnc + \" diff=\" + (point.y - yEnc), point.y, yEnc, ENCODING_TOLERANCE);\n\n      double zEnc = Geo3DUtil.decodeValue(Geo3DUtil.encodeValue(point.z));\n      assertEquals(\"z=\" + point.z + \" zEnc=\" + zEnc + \" diff=\" + (point.z - zEnc), point.z, zEnc, ENCODING_TOLERANCE);\n    }\n\n    // check edge/interesting cases explicitly\n    double planetMax = PlanetModel.WGS84.getMaximumMagnitude();\n    for (double value : new double[] {0.0, -planetMax, planetMax}) {\n      assertEquals(value, Geo3DUtil.decodeValue(Geo3DUtil.encodeValue(value)), ENCODING_TOLERANCE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeCeil().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#testEncodeDecodeCeil().mjava","sourceNew":"  public void testEncodeDecodeCeil() throws Exception {\n    PlanetModel planetModel = randomPlanetModel();\n    // just for testing quantization error\n    final double ENCODING_TOLERANCE = planetModel.DECODE;\n\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      GeoPoint point = new GeoPoint(planetModel, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n      double xEnc = planetModel.decodeValue(planetModel.encodeValue(point.x));\n      assertEquals(\"x=\" + point.x + \" xEnc=\" + xEnc + \" diff=\" + (point.x - xEnc), point.x, xEnc, ENCODING_TOLERANCE);\n\n      double yEnc = planetModel.decodeValue(planetModel.encodeValue(point.y));\n      assertEquals(\"y=\" + point.y + \" yEnc=\" + yEnc + \" diff=\" + (point.y - yEnc), point.y, yEnc, ENCODING_TOLERANCE);\n\n      double zEnc = planetModel.decodeValue(planetModel.encodeValue(point.z));\n      assertEquals(\"z=\" + point.z + \" zEnc=\" + zEnc + \" diff=\" + (point.z - zEnc), point.z, zEnc, ENCODING_TOLERANCE);\n    }\n\n    // check edge/interesting cases explicitly\n    double planetMax = planetModel.getMaximumMagnitude();\n    for (double value : new double[] {0.0, -planetMax, planetMax}) {\n      assertEquals(value, planetModel.decodeValue(planetModel.encodeValue(value)), ENCODING_TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecodeCeil() throws Exception {\n\n    // just for testing quantization error\n    final double ENCODING_TOLERANCE = Geo3DUtil.DECODE;\n\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      GeoPoint point = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n      double xEnc = Geo3DUtil.decodeValue(Geo3DUtil.encodeValue(point.x));\n      assertEquals(\"x=\" + point.x + \" xEnc=\" + xEnc + \" diff=\" + (point.x - xEnc), point.x, xEnc, ENCODING_TOLERANCE);\n\n      double yEnc = Geo3DUtil.decodeValue(Geo3DUtil.encodeValue(point.y));\n      assertEquals(\"y=\" + point.y + \" yEnc=\" + yEnc + \" diff=\" + (point.y - yEnc), point.y, yEnc, ENCODING_TOLERANCE);\n\n      double zEnc = Geo3DUtil.decodeValue(Geo3DUtil.encodeValue(point.z));\n      assertEquals(\"z=\" + point.z + \" zEnc=\" + zEnc + \" diff=\" + (point.z - zEnc), point.z, zEnc, ENCODING_TOLERANCE);\n    }\n\n    // check edge/interesting cases explicitly\n    double planetMax = PlanetModel.WGS84.getMaximumMagnitude();\n    for (double value : new double[] {0.0, -planetMax, planetMax}) {\n      assertEquals(value, Geo3DUtil.decodeValue(Geo3DUtil.encodeValue(value)), ENCODING_TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}