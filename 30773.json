{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoLongitudeSlice(double leftLon, double rightLon)\n    {\n        // Argument checking\n        if (leftLon < -Math.PI || leftLon > Math.PI)\n            throw new IllegalArgumentException(\"Left longitude out of range\");\n        if (rightLon < -Math.PI || rightLon > Math.PI)\n            throw new IllegalArgumentException(\"Right longitude out of range\");\n        double extent = rightLon - leftLon;\n        if (extent < 0.0) {\n            extent += 2.0 * Math.PI;\n        }\n        if (extent > Math.PI)\n            throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n        this.leftLon = leftLon;\n        this.rightLon = rightLon;\n          \n        double sinLeftLon = Math.sin(leftLon);\n        double cosLeftLon = Math.cos(leftLon);\n        double sinRightLon = Math.sin(rightLon);\n        double cosRightLon = Math.cos(rightLon);\n\n        double middleLon = (leftLon + rightLon) * 0.5;\n        centerPoint = new GeoPoint(0.0,middleLon);              \n        \n        this.leftPlane = new SidedPlane(centerPoint,cosLeftLon,sinLeftLon);\n        this.rightPlane = new SidedPlane(centerPoint,cosRightLon,sinRightLon);\n          \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab7d51740456adc459ec788c8fe27746bdc60a55","date":1429185101,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","sourceNew":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoLongitudeSlice(double leftLon, double rightLon)\n    {\n        // Argument checking\n        if (leftLon < -Math.PI || leftLon > Math.PI)\n            throw new IllegalArgumentException(\"Left longitude out of range\");\n        if (rightLon < -Math.PI || rightLon > Math.PI)\n            throw new IllegalArgumentException(\"Right longitude out of range\");\n        double extent = rightLon - leftLon;\n        if (extent < 0.0) {\n            extent += 2.0 * Math.PI;\n        }\n        if (extent > Math.PI)\n            throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n        this.leftLon = leftLon;\n        this.rightLon = rightLon;\n          \n        double sinLeftLon = Math.sin(leftLon);\n        double cosLeftLon = Math.cos(leftLon);\n        double sinRightLon = Math.sin(rightLon);\n        double cosRightLon = Math.cos(rightLon);\n\n        // Normalize\n        while (leftLon > rightLon) {\n            rightLon += Math.PI * 2.0;\n        }\n        double middleLon = (leftLon + rightLon) * 0.5;\n        centerPoint = new GeoPoint(0.0,middleLon);              \n        \n        this.leftPlane = new SidedPlane(centerPoint,cosLeftLon,sinLeftLon);\n        this.rightPlane = new SidedPlane(centerPoint,cosRightLon,sinRightLon);\n          \n    }\n\n","sourceOld":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoLongitudeSlice(double leftLon, double rightLon)\n    {\n        // Argument checking\n        if (leftLon < -Math.PI || leftLon > Math.PI)\n            throw new IllegalArgumentException(\"Left longitude out of range\");\n        if (rightLon < -Math.PI || rightLon > Math.PI)\n            throw new IllegalArgumentException(\"Right longitude out of range\");\n        double extent = rightLon - leftLon;\n        if (extent < 0.0) {\n            extent += 2.0 * Math.PI;\n        }\n        if (extent > Math.PI)\n            throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n        this.leftLon = leftLon;\n        this.rightLon = rightLon;\n          \n        double sinLeftLon = Math.sin(leftLon);\n        double cosLeftLon = Math.cos(leftLon);\n        double sinRightLon = Math.sin(rightLon);\n        double cosRightLon = Math.cos(rightLon);\n\n        double middleLon = (leftLon + rightLon) * 0.5;\n        centerPoint = new GeoPoint(0.0,middleLon);              \n        \n        this.leftPlane = new SidedPlane(centerPoint,cosLeftLon,sinLeftLon);\n        this.rightPlane = new SidedPlane(centerPoint,cosRightLon,sinRightLon);\n          \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","sourceNew":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoLongitudeSlice(final double leftLon, double rightLon)\n    {\n        // Argument checking\n        if (leftLon < -Math.PI || leftLon > Math.PI)\n            throw new IllegalArgumentException(\"Left longitude out of range\");\n        if (rightLon < -Math.PI || rightLon > Math.PI)\n            throw new IllegalArgumentException(\"Right longitude out of range\");\n        double extent = rightLon - leftLon;\n        if (extent < 0.0) {\n            extent += 2.0 * Math.PI;\n        }\n        if (extent > Math.PI)\n            throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n        this.leftLon = leftLon;\n        this.rightLon = rightLon;\n          \n        final double sinLeftLon = Math.sin(leftLon);\n        final double cosLeftLon = Math.cos(leftLon);\n        final double sinRightLon = Math.sin(rightLon);\n        final double cosRightLon = Math.cos(rightLon);\n\n        // Normalize\n        while (leftLon > rightLon) {\n            rightLon += Math.PI * 2.0;\n        }\n        final double middleLon = (leftLon + rightLon) * 0.5;\n        this.centerPoint = new GeoPoint(0.0,middleLon);              \n        \n        this.leftPlane = new SidedPlane(centerPoint,cosLeftLon,sinLeftLon);\n        this.rightPlane = new SidedPlane(centerPoint,cosRightLon,sinRightLon);\n          \n    }\n\n","sourceOld":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoLongitudeSlice(double leftLon, double rightLon)\n    {\n        // Argument checking\n        if (leftLon < -Math.PI || leftLon > Math.PI)\n            throw new IllegalArgumentException(\"Left longitude out of range\");\n        if (rightLon < -Math.PI || rightLon > Math.PI)\n            throw new IllegalArgumentException(\"Right longitude out of range\");\n        double extent = rightLon - leftLon;\n        if (extent < 0.0) {\n            extent += 2.0 * Math.PI;\n        }\n        if (extent > Math.PI)\n            throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n        this.leftLon = leftLon;\n        this.rightLon = rightLon;\n          \n        double sinLeftLon = Math.sin(leftLon);\n        double cosLeftLon = Math.cos(leftLon);\n        double sinRightLon = Math.sin(rightLon);\n        double cosRightLon = Math.cos(rightLon);\n\n        // Normalize\n        while (leftLon > rightLon) {\n            rightLon += Math.PI * 2.0;\n        }\n        double middleLon = (leftLon + rightLon) * 0.5;\n        centerPoint = new GeoPoint(0.0,middleLon);              \n        \n        this.leftPlane = new SidedPlane(centerPoint,cosLeftLon,sinLeftLon);\n        this.rightPlane = new SidedPlane(centerPoint,cosRightLon,sinRightLon);\n          \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoLongitudeSlice(final double leftLon, double rightLon) {\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n  }\n\n","sourceOld":"    /** Accepts only values in the following ranges: lon: {@code -PI -> PI} */\n    public GeoLongitudeSlice(final double leftLon, double rightLon)\n    {\n        // Argument checking\n        if (leftLon < -Math.PI || leftLon > Math.PI)\n            throw new IllegalArgumentException(\"Left longitude out of range\");\n        if (rightLon < -Math.PI || rightLon > Math.PI)\n            throw new IllegalArgumentException(\"Right longitude out of range\");\n        double extent = rightLon - leftLon;\n        if (extent < 0.0) {\n            extent += 2.0 * Math.PI;\n        }\n        if (extent > Math.PI)\n            throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n        this.leftLon = leftLon;\n        this.rightLon = rightLon;\n          \n        final double sinLeftLon = Math.sin(leftLon);\n        final double cosLeftLon = Math.cos(leftLon);\n        final double sinRightLon = Math.sin(rightLon);\n        final double cosRightLon = Math.cos(rightLon);\n\n        // Normalize\n        while (leftLon > rightLon) {\n            rightLon += Math.PI * 2.0;\n        }\n        final double middleLon = (leftLon + rightLon) * 0.5;\n        this.centerPoint = new GeoPoint(0.0,middleLon);              \n        \n        this.leftPlane = new SidedPlane(centerPoint,cosLeftLon,sinLeftLon);\n        this.rightPlane = new SidedPlane(centerPoint,cosRightLon,sinRightLon);\n          \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoLongitudeSlice(final double leftLon, double rightLon) {\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(PlanetModel,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoLongitudeSlice(final PlanetModel planetModel, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(planetModel, 0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{planetModel.NORTH_POLE, planetModel.SOUTH_POLE};\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoLongitudeSlice(final double leftLon, double rightLon) {\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":5,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(PlanetModel,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoLongitudeSlice#GeoLongitudeSlice(double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoLongitudeSlice(final PlanetModel planetModel, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(planetModel, 0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.planePoints = new GeoPoint[]{planetModel.NORTH_POLE, planetModel.SOUTH_POLE};\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lon: {@code -PI -> PI}\n   */\n  public GeoLongitudeSlice(final double leftLon, double rightLon) {\n    // Argument checking\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    this.centerPoint = new GeoPoint(0.0, middleLon);\n\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["ab7d51740456adc459ec788c8fe27746bdc60a55"],"ab7d51740456adc459ec788c8fe27746bdc60a55":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"ab7d51740456adc459ec788c8fe27746bdc60a55":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"851e4197476b684154a7b65f996f535522e67400":["ab7d51740456adc459ec788c8fe27746bdc60a55"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}