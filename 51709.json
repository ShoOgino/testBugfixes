{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/fr/ElisionFilter#next().mjava","commits":[{"id":"debf89790e5f44807da2e8e89ff37d9419acf6af","date":1183077369,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/fr/ElisionFilter#next().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the next input Token whith termText() without elisioned start\n   */\n  public Token next() throws IOException {\n    Token t = input.next();\n    if (t == null)\n      return null;\n    String text = t.termText();\n    System.out.println(text);\n    int minPoz = -1;\n    int poz;\n    for (int i = 0; i < apostrophes.length(); i++) {\n      poz = text.indexOf(apostrophes.charAt(i));\n      if (poz != -1)\n        minPoz = (minPoz == -1) ? poz : Math.min(poz, minPoz);\n    }\n    if (minPoz != -1\n        && articles.contains(text.substring(0, minPoz).toLowerCase()))\n      text = text.substring(minPoz + 1);\n    return new Token(text, t.startOffset(), t.endOffset(), t.type());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/fr/ElisionFilter#next().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the next input Token whith termText() without elisioned start\n   */\n  public Token next() throws IOException {\n    Token t = input.next();\n    if (t == null)\n      return null;\n    String text = t.termText();\n    System.out.println(text);\n    int minPoz = -1;\n    int poz;\n    for (int i = 0; i < apostrophes.length(); i++) {\n      poz = text.indexOf(apostrophes.charAt(i));\n      if (poz != -1)\n        minPoz = (minPoz == -1) ? poz : Math.min(poz, minPoz);\n    }\n    if (minPoz != -1\n        && articles.contains(text.substring(0, minPoz).toLowerCase()))\n      text = text.substring(minPoz + 1);\n    return new Token(text, t.startOffset(), t.endOffset(), t.type());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["debf89790e5f44807da2e8e89ff37d9419acf6af"],"debf89790e5f44807da2e8e89ff37d9419acf6af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"debf89790e5f44807da2e8e89ff37d9419acf6af":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["debf89790e5f44807da2e8e89ff37d9419acf6af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}