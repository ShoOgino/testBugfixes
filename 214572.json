{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta2#testCompositePk_DeltaImport_add_delete().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta2#testCompositePk_DeltaImport_add_delete().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta2#testCompositePk_DeltaImport_add_delete().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from x where id='2'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='2'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta2);\n\n    assertQ(req(\"*:* OR XtestCompositePk_DeltaImport_add_delete\"), \"//*[@numFound='1']\");\n    assertQ(req(\"solr_id:prefix-2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:hello\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:goodbye\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from x where id='2'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='2'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta2);\n\n    assertQ(req(\"*:* OR XtestCompositePk_DeltaImport_add_delete\"), \"//*[@numFound='1']\");\n    assertQ(req(\"solr_id:prefix-2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:hello\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:goodbye\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta2#testCompositePk_DeltaImport_add_delete().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta2#testCompositePk_DeltaImport_add_delete().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from x where id='2'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='2'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta2);\n\n    assertQ(req(\"*:* OR XtestCompositePk_DeltaImport_add_delete\"), \"//*[@numFound='1']\");\n    assertQ(req(\"solr_id:prefix-2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:hello\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:goodbye\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from x where id='2'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='2'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta2);\n\n    assertQ(req(\"*:* OR XtestCompositePk_DeltaImport_add_delete\"), \"//*[@numFound='1']\");\n    assertQ(req(\"solr_id:prefix-2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:hello\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:goodbye\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baf341ad3a1a8fb73fb37091af85f8aef0398367","date":1352222680,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSqlEntityProcessorDelta2#testCompositePk_DeltaImport_add_delete().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testCompositePk_DeltaImport_add_delete() throws Exception {\n    add1document();\n    MockDataSource.clearCache();\n\n    List deltaRow = new ArrayList();\n    deltaRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(DELTA_QUERY,\n        deltaRow.iterator());\n\n    List deletedRow = new ArrayList();\n    deletedRow.add(createMap(\"id\", \"1\"));\n    MockDataSource.setIterator(DELETED_PK_QUERY,\n        deletedRow.iterator());\n\n    List parentRow = new ArrayList();\n    parentRow.add(createMap(\"id\", \"2\"));\n    MockDataSource.setIterator(\"select * from x where id='2'\", parentRow\n        .iterator());\n\n    List childRow = new ArrayList();\n    childRow.add(createMap(\"desc\", \"goodbye\"));\n    MockDataSource.setIterator(\"select * from y where y.A='2'\", childRow\n        .iterator());\n\n    runDeltaImport(dataConfig_delta2);\n\n    assertQ(req(\"*:* OR XtestCompositePk_DeltaImport_add_delete\"), \"//*[@numFound='1']\");\n    assertQ(req(\"solr_id:prefix-2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"desc:hello\"), \"//*[@numFound='0']\");\n    assertQ(req(\"desc:goodbye\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["baf341ad3a1a8fb73fb37091af85f8aef0398367"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["baf341ad3a1a8fb73fb37091af85f8aef0398367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"baf341ad3a1a8fb73fb37091af85f8aef0398367":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}