{"path":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  // This must be called AFTER solrCore has initalized! \n  // otherwise you get a big bad error loop\n  public void init(NamedList args)\n  {\n    super.init( args );\n    \n    try {\n      factory = XmlPullParserFactory.newInstance();\n      factory.setNamespaceAware(false);\n    } \n    catch (XmlPullParserException e) {\n       throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f326e17877de6c9be219cf430001ec888bb23d24","date":1177877493,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  public void init(NamedList args)\n  {\n    super.init( args );\n    \n    try {\n      factory = XmlPullParserFactory.newInstance();\n      factory.setNamespaceAware(false);\n    } \n    catch (XmlPullParserException e) {\n       throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  // This must be called AFTER solrCore has initalized! \n  // otherwise you get a big bad error loop\n  public void init(NamedList args)\n  {\n    super.init( args );\n    \n    try {\n      factory = XmlPullParserFactory.newInstance();\n      factory.setNamespaceAware(false);\n    } \n    catch (XmlPullParserException e) {\n       throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01332993edd169beaf066de697712ec7fcff8590","date":1177878513,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args)\n  {\n    super.init( args );\n    \n    try {\n      factory = XmlPullParserFactory.newInstance();\n      factory.setNamespaceAware(false);\n    } \n    catch (XmlPullParserException e) {\n       throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public void init(NamedList args)\n  {\n    super.init( args );\n    \n    try {\n      factory = XmlPullParserFactory.newInstance();\n      factory.setNamespaceAware(false);\n    } \n    catch (XmlPullParserException e) {\n       throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b27e1327d2a2f9ea6abc93e203d0219091f09f3","date":1183228826,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XppUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args)\n  {\n    super.init( args );\n    \n    try {\n      factory = XmlPullParserFactory.newInstance();\n      factory.setNamespaceAware(false);\n    } \n    catch (XmlPullParserException e) {\n       throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args)\n  {\n    super.init( args );\n    \n    try {\n      factory = XmlPullParserFactory.newInstance();\n      factory.setNamespaceAware(false);\n    } \n    catch (XmlPullParserException e) {\n       throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4039ee26c484fda13f0428eeeb09969370ff9149","date":1183229536,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    inputFactory = BaseXMLInputFactory.newInstance();\n  \n    // Initialize the UpdateRequestProcessorFactory\n    NamedList<Object> factoryargs = null;\n    if( args != null ) {\n      String className = (String)args.get( UPDATE_PROCESSOR_FACTORY );\n      factoryargs = (NamedList<Object>)args.get( UPDATE_PROCESSOR_ARGS );\n      if( className != null ) {\n        processorFactory = (UpdateRequestProcessorFactory)Config.newInstance( className, new String[]{} );\n      }\n    }\n    if( processorFactory == null ) {\n      processorFactory = new UpdateRequestProcessorFactory();\n    }\n    processorFactory.init( factoryargs );\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    inputFactory = BaseXMLInputFactory.newInstance();\n  \n    // Initialize the UpdateRequestProcessorFactory\n    NamedList<Object> factoryargs = null;\n    if( args != null ) {\n      String className = (String)args.get( UPDATE_PROCESSOR_FACTORY );\n      factoryargs = (NamedList<Object>)args.get( UPDATE_PROCESSOR_ARGS );\n      if( className != null ) {\n        processorFactory = (UpdateRequestProcessorFactory)Config.newInstance( className, new String[]{} );\n      }\n    }\n    if( processorFactory == null ) {\n      processorFactory = new UpdateRequestProcessorFactory();\n    }\n    processorFactory.init( factoryargs );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    inputFactory = BaseXMLInputFactory.newInstance();\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    inputFactory = BaseXMLInputFactory.newInstance();\n  \n    // Initialize the UpdateRequestProcessorFactory\n    NamedList<Object> factoryargs = null;\n    if( args != null ) {\n      String className = (String)args.get( UPDATE_PROCESSOR_FACTORY );\n      factoryargs = (NamedList<Object>)args.get( UPDATE_PROCESSOR_ARGS );\n      if( className != null ) {\n        processorFactory = (UpdateRequestProcessorFactory)Config.newInstance( className, new String[]{} );\n      }\n    }\n    if( processorFactory == null ) {\n      processorFactory = new UpdateRequestProcessorFactory();\n    }\n    processorFactory.init( factoryargs );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf","date":1190224983,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    inputFactory = BaseXMLInputFactory.newInstance();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d251a92048ac6223541a40d02ce1d472d7c3659","date":1190230853,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    \n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch( IllegalArgumentException ex ) {\n      // The java 1.5 com.bea.xml does not support this property, but behaves properly in a\n      // multi-threaded environment.  Ignore the error for 1.5\n      log.info( \"Unable to set the 'reuse-instance' property for the input factory: \"+inputFactory );\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557410c61067fbb98c5864ff24db0c2e034e9a21","date":1190232939,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    \n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch( IllegalArgumentException ex ) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.fine( \"Unable to set the 'reuse-instance' property for the input factory: \"+inputFactory );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    \n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch( IllegalArgumentException ex ) {\n      // The java 1.5 com.bea.xml does not support this property, but behaves properly in a\n      // multi-threaded environment.  Ignore the error for 1.5\n      log.info( \"Unable to set the 'reuse-instance' property for the input factory: \"+inputFactory );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d656bfb8102419b4568f368a9606efc4f059912e","date":1217031644,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    \n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch( IllegalArgumentException ex ) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.fine( \"Unable to set the 'reuse-instance' property for the input chain: \"+inputFactory );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    \n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch( IllegalArgumentException ex ) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.fine( \"Unable to set the 'reuse-instance' property for the input factory: \"+inputFactory );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    \n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch( IllegalArgumentException ex ) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug( \"Unable to set the 'reuse-instance' property for the input chain: \"+inputFactory );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    \n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch( IllegalArgumentException ex ) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.fine( \"Unable to set the 'reuse-instance' property for the input chain: \"+inputFactory );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e34a66231ee53fe909c5f7c0e71131fcb5246d89","date":1226598668,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args)\n  {\n    super.init(args);\n    \n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch( IllegalArgumentException ex ) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug( \"Unable to set the 'reuse-instance' property for the input chain: \"+inputFactory );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da035f9b547b70aad9176c056960310870b7e390","date":1227120546,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = BaseXMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n\n    inputFactory = XMLInputFactory.newInstance();\n    try {\n      // The java 1.6 bundled stax parser (sjsxp) does not currently have a thread-safe\n      // XMLInputFactory, as that implementation tries to cache and reuse the\n      // XMLStreamReader.  Setting the parser-specific \"reuse-instance\" property to false\n      // prevents this.\n      // All other known open-source stax parsers (and the bea ref impl)\n      // have thread-safe factories.\n      inputFactory.setProperty(\"reuse-instance\", Boolean.FALSE);\n    }\n    catch (IllegalArgumentException ex) {\n      // Other implementations will likely throw this exception since \"reuse-instance\"\n      // isimplementation specific.\n      log.debug(\"Unable to set the 'reuse-instance' property for the input chain: \" + inputFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4039ee26c484fda13f0428eeeb09969370ff9149":["2b27e1327d2a2f9ea6abc93e203d0219091f09f3"],"f326e17877de6c9be219cf430001ec888bb23d24":["d80013b5e260def972025c93a0b08524f9c38f49"],"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf":["6589002090bd74db749eef5befe2f447c0e3dd49"],"557410c61067fbb98c5864ff24db0c2e034e9a21":["5d251a92048ac6223541a40d02ce1d472d7c3659"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d656bfb8102419b4568f368a9606efc4f059912e":["557410c61067fbb98c5864ff24db0c2e034e9a21"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["d656bfb8102419b4568f368a9606efc4f059912e"],"5d251a92048ac6223541a40d02ce1d472d7c3659":["4c4b48ad43168b249ed97ccb35148a5c74d4e9bf"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"01332993edd169beaf066de697712ec7fcff8590":["f326e17877de6c9be219cf430001ec888bb23d24"],"da035f9b547b70aad9176c056960310870b7e390":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6589002090bd74db749eef5befe2f447c0e3dd49":["4039ee26c484fda13f0428eeeb09969370ff9149"],"2b27e1327d2a2f9ea6abc93e203d0219091f09f3":["01332993edd169beaf066de697712ec7fcff8590"],"ad94625fb8d088209f46650c8097196fec67f00c":["da035f9b547b70aad9176c056960310870b7e390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4039ee26c484fda13f0428eeeb09969370ff9149":["6589002090bd74db749eef5befe2f447c0e3dd49"],"f326e17877de6c9be219cf430001ec888bb23d24":["01332993edd169beaf066de697712ec7fcff8590"],"4c4b48ad43168b249ed97ccb35148a5c74d4e9bf":["5d251a92048ac6223541a40d02ce1d472d7c3659"],"557410c61067fbb98c5864ff24db0c2e034e9a21":["d656bfb8102419b4568f368a9606efc4f059912e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"d656bfb8102419b4568f368a9606efc4f059912e":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"5d251a92048ac6223541a40d02ce1d472d7c3659":["557410c61067fbb98c5864ff24db0c2e034e9a21"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"e34a66231ee53fe909c5f7c0e71131fcb5246d89":["da035f9b547b70aad9176c056960310870b7e390"],"d80013b5e260def972025c93a0b08524f9c38f49":["f326e17877de6c9be219cf430001ec888bb23d24"],"01332993edd169beaf066de697712ec7fcff8590":["2b27e1327d2a2f9ea6abc93e203d0219091f09f3"],"da035f9b547b70aad9176c056960310870b7e390":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6589002090bd74db749eef5befe2f447c0e3dd49":["4c4b48ad43168b249ed97ccb35148a5c74d4e9bf"],"2b27e1327d2a2f9ea6abc93e203d0219091f09f3":["4039ee26c484fda13f0428eeeb09969370ff9149"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}