{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","commits":[{"id":"d3102a9c9032617766c43974e7ec8b7a3148fb91","date":1519273763,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIgnoredEvent() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long now = System.currentTimeMillis();\n    long threeDaysAgo = now - TimeUnit.DAYS.toMillis(3);\n    Map<String, Object> properties = createTriggerProperties(new Date(threeDaysAgo).toInstant().toString(),\n        TimeZone.getDefault().getID(),\n        \"+2DAYS\", \"+1HOUR\");\n    try (ScheduledTrigger scheduledTrigger = new ScheduledTrigger(\"sched1\", properties,\n        container.getResourceLoader(), container.getZkController().getSolrCloudManager())) {\n      scheduledTrigger.init();\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      scheduledTrigger.setProcessor(event -> {\n        eventRef.set(event);\n        return true;\n      });\n      scheduledTrigger.run();\n      assertTrue(eventRef.get().isIgnored());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c252a8291191876badb5f6235f62895d6e36b33e","date":1519309955,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","sourceNew":null,"sourceOld":"  public void testIgnoredEvent() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long now = System.currentTimeMillis();\n    long threeDaysAgo = now - TimeUnit.DAYS.toMillis(3);\n    Map<String, Object> properties = createTriggerProperties(new Date(threeDaysAgo).toInstant().toString(),\n        TimeZone.getDefault().getID(),\n        \"+2DAYS\", \"+1HOUR\");\n    try (ScheduledTrigger scheduledTrigger = new ScheduledTrigger(\"sched1\", properties,\n        container.getResourceLoader(), container.getZkController().getSolrCloudManager())) {\n      scheduledTrigger.init();\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      scheduledTrigger.setProcessor(event -> {\n        eventRef.set(event);\n        return true;\n      });\n      scheduledTrigger.run();\n      assertTrue(eventRef.get().isIgnored());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dec9417ffbde1f9d7317d78c151248cb8f6af88","date":1520019381,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","pathOld":"/dev/null","sourceNew":"  public void testIgnoredEvent() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long threeDaysAgo = new Date().getTime() - TimeUnit.DAYS.toMillis(3);\n    Map<String, Object> properties = createTriggerProperties(new Date(threeDaysAgo).toInstant().toString(),\n        TimeZone.getDefault().getID(),\n        \"+2DAYS\", \"+1HOUR\");\n    try (ScheduledTrigger scheduledTrigger = new ScheduledTrigger(\"sched1\", properties,\n        container.getResourceLoader(), container.getZkController().getSolrCloudManager())) {\n      scheduledTrigger.init();\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      scheduledTrigger.setProcessor(event -> {\n        eventRef.set(event);\n        return true;\n      });\n      scheduledTrigger.run();\n      assertTrue(eventRef.get().isIgnored());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","sourceNew":"  public void testIgnoredEvent() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long threeDaysAgo = new Date().getTime() - TimeUnit.DAYS.toMillis(3);\n    Map<String, Object> properties = createTriggerProperties(new Date(threeDaysAgo).toInstant().toString(),\n        TimeZone.getDefault().getID(),\n        \"+2DAYS\", \"+1HOUR\");\n    try (ScheduledTrigger scheduledTrigger = new ScheduledTrigger(\"sched1\")) {\n      scheduledTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), properties);\n      scheduledTrigger.init();\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      scheduledTrigger.setProcessor(event -> {\n        eventRef.set(event);\n        return true;\n      });\n      scheduledTrigger.run();\n      assertTrue(eventRef.get().isIgnored());\n    }\n  }\n\n","sourceOld":"  public void testIgnoredEvent() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long threeDaysAgo = new Date().getTime() - TimeUnit.DAYS.toMillis(3);\n    Map<String, Object> properties = createTriggerProperties(new Date(threeDaysAgo).toInstant().toString(),\n        TimeZone.getDefault().getID(),\n        \"+2DAYS\", \"+1HOUR\");\n    try (ScheduledTrigger scheduledTrigger = new ScheduledTrigger(\"sched1\", properties,\n        container.getResourceLoader(), container.getZkController().getSolrCloudManager())) {\n      scheduledTrigger.init();\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      scheduledTrigger.setProcessor(event -> {\n        eventRef.set(event);\n        return true;\n      });\n      scheduledTrigger.run();\n      assertTrue(eventRef.get().isIgnored());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","sourceNew":"  @Test\n  public void testIgnoredEvent() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long threeDaysAgo = new Date().getTime() - TimeUnit.DAYS.toMillis(3);\n    Map<String, Object> properties = createTriggerProperties(new Date(threeDaysAgo).toInstant().toString(),\n        TimeZone.getDefault().getID(),\n        \"+2DAYS\", \"+1HOUR\");\n    try (ScheduledTrigger scheduledTrigger = new ScheduledTrigger(\"sched1\")) {\n      scheduledTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), properties);\n      scheduledTrigger.init();\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      scheduledTrigger.setProcessor(event -> {\n        eventRef.set(event);\n        return true;\n      });\n      scheduledTrigger.run();\n      assertTrue(eventRef.get().isIgnored());\n    }\n  }\n\n","sourceOld":"  public void testIgnoredEvent() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long threeDaysAgo = new Date().getTime() - TimeUnit.DAYS.toMillis(3);\n    Map<String, Object> properties = createTriggerProperties(new Date(threeDaysAgo).toInstant().toString(),\n        TimeZone.getDefault().getID(),\n        \"+2DAYS\", \"+1HOUR\");\n    try (ScheduledTrigger scheduledTrigger = new ScheduledTrigger(\"sched1\")) {\n      scheduledTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), properties);\n      scheduledTrigger.init();\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      scheduledTrigger.setProcessor(event -> {\n        eventRef.set(event);\n        return true;\n      });\n      scheduledTrigger.run();\n      assertTrue(eventRef.get().isIgnored());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledTriggerTest#testIgnoredEvent().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testIgnoredEvent() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long threeDaysAgo = new Date().getTime() - TimeUnit.DAYS.toMillis(3);\n    Map<String, Object> properties = createTriggerProperties(new Date(threeDaysAgo).toInstant().toString(),\n        TimeZone.getDefault().getID(),\n        \"+2DAYS\", \"+1HOUR\");\n    try (ScheduledTrigger scheduledTrigger = new ScheduledTrigger(\"sched1\")) {\n      scheduledTrigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), properties);\n      scheduledTrigger.init();\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      scheduledTrigger.setProcessor(event -> {\n        eventRef.set(event);\n        return true;\n      });\n      scheduledTrigger.run();\n      assertTrue(eventRef.get().isIgnored());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"c252a8291191876badb5f6235f62895d6e36b33e":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["c252a8291191876badb5f6235f62895d6e36b33e"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3f504512a03d978990cbff30db0522b354e846db"],"c252a8291191876badb5f6235f62895d6e36b33e":["1dec9417ffbde1f9d7317d78c151248cb8f6af88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3102a9c9032617766c43974e7ec8b7a3148fb91"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d3102a9c9032617766c43974e7ec8b7a3148fb91":["c252a8291191876badb5f6235f62895d6e36b33e"],"1dec9417ffbde1f9d7317d78c151248cb8f6af88":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}