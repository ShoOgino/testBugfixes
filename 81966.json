{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","commits":[{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  private CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38699e2d7f7814e97a0d58ea4bcaec2bd742007e","date":1384622728,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    synchronized (this) {\n      if (commondCloudSolrServer == null) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(),\n              random().nextBoolean());\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ffd767eab030540a93f22b95e2c78f887f6eafc","date":1385270558,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    synchronized (this) {\n      if (commondCloudSolrServer == null) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(),\n              random().nextBoolean());\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(30000);\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    synchronized (this) {\n      if (commondCloudSolrServer == null) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(),\n              random().nextBoolean());\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    synchronized (this) {\n      if (commondCloudSolrServer == null) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(),\n              random().nextBoolean());\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(30000);\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    if (commondCloudSolrServer == null) {\n      synchronized(this) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(), random().nextBoolean());\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52209f74dc33b64e2e3576fe15b8c2d312809d7","date":1408896505,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","sourceNew":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    synchronized (this) {\n      if (commondCloudSolrServer == null) {\n        commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(),\n            random().nextBoolean());\n        commondCloudSolrServer.getLbServer().setConnectionTimeout(30000);\n        commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n        commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n        commondCloudSolrServer.connect();\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    synchronized (this) {\n      if (commondCloudSolrServer == null) {\n        try {\n          commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(),\n              random().nextBoolean());\n          commondCloudSolrServer.getLbServer().setConnectionTimeout(30000);\n          commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n          commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n          commondCloudSolrServer.connect();\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getCommonCloudSolrServer().mjava","sourceNew":null,"sourceOld":"  protected CloudSolrServer getCommonCloudSolrServer() {\n    synchronized (this) {\n      if (commondCloudSolrServer == null) {\n        commondCloudSolrServer = new CloudSolrServer(zkServer.getZkAddress(),\n            random().nextBoolean());\n        commondCloudSolrServer.getLbServer().setConnectionTimeout(30000);\n        commondCloudSolrServer.setParallelUpdates(random().nextBoolean());\n        commondCloudSolrServer.setDefaultCollection(DEFAULT_COLLECTION);\n        commondCloudSolrServer.connect();\n      }\n    }\n    return commondCloudSolrServer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38699e2d7f7814e97a0d58ea4bcaec2bd742007e":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"5ffd767eab030540a93f22b95e2c78f887f6eafc":["38699e2d7f7814e97a0d58ea4bcaec2bd742007e"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["1cfa38e36fa296bb93d77df7d5556257dffa4535","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","5ffd767eab030540a93f22b95e2c78f887f6eafc"],"bafca15d8e408346a67f4282ad1143b88023893b":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["5ffd767eab030540a93f22b95e2c78f887f6eafc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"38699e2d7f7814e97a0d58ea4bcaec2bd742007e":["5ffd767eab030540a93f22b95e2c78f887f6eafc"],"5ffd767eab030540a93f22b95e2c78f887f6eafc":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["38699e2d7f7814e97a0d58ea4bcaec2bd742007e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}