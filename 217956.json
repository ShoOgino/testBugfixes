{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec.RandomlySplittingBKDWriter#split(byte[],byte[],int[]).mjava","commits":[{"id":"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","date":1482745036,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec.RandomlySplittingBKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec.RandomlySplittingBKDWriter#split(byte[],byte[]).mjava","sourceNew":"    @Override\n    protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentDims) {\n      // BKD normally defaults by the widest dimension, to try to make as squarish cells as possible, but we just pick a random one ;)\n      return random.nextInt(numDims);\n    }\n\n","sourceOld":"    @Override\n    protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n      // BKD normally defaults by the widest dimension, to try to make as squarish cells as possible, but we just pick a random one ;)\n      return random.nextInt(numDims);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec.RandomlySplittingBKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentDims) {\n      // BKD normally defaults by the widest dimension, to try to make as squarish cells as possible, but we just pick a random one ;)\n      return random.nextInt(numDims);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec.RandomlySplittingBKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec.RandomlySplittingBKDWriter#split(byte[],byte[],int[]).mjava","sourceNew":"    @Override\n    protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentDims) {\n      // BKD normally defaults by the widest dimension, to try to make as squarish cells as possible, but we just pick a random one ;)\n      return random.nextInt(numIndexDims);\n    }\n\n","sourceOld":"    @Override\n    protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentDims) {\n      // BKD normally defaults by the widest dimension, to try to make as squarish cells as possible, but we just pick a random one ;)\n      return random.nextInt(numDims);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec.RandomlySplittingBKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec.RandomlySplittingBKDWriter#split(byte[],byte[],int[]).mjava","sourceNew":"    @Override\n    protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentDims) {\n      // BKD normally defaults by the widest dimension, to try to make as squarish cells as possible, but we just pick a random one ;)\n      return random.nextInt(config.numIndexDims);\n    }\n\n","sourceOld":"    @Override\n    protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentDims) {\n      // BKD normally defaults by the widest dimension, to try to make as squarish cells as possible, but we just pick a random one ;)\n      return random.nextInt(numIndexDims);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["f6652c943595e92c187ee904c382863013eae28f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}