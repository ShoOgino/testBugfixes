{"path":"solr/core/src/test/org/apache/solr/response/TestGeoJSONResponseWriter#testGeoJSONOutput().mjava","commits":[{"id":"ba1c938737d199113ec96f0d8ce2c8791b61cd18","date":1458148009,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestGeoJSONResponseWriter#testGeoJSONOutput().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoJSONOutput() throws Exception {\n    \n    // Try reading the whole resposne\n    readJSON(h.query(req(\n        \"q\",\"*:*\", \n        \"wt\",\"geojson\", \n        \"fl\",\"*\", \n        \"geojson.field\", \"stqpt_geohash\",\n        \"indent\",\"true\")));\n    \n    // Multivalued Valued Point\n    Map<String,Object> json = readJSON(h.query(req(\n        \"q\",\"id:H.B\", \n        \"wt\",\"geojson\", \n        \"fl\",\"*\", \n        \"geojson.field\", \"srpt_geohash\",\n        \"indent\",\"true\")));\n    \n    Map<String,Object> geo = getFirstFeatureGeometry(json);\n    assertEquals( // NOTE: not actual JSON, it is Map.toString()!\n        \"{type=GeometryCollection, geometries=[\"\n        + \"{type=Point, coordinates=[1, 2]}, \"\n        + \"{type=Point, coordinates=[3, 4]}]}\", \"\"+geo);  \n    \n    \n    // Check the same value encoded on different field types\n    String[][] check = new String[][] {\n      { \"id:H.A\", \"srpt_geohash\" },\n      { \"id:Q.A\", \"srpt_quad\" },\n      { \"id:P.A\", \"srpt_packedquad\" },\n      { \"id:R.A\", \"srptgeom\" },\n      { \"id:S.A\", \"str_shape\" },\n    };\n    \n    for(String[] args : check) {\n      json = readJSON(h.query(req(\n          \"q\",args[0], \n          \"wt\",\"geojson\", \n          \"fl\",\"*\", \n          \"geojson.field\", args[1])));\n      \n      geo = getFirstFeatureGeometry(json);\n      assertEquals( \n        \"Error reading point from: \"+args[1] + \" (\"+args[0]+\")\",\n        // NOTE: not actual JSON, it is Map.toString()!\n        \"{type=Point, coordinates=[1, 2]}\", \"\"+geo);  \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}