{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","commits":[{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"/dev/null","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case MODIFY:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n\n              Map val = map;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              if (!validName(key)) {\n                op.addError(MessageFormat.format(\"''{0}'' name should only have chars [a-zA-Z_-.0-9] \", key));\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (CREATE.equals(op.name) && (old != null)) {\n                op.addError(MessageFormat.format(\"params exist ''{0}'' , use {1}\", key, UPDATE));\n                break;\n              }\n              if (MODIFY.equals(op.name) || UPDATE.equals(op.name)) {\n                if (old == null) {\n                  op.addError(MessageFormat.format(\"params  ''{0}'' does not exist , use {1}\", key, CREATE));\n                  break;\n                }\n              }\n\n              if (op.name.equals(MODIFY)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper(loader,params.getZnodeVersion(),\n            RequestParams.RESOURCE,params.toByteArray(),true);\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"026598a4c9c5b475f0028a513c0128db067d4a33","date":1419596855,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              if (!validName(key)) {\n                op.addError(MessageFormat.format(\"''{0}'' name should only have chars [a-zA-Z_-.0-9] \", key));\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper(loader,params.getZnodeVersion(),\n            RequestParams.RESOURCE,params.toByteArray(),true);\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case MODIFY:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n\n              Map val = map;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              if (!validName(key)) {\n                op.addError(MessageFormat.format(\"''{0}'' name should only have chars [a-zA-Z_-.0-9] \", key));\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (CREATE.equals(op.name) && (old != null)) {\n                op.addError(MessageFormat.format(\"params exist ''{0}'' , use {1}\", key, UPDATE));\n                break;\n              }\n              if (MODIFY.equals(op.name) || UPDATE.equals(op.name)) {\n                if (old == null) {\n                  op.addError(MessageFormat.format(\"params  ''{0}'' does not exist , use {1}\", key, CREATE));\n                  break;\n                }\n              }\n\n              if (op.name.equals(MODIFY)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper(loader,params.getZnodeVersion(),\n            RequestParams.RESOURCE,params.toByteArray(),true);\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4ac60f04ae5100329a7aeb332ec715fd5775437","date":1420116442,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err !=null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper(loader,params.getZnodeVersion(),\n            RequestParams.RESOURCE,params.toByteArray(),true);\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              if (!validName(key)) {\n                op.addError(MessageFormat.format(\"''{0}'' name should only have chars [a-zA-Z_-.0-9] \", key));\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper(loader,params.getZnodeVersion(),\n            RequestParams.RESOURCE,params.toByteArray(),true);\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45a5f13e4e6b3c60912dc0911227739fe2f371c2","date":1420449490,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err !=null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if(ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        }else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err !=null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkController.persistConfigResourceToZooKeeper(loader,params.getZnodeVersion(),\n            RequestParams.RESOURCE,params.toByteArray(),true);\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"349a1b276fa5d6d66dbb97531fad41631e5ea9d3","date":1420470826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err !=null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if(ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        }else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err !=null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if(ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        }else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, ConfigOverlay.RESOURCE_NAME, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","date":1423220905,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err !=null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if(ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        }else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case CREATE:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err !=null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if(ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        }else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val =null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err !=null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS,errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if(ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        }else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(StrUtils.formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(StrUtils.formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(MessageFormat.format(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params version : {}\", params.toMap());\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params version : {}\", params.toMap());\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          ZkController.persistConfigResourceToZooKeeper(zkLoader, params.getZnodeVersion(),\n              RequestParams.RESOURCE, params.toByteArray(), true);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params version : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params version : {}\", params.toMap());\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":["9125399a2b1542e8303716ed9020cb6cd4a7aa93"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params version : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (key == null || key.trim().isEmpty()) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              MapSolrParams old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                LinkedHashMap m = new LinkedHashMap(old.getMap());\n                m.putAll(val);\n                val = m;\n              }\n              params = params.setParams(key, val);\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params version : {}\", params.toMap());\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","date":1456309391,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          log.info(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params version : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          log.info(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params version : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60fbf45fdc4c578b71b38d70a03617829161f4bd","date":1471870345,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          log.info(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":["389d072b64597cdcf75c2d536aaec3e8afe3393f","95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","be214850f18c80408bcfafd463ec155ab0515aee"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          log.info(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          log.info(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val = null;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.info(\"persisting params data : {}\", Utils.toJSONString(params.toMap()));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(),\n              RequestParams.RESOURCE,\n              params.toByteArray(), true);\n          log.info(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(),\n              RequestParams.NAME,\n              latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreDescriptor().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9125399a2b1542e8303716ed9020cb6cd4a7aa93","date":1510160069,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5842a4edb3c2199b36886989b39d0da46b6f2e7b","date":1529637673,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":["c2d72c3e6563e08675f940d4c74139309c5e3db2","be214850f18c80408bcfafd463ec155ab0515aee"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        resp.add(CommandOperation.ERR_MSGS, errs);\n        return;\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fb8cae56bd31a827317dd604b1169743f9475f2","date":1571413113,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"Could not delete. No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n            break;\n          }\n          default: {\n            op.unknownOperation();\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"can't delete . No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"Could not delete. No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n            break;\n          }\n          default: {\n            op.unknownOperation();\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"Could not delete. No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n            break;\n          }\n          default: {\n            op.unknownOperation();\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST,\"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"Could not delete. No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n            break;\n          }\n          default: {\n            op.unknownOperation();\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          }\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"Could not delete. No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n            break;\n          }\n          default: {\n            op.unknownOperation();\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleParams(ArrayList[CommandOperation],RequestParams).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              @SuppressWarnings({\"rawtypes\"})\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"Could not delete. No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n            break;\n          }\n          default: {\n            op.unknownOperation();\n          }\n        }\n      }\n\n\n      @SuppressWarnings({\"rawtypes\"})\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          }\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","sourceOld":"    private void handleParams(ArrayList<CommandOperation> ops, RequestParams params) {\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case SET:\n          case UPDATE: {\n            Map<String, Object> map = op.getDataMap();\n            if (op.hasError()) break;\n\n            for (Map.Entry<String, Object> entry : map.entrySet()) {\n\n              Map val;\n              String key = entry.getKey();\n              if (isNullOrEmpty(key)) {\n                op.addError(\"null key \");\n                continue;\n              }\n              key = key.trim();\n              String err = validateName(key);\n              if (err != null) {\n                op.addError(err);\n                continue;\n              }\n\n              try {\n                val = (Map) entry.getValue();\n              } catch (Exception e1) {\n                op.addError(\"invalid params for key : \" + key);\n                continue;\n              }\n\n              if (val.containsKey(\"\")) {\n                op.addError(\"Empty keys are not allowed in params\");\n                continue;\n              }\n\n              RequestParams.ParamSet old = params.getParams(key);\n              if (op.name.equals(UPDATE)) {\n                if (old == null) {\n                  op.addError(formatString(\"unknown paramset {0} cannot update \", key));\n                  continue;\n                }\n                params = params.setParams(key, old.update(val));\n              } else {\n                Long version = old == null ? 0 : old.getVersion() + 1;\n                params = params.setParams(key, RequestParams.createParamSet(val, version));\n              }\n\n            }\n            break;\n\n          }\n          case \"delete\": {\n            List<String> name = op.getStrs(CommandOperation.ROOT_OBJ);\n            if (op.hasError()) break;\n            for (String s : name) {\n              if (params.getParams(s) == null) {\n                op.addError(formatString(\"Could not delete. No such params ''{0}'' exist\", s));\n              }\n              params = params.setParams(s, null);\n            }\n            break;\n          }\n          default: {\n            op.unknownOperation();\n          }\n        }\n      }\n\n\n      List errs = CommandOperation.captureErrors(ops);\n      if (!errs.isEmpty()) {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"error processing params\", errs);\n      }\n\n      SolrResourceLoader loader = req.getCore().getResourceLoader();\n      if (loader instanceof ZkSolrResourceLoader) {\n        ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader) loader;\n        if (ops.isEmpty()) {\n          ZkController.touchConfDir(zkLoader);\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"persisting params data : {}\", Utils.toJSONString(params.toMap(new LinkedHashMap<>())));\n          }\n          int latestVersion = ZkController.persistConfigResourceToZooKeeper(zkLoader,\n              params.getZnodeVersion(), RequestParams.RESOURCE, params.toByteArray(), true);\n\n          log.debug(\"persisted to version : {} \", latestVersion);\n          waitForAllReplicasState(req.getCore().getCoreDescriptor().getCloudDescriptor().getCollectionName(),\n              req.getCore().getCoreContainer().getZkController(), RequestParams.NAME, latestVersion, 30);\n        }\n\n      } else {\n        SolrResourceLoader.persistConfLocally(loader, RequestParams.RESOURCE, params.toByteArray());\n        req.getCore().getSolrConfig().refreshRequestParams();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","60fbf45fdc4c578b71b38d70a03617829161f4bd"],"349a1b276fa5d6d66dbb97531fad41631e5ea9d3":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"be214850f18c80408bcfafd463ec155ab0515aee":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"9125399a2b1542e8303716ed9020cb6cd4a7aa93":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["d4ac60f04ae5100329a7aeb332ec715fd5775437"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["be214850f18c80408bcfafd463ec155ab0515aee","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9125399a2b1542e8303716ed9020cb6cd4a7aa93","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"5fb8cae56bd31a827317dd604b1169743f9475f2":["c44cc06c26e456fe9c215072b79fce30babe3975"],"95e8420b0cad2ed6c40e0a272a1ca1b314303fe3":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","1f1f31880696765d6aec499d3b01fa501129af45"],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["9125399a2b1542e8303716ed9020cb6cd4a7aa93"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["349a1b276fa5d6d66dbb97531fad41631e5ea9d3"],"a5296efc4b319f5647b606629c093a94b23692c6":["389d072b64597cdcf75c2d536aaec3e8afe3393f","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["be214850f18c80408bcfafd463ec155ab0515aee"],"fab172655716b96f7e42376116235017a922de3a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["b5991832ae4bac45cecfff0fc33125aeac823d3d","95e8420b0cad2ed6c40e0a272a1ca1b314303fe3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9125399a2b1542e8303716ed9020cb6cd4a7aa93","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"d4ac60f04ae5100329a7aeb332ec715fd5775437":["026598a4c9c5b475f0028a513c0128db067d4a33"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"1f1f31880696765d6aec499d3b01fa501129af45":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["95e8420b0cad2ed6c40e0a272a1ca1b314303fe3"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"026598a4c9c5b475f0028a513c0128db067d4a33":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"349a1b276fa5d6d66dbb97531fad41631e5ea9d3":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["5fb8cae56bd31a827317dd604b1169743f9475f2","b0b597c65628ca9e73913a07e81691f8229bae35"],"be214850f18c80408bcfafd463ec155ab0515aee":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["349a1b276fa5d6d66dbb97531fad41631e5ea9d3"],"9125399a2b1542e8303716ed9020cb6cd4a7aa93":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","5842a4edb3c2199b36886989b39d0da46b6f2e7b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fab172655716b96f7e42376116235017a922de3a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"95e8420b0cad2ed6c40e0a272a1ca1b314303fe3":["0c82557b0a8c9d4012f208e5de912ae7500ea351","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60fbf45fdc4c578b71b38d70a03617829161f4bd"],"5fb8cae56bd31a827317dd604b1169743f9475f2":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["be214850f18c80408bcfafd463ec155ab0515aee"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"fab172655716b96f7e42376116235017a922de3a":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1f1f31880696765d6aec499d3b01fa501129af45"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["026598a4c9c5b475f0028a513c0128db067d4a33"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"d4ac60f04ae5100329a7aeb332ec715fd5775437":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["a5296efc4b319f5647b606629c093a94b23692c6","fab172655716b96f7e42376116235017a922de3a","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9125399a2b1542e8303716ed9020cb6cd4a7aa93"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"026598a4c9c5b475f0028a513c0128db067d4a33":["d4ac60f04ae5100329a7aeb332ec715fd5775437"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","a5296efc4b319f5647b606629c093a94b23692c6","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a5296efc4b319f5647b606629c093a94b23692c6","fab172655716b96f7e42376116235017a922de3a","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}