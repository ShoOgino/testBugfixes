{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseDocIdSetIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseDocIdSetIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int nextPosition() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getPayload() throws IOException {\n        return null;\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449f2318aa7f06ce3bce9031e402201231cb781e","date":1424530966,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseDocIdSetIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseDocIdSetIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseDocIdSetIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseDocIdSetIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int nextPosition() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public BytesRef getPayload() throws IOException {\n        return null;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseIterator).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","sourceNew":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseDocIdSetIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseDocIdSetIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctionDISI#scorer(DocIdSetIterator,TwoPhaseDocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a {@link Scorer} that wraps the given {@link DocIdSetIterator}. It\n   * also accepts a {@link TwoPhaseDocIdSetIterator} view, which is exposed in\n   * {@link Scorer#asTwoPhaseIterator()}. When the two-phase view is not null,\n   * then {@link Scorer#nextDoc()} and {@link Scorer#advance(int)} will raise\n   * an exception in order to make sure that {@link ConjunctionDISI} takes\n   * advantage of the {@link TwoPhaseDocIdSetIterator} view.\n   */\n  private static Scorer scorer(DocIdSetIterator it, TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    return new Scorer(null) {\n\n      @Override\n      public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n        return twoPhaseIterator;\n      }\n\n      @Override\n      public int docID() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        if (twoPhaseIterator != null) {\n          throw new UnsupportedOperationException(\"ConjunctionDISI should call the two-phase iterator\");\n        }\n        return it.cost();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public int freq() throws IOException {\n        return 0;\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["449f2318aa7f06ce3bce9031e402201231cb781e","a3d6eb0072094d94624002318ba2d4c840946833"],"449f2318aa7f06ce3bce9031e402201231cb781e":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d6eb0072094d94624002318ba2d4c840946833":["449f2318aa7f06ce3bce9031e402201231cb781e"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d6eb0072094d94624002318ba2d4c840946833"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"449f2318aa7f06ce3bce9031e402201231cb781e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a3d6eb0072094d94624002318ba2d4c840946833":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["449f2318aa7f06ce3bce9031e402201231cb781e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}