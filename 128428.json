{"path":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","commits":[{"id":"667eea18b7ca87af38d05d81d479f943a717a6b1","date":1548452298,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","sourceNew":"  public void testFailOnOldVersion() throws Exception {\n\n    // fail low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\")),\n            params(\"update.chain\",\"external-version-failhard\"));\n    assertU(commit());\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"42\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // fail low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_l\", \"1002\")), \n            params(\"update.chain\",\"external-version-failhard\"));\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // fail low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1010\",\n                                      \"update.chain\",\"external-version-failhard\"));\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1005\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n\n    // fail low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1009\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n  }\n\n","sourceOld":"  public void testFailOnOldVersion() throws Exception {\n\n    // fail low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\")),\n            params(\"update.chain\",\"external-version-failhard\"));\n    assertU(commit());\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"42\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // fail low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_l\", \"1002\")), \n            params(\"update.chain\",\"external-version-failhard\"));\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // fail low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1010\",\n                                      \"update.chain\",\"external-version-failhard\"));\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1005\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n\n    // fail low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1009\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","sourceNew":"  public void testFailOnOldVersion() throws Exception {\n\n    // fail low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\")),\n            params(\"update.chain\",\"external-version-failhard\"));\n    assertU(commit());\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"42\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n\n    ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\",\n          \"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // fail low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_l\", \"1002\")), \n            params(\"update.chain\",\"external-version-failhard\"));\n    ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\",\n          \"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // fail low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1010\",\n                                      \"update.chain\",\"external-version-failhard\"));\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1005\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n\n    // fail low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1009\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n  }\n\n","sourceOld":"  public void testFailOnOldVersion() throws Exception {\n\n    // fail low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\")),\n            params(\"update.chain\",\"external-version-failhard\"));\n    assertU(commit());\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"42\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // fail low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_l\", \"1002\")), \n            params(\"update.chain\",\"external-version-failhard\"));\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // fail low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1010\",\n                                      \"update.chain\",\"external-version-failhard\"));\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1005\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n\n    // fail low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1009\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","sourceNew":"  public void testFailOnOldVersion() throws Exception {\n\n    // fail low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\")),\n            params(\"update.chain\",\"external-version-failhard\"));\n    assertU(commit());\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"42\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n\n    ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\",\n          \"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // fail low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_l\", \"1002\")), \n            params(\"update.chain\",\"external-version-failhard\"));\n    ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\",\n          \"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // fail low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1010\",\n                                      \"update.chain\",\"external-version-failhard\"));\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1005\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n\n    // fail low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1009\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n  }\n\n","sourceOld":"  public void testFailOnOldVersion() throws Exception {\n\n    // fail low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\")),\n            params(\"update.chain\",\"external-version-failhard\"));\n    assertU(commit());\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"42\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // fail low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_l\", \"1002\")), \n            params(\"update.chain\",\"external-version-failhard\"));\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // fail low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1010\",\n                                      \"update.chain\",\"external-version-failhard\"));\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1005\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n\n    // fail low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1009\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TestDocBasedVersionConstraints#testFailOnOldVersion().mjava","sourceNew":"  public void testFailOnOldVersion() throws Exception {\n\n    // fail low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\")),\n            params(\"update.chain\",\"external-version-failhard\"));\n    assertU(commit());\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"42\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n\n    ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\",\n          \"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // fail low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_l\", \"1002\")), \n            params(\"update.chain\",\"external-version-failhard\"));\n    ex = expectThrows(SolrException.class, () -> {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\",\n          \"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // fail low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1010\",\n                                      \"update.chain\",\"external-version-failhard\"));\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1005\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n\n    // fail low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1009\")),\n          params(\"update.chain\",\"external-version-failhard\"));\n    });\n    assertEquals(409, ex.code());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n  }\n\n","sourceOld":"  public void testFailOnOldVersion() throws Exception {\n\n    // fail low version add & low version delete against committed doc\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a1\", \"my_version_l\", \"1001\")),\n            params(\"update.chain\",\"external-version-failhard\"));\n    assertU(commit());\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"42\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertU(commit());\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"7\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a1'}}\");\n    assertU(commit());\n    \n    // fail low version delete against uncommitted doc from updateLog\n    updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"a2\", \"my_version_l\", \"1002\")), \n            params(\"update.chain\",\"external-version-failhard\"));\n    try {\n      deleteAndGetVersion(\"aaa\", params(\"del_version\", \"8\", \n                                        \"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:a2\"), \"/response/numFound==1\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"name\")\n             , \"=={'doc':{'name':'a2'}}\");\n\n    // fail low version add against uncommitted \"delete\" from updateLog\n    deleteAndGetVersion(\"aaa\", params(\"del_version\", \"1010\",\n                                      \"update.chain\",\"external-version-failhard\"));\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1005\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n\n    // fail low version add against committed \"delete\"\n    // (delete was already done & committed above)\n    try {\n      updateJ(jsonAdd(sdoc(\"id\", \"aaa\", \"name\", \"XX\", \"my_version_l\", \"1009\")),\n              params(\"update.chain\",\"external-version-failhard\"));\n      fail(\"no 409\");\n    } catch (SolrException ex) {\n      assertEquals(409, ex.code());\n    }\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}}\");\n    assertU(commit());\n    assertJQ(req(\"q\",\"+id:aaa\"), \"/response/numFound==1\");\n    assertJQ(req(\"q\",\"+id:aaa +name:XX\"), \"/response/numFound==0\");\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"aaa\", \"fl\",\"my_version_l\")\n             , \"=={'doc':{'my_version_l':1010}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"667eea18b7ca87af38d05d81d479f943a717a6b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["667eea18b7ca87af38d05d81d479f943a717a6b1","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["667eea18b7ca87af38d05d81d479f943a717a6b1","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["667eea18b7ca87af38d05d81d479f943a717a6b1"],"667eea18b7ca87af38d05d81d479f943a717a6b1":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}