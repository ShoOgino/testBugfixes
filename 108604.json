{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#optimize(int,boolean).mjava","sourceNew":null,"sourceOld":"  /** Just like {@link #optimize(int)}, except you can\n   *  specify whether the call should block until the\n   *  optimize completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(int maxNumSegments, boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (maxNumSegments < 1)\n      throw new IllegalArgumentException(\"maxNumSegments must be >= 1; got \" + maxNumSegments);\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush(true, false, true);\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet<SegmentInfo>();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      for(final MergePolicy.OneMerge merge  : pendingMerges) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n\n      for ( final MergePolicy.OneMerge merge: runningMerges ) {\n        merge.optimize = true;\n        merge.maxNumSegmentsOptimize = maxNumSegments;\n      }\n    }\n\n    maybeMerge(maxNumSegments, true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(true) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete optimize\");\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = mergeExceptions.get(i);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                final Throwable t = merge.getException();\n                if (t != null)\n                  err.initCause(t);\n                throw err;\n              }\n            }\n          }\n\n          if (optimizeMergesPending())\n            doWait();\n          else\n            break;\n        }\n      }\n\n      // If close is called while we are still\n      // running, throw an exception so the calling\n      // thread will know the optimize did not\n      // complete\n      ensureOpen();\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}