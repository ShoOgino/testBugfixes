{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","commits":[{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.setup(ctx);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      for (int i = 0; i < 120; i++) {\n        String shardId = getShardId(\"http://\" + nodeName + \"/solr/\", coreName);\n        if (shardId != null) {\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              zkStateReader);\n          elector.setup(ctx);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n        Thread.sleep(500);\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77a0b04ddf690033aa642a3caf096a2ebfe1812f","date":1408972109,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"deletecore\",\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,Replica.State,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, Replica.State stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName.toString(),\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, String stateName, int numShards)\n        throws KeeperException, InterruptedException, IOException {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n            DistributedQueue q = Overseer.getInQueue(zkClient);\n            q.offer(ZkStateReader.toJSON(m));\n         return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n        ZkStateReader.STATE_PROP, stateName,\n        ZkStateReader.NODE_NAME_PROP, nodeName,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n        ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName\n            + \"/solr/\");\n        DistributedQueue q = Overseer.getInQueue(zkClient);\n        q.offer(ZkStateReader.toJSON(m));\n      }\n      \n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29f5eaf296600e1665151e7929d42a3cbe22e481"],"77a0b04ddf690033aa642a3caf096a2ebfe1812f":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["77a0b04ddf690033aa642a3caf096a2ebfe1812f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","77a0b04ddf690033aa642a3caf096a2ebfe1812f"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"77a0b04ddf690033aa642a3caf096a2ebfe1812f":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29f5eaf296600e1665151e7929d42a3cbe22e481","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}