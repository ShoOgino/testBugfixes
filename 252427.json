{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}