{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","commits":[{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runTool(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    public int runTool(CommandLine cli) throws Exception {\n      \n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      int exitStatus = 0;\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        exitStatus = runCloudTool(cloudSolrClient, cli);\n      } catch (Exception exc) {\n        // since this is a CLI, spare the user the stacktrace\n        String excMsg = exc.getMessage();\n        if (excMsg != null) {\n          System.err.println(\"\\nERROR: \"+excMsg+\"\\n\");\n          exitStatus = 1;\n        } else {\n          throw exc;\n        }\n      }\n      \n      return exitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      } catch (Exception e) {\n        log.error(\"Could not complete mv operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      } catch (Exception e) {\n        log.error(\"Could not complete mv operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8677448a186f4abd32218787f7ae73ad38f575cf","date":1477484362,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      } catch (Exception e) {\n        log.error(\"Could not complete mv operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      } catch (Exception e) {\n        log.error(\"Could not complete mv operation for reason: \" + e.getMessage());\n        throw (e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","date":1503399053,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n\n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n      \n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n        \n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.SolrCloudTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n      log.debug(\"Connecting to Solr cluster: {}\", zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n\n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n      log.debug(\"Connecting to Solr cluster: \" + zkHost);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n        String collection = cli.getOptionValue(\"collection\");\n        if (collection != null)\n          cloudSolrClient.setDefaultCollection(collection);\n\n        cloudSolrClient.connect();\n        runCloudTool(cloudSolrClient, cli);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["4ca20be81c9284c840498143264e583ccbb8525a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"4ca20be81c9284c840498143264e583ccbb8525a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["8677448a186f4abd32218787f7ae73ad38f575cf","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"8677448a186f4abd32218787f7ae73ad38f575cf":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8677448a186f4abd32218787f7ae73ad38f575cf"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4ca20be81c9284c840498143264e583ccbb8525a","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["8677448a186f4abd32218787f7ae73ad38f575cf"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4ca20be81c9284c840498143264e583ccbb8525a":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8677448a186f4abd32218787f7ae73ad38f575cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca20be81c9284c840498143264e583ccbb8525a"],"8677448a186f4abd32218787f7ae73ad38f575cf":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}