{"path":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    PassageScorer scorer = new PassageScorer();\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n    \n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator, scorer, formatter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    PassageScorer scorer = new PassageScorer();\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n    \n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator, scorer, formatter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8a43401b8f308918076d84b2f72ee396dd054b","date":1363285518,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    \n    // scorer parameters: k1/b/pivot\n    String k1 = attributes.get(\"k1\");\n    if (k1 == null) {\n      k1 = \"1.2\";\n    }\n    \n    String b = attributes.get(\"b\");\n    if (b == null) {\n      b = \"0.75\";\n    }\n    \n    String pivot = attributes.get(\"pivot\");\n    if (pivot == null) {\n      pivot = \"87\";\n    }\n    PassageScorer scorer = new PassageScorer(Float.parseFloat(k1), Float.parseFloat(b), Float.parseFloat(pivot));\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n    \n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator, scorer, formatter);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    PassageScorer scorer = new PassageScorer();\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n    \n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator, scorer, formatter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1","date":1363793774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    \n    // scorer parameters: k1/b/pivot\n    String k1 = attributes.get(\"k1\");\n    if (k1 == null) {\n      k1 = \"1.2\";\n    }\n    \n    String b = attributes.get(\"b\");\n    if (b == null) {\n      b = \"0.75\";\n    }\n    \n    String pivot = attributes.get(\"pivot\");\n    if (pivot == null) {\n      pivot = \"87\";\n    }\n    PassageScorer scorer = new PassageScorer(Float.parseFloat(k1), Float.parseFloat(b), Float.parseFloat(pivot));\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n\n    String summarizeEmpty = attributes.get(\"summarizeEmpty\");\n    final boolean summarizeEmptyBoolean;\n    if (summarizeEmpty == null) {\n      summarizeEmptyBoolean = true;\n    } else {\n      summarizeEmptyBoolean = Boolean.parseBoolean(summarizeEmpty);\n    }\n\n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator, scorer, formatter) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          if (summarizeEmptyBoolean) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n      };\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    \n    // scorer parameters: k1/b/pivot\n    String k1 = attributes.get(\"k1\");\n    if (k1 == null) {\n      k1 = \"1.2\";\n    }\n    \n    String b = attributes.get(\"b\");\n    if (b == null) {\n      b = \"0.75\";\n    }\n    \n    String pivot = attributes.get(\"pivot\");\n    if (pivot == null) {\n      pivot = \"87\";\n    }\n    PassageScorer scorer = new PassageScorer(Float.parseFloat(k1), Float.parseFloat(b), Float.parseFloat(pivot));\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n    \n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator, scorer, formatter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    \n    // scorer parameters: k1/b/pivot\n    String k1 = attributes.get(\"k1\");\n    if (k1 == null) {\n      k1 = \"1.2\";\n    }\n    \n    String b = attributes.get(\"b\");\n    if (b == null) {\n      b = \"0.75\";\n    }\n    \n    String pivot = attributes.get(\"pivot\");\n    if (pivot == null) {\n      pivot = \"87\";\n    }\n    final PassageScorer scorer = new PassageScorer(Float.parseFloat(k1), Float.parseFloat(b), Float.parseFloat(pivot));\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    final PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n\n    String summarizeEmpty = attributes.get(\"summarizeEmpty\");\n    final boolean summarizeEmptyBoolean;\n    if (summarizeEmpty == null) {\n      summarizeEmptyBoolean = true;\n    } else {\n      summarizeEmptyBoolean = Boolean.parseBoolean(summarizeEmpty);\n    }\n\n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          if (summarizeEmptyBoolean) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          return formatter;\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          return scorer;\n        }\n      };\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    \n    // scorer parameters: k1/b/pivot\n    String k1 = attributes.get(\"k1\");\n    if (k1 == null) {\n      k1 = \"1.2\";\n    }\n    \n    String b = attributes.get(\"b\");\n    if (b == null) {\n      b = \"0.75\";\n    }\n    \n    String pivot = attributes.get(\"pivot\");\n    if (pivot == null) {\n      pivot = \"87\";\n    }\n    PassageScorer scorer = new PassageScorer(Float.parseFloat(k1), Float.parseFloat(b), Float.parseFloat(pivot));\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n\n    String summarizeEmpty = attributes.get(\"summarizeEmpty\");\n    final boolean summarizeEmptyBoolean;\n    if (summarizeEmpty == null) {\n      summarizeEmptyBoolean = true;\n    } else {\n      summarizeEmptyBoolean = Boolean.parseBoolean(summarizeEmpty);\n    }\n\n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator, scorer, formatter) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          if (summarizeEmptyBoolean) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157d49068cfc35be5fed366f40bc20cbcddea695","date":1364791189,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    \n    // scorer parameters: k1/b/pivot\n    String k1 = attributes.get(\"k1\");\n    if (k1 == null) {\n      k1 = \"1.2\";\n    }\n    \n    String b = attributes.get(\"b\");\n    if (b == null) {\n      b = \"0.75\";\n    }\n    \n    String pivot = attributes.get(\"pivot\");\n    if (pivot == null) {\n      pivot = \"87\";\n    }\n    final PassageScorer scorer = new PassageScorer(Float.parseFloat(k1), Float.parseFloat(b), Float.parseFloat(pivot));\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    final PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n\n    String summarizeEmpty = attributes.get(\"summarizeEmpty\");\n    final boolean summarizeEmptyBoolean;\n    if (summarizeEmpty == null) {\n      summarizeEmptyBoolean = true;\n    } else {\n      summarizeEmptyBoolean = Boolean.parseBoolean(summarizeEmpty);\n    }\n\n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          if (summarizeEmptyBoolean) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          return formatter;\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          return scorer;\n        }\n      };\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    BreakIterator breakIterator = BreakIterator.getSentenceInstance(Locale.ROOT);\n    \n    // scorer parameters: k1/b/pivot\n    String k1 = attributes.get(\"k1\");\n    if (k1 == null) {\n      k1 = \"1.2\";\n    }\n    \n    String b = attributes.get(\"b\");\n    if (b == null) {\n      b = \"0.75\";\n    }\n    \n    String pivot = attributes.get(\"pivot\");\n    if (pivot == null) {\n      pivot = \"87\";\n    }\n    final PassageScorer scorer = new PassageScorer(Float.parseFloat(k1), Float.parseFloat(b), Float.parseFloat(pivot));\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    final PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n\n    String summarizeEmpty = attributes.get(\"summarizeEmpty\");\n    final boolean summarizeEmptyBoolean;\n    if (summarizeEmpty == null) {\n      summarizeEmptyBoolean = true;\n    } else {\n      summarizeEmptyBoolean = Boolean.parseBoolean(summarizeEmpty);\n    }\n\n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength, breakIterator) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          if (summarizeEmptyBoolean) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          return formatter;\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          return scorer;\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd905c4a79d42991e9ab7416d8acee9b43bd7511","date":1365248927,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","sourceNew":"  @Override\n  public void init(PluginInfo info) {}\n\n","sourceOld":"  @Override\n  public void init(PluginInfo info) {\n    Map<String,String> attributes = info.attributes;\n    \n    // scorer parameters: k1/b/pivot\n    String k1 = attributes.get(\"k1\");\n    if (k1 == null) {\n      k1 = \"1.2\";\n    }\n    \n    String b = attributes.get(\"b\");\n    if (b == null) {\n      b = \"0.75\";\n    }\n    \n    String pivot = attributes.get(\"pivot\");\n    if (pivot == null) {\n      pivot = \"87\";\n    }\n    final PassageScorer scorer = new PassageScorer(Float.parseFloat(k1), Float.parseFloat(b), Float.parseFloat(pivot));\n    \n    // formatter parameters: preTag/postTag/ellipsis\n    String preTag = attributes.get(\"preTag\");\n    if (preTag == null) {\n      preTag = \"<em>\";\n    }\n    String postTag = attributes.get(\"postTag\");\n    if (postTag == null) {\n      postTag = \"</em>\";\n    }\n    String ellipsis = attributes.get(\"ellipsis\");\n    if (ellipsis == null) {\n      ellipsis = \"... \";\n    }\n    final PassageFormatter formatter = new PassageFormatter(preTag, postTag, ellipsis);\n\n    String summarizeEmpty = attributes.get(\"summarizeEmpty\");\n    final boolean summarizeEmptyBoolean;\n    if (summarizeEmpty == null) {\n      summarizeEmptyBoolean = true;\n    } else {\n      summarizeEmptyBoolean = Boolean.parseBoolean(summarizeEmpty);\n    }\n\n    // maximum content size to process\n    int maxLength = PostingsHighlighter.DEFAULT_MAX_LENGTH;\n    if (attributes.containsKey(\"maxLength\")) {\n      maxLength = Integer.parseInt(attributes.get(\"maxLength\"));\n    }\n    highlighter = new PostingsHighlighter(maxLength) {\n        @Override\n        protected Passage[] getEmptyHighlight(String fieldName, BreakIterator bi, int maxPassages) {\n          if (summarizeEmptyBoolean) {\n            return super.getEmptyHighlight(fieldName, bi, maxPassages);\n          } else {\n            return new Passage[0];\n          }\n        }\n\n        @Override\n        protected PassageFormatter getFormatter(String fieldName) {\n          return formatter;\n        }\n\n        @Override\n        protected PassageScorer getScorer(String fieldName) {\n          return scorer;\n        }\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"424b0811c7309a660798cd4e2939a8adee546665","date":1495551772,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    log.warn(\"The PostingsSolrHighlighter is deprecated; use the UnifiedSolrHighlighter instead.\");\n    super.init(info);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo info) {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter#init(PluginInfo).mjava","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    log.warn(\"The PostingsSolrHighlighter is deprecated; use the UnifiedSolrHighlighter instead.\");\n    super.init(info);\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo info) {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["dd905c4a79d42991e9ab7416d8acee9b43bd7511","424b0811c7309a660798cd4e2939a8adee546665"],"4831dd345148fcd7c33877b449ade21fc45459d8":["4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1"],"dd905c4a79d42991e9ab7416d8acee9b43bd7511":["157d49068cfc35be5fed366f40bc20cbcddea695"],"ec8a43401b8f308918076d84b2f72ee396dd054b":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"424b0811c7309a660798cd4e2939a8adee546665":["dd905c4a79d42991e9ab7416d8acee9b43bd7511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"157d49068cfc35be5fed366f40bc20cbcddea695":["4831dd345148fcd7c33877b449ade21fc45459d8"],"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1":["ec8a43401b8f308918076d84b2f72ee396dd054b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["424b0811c7309a660798cd4e2939a8adee546665"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ec8a43401b8f308918076d84b2f72ee396dd054b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4831dd345148fcd7c33877b449ade21fc45459d8":["157d49068cfc35be5fed366f40bc20cbcddea695"],"dd905c4a79d42991e9ab7416d8acee9b43bd7511":["e9017cf144952056066919f1ebc7897ff9bd71b1","424b0811c7309a660798cd4e2939a8adee546665"],"ec8a43401b8f308918076d84b2f72ee396dd054b":["4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1"],"424b0811c7309a660798cd4e2939a8adee546665":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"157d49068cfc35be5fed366f40bc20cbcddea695":["dd905c4a79d42991e9ab7416d8acee9b43bd7511"],"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}