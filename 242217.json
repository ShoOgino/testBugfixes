{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","commits":[{"id":"674317f6f59d52bd57e52dbb56969b0bd1e0eb79","date":1485715361,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    List<String> illegalFilenames = Arrays.asList(\"/foo/bar\", \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        try {\n          invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename);\n          fail(\"Should have thrown exception on illegal path for param \" + param + \" and file name \" + filename);\n        } catch (Exception e) {}\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1afe4c0a48dfcb78a1483b1338b9e3ee9c571989"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1afe4c0a48dfcb78a1483b1338b9e3ee9c571989","date":1485764799,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","sourceNew":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        try {\n          invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename);\n          fail(\"Should have thrown exception on illegal path for param \" + param + \" and file name \" + filename);\n        } catch (Exception e) {}\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    List<String> illegalFilenames = Arrays.asList(\"/foo/bar\", \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        try {\n          invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename);\n          fail(\"Should have thrown exception on illegal path for param \" + param + \" and file name \" + filename);\n        } catch (Exception e) {}\n      }\n    }\n  }\n\n","bugFix":["674317f6f59d52bd57e52dbb56969b0bd1e0eb79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        try {\n          invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename);\n          fail(\"Should have thrown exception on illegal path for param \" + param + \" and file name \" + filename);\n        } catch (Exception e) {}\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","sourceNew":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        expectThrows(Exception.class, () ->\n            invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        try {\n          invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename);\n          fail(\"Should have thrown exception on illegal path for param \" + param + \" and file name \" + filename);\n        } catch (Exception e) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","sourceNew":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        expectThrows(Exception.class, () ->\n            invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        try {\n          invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename);\n          fail(\"Should have thrown exception on illegal path for param \" + param + \" and file name \" + filename);\n        } catch (Exception e) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","sourceNew":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        expectThrows(Exception.class, () ->\n            invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        try {\n          invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename);\n          fail(\"Should have thrown exception on illegal path for param \" + param + \" and file name \" + filename);\n        } catch (Exception e) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIllegalFilePaths().mjava","sourceNew":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        expectThrows(Exception.class, () ->\n            invokeReplicationCommand(leaderJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void doTestIllegalFilePaths() throws Exception {\n    // Loop through the file=, cf=, tlogFile= params and prove that it throws exception for path traversal attempts\n    String absFile = Paths.get(\"foo\").toAbsolutePath().toString();\n    List<String> illegalFilenames = Arrays.asList(absFile, \"../dir/traversal\", \"illegal\\rfile\\nname\\t\");\n    List<String> params = Arrays.asList(ReplicationHandler.FILE, ReplicationHandler.CONF_FILE_SHORT, ReplicationHandler.TLOG_FILE);\n    for (String param : params) {\n      for (String filename : illegalFilenames) {\n        expectThrows(Exception.class, () ->\n            invokeReplicationCommand(masterJetty.getLocalPort(), \"filecontent&\" + param + \"=\" + filename));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"674317f6f59d52bd57e52dbb56969b0bd1e0eb79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1afe4c0a48dfcb78a1483b1338b9e3ee9c571989"],"1afe4c0a48dfcb78a1483b1338b9e3ee9c571989":["674317f6f59d52bd57e52dbb56969b0bd1e0eb79"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["1afe4c0a48dfcb78a1483b1338b9e3ee9c571989"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["1afe4c0a48dfcb78a1483b1338b9e3ee9c571989","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["1afe4c0a48dfcb78a1483b1338b9e3ee9c571989","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"674317f6f59d52bd57e52dbb56969b0bd1e0eb79":["1afe4c0a48dfcb78a1483b1338b9e3ee9c571989"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["674317f6f59d52bd57e52dbb56969b0bd1e0eb79","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"1afe4c0a48dfcb78a1483b1338b9e3ee9c571989":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}