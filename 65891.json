{"path":"src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer[]).mjava","commits":[{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer[]).mjava","pathOld":"/dev/null","sourceNew":"  public ConjunctionScorer(Similarity similarity, Scorer[] scorers) throws IOException {\n    super(similarity);\n    this.scorers = scorers;\n    coord = getSimilarity().coord(this.scorers.length, this.scorers.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer[]).mjava","pathOld":"src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer[]).mjava","sourceNew":"  public ConjunctionScorer(Similarity similarity, Scorer[] scorers) throws IOException {\n    super(similarity);\n    this.scorers = scorers;\n    coord = similarity.coord(scorers.length, scorers.length);\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // note that this comparator is not consistent with equals!\n    Arrays.sort(scorers, new Comparator() {         // sort the array\n      public int compare(Object o1, Object o2) {\n        return ((Scorer) o1).docID() - ((Scorer) o2).docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(Similarity similarity, Scorer[] scorers) throws IOException {\n    super(similarity);\n    this.scorers = scorers;\n    coord = getSimilarity().coord(this.scorers.length, this.scorers.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer[]).mjava","pathOld":"src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer[]).mjava","sourceNew":"  public ConjunctionScorer(Similarity similarity, Scorer[] scorers) throws IOException {\n    super(similarity);\n    this.scorers = scorers;\n    coord = similarity.coord(scorers.length, scorers.length);\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // note that this comparator is not consistent with equals!\n    Arrays.sort(scorers, new Comparator<Scorer>() {         // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(Similarity similarity, Scorer[] scorers) throws IOException {\n    super(similarity);\n    this.scorers = scorers;\n    coord = similarity.coord(scorers.length, scorers.length);\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // note that this comparator is not consistent with equals!\n    Arrays.sort(scorers, new Comparator() {         // sort the array\n      public int compare(Object o1, Object o2) {\n        return ((Scorer) o1).docID() - ((Scorer) o2).docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e76a976d5469661c89ff8931edd3df1f5b9cb2","date":1258226809,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer...).mjava","pathOld":"src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Similarity,Scorer[]).mjava","sourceNew":"  public ConjunctionScorer(Similarity similarity, Scorer... scorers) throws IOException {\n    super(similarity);\n    this.scorers = scorers;\n    coord = similarity.coord(scorers.length, scorers.length);\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // note that this comparator is not consistent with equals!\n    Arrays.sort(scorers, new Comparator<Scorer>() {         // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","sourceOld":"  public ConjunctionScorer(Similarity similarity, Scorer[] scorers) throws IOException {\n    super(similarity);\n    this.scorers = scorers;\n    coord = similarity.coord(scorers.length, scorers.length);\n    \n    for (int i = 0; i < scorers.length; i++) {\n      if (scorers[i].nextDoc() == NO_MORE_DOCS) {\n        // If even one of the sub-scorers does not have any documents, this\n        // scorer should not attempt to do any more work.\n        lastDoc = NO_MORE_DOCS;\n        return;\n      }\n    }\n\n    // Sort the array the first time...\n    // We don't need to sort the array in any future calls because we know\n    // it will already start off sorted (all scorers on same doc).\n    \n    // note that this comparator is not consistent with equals!\n    Arrays.sort(scorers, new Comparator<Scorer>() {         // sort the array\n      public int compare(Scorer o1, Scorer o2) {\n        return o1.docID() - o2.docID();\n      }\n    });\n\n    // NOTE: doNext() must be called before the re-sorting of the array later on.\n    // The reason is this: assume there are 5 scorers, whose first docs are 1,\n    // 2, 3, 5, 5 respectively. Sorting (above) leaves the array as is. Calling\n    // doNext() here advances all the first scorers to 5 (or a larger doc ID\n    // they all agree on). \n    // However, if we re-sort before doNext() is called, the order will be 5, 3,\n    // 2, 1, 5 and then doNext() will stop immediately, since the first scorer's\n    // docs equals the last one. So the invariant that after calling doNext() \n    // all scorers are on the same doc ID is broken.\n    if (doNext() == NO_MORE_DOCS) {\n      // The scorers did not agree on any document.\n      lastDoc = NO_MORE_DOCS;\n      return;\n    }\n\n    // If first-time skip distance is any predictor of\n    // scorer sparseness, then we should always try to skip first on\n    // those scorers.\n    // Keep last scorer in it's last place (it will be the first\n    // to be skipped on), but reverse all of the others so that\n    // they will be skipped on in order of original high skip.\n    int end = scorers.length - 1;\n    int max = end >> 1;\n    for (int i = 0; i < max; i++) {\n      Scorer tmp = scorers[i];\n      int idx = end - i - 1;\n      scorers[i] = scorers[idx];\n      scorers[idx] = tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87e76a976d5469661c89ff8931edd3df1f5b9cb2":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87e76a976d5469661c89ff8931edd3df1f5b9cb2"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["30a558487f2298c2c19ceca9103c1b6865d64708"],"87e76a976d5469661c89ff8931edd3df1f5b9cb2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"ef82ff03e4016c705811b2658e81471a645c0e49":["87e76a976d5469661c89ff8931edd3df1f5b9cb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}