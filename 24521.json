{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      return Explanation.match(sc, BoostedQuery.this.toString() + \", product of:\", subQueryExpl, vals.explain(doc));\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      Explanation res = new ComplexExplanation(\n        true, sc, BoostedQuery.this.toString() + \", product of:\");\n      res.addDetail(subQueryExpl);\n      res.addDetail(vals.explain(doc));\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float factor = vals.floatVal(doc);\n      Explanation factorExpl = vals.explain(doc);\n      if (factor < 0) {\n        factor = 0;\n        factorExpl = Explanation.match(0, \"truncated score, max of:\",\n            Explanation.match(0f, \"minimum score\"), factorExpl);\n      } else if (Float.isNaN(factor)) {\n        factor = 0;\n        factorExpl = Explanation.match(0, \"score, computed as (score == NaN ? 0 : score) since NaN is an illegal score from:\", factorExpl);\n      }\n      \n      float sc = subQueryExpl.getValue() * factor;\n      return Explanation.match(sc, BoostedQuery.this.toString() + \", product of:\",\n          subQueryExpl, factorExpl);\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float sc = subQueryExpl.getValue() * vals.floatVal(doc);\n      return Explanation.match(sc, BoostedQuery.this.toString() + \", product of:\", subQueryExpl, vals.explain(doc));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/BoostedQuery.BoostedWeight#explain(LeafReaderContext,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext readerContext, int doc) throws IOException {\n      Explanation subQueryExpl = qWeight.explain(readerContext,doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      FunctionValues vals = boostVal.getValues(fcontext, readerContext);\n      float factor = vals.floatVal(doc);\n      Explanation factorExpl = vals.explain(doc);\n      if (factor < 0) {\n        factor = 0;\n        factorExpl = Explanation.match(0, \"truncated score, max of:\",\n            Explanation.match(0f, \"minimum score\"), factorExpl);\n      } else if (Float.isNaN(factor)) {\n        factor = 0;\n        factorExpl = Explanation.match(0, \"score, computed as (score == NaN ? 0 : score) since NaN is an illegal score from:\", factorExpl);\n      }\n      \n      float sc = subQueryExpl.getValue() * factor;\n      return Explanation.match(sc, BoostedQuery.this.toString() + \", product of:\",\n          subQueryExpl, factorExpl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82662cae660e76ded4de1e9b451633e523d83e1":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["a82662cae660e76ded4de1e9b451633e523d83e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}