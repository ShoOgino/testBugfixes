{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","sourceNew":null,"sourceOld":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","sourceNew":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","sourceOld":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d272632e612b90b4a624b54b5a8db565bca8d6d8","date":1279057531,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","sourceNew":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTestCase.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTestCase.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","sourceOld":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","sourceNew":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTestCase.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTestCase.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","sourceOld":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTest.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","date":1286986267,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#testOnly_xml_files().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","sourceNew":"  @Test\n  /************************************************************************/\n  public void testOnly_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    assertEquals(5, fList.size());\n  }\n\n","sourceOld":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTestCase.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTestCase.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#testOnly_xml_files().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","sourceNew":"  @Test\n  /************************************************************************/\n  public void testOnly_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    assertEquals(5, fList.size());\n  }\n\n","sourceOld":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTestCase.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTestCase.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestLineEntityProcessor#only_xml_files().mjava","sourceNew":null,"sourceOld":"  @Test\n  /************************************************************************/\n  public void only_xml_files() throws IOException {\n\n    /* we want to create the equiv of :-\n     *  <entity name=\"list_all_files\" \n     *           processor=\"LineEntityProcessor\"\n     *           fileName=\"dummy.lis\"\n     *           acceptLineRegex=\"xml\"\n     *           />\n     */\n    Map attrs = AbstractDataImportHandlerTestCase.createMap(\n            LineEntityProcessor.URL, \"dummy.lis\",\n            LineEntityProcessor.ACCEPT_LINE_REGEX, \"xml\",\n            LineEntityProcessor.SKIP_LINE_REGEX, null\n    );\n\n    Context c = AbstractDataImportHandlerTestCase.getContext(\n            null,                          //parentEntity\n            new VariableResolverImpl(),  //resolver\n            getDataSource(filecontents),   //parentDataSource\n            Context.FULL_DUMP,                             //currProcess\n            Collections.EMPTY_LIST,        //entityFields\n            attrs                          //entityAttrs\n    );\n    LineEntityProcessor ep = new LineEntityProcessor();\n    ep.init(c);\n\n    /// call the entity processor to the list of lines\n    List<String> fList = new ArrayList<String>();\n    while (true) {\n      Map<String, Object> f = ep.nextRow();\n      if (f == null) break;\n      fList.add((String) f.get(\"rawLine\"));\n    }\n    Assert.assertEquals(5, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"d272632e612b90b4a624b54b5a8db565bca8d6d8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","d272632e612b90b4a624b54b5a8db565bca8d6d8"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["d272632e612b90b4a624b54b5a8db565bca8d6d8"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d272632e612b90b4a624b54b5a8db565bca8d6d8","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["d272632e612b90b4a624b54b5a8db565bca8d6d8","5f4e87790277826a2aea119328600dfb07761f32"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"d272632e612b90b4a624b54b5a8db565bca8d6d8":["5f4e87790277826a2aea119328600dfb07761f32","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}