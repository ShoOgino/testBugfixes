{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#assertStopQueryEquals(String,String).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#assertStopQueryEquals(String,String).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#assertStopQueryEquals(String,String).mjava","sourceNew":"  // verify parsing of query using a stopping analyzer\n  private void assertStopQueryEquals(String qtxt, String expectedRes)\n      throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    Occur occur[] = { Occur.SHOULD, Occur.SHOULD };\n    TestQPHelper.QPTestAnalyzer a = new TestQPHelper.QPTestAnalyzer();\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(a);\n\n    Query q = mfqp.parse(qtxt, null);\n    assertEquals(expectedRes, q.toString());\n\n    q = QueryParserUtil.parse(qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","sourceOld":"  // verify parsing of query using a stopping analyzer\n  private void assertStopQueryEquals(String qtxt, String expectedRes)\n      throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    Occur occur[] = { Occur.SHOULD, Occur.SHOULD };\n    TestQPHelper.QPTestAnalyzer a = new TestQPHelper.QPTestAnalyzer();\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(a);\n\n    Query q = mfqp.parse(qtxt, null);\n    assertEquals(expectedRes, q.toString());\n\n    q = QueryParserUtil.parse(qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#assertStopQueryEquals(String,String).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#assertStopQueryEquals(String,String).mjava","sourceNew":"  // verify parsing of query using a stopping analyzer\n  private void assertStopQueryEquals(String qtxt, String expectedRes)\n      throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    Occur occur[] = { Occur.SHOULD, Occur.SHOULD };\n    TestQPHelper.QPTestAnalyzer a = new TestQPHelper.QPTestAnalyzer();\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(a);\n\n    Query q = mfqp.parse(qtxt, null);\n    assertEquals(expectedRes, q.toString());\n\n    q = QueryParserUtil.parse(qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","sourceOld":"  // verify parsing of query using a stopping analyzer\n  private void assertStopQueryEquals(String qtxt, String expectedRes)\n      throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    Occur occur[] = { Occur.SHOULD, Occur.SHOULD };\n    TestQPHelper.QPTestAnalyzer a = new TestQPHelper.QPTestAnalyzer();\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(a);\n\n    Query q = mfqp.parse(qtxt, null);\n    assertEquals(expectedRes, q.toString());\n\n    q = QueryParserUtil.parse(qtxt, fields, occur, a);\n    assertEquals(expectedRes, q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}