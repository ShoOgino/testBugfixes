{"path":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","commits":[{"id":"4988178cfbf5117763a956901f39d3efa3282e72","date":1095241130,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n      \n      terms.addElement(term);\n      positions.addElement(new Integer(position));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.addElement(term);\n      positions.addElement(new Integer(position));\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n      \n      terms.addElement(term);\n      positions.addElement(new Integer(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f758d6efad251890e720eb5370329f6ab5b509","date":1217253519,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(new Integer(position));\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.addElement(term);\n      positions.addElement(new Integer(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108","date":1221993701,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(new Integer(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(new Integer(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(new Integer(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f758d6efad251890e720eb5370329f6ab5b509":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"6bcde5e3f23911110baa101ed062b544162825b5":["4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["4988178cfbf5117763a956901f39d3efa3282e72"],"4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108":["19f758d6efad251890e720eb5370329f6ab5b509"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6bcde5e3f23911110baa101ed062b544162825b5"],"4988178cfbf5117763a956901f39d3efa3282e72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"19f758d6efad251890e720eb5370329f6ab5b509":["4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108"],"6bcde5e3f23911110baa101ed062b544162825b5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["19f758d6efad251890e720eb5370329f6ab5b509"],"4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4988178cfbf5117763a956901f39d3efa3282e72"],"4988178cfbf5117763a956901f39d3efa3282e72":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}