{"path":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#obtain().mjava","commits":[{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#obtain().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean obtain() throws IOException {\n      try {\n        Files.createDirectories(lockDir);\n        Files.createFile(lockFile);\n        return true;\n      } catch (IOException ioe) {\n        // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n        // In that case, the lock was not aquired successfully, so return false.\n        // We record the failure reason here; the obtain with timeout (usually the\n        // one calling us) will use this as \"root cause\" if it fails to get the lock.\n        failureReason = ioe;\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd448926db19517b82cc7c775c62c57f7d2ee6a","date":1432845380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#obtain().mjava","sourceNew":"    @Override\n    public synchronized boolean obtain() throws IOException {\n      if (obtained) {\n        // Our instance is already locked:\n        throw new LockObtainFailedException(\"this lock instance was already obtained\");\n      }\n      \n      try {\n        Files.createDirectories(lockDir);\n        Files.createFile(lockFile);\n        obtained = true;\n      } catch (IOException ioe) {\n        // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n        // In that case, the lock was not aquired successfully, so return false.\n        // We record the failure reason here; the obtain with timeout (usually the\n        // one calling us) will use this as \"root cause\" if it fails to get the lock.\n        failureReason = ioe;\n      }\n\n      return obtained;\n    }\n\n","sourceOld":"    @Override\n    public boolean obtain() throws IOException {\n      try {\n        Files.createDirectories(lockDir);\n        Files.createFile(lockFile);\n        return true;\n      } catch (IOException ioe) {\n        // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n        // In that case, the lock was not aquired successfully, so return false.\n        // We record the failure reason here; the obtain with timeout (usually the\n        // one calling us) will use this as \"root cause\" if it fails to get the lock.\n        failureReason = ioe;\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#obtain().mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized boolean obtain() throws IOException {\n      if (obtained) {\n        // Our instance is already locked:\n        throw new LockObtainFailedException(\"this lock instance was already obtained\");\n      }\n      \n      try {\n        Files.createDirectories(lockDir);\n        Files.createFile(lockFile);\n        obtained = true;\n      } catch (IOException ioe) {\n        // On Windows, on concurrent createNewFile, the 2nd process gets \"access denied\".\n        // In that case, the lock was not aquired successfully, so return false.\n        // We record the failure reason here; the obtain with timeout (usually the\n        // one calling us) will use this as \"root cause\" if it fails to get the lock.\n        failureReason = ioe;\n      }\n\n      return obtained;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285cdc737de75b7cc7c284a156b20214deb67bca":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285cdc737de75b7cc7c284a156b20214deb67bca"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}