{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","sourceNew":"  public static List<Clause> mergePolicies(String coll,\n                                    List<Clause> collPolicy,\n                                    List<Clause> globalPolicy) {\n\n    List<Clause> merged = insertColl(coll, collPolicy);\n    List<Clause> global = insertColl(coll, globalPolicy);\n    merged.addAll(global.stream()\n        .filter(clusterPolicyClause -> merged.stream().noneMatch(perCollPolicy -> perCollPolicy.doesOverride(clusterPolicyClause)))\n        .collect(Collectors.toList()));\n    return merged;\n  }\n\n","sourceOld":"  static List<Clause> mergePolicies(String coll,\n                                    List<Clause> collPolicy,\n                                    List<Clause> globalPolicy) {\n\n    List<Clause> merged = insertColl(coll, collPolicy);\n    List<Clause> global = insertColl(coll, globalPolicy);\n    merged.addAll(global.stream()\n        .filter(clusterPolicyClause -> merged.stream().noneMatch(perCollPolicy -> perCollPolicy.doesOverride(clusterPolicyClause)))\n        .collect(Collectors.toList()));\n    return merged;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","sourceNew":"  public static List<Clause> mergePolicies(String coll,\n                                    List<Clause> collPolicy,\n                                    List<Clause> globalPolicy) {\n\n    List<Clause> merged = insertColl(coll, collPolicy);\n    List<Clause> global = insertColl(coll, globalPolicy);\n    merged.addAll(global.stream()\n        .filter(clusterPolicyClause -> merged.stream().noneMatch(perCollPolicy -> perCollPolicy.doesOverride(clusterPolicyClause)))\n        .collect(Collectors.toList()));\n    return merged;\n  }\n\n","sourceOld":"  static List<Clause> mergePolicies(String coll,\n                                    List<Clause> collPolicy,\n                                    List<Clause> globalPolicy) {\n\n    List<Clause> merged = insertColl(coll, collPolicy);\n    List<Clause> global = insertColl(coll, globalPolicy);\n    merged.addAll(global.stream()\n        .filter(clusterPolicyClause -> merged.stream().noneMatch(perCollPolicy -> perCollPolicy.doesOverride(clusterPolicyClause)))\n        .collect(Collectors.toList()));\n    return merged;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<Clause> mergePolicies(String coll,\n                                    List<Clause> collPolicy,\n                                    List<Clause> globalPolicy) {\n\n    List<Clause> merged = insertColl(coll, collPolicy);\n    List<Clause> global = insertColl(coll, globalPolicy);\n    merged.addAll(global.stream()\n        .filter(clusterPolicyClause -> merged.stream().noneMatch(perCollPolicy -> perCollPolicy.doesOverride(clusterPolicyClause)))\n        .collect(Collectors.toList()));\n    return merged;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","sourceNew":"  public static List<Clause> mergePolicies(String coll,\n                                           List<Clause> collPolicy,\n                                           List<Clause> globalPolicy) {\n\n    List<Clause> merged = insertColl(coll, collPolicy);\n    List<Clause> global = insertColl(coll, globalPolicy);\n    merged.addAll(global.stream()\n        .filter(clusterPolicyClause -> merged.stream().noneMatch(perCollPolicy -> perCollPolicy.doesOverride(clusterPolicyClause)))\n        .collect(Collectors.toList()));\n    return merged;\n  }\n\n","sourceOld":"  public static List<Clause> mergePolicies(String coll,\n                                    List<Clause> collPolicy,\n                                    List<Clause> globalPolicy) {\n\n    List<Clause> merged = insertColl(coll, collPolicy);\n    List<Clause> global = insertColl(coll, globalPolicy);\n    merged.addAll(global.stream()\n        .filter(clusterPolicyClause -> merged.stream().noneMatch(perCollPolicy -> perCollPolicy.doesOverride(clusterPolicyClause)))\n        .collect(Collectors.toList()));\n    return merged;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#mergePolicies(String,List[Clause],List[Clause]).mjava","sourceNew":null,"sourceOld":"  public static List<Clause> mergePolicies(String coll,\n                                           List<Clause> collPolicy,\n                                           List<Clause> globalPolicy) {\n\n    List<Clause> merged = insertColl(coll, collPolicy);\n    List<Clause> global = insertColl(coll, globalPolicy);\n    merged.addAll(global.stream()\n        .filter(clusterPolicyClause -> merged.stream().noneMatch(perCollPolicy -> perCollPolicy.doesOverride(clusterPolicyClause)))\n        .collect(Collectors.toList()));\n    return merged;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["3f504512a03d978990cbff30db0522b354e846db"],"28288370235ed02234a64753cdbf0c6ec096304a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}