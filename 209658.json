{"path":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,Object[]).mjava","commits":[{"id":"e19067e820b148e8dc0b240da4f2771cf7b68252","date":1347730768,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,Object[]).mjava","pathOld":"/dev/null","sourceNew":"  protected void query(boolean setDistribParams, Object[] q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faff74992839549208db29d95b9ad4a1d3846c79","date":1385672428,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,Object[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,Object[]).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, Object[] q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  protected void query(boolean setDistribParams, Object[] q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,Object[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,Object[]).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, Object[] q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  protected void query(boolean setDistribParams, Object[] q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,Object[]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,Object[]).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, Object[] q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    return query(setDistribParams, params);\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, Object[] q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["faff74992839549208db29d95b9ad4a1d3846c79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e19067e820b148e8dc0b240da4f2771cf7b68252":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["e19067e820b148e8dc0b240da4f2771cf7b68252","faff74992839549208db29d95b9ad4a1d3846c79"],"faff74992839549208db29d95b9ad4a1d3846c79":["e19067e820b148e8dc0b240da4f2771cf7b68252"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"]},"commit2Childs":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e19067e820b148e8dc0b240da4f2771cf7b68252"],"e19067e820b148e8dc0b240da4f2771cf7b68252":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","faff74992839549208db29d95b9ad4a1d3846c79"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"faff74992839549208db29d95b9ad4a1d3846c79":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}