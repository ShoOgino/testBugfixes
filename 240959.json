{"path":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","commits":[{"id":"9d951133e62b079e1dde80890d60bf451997355b","date":1418945070,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      CoreDescriptor newCd = new CoreDescriptor(cores, \"core1\", cd.getInstanceDir(), \"config\", \"solrconfig-searcher-listeners1.xml\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(newCd);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7afb082006e9e58bb3174bcffe2482869e9a411d","date":1419056317,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","sourceNew":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    MockSearcherListener.latch = new CountDownLatch(numTimesCalled);\n    \n    try {\n      CoreDescriptor newCd = new CoreDescriptor(cores, \"core1\", cd.getInstanceDir(), \"config\", \"solrconfig-searcher-listeners1.xml\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(newCd);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      \n      if (numTimesCalled > 0) {\n        MockSearcherListener.latch.await(10, TimeUnit.SECONDS);\n      }\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","sourceOld":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      CoreDescriptor newCd = new CoreDescriptor(cores, \"core1\", cd.getInstanceDir(), \"config\", \"solrconfig-searcher-listeners1.xml\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(newCd);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2a350d715b45fda01002eb33f9cd107c1b716176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a350d715b45fda01002eb33f9cd107c1b716176","date":1419450711,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","sourceNew":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      CoreDescriptor newCd = new CoreDescriptor(cores, \"core1\", cd.getInstanceDir(), \"config\", \"solrconfig-searcher-listeners1.xml\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(newCd);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","sourceOld":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    MockSearcherListener.latch = new CountDownLatch(numTimesCalled);\n    \n    try {\n      CoreDescriptor newCd = new CoreDescriptor(cores, \"core1\", cd.getInstanceDir(), \"config\", \"solrconfig-searcher-listeners1.xml\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(newCd);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      \n      if (numTimesCalled > 0) {\n        MockSearcherListener.latch.await(10, TimeUnit.SECONDS);\n      }\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","bugFix":["7afb082006e9e58bb3174bcffe2482869e9a411d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","sourceNew":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","sourceOld":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      CoreDescriptor newCd = new CoreDescriptor(cores, \"core1\", cd.getInstanceDir(), \"config\", \"solrconfig-searcher-listeners1.xml\");\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(newCd);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","sourceNew":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"), false);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","sourceOld":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","sourceNew":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"), false);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","sourceOld":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"));\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestIndexSearcher#createCoreAndValidateListeners(int,int,int,int).mjava","sourceNew":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"), false);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      @SuppressWarnings({\"rawtypes\"})\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","sourceOld":"  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,\n      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {\n    CoreContainer cores = h.getCoreContainer();\n    CoreDescriptor cd = h.getCore().getCoreDescriptor();\n    SolrCore newCore = null;\n    // reset counters\n    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();\n    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();\n    \n    try {\n      // Create a new core, this should call all the firstSearcherListeners\n      newCore = cores.create(\"core1\", cd.getInstanceDir(), ImmutableMap.of(\"config\", \"solrconfig-searcher-listeners1.xml\"), false);\n      \n      //validate that the new core was created with the correct solrconfig\n      assertNotNull(newCore.getSearchComponent(\"mock\"));\n      assertEquals(MockSearchComponent.class, newCore.getSearchComponent(\"mock\").getClass());\n      assertFalse(newCore.getSolrConfig().useColdSearcher);\n      \n      doQuery(newCore);\n      \n      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n      addDummyDoc(newCore);\n      \n      // Open a new searcher, this should call the newSearcherListeners\n      Future<?>[] future = new Future[1];\n      newCore.getSearcher(true, false, future);\n      future[0].get();\n      \n      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());\n      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());\n      \n    } finally {\n      if (newCore != null) {\n        cores.unload(\"core1\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["2a350d715b45fda01002eb33f9cd107c1b716176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a350d715b45fda01002eb33f9cd107c1b716176":["7afb082006e9e58bb3174bcffe2482869e9a411d"],"7afb082006e9e58bb3174bcffe2482869e9a411d":["9d951133e62b079e1dde80890d60bf451997355b"],"9d951133e62b079e1dde80890d60bf451997355b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["d528fd7ae22865015b756e0a03832e2051de2a9c"]},"commit2Childs":{"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d951133e62b079e1dde80890d60bf451997355b"],"2a350d715b45fda01002eb33f9cd107c1b716176":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"7afb082006e9e58bb3174bcffe2482869e9a411d":["2a350d715b45fda01002eb33f9cd107c1b716176"],"9d951133e62b079e1dde80890d60bf451997355b":["7afb082006e9e58bb3174bcffe2482869e9a411d"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e98520789adb1d5ad05afb4956eca0944a929688"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}