{"path":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#postingsEnumToIntsRef(PostingsEnum,Bits).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#postingsEnumToIntsRef(PostingsEnum,Bits).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an IntsRef either cached or reading postingsEnum. Not null. */\n  private IntsRef postingsEnumToIntsRef(PostingsEnum postingsEnum, Bits liveDocs) throws IOException {\n    // (The cache can have empty IntsRefs)\n\n    //lookup prefixBuf in a cache\n    if (docIdsCache != null) {\n      docIds = docIdsCache.get(prefixBuf);\n      if (docIds != null) {\n        return docIds;\n      }\n    }\n\n    //read postingsEnum\n    docIds = new IntsRef(termsEnum.docFreq());\n    int docId;\n    while ((docId = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n      if (liveDocs != null && !liveDocs.get(postingsEnum.docID())) {\n        continue;\n      }\n      docIds.ints[docIds.length++] = docId;\n    }\n    if (docIds.length == 0)\n      docIds = EMPTY_INTSREF;\n\n    //cache\n    if (docIdsCache != null) {\n      ensureBufIsACopy();\n      //clone is shallow; that's okay as the prefix isn't overwritten; it's just appended to\n      docIdsCache.put(prefixBuf.clone(), docIds);\n    }\n    return docIds;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#postingsEnumToIntsRef(PostingsEnum,Bits).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an IntsRef either cached or reading postingsEnum. Not null. */\n  private IntsRef postingsEnumToIntsRef(PostingsEnum postingsEnum, Bits liveDocs) throws IOException {\n    // (The cache can have empty IntsRefs)\n\n    //lookup prefixBuf in a cache\n    if (docIdsCache != null) {\n      docIds = docIdsCache.get(prefixBuf);\n      if (docIds != null) {\n        return docIds;\n      }\n    }\n\n    //read postingsEnum\n    docIds = new IntsRef(termsEnum.docFreq());\n    int docId;\n    while ((docId = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n      if (liveDocs != null && !liveDocs.get(postingsEnum.docID())) {\n        continue;\n      }\n      docIds.ints[docIds.length++] = docId;\n    }\n    if (docIds.length == 0)\n      docIds = EMPTY_INTSREF;\n\n    //cache\n    if (docIdsCache != null) {\n      ensureBufIsACopy();\n      //clone is shallow; that's okay as the prefix isn't overwritten; it's just appended to\n      docIdsCache.put(prefixBuf.clone(), docIds);\n    }\n    return docIds;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#postingsEnumToIntsRef(PostingsEnum,Bits).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an IntsRef either cached or reading postingsEnum. Not null. */\n  private IntsRef postingsEnumToIntsRef(PostingsEnum postingsEnum, Bits liveDocs) throws IOException {\n    // (The cache can have empty IntsRefs)\n\n    //lookup prefixBuf in a cache\n    if (docIdsCache != null) {\n      docIds = docIdsCache.get(prefixBuf);\n      if (docIds != null) {\n        return docIds;\n      }\n    }\n\n    //read postingsEnum\n    docIds = new IntsRef(termsEnum.docFreq());\n    int docId;\n    while ((docId = postingsEnum.nextDoc()) != PostingsEnum.NO_MORE_DOCS) {\n      if (liveDocs != null && !liveDocs.get(postingsEnum.docID())) {\n        continue;\n      }\n      docIds.ints[docIds.length++] = docId;\n    }\n    if (docIds.length == 0)\n      docIds = EMPTY_INTSREF;\n\n    //cache\n    if (docIdsCache != null) {\n      ensureBufIsACopy();\n      //clone is shallow; that's okay as the prefix isn't overwritten; it's just appended to\n      docIdsCache.put(prefixBuf.clone(), docIds);\n    }\n    return docIds;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}