{"path":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","commits":[{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"/dev/null","sourceNew":"    private final int ensureSource(int docID) {\n      int n = docID - start;\n      if (n >= numDocs) {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.load();\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        n = docID - start;\n      }\n      return n;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      int n = docID - start;\n      if (n >= numDocs) {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n          missingValues.copy(current.getMissing());\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        n = docID - start;\n      }\n      return n;\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      int n = docID - start;\n      if (n >= numDocs) {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.load();\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        n = docID - start;\n      }\n      return n;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      int n = docID - start;\n      if (n >= numDocs) {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n          missingValue.copy(current.getMissing());\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        n = docID - start;\n      }\n      return n;\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      int n = docID - start;\n      if (n >= numDocs) {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n          missingValues.copy(current.getMissing());\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        n = docID - start;\n      }\n      return n;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n          missingValue.copy(current.getMissing());\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      int n = docID - start;\n      if (n >= numDocs) {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n          missingValue.copy(current.getMissing());\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        n = docID - start;\n      }\n      return n;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n          missingValue.copy(current.getMissing());\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/MultiIndexDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          current = docValuesIdx[idx].docValues.getSource();\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"605b061fadf71aa6458c0005eaae83a98350c403":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"605b061fadf71aa6458c0005eaae83a98350c403":[],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["605b061fadf71aa6458c0005eaae83a98350c403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39f3757037aa8f710c0cbf9a76a332de735f58b0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["605b061fadf71aa6458c0005eaae83a98350c403","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}