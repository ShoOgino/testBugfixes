{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, new Iterable<Number>() {\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();\n          final Iterator<Number> ordsIt = ords.iterator();\n          return new Iterator<Number>() {\n\n            @Override\n            public boolean hasNext() {\n              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;\n              return docToOrdCountIt.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              final Number ordCount = docToOrdCountIt.next();\n              if (ordCount.longValue() == 0) {\n                return MISSING_ORD;\n              } else {\n                assert ordCount.longValue() == 1;\n                return ordsIt.next();\n              }\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n          };\n        }\n\n      });\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1","date":1402428035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, new Iterable<Number>() {\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();\n          final Iterator<Number> ordsIt = ords.iterator();\n          return new Iterator<Number>() {\n\n            @Override\n            public boolean hasNext() {\n              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;\n              return docToOrdCountIt.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              final Number ordCount = docToOrdCountIt.next();\n              if (ordCount.longValue() == 0) {\n                return MISSING_ORD;\n              } else {\n                assert ordCount.longValue() == 1;\n                return ordsIt.next();\n              }\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n          };\n        }\n\n      });\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, new Iterable<Number>() {\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();\n          final Iterator<Number> ordsIt = ords.iterator();\n          return new Iterator<Number>() {\n\n            @Override\n            public boolean hasNext() {\n              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;\n              return docToOrdCountIt.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              final Number ordCount = docToOrdCountIt.next();\n              if (ordCount.longValue() == 0) {\n                return MISSING_ORD;\n              } else {\n                assert ordCount.longValue() == 1;\n                return ordsIt.next();\n              }\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n          };\n        }\n\n      });\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n      // write the ord -> byte[] as a binary field\n      addTermsDict(field, values);\n\n      // write the stream of ords as a numeric field\n      // NOTE: we could return an iterator that delta-encodes these within a doc\n      addNumericField(field, ords, false);\n\n      // write the doc -> ord count as a absolute index to the stream\n      addAddresses(field, docToOrdCount);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, new Iterable<Number>() {\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();\n          final Iterator<Number> ordsIt = ords.iterator();\n          return new Iterator<Number>() {\n\n            @Override\n            public boolean hasNext() {\n              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;\n              return docToOrdCountIt.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              final Number ordCount = docToOrdCountIt.next();\n              if (ordCount.longValue() == 0) {\n                return MISSING_ORD;\n              } else {\n                assert ordCount.longValue() == 1;\n                return ordsIt.next();\n              }\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n          };\n        }\n\n      });\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n      // write the ord -> byte[] as a binary field\n      addTermsDict(field, values);\n\n      // write the stream of ords as a numeric field\n      // NOTE: we could return an iterator that delta-encodes these within a doc\n      addNumericField(field, ords, false);\n\n      // write the doc -> ord count as a absolute index to the stream\n      addAddresses(field, docToOrdCount);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, new Iterable<Number>() {\n\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();\n          final Iterator<Number> ordsIt = ords.iterator();\n          return new Iterator<Number>() {\n\n            @Override\n            public boolean hasNext() {\n              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;\n              return docToOrdCountIt.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              final Number ordCount = docToOrdCountIt.next();\n              if (ordCount.longValue() == 0) {\n                return MISSING_ORD;\n              } else {\n                assert ordCount.longValue() == 1;\n                return ordsIt.next();\n              }\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n          };\n        }\n\n      });\n      return;\n    }\n\n    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);\n\n    // write the ord -> byte[] as a binary field\n    addTermsDict(field, values);\n\n    // write the stream of ords as a numeric field\n    // NOTE: we could return an iterator that delta-encodes these within a doc\n    addNumericField(field, ords, false);\n\n    // write the doc -> ord count as a absolute index to the stream\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);\n    meta.writeVInt(MONOTONIC_COMPRESSED);\n    meta.writeLong(-1L);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(maxDoc);\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeVInt(BLOCK_SIZE);\n\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    long addr = 0;\n    writer.add(addr);\n    for (Number v : docToOrdCount) {\n      addr += v.longValue();\n      writer.add(addr);\n    }\n    writer.finish();\n    meta.writeLong(data.getFilePointer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n      // write the ord -> byte[] as a binary field\n      addTermsDict(field, values);\n\n      // write the stream of ords as a numeric field\n      // NOTE: we could return an iterator that delta-encodes these within a doc\n      addNumericField(field, ords, false);\n\n      // write the doc -> ord count as a absolute index to the stream\n      addAddresses(field, docToOrdCount);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n      // write the ord -> byte[] as a binary field\n      addTermsDict(field, values);\n\n      // write the stream of ords as a numeric field\n      // NOTE: we could return an iterator that delta-encodes these within a doc\n      addNumericField(field, ords, false);\n\n      // write the doc -> ord count as a absolute index to the stream\n      addAddresses(field, docToOrdCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n      // write the ord -> byte[] as a binary field\n      addTermsDict(field, values);\n\n      // write the stream of ords as a numeric field\n      // NOTE: we could return an iterator that delta-encodes these within a doc\n      addNumericField(field, ords, false);\n\n      // write the doc -> ord count as a absolute index to the stream\n      addAddresses(field, docToOrdCount);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n      // write the ord -> byte[] as a binary field\n      addTermsDict(field, values);\n\n      // write the stream of ords as a numeric field\n      // NOTE: we could return an iterator that delta-encodes these within a doc\n      addNumericField(field, ords, false);\n\n      // write the doc -> ord count as a absolute index to the stream\n      addAddresses(field, docToOrdCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesConsumer#addSortedSetField(FieldInfo,Iterable[BytesRef],Iterable[Number],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n      // write the ord -> byte[] as a binary field\n      addTermsDict(field, values);\n\n      // write the stream of ords as a numeric field\n      // NOTE: we could return an iterator that delta-encodes these within a doc\n      addNumericField(field, ords, false);\n\n      // write the doc -> ord count as a absolute index to the stream\n      addAddresses(field, docToOrdCount);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {\n    checkCanWrite(field);\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);\n\n    if (isSingleValued(docToOrdCount)) {\n      meta.writeVInt(SORTED_SINGLE_VALUED);\n      // The field is single-valued, we can encode it as SORTED\n      addSortedField(field, values, singletonView(docToOrdCount, ords, -1L));\n    } else {\n      meta.writeVInt(SORTED_WITH_ADDRESSES);\n\n      // write the ord -> byte[] as a binary field\n      addTermsDict(field, values);\n\n      // write the stream of ords as a numeric field\n      // NOTE: we could return an iterator that delta-encodes these within a doc\n      addNumericField(field, ords, false);\n\n      // write the doc -> ord count as a absolute index to the stream\n      addAddresses(field, docToOrdCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}