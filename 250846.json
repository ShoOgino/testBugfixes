{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","commits":[{"id":"a94e45463a0089149b0d148ae5369140e7f54b8c","date":1419231934,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Override these two methods to provide a way to use global collection stats.\n   */\n  @Override \n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext()\n          .get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /*\n   * Override these two methods to provide a way to use global collection stats.\n   */\n  @Override\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    final SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      final StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext().get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","sourceOld":"  /*\n   * Override these two methods to provide a way to use global collection stats.\n   */\n  @Override \n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext()\n          .get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /*\n     * Override these two methods to provide a way to use global collection stats.\n     */\n  @Override\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    final SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      final StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext().get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","sourceOld":"  /*\n   * Override these two methods to provide a way to use global collection stats.\n   */\n  @Override\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    final SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      final StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext().get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /*\n     * Override these two methods to provide a way to use global collection stats.\n     */\n  @Override\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    final SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      final StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext().get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","sourceOld":"  /*\n   * Override these two methods to provide a way to use global collection stats.\n   */\n  @Override\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    final SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      final StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext().get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermStates).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":"  /*\n     * Override these two methods to provide a way to use global collection stats.\n     */\n  @Override\n  public TermStatistics termStatistics(Term term, TermStates context) throws IOException {\n    final SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      final StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext().get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","sourceOld":"  /*\n     * Override these two methods to provide a way to use global collection stats.\n     */\n  @Override\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    final SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      final StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext().get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#termStatistics(Term,TermContext).mjava","sourceNew":null,"sourceOld":"  /*\n     * Override these two methods to provide a way to use global collection stats.\n     */\n  @Override\n  public TermStatistics termStatistics(Term term, TermContext context) throws IOException {\n    final SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    if (reqInfo != null) {\n      final StatsSource statsSrc = (StatsSource) reqInfo.getReq().getContext().get(STATS_SOURCE);\n      if (statsSrc != null) {\n        return statsSrc.termStatistics(this, term, context);\n      }\n    }\n    return localTermStatistics(term, context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a94e45463a0089149b0d148ae5369140e7f54b8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["63a9344cff6a72bc4c1ef080c69e10ad0635b811","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["a94e45463a0089149b0d148ae5369140e7f54b8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a94e45463a0089149b0d148ae5369140e7f54b8c":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a94e45463a0089149b0d148ae5369140e7f54b8c"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}