{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/temp/TempSepPostingsFormat#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"fd65164c607d597fe7bb977735aa1ddfff22ed36","date":1377140532,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/temp/TempSepPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    TempPostingsReaderBase postingsReader = new TempSepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n        state.context, new MockSingleIntFactory(), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new TempBlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/temp/TempSepPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    TempPostingsReaderBase postingsReader = new TempSepPostingsReader(state.directory, state.fieldInfos, state.segmentInfo,\n        state.context, new MockSingleIntFactory(), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.directory,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.segmentSuffix, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new TempBlockTermsReader(indexReader,\n                                                state.directory,\n                                                state.fieldInfos,\n                                                state.segmentInfo,\n                                                postingsReader,\n                                                state.context,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["fd65164c607d597fe7bb977735aa1ddfff22ed36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd65164c607d597fe7bb977735aa1ddfff22ed36","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd65164c607d597fe7bb977735aa1ddfff22ed36":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}