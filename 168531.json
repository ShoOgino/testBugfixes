{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,StorableField).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,StorableField).mjava","sourceNew":"  @Override\n  public void add(int docID, StorableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","sourceOld":"  @Override\n  public void add(int docID, StorableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,StorableField).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void add(int docID, StorableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,StorableField).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void add(int docID, StorableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","0837ab0472feecb3a54260729d845f839e1cbd72"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}