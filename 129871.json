{"path":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  protected void testDocumentTypesInternal(String[] files, Map<String,Integer> expectedRecords) throws Exception {\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","pathOld":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","sourceNew":"  protected void testDocumentTypesInternal(String[] files, Map<String,Integer> expectedRecords) throws Exception {\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","sourceOld":"  protected void testDocumentTypesInternal(String[] files, Map<String,Integer> expectedRecords) throws Exception {\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}