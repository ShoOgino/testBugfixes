{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor)\n      throws InterruptedException {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor)\n      throws InterruptedException {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor)\n      throws InterruptedException {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor)\n      throws InterruptedException {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor)\n      throws InterruptedException {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor)\n      throws InterruptedException {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor)\n      throws InterruptedException {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getCloudState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f879cfa0789adb0c3d2c27716b8a2b50477537b","date":1353437297,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75f1ae6eadb5cef6015f15efa08542c8fd90ea14","date":1355940756,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 120;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#doGetShardIdProcess(String,CloudDescriptor).mjava","sourceNew":"  private String doGetShardIdProcess(String coreName, CoreDescriptor descriptor) {\n    final String shardZkNodeName = getCoreNodeName(descriptor);\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","sourceOld":"  private String doGetShardIdProcess(String coreName, CloudDescriptor descriptor) {\n    final String shardZkNodeName = getNodeName() + \"_\" + coreName;\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final String shardId = zkStateReader.getClusterState().getShardId(\n          shardZkNodeName);\n      if (shardId != null) {\n        return shardId;\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    \n    throw new SolrException(ErrorCode.SERVER_ERROR,\n        \"Could not get shard_id for core: \" + coreName + \" coreNodeName:\" + shardZkNodeName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","75f1ae6eadb5cef6015f15efa08542c8fd90ea14"],"2f879cfa0789adb0c3d2c27716b8a2b50477537b":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"407687e67faf6e1f02a211ca078d8e3eed631027":["3f767f8c99eaedb984df754fe61f21c5de260f94","2f879cfa0789adb0c3d2c27716b8a2b50477537b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"75f1ae6eadb5cef6015f15efa08542c8fd90ea14":["2f879cfa0789adb0c3d2c27716b8a2b50477537b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["a5093a9e893633cc091cf2f729d7863671c2b715"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["75f1ae6eadb5cef6015f15efa08542c8fd90ea14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2f879cfa0789adb0c3d2c27716b8a2b50477537b":["407687e67faf6e1f02a211ca078d8e3eed631027","75f1ae6eadb5cef6015f15efa08542c8fd90ea14"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3f767f8c99eaedb984df754fe61f21c5de260f94":["2f879cfa0789adb0c3d2c27716b8a2b50477537b","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"75f1ae6eadb5cef6015f15efa08542c8fd90ea14":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a5093a9e893633cc091cf2f729d7863671c2b715"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3f767f8c99eaedb984df754fe61f21c5de260f94","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}