{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","commits":[{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","pathOld":"/dev/null","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(getBoost(),\n                                       searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(getBoost(),\n                                       searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(getBoost(),\n                                       searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(getBoost(),\n                                       searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(getBoost(),\n                                       searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(getBoost(),\n                                       searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5f75e6b69ef96475154139e5b8a9c3f330ab14d","date":1464117905,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext],float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates, float boost) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(boost, searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.TermAutomatonWeight#TermAutomatonWeight(Automaton,IndexSearcher,Map[Integer,TermContext]).mjava","sourceNew":null,"sourceOld":"    public TermAutomatonWeight(Automaton automaton, IndexSearcher searcher, Map<Integer,TermContext> termStates) throws IOException {\n      super(TermAutomatonQuery.this);\n      this.automaton = automaton;\n      this.searcher = searcher;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity(true);\n      List<TermStatistics> allTermStats = new ArrayList<>();\n      for(Map.Entry<Integer,BytesRef> ent : idToTerm.entrySet()) {\n        Integer termID = ent.getKey();\n        if (ent.getValue() != null) {\n          allTermStats.add(searcher.termStatistics(new Term(field, ent.getValue()), termStates.get(termID)));\n        }\n      }\n\n      stats = similarity.computeWeight(searcher.collectionStatistics(field),\n                                       allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["2dfdf766e55e943d942055d7de53c7ad6bc45283","f5f75e6b69ef96475154139e5b8a9c3f330ab14d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["485545da3b4429d6f138b4baac573a97820ee93b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"485545da3b4429d6f138b4baac573a97820ee93b":["fb17639909a369c1e64866842e5c213440acc17e"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["2dfdf766e55e943d942055d7de53c7ad6bc45283","0e121d43b5a10f2df530f406f935102656e9c4e8"],"f5f75e6b69ef96475154139e5b8a9c3f330ab14d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["485545da3b4429d6f138b4baac573a97820ee93b"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","f5f75e6b69ef96475154139e5b8a9c3f330ab14d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["fb17639909a369c1e64866842e5c213440acc17e"],"485545da3b4429d6f138b4baac573a97820ee93b":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"f5f75e6b69ef96475154139e5b8a9c3f330ab14d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}