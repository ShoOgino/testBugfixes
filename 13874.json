{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","sourceNew":"  public void testFrontUnigram() throws Exception {\n    EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(input, EdgeNGramTokenFilter.Side.FRONT, 1, 1);\n    final Token reusableToken = new Token();\n    Token nextToken = tokenizer.next(reusableToken);\n    assertEquals(\"(a,0,1)\", nextToken.toString());\n    assertNull(tokenizer.next(reusableToken));\n  }\n\n","sourceOld":"  public void testFrontUnigram() throws Exception {\n    EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(input, EdgeNGramTokenFilter.Side.FRONT, 1, 1);\n    final Token reusableToken = new Token();\n    Token nextToken = tokenizer.next(reusableToken);\n    assertEquals(\"(a,0,1)\", nextToken.toString());\n    assertNull(tokenizer.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","sourceNew":"  public void testFrontUnigram() throws Exception {\n    EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(input, EdgeNGramTokenFilter.Side.FRONT, 1, 1);\n    TermAttribute termAtt = (TermAttribute) tokenizer.addAttribute(TermAttribute.class);\n    assertTrue(tokenizer.incrementToken());\n    assertEquals(\"(a,0,1)\", termAtt.toString());\n    assertFalse(tokenizer.incrementToken());\n  }\n\n","sourceOld":"  public void testFrontUnigram() throws Exception {\n    EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(input, EdgeNGramTokenFilter.Side.FRONT, 1, 1);\n    final Token reusableToken = new Token();\n    Token nextToken = tokenizer.next(reusableToken);\n    assertEquals(\"(a,0,1)\", nextToken.toString());\n    assertNull(tokenizer.next(reusableToken));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","sourceNew":"  public void testFrontUnigram() throws Exception {\n    EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(input, EdgeNGramTokenFilter.Side.FRONT, 1, 1);\n    assertTokenStreamContents(tokenizer, new String[]{\"a\"}, new int[]{0}, new int[]{1});\n  }\n\n","sourceOld":"  public void testFrontUnigram() throws Exception {\n    EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(input, EdgeNGramTokenFilter.Side.FRONT, 1, 1);\n    TermAttribute termAtt = (TermAttribute) tokenizer.addAttribute(TermAttribute.class);\n    assertTrue(tokenizer.incrementToken());\n    assertEquals(\"(a,0,1)\", termAtt.toString());\n    assertFalse(tokenizer.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilterTest#testFrontUnigram().mjava","sourceNew":"  public void testFrontUnigram() throws Exception {\n    EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(input, EdgeNGramTokenFilter.Side.FRONT, 1, 1);\n    assertTokenStreamContents(tokenizer, new String[]{\"a\"}, new int[]{0}, new int[]{1});\n  }\n\n","sourceOld":"  public void testFrontUnigram() throws Exception {\n    EdgeNGramTokenFilter tokenizer = new EdgeNGramTokenFilter(input, EdgeNGramTokenFilter.Side.FRONT, 1, 1);\n    assertTokenStreamContents(tokenizer, new String[]{\"a\"}, new int[]{0}, new int[]{1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}