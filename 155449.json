{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#getInfo(String,IndexableFieldType).mjava","commits":[{"id":"89b68d01c34172936f1aa2a8b9abf0e1bc68415f","date":1486637198,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#getInfo(String,IndexableFieldType).mjava","pathOld":"/dev/null","sourceNew":"  private Info getInfo(String fieldName, IndexableFieldType fieldType) {\n    if (frozen) {\n      throw new IllegalArgumentException(\"Cannot call addField() when MemoryIndex is frozen\");\n    }\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    }\n    Info info = fields.get(fieldName);\n    if (info == null) {\n      fields.put(fieldName, info = new Info(createFieldInfo(fieldName, fields.size(), fieldType), byteBlockPool));\n    }\n    if (fieldType.pointDimensionCount() != info.fieldInfo.getPointDimensionCount()) {\n      if (fieldType.pointDimensionCount() > 0)\n        info.fieldInfo.setPointDimensions(fieldType.pointDimensionCount(), fieldType.pointNumBytes());\n    }\n    if (fieldType.docValuesType() != info.fieldInfo.getDocValuesType()) {\n      if (fieldType.docValuesType() != DocValuesType.NONE)\n        info.fieldInfo.setDocValuesType(fieldType.docValuesType());\n    }\n    return info;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#getInfo(String,IndexableFieldType).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#getInfo(String,IndexableFieldType).mjava","sourceNew":"  private Info getInfo(String fieldName, IndexableFieldType fieldType) {\n    if (frozen) {\n      throw new IllegalArgumentException(\"Cannot call addField() when MemoryIndex is frozen\");\n    }\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    }\n    Info info = fields.get(fieldName);\n    if (info == null) {\n      fields.put(fieldName, info = new Info(createFieldInfo(fieldName, fields.size(), fieldType), byteBlockPool));\n    }\n    if (fieldType.pointDataDimensionCount() != info.fieldInfo.getPointDataDimensionCount()) {\n      if (fieldType.pointDataDimensionCount() > 0)\n        info.fieldInfo.setPointDimensions(fieldType.pointDataDimensionCount(), fieldType.pointIndexDimensionCount(), fieldType.pointNumBytes());\n    }\n    if (fieldType.docValuesType() != info.fieldInfo.getDocValuesType()) {\n      if (fieldType.docValuesType() != DocValuesType.NONE)\n        info.fieldInfo.setDocValuesType(fieldType.docValuesType());\n    }\n    return info;\n  }\n\n","sourceOld":"  private Info getInfo(String fieldName, IndexableFieldType fieldType) {\n    if (frozen) {\n      throw new IllegalArgumentException(\"Cannot call addField() when MemoryIndex is frozen\");\n    }\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    }\n    Info info = fields.get(fieldName);\n    if (info == null) {\n      fields.put(fieldName, info = new Info(createFieldInfo(fieldName, fields.size(), fieldType), byteBlockPool));\n    }\n    if (fieldType.pointDimensionCount() != info.fieldInfo.getPointDimensionCount()) {\n      if (fieldType.pointDimensionCount() > 0)\n        info.fieldInfo.setPointDimensions(fieldType.pointDimensionCount(), fieldType.pointNumBytes());\n    }\n    if (fieldType.docValuesType() != info.fieldInfo.getDocValuesType()) {\n      if (fieldType.docValuesType() != DocValuesType.NONE)\n        info.fieldInfo.setDocValuesType(fieldType.docValuesType());\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#getInfo(String,IndexableFieldType).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#getInfo(String,IndexableFieldType).mjava","sourceNew":"  private Info getInfo(String fieldName, IndexableFieldType fieldType) {\n    if (frozen) {\n      throw new IllegalArgumentException(\"Cannot call addField() when MemoryIndex is frozen\");\n    }\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    }\n    Info info = fields.get(fieldName);\n    if (info == null) {\n      fields.put(fieldName, info = new Info(createFieldInfo(fieldName, fields.size(), fieldType), byteBlockPool));\n    }\n    if (fieldType.pointDimensionCount() != info.fieldInfo.getPointDimensionCount()) {\n      if (fieldType.pointDimensionCount() > 0)\n        info.fieldInfo.setPointDimensions(fieldType.pointDimensionCount(), fieldType.pointIndexDimensionCount(), fieldType.pointNumBytes());\n    }\n    if (fieldType.docValuesType() != info.fieldInfo.getDocValuesType()) {\n      if (fieldType.docValuesType() != DocValuesType.NONE)\n        info.fieldInfo.setDocValuesType(fieldType.docValuesType());\n    }\n    return info;\n  }\n\n","sourceOld":"  private Info getInfo(String fieldName, IndexableFieldType fieldType) {\n    if (frozen) {\n      throw new IllegalArgumentException(\"Cannot call addField() when MemoryIndex is frozen\");\n    }\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"fieldName must not be null\");\n    }\n    Info info = fields.get(fieldName);\n    if (info == null) {\n      fields.put(fieldName, info = new Info(createFieldInfo(fieldName, fields.size(), fieldType), byteBlockPool));\n    }\n    if (fieldType.pointDataDimensionCount() != info.fieldInfo.getPointDataDimensionCount()) {\n      if (fieldType.pointDataDimensionCount() > 0)\n        info.fieldInfo.setPointDimensions(fieldType.pointDataDimensionCount(), fieldType.pointIndexDimensionCount(), fieldType.pointNumBytes());\n    }\n    if (fieldType.docValuesType() != info.fieldInfo.getDocValuesType()) {\n      if (fieldType.docValuesType() != DocValuesType.NONE)\n        info.fieldInfo.setDocValuesType(fieldType.docValuesType());\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"89b68d01c34172936f1aa2a8b9abf0e1bc68415f":["f6652c943595e92c187ee904c382863013eae28f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89b68d01c34172936f1aa2a8b9abf0e1bc68415f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}