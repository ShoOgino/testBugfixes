{"path":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testNumeric().mjava","commits":[{"id":"8125b3a4d9a36fbe21bed97131a2462e33141908","date":1449159103,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testNumeric().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNumeric() throws Exception {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n    String[] queries = {\"12345\", \"foo:12345\", \"12345 67890\", \"foo:(12345 67890)\", \"foo:(life 67890)\", \"12345 life\",\n        \"+12345 +life\", \"-12345 life\"};\n    int[] tokensToExpect = {1, 1, 2, 2, 2, 2, 2, 2};\n    for (int i = 0; i < queries.length; i++) {\n      Collection<Token> tokens = converter.convert(queries[i]);\n      assertTrue(\"tokens Size: \" + tokens.size() + \" is not: \" + tokensToExpect[i], tokens.size() == tokensToExpect[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testNumeric().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellingQueryConverterTest#testNumeric().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"rawtypes\"})\n  public void testNumeric() throws Exception {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n    String[] queries = {\"12345\", \"foo:12345\", \"12345 67890\", \"foo:(12345 67890)\", \"foo:(life 67890)\", \"12345 life\",\n        \"+12345 +life\", \"-12345 life\"};\n    int[] tokensToExpect = {1, 1, 2, 2, 2, 2, 2, 2};\n    for (int i = 0; i < queries.length; i++) {\n      Collection<Token> tokens = converter.convert(queries[i]);\n      assertTrue(\"tokens Size: \" + tokens.size() + \" is not: \" + tokensToExpect[i], tokens.size() == tokensToExpect[i]);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNumeric() throws Exception {\n    SpellingQueryConverter converter = new SpellingQueryConverter();\n    converter.init(new NamedList());\n    converter.setAnalyzer(new WhitespaceAnalyzer());\n    String[] queries = {\"12345\", \"foo:12345\", \"12345 67890\", \"foo:(12345 67890)\", \"foo:(life 67890)\", \"12345 life\",\n        \"+12345 +life\", \"-12345 life\"};\n    int[] tokensToExpect = {1, 1, 2, 2, 2, 2, 2, 2};\n    for (int i = 0; i < queries.length; i++) {\n      Collection<Token> tokens = converter.convert(queries[i]);\n      assertTrue(\"tokens Size: \" + tokens.size() + \" is not: \" + tokensToExpect[i], tokens.size() == tokensToExpect[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8125b3a4d9a36fbe21bed97131a2462e33141908":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["8125b3a4d9a36fbe21bed97131a2462e33141908"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"8125b3a4d9a36fbe21bed97131a2462e33141908":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8125b3a4d9a36fbe21bed97131a2462e33141908"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}