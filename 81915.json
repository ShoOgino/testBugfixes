{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          boolean absolute = metaDataUpto == 0;\n          assert limit > 0;\n\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            termState.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata \n            for (int i = 0; i < longsSize; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, termState, absolute);\n\n            metaDataUpto++;\n            absolute = false;\n          }\n          termState.termBlockOrd = metaDataUpto;\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          boolean absolute = metaDataUpto == 0;\n          assert limit > 0;\n\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            termState.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata \n            for (int i = 0; i < longsSize; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, termState, absolute);\n\n            metaDataUpto++;\n            absolute = false;\n          }\n          termState.termBlockOrd = metaDataUpto;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d9d581b0b317125672636196fa3c73bbcabc56","date":1400178129,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","sourceNew":null,"sourceOld":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          boolean absolute = metaDataUpto == 0;\n          assert limit > 0;\n\n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n\n            // stats\n            termState.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n            // metadata \n            for (int i = 0; i < longsSize; i++) {\n              longs[i] = bytesReader.readVLong();\n            }\n            postingsReader.decodeTerm(longs, bytesReader, fieldInfo, termState, absolute);\n\n            metaDataUpto++;\n            absolute = false;\n          }\n          termState.termBlockOrd = metaDataUpto;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"47d9d581b0b317125672636196fa3c73bbcabc56":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["47d9d581b0b317125672636196fa3c73bbcabc56"],"47d9d581b0b317125672636196fa3c73bbcabc56":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["47d9d581b0b317125672636196fa3c73bbcabc56","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}