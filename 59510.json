{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","sourceNew":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    try {\n      Benchmark benchmark = execBenchmark(algLines);\n      assertTrue(\"CountingHighlighterTest should have thrown an exception\", false);\n      assertNotNull(benchmark); // (avoid compile warning on unused variable)\n    } catch (Exception e) {\n      assertTrue(true);\n    }\n  }\n\n","sourceOld":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    try {\n      Benchmark benchmark = execBenchmark(algLines);\n      assertTrue(\"CountingHighlighterTest should have thrown an exception\", false);\n      assertNotNull(benchmark); // (avoid compile warning on unused variable)\n    } catch (Exception e) {\n      assertTrue(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","sourceNew":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    try {\n      Benchmark benchmark = execBenchmark(algLines);\n      assertTrue(\"CountingHighlighterTest should have thrown an exception\", false);\n      assertNotNull(benchmark); // (avoid compile warning on unused variable)\n    } catch (Exception e) {\n      assertTrue(true);\n    }\n  }\n\n","sourceOld":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    try {\n      Benchmark benchmark = execBenchmark(algLines);\n      assertTrue(\"CountingHighlighterTest should have thrown an exception\", false);\n      assertNotNull(benchmark); // (avoid compile warning on unused variable)\n    } catch (Exception e) {\n      assertTrue(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","sourceNew":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    try {\n      Benchmark benchmark = execBenchmark(algLines);\n      assertTrue(\"CountingHighlighterTest should have thrown an exception\", false);\n      assertNotNull(benchmark); // (avoid compile warning on unused variable)\n    } catch (Exception e) {\n      assertTrue(true);\n    }\n  }\n\n","sourceOld":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    try {\n      Benchmark benchmark = execBenchmark(algLines);\n      assertTrue(\"CountingHighlighterTest should have thrown an exception\", false);\n      assertNotNull(benchmark); // (avoid compile warning on unused variable)\n    } catch (Exception e) {\n      assertTrue(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","sourceNew":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    expectThrows(Exception.class, () -> {\n      execBenchmark(algLines);\n    });\n  }\n\n","sourceOld":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    try {\n      Benchmark benchmark = execBenchmark(algLines);\n      assertTrue(\"CountingHighlighterTest should have thrown an exception\", false);\n      assertNotNull(benchmark); // (avoid compile warning on unused variable)\n    } catch (Exception e) {\n      assertTrue(true);\n    }\n  }\n\n","bugFix":["b26918d056f1bcc0ae9accb3bf0cb2b87803fe64","cef13333102a2c287543f5141a0f24ccca005b2e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"141e140cd2260284f58cb5cf2b17da4027e82094","date":1475848631,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","sourceNew":null,"sourceOld":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    expectThrows(Exception.class, () -> {\n      execBenchmark(algLines);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlightingNoTvNoStore().mjava","sourceNew":null,"sourceOld":"  public void testHighlightingNoTvNoStore() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=false\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 1000\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    expectThrows(Exception.class, () -> {\n      execBenchmark(algLines);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"141e140cd2260284f58cb5cf2b17da4027e82094":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","141e140cd2260284f58cb5cf2b17da4027e82094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["141e140cd2260284f58cb5cf2b17da4027e82094"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05fe562aa248790944d43cdd478f512572835ba0":["141e140cd2260284f58cb5cf2b17da4027e82094","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["05fe562aa248790944d43cdd478f512572835ba0"],"141e140cd2260284f58cb5cf2b17da4027e82094":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}