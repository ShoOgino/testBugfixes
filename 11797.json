{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[]).mjava","commits":[{"id":"56374313ec4613df1f728772dedcff8bb3cd419d","date":1382027245,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[],int).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers) {\n    super(weight, subScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   * @param numScorers\n   *          The actual number of scorers to iterate on. Note that the array's\n   *          length may be larger than the actual number of scorers.\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers, int numScorers) {\n    super(weight, subScorers, numScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a74e723ad6f1491f36039f9fe6af13a530f8135d","date":1400774466,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[]).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, Scorer[] subScorers) {\n    super(weight, subScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  public DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier,\n      Scorer[] subScorers) {\n    super(weight, subScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","bugFix":["e5e679b9c5f68f1f331de920ae8366af75b44060","56374313ec4613df1f728772dedcff8bb3cd419d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#DisjunctionMaxScorer(Weight,float,Scorer[]).mjava","sourceNew":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, List<Scorer> subScorers, boolean needsScores) {\n    super(weight, subScorers, needsScores);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of DisjunctionMaxScorer\n   * \n   * @param weight\n   *          The Weight to be used.\n   * @param tieBreakerMultiplier\n   *          Multiplier applied to non-maximum-scoring subqueries for a\n   *          document as they are summed into the result.\n   * @param subScorers\n   *          The sub scorers this Scorer should iterate on\n   */\n  DisjunctionMaxScorer(Weight weight, float tieBreakerMultiplier, Scorer[] subScorers) {\n    super(weight, subScorers);\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["56374313ec4613df1f728772dedcff8bb3cd419d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56374313ec4613df1f728772dedcff8bb3cd419d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"]},"commit2Childs":{"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56374313ec4613df1f728772dedcff8bb3cd419d"],"56374313ec4613df1f728772dedcff8bb3cd419d":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}