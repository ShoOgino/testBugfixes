{"path":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2639ce99440b7a55fa879228f7e66c337443e77a","date":1317007442,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharFilter cs = factory.create(\n          new StringReader( BLOCK ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharFilter cs = factory.create(\n          new StringReader( BLOCK ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharFilter cs = factory.create(\n          new StringReader( BLOCK ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharFilter cs = factory.create(\n          new StringReader( BLOCK ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharFilter cs = factory.create(\n          new StringReader( BLOCK ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharFilter cs = factory.create(\n          new StringReader( BLOCK ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":null,"sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#test1block1matchSameLength().mjava","sourceNew":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharFilter cs = factory.create(\n          new StringReader( BLOCK ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","sourceOld":"  // 012345678\n  // aa bb cc\n  // aa#bb#cc\n  public void test1block1matchSameLength() throws IOException {\n    final String BLOCK = \"aa bb cc\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1#$2#$3\");\n    factory.init(args);\n    CharFilter cs = factory.create(\n          new StringReader( BLOCK ) );\n    TokenStream ts = new MockTokenizer(cs, MockTokenizer.WHITESPACE, false);\n    assertTokenStreamContents(ts,\n        new String[] { \"aa#bb#cc\" },\n        new int[] { 0 },\n        new int[] { 8 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2639ce99440b7a55fa879228f7e66c337443e77a":["c26f00b574427b55127e869b935845554afde1fa"],"aba371508186796cc6151d8223a5b4e16d02e26e":["2639ce99440b7a55fa879228f7e66c337443e77a","5a1a22b1ad88b436661458df567f3fdb446392a4"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["2639ce99440b7a55fa879228f7e66c337443e77a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2639ce99440b7a55fa879228f7e66c337443e77a","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["fc706b1e03a539d44d99998108feb684bb44cbb2","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"2639ce99440b7a55fa879228f7e66c337443e77a":["aba371508186796cc6151d8223a5b4e16d02e26e","fc706b1e03a539d44d99998108feb684bb44cbb2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2639ce99440b7a55fa879228f7e66c337443e77a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}