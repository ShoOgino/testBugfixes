{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testBoostsSimple().mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", new Float(5));\n    boosts.put(\"t\", new Float(10));\n    String[] fields = { \"b\", \"t\" };\n    OriginalQueryParserHelper mfqp = new OriginalQueryParserHelper();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testBoostsSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testBoostsSimple().mjava","sourceNew":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", new Float(5));\n    boosts.put(\"t\", new Float(10));\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","sourceOld":"  public void testBoostsSimple() throws Exception {\n    Map boosts = new HashMap();\n    boosts.put(\"b\", new Float(5));\n    boosts.put(\"t\", new Float(10));\n    String[] fields = { \"b\", \"t\" };\n    OriginalQueryParserHelper mfqp = new OriginalQueryParserHelper();\n    mfqp.setMultiFields(fields);\n    mfqp.setFieldsBoost(boosts);\n    mfqp.setAnalyzer(new StandardAnalyzer());\n\n    // Check for simple\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one^5.0 t:one^10.0\", q.toString());\n\n    // Check for AND\n    q = mfqp.parse(\"one AND two\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0)\", q\n        .toString());\n\n    // Check for OR\n    q = mfqp.parse(\"one OR two\", null);\n    assertEquals(\"(b:one^5.0 t:one^10.0) (b:two^5.0 t:two^10.0)\", q.toString());\n\n    // Check for AND and a field\n    q = mfqp.parse(\"one AND two AND foo:test\", null);\n    assertEquals(\"+(b:one^5.0 t:one^10.0) +(b:two^5.0 t:two^10.0) +foo:test\", q\n        .toString());\n\n    q = mfqp.parse(\"one^3 AND two^4\", null);\n    assertEquals(\"+((b:one^5.0 t:one^10.0)^3.0) +((b:two^5.0 t:two^10.0)^4.0)\",\n        q.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}