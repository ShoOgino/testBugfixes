{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(String.join(\",\", nodes))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n    // equivalent to maxShardsPerNode=2\n    String commands =  \"{ set-cluster-policy: [ {replica: '<3', shard: '#ANY', node: '#ANY', strict: true} ] }\";\n    cluster.getSolrClient().request(CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"No node can satisfy the rules\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard4\")\n          .setNodeSet(String.join(\",\", nodes))\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"No node can satisfy the rules\"));\n\n//    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e3 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e3.getMessage().contains(\"No node can satisfy the rules\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 3, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty three slices\", slices.size(), 3);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(String.join(\",\", nodes))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of eligible live nodes\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  @Ignore // Since maxShardsPerNode was removed in SOLR-12847 and autoscaling framework was removed in SOLR-14656, this test is broken\n  public void testAddShard() throws Exception {\n    // equivalent to maxShardsPerNode=2\n    // String commands =  \"{ set-cluster-policy: [ {replica: '<3', shard: '#ANY', node: '#ANY', strict: true} ] }\";\n    // cluster.getSolrClient().request(CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"No node can satisfy the rules\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard4\")\n          .setNodeSet(String.join(\",\", nodes))\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"No node can satisfy the rules\"));\n\n//    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e3 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e3.getMessage().contains(\"No node can satisfy the rules\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 3, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty three slices\", slices.size(), 3);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n    // equivalent to maxShardsPerNode=2\n    String commands =  \"{ set-cluster-policy: [ {replica: '<3', shard: '#ANY', node: '#ANY', strict: true} ] }\";\n    cluster.getSolrClient().request(CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"No node can satisfy the rules\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard4\")\n          .setNodeSet(String.join(\",\", nodes))\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"No node can satisfy the rules\"));\n\n//    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e3 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e3.getMessage().contains(\"No node can satisfy the rules\"));\n\n    // And finally, ensure that there are all the replicas we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 3, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty three slices\", slices.size(), 3);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["b94236357aaa22b76c10629851fe4e376e0cea82","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deea3439de4f487ae553317e50d5d641ca386374":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["0ac6494315d04f68950d2f00f5436b4861bcd467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["0ac6494315d04f68950d2f00f5436b4861bcd467"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}