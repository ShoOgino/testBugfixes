{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827","date":1349788355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      version = readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      version = readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, String segmentSuffix, IOContext context)\n    throws IOException {\n    final IndexInput in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n\n    try {\n      \n      version = readHeader(in);\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(in, fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      version = readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a45bec74b98f6fc05f52770cfb425739e6563960":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"5bfcba4bd0c8918a6db1993d4e7818f08cc2a827":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["5bfcba4bd0c8918a6db1993d4e7818f08cc2a827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}