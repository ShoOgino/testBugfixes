{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc = -1;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc = -1;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc = -1;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc = -1;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc = -1;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc = -1;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09644855fe79c27cf261552509561b8ce34c4c7","date":1312056839,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc = -1;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e","date":1313005033,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter(core).addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter().addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c518d12136e15c9de6fa3d2c4bf5add07311a685","date":1313718511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter(core).addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter(core).addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (rc == 1 && softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98fa1aca20a29db3d3d1a867eeed78f65448febe","date":1317919012,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      solrCoreState.getIndexWriter(core).addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      indexWriterProvider.getIndexWriter(core).addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08bcaef9e931052e4ca24133a89cc6aefaf61829","date":1342469326,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(readers);\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      solrCoreState.getIndexWriter(core).addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":["cf4e1373c1497f3587ee815b1bddda10850a0f37"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(readers);\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      solrCoreState.getIndexWriter(core).addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(readers);\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      solrCoreState.getIndexWriter(core).addIndexes(readers);\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf4e1373c1497f3587ee815b1bddda10850a0f37","date":1375195916,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(readers.toArray(new IndexReader[readers.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(readers);\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":["7a71a0b2d4be2299a163f60626729852d81a8e02","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(readers.toArray(new IndexReader[readers.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    IndexReader[] readers = cmd.readers;\n    if (readers != null && readers.length > 0) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(readers);\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<LeafReader> leaves = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          leaves.add(leaf.reader());\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(leaves.toArray(new LeafReader[leaves.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(readers.toArray(new IndexReader[readers.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":["cf4e1373c1497f3587ee815b1bddda10850a0f37"],"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<LeafReader> leaves = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          leaves.add(leaf.reader());\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(leaves.toArray(new LeafReader[leaves.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","date":1469530061,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.increment();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.increment();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.increment();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.incrementAndGet();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c21eddb989aed5815d30ea4c8abf481ace8ad","date":1488795043,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.mark();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.increment();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"482ca6c86d7073e3c19096bdc74fe0e73da4554a","date":1576010743,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    TestInjection.injectDirectUpdateLatch();\n    mergeIndexesCommands.mark();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.mark();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    TestInjection.injectDirectUpdateLatch();\n    mergeIndexesCommands.mark();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    mergeIndexesCommands.mark();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#mergeIndexes(MergeIndexesCommand).mjava","sourceNew":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    TestInjection.injectDirectUpdateLatch();\n    mergeIndexesCommands.mark();\n    int rc;\n\n    log.info(\"start {}\", cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","sourceOld":"  @Override\n  public int mergeIndexes(MergeIndexesCommand cmd) throws IOException {\n    TestInjection.injectDirectUpdateLatch();\n    mergeIndexesCommands.mark();\n    int rc;\n\n    log.info(\"start \" + cmd);\n    \n    List<DirectoryReader> readers = cmd.readers;\n    if (readers != null && readers.size() > 0) {\n      List<CodecReader> mergeReaders = new ArrayList<>();\n      for (DirectoryReader reader : readers) {\n        for (LeafReaderContext leaf : reader.leaves()) {\n          mergeReaders.add(SlowCodecReaderWrapper.wrap(leaf.reader()));\n        }\n      }\n      RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n      try {\n        iw.get().addIndexes(mergeReaders.toArray(new CodecReader[mergeReaders.size()]));\n      } finally {\n        iw.decref();\n      }\n      rc = 1;\n    } else {\n      rc = 0;\n    }\n    log.info(\"end_mergeIndexes\");\n\n    // TODO: consider soft commit issues\n    if (rc == 1 && commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (rc == 1 && softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n\n    return rc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b09644855fe79c27cf261552509561b8ce34c4c7":["c26f00b574427b55127e869b935845554afde1fa"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["08bcaef9e931052e4ca24133a89cc6aefaf61829","cf4e1373c1497f3587ee815b1bddda10850a0f37"],"740d649f013f07efbeb73ca854f106c60166e7c0":["482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["cf4e1373c1497f3587ee815b1bddda10850a0f37"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["b09644855fe79c27cf261552509561b8ce34c4c7"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"98fa1aca20a29db3d3d1a867eeed78f65448febe":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["505bff044e47a553f461b6f4484d1d08faf4ac85","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"a229cb50768e988c50a2106bdae3a92154f428bf":["e52c21eddb989aed5815d30ea4c8abf481ace8ad","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"aba371508186796cc6151d8223a5b4e16d02e26e":["98fa1aca20a29db3d3d1a867eeed78f65448febe","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf4e1373c1497f3587ee815b1bddda10850a0f37":["08bcaef9e931052e4ca24133a89cc6aefaf61829"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["98fa1aca20a29db3d3d1a867eeed78f65448febe","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["505bff044e47a553f461b6f4484d1d08faf4ac85","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"b09644855fe79c27cf261552509561b8ce34c4c7":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["740d649f013f07efbeb73ca854f106c60166e7c0","a229cb50768e988c50a2106bdae3a92154f428bf"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["b09644855fe79c27cf261552509561b8ce34c4c7"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e52c21eddb989aed5815d30ea4c8abf481ace8ad","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"98fa1aca20a29db3d3d1a867eeed78f65448febe":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"cf4e1373c1497f3587ee815b1bddda10850a0f37":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["482ca6c86d7073e3c19096bdc74fe0e73da4554a","a229cb50768e988c50a2106bdae3a92154f428bf"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","aba371508186796cc6151d8223a5b4e16d02e26e","cf4e1373c1497f3587ee815b1bddda10850a0f37","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a229cb50768e988c50a2106bdae3a92154f428bf","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}