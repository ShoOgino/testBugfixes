{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(BytesRef).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean seekExact(final BytesRef target) throws IOException {\n\n    if (fr.index == null) {\n      throw new IllegalStateException(\"terms index was not loaded\");\n    }\n\n    if (term.bytes.length <= target.length) {\n      term.bytes = ArrayUtil.grow(term.bytes, 1+target.length);\n    }\n\n    assert clearEOF();\n\n    /*\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.seekExact seg=\" + fr.parent.segment + \" target=\" + fr.fieldInfo.name + \":\" + brToString(target) + \" current=\" + brToString(term) + \" (exists?=\" + termExists + \") validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n    */\n\n    FST.Arc<Output> arc;\n    int targetUpto;\n    Output output;\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    if (positioned && currentFrame != staticFrame) {\n\n      // We are already seek'd; find the common\n      // prefix of new seek term vs current term and\n      // re-use the corresponding seek state.  For\n      // example, if app first seeks to foobar, then\n      // seeks to foobaz, we can re-use the seek state\n      // for the first 5 bytes.\n\n      // if (DEBUG) {\n      //   System.out.println(\"  re-use current seek state validIndexPrefix=\" + validIndexPrefix);\n      // }\n\n      arc = arcs[0];\n      assert arc.isFinal();\n      output = arc.output;\n      targetUpto = 0;\n          \n      OrdsSegmentTermsEnumFrame lastFrame = stack[0];\n      assert validIndexPrefix <= term.length;\n\n      final int targetLimit = Math.min(target.length, validIndexPrefix);\n\n      int cmp = 0;\n\n      // TODO: reverse vLong byte order for better FST\n      // prefix output sharing\n\n      // First compare up to valid seek frames:\n      while (targetUpto < targetLimit) {\n        cmp = (term.bytes[targetUpto]&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n        // if (DEBUG) {\n        //    System.out.println(\"    cycle targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\"   + \" arc.output=\" + arc.output + \" output=\" + output);\n        // }\n        if (cmp != 0) {\n          break;\n        }\n        arc = arcs[1+targetUpto];\n        assert arc.label == (target.bytes[target.offset + targetUpto] & 0xFF): \"arc.label=\" + (char) arc.label + \" targetLabel=\" + (char) (target.bytes[target.offset + targetUpto] & 0xFF);\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          lastFrame = stack[1+lastFrame.ord];\n        }\n        targetUpto++;\n      }\n\n      if (cmp == 0) {\n        final int targetUptoMid = targetUpto;\n\n        // Second compare the rest of the term, but\n        // don't save arc/output/frame; we only do this\n        // to find out if the target term is before,\n        // equal or after the current term\n        final int targetLimit2 = Math.min(target.length, term.length);\n        while (targetUpto < targetLimit2) {\n          cmp = (term.bytes[targetUpto]&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n          // if (DEBUG) {\n          //    System.out.println(\"    cycle2 targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\");\n          // }\n          if (cmp != 0) {\n            break;\n          }\n          targetUpto++;\n        }\n\n        if (cmp == 0) {\n          cmp = term.length - target.length;\n        }\n        targetUpto = targetUptoMid;\n      }\n\n      if (cmp < 0) {\n        // Common case: target term is after current\n        // term, ie, app is seeking multiple terms\n        // in sorted order\n        // if (DEBUG) {\n        //   System.out.println(\"  target is after current (shares prefixLen=\" + targetUpto + \"); frame.ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n\n      } else if (cmp > 0) {\n        // Uncommon case: target term\n        // is before current term; this means we can\n        // keep the currentFrame but we must rewind it\n        // (so we scan from the start)\n        targetBeforeCurrentLength = lastFrame.ord;\n        // if (DEBUG) {\n        //   System.out.println(\"  target is before current (shares prefixLen=\" + targetUpto + \"); rewind frame ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n        currentFrame.rewind();\n      } else {\n        // Target is exactly the same as current term\n        assert term.length == target.length;\n        if (termExists) {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current; return true\");\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current but term doesn't exist\");\n          // }\n        }\n        //validIndexPrefix = currentFrame.depth;\n        //term.length = target.length;\n        //return termExists;\n      }\n\n    } else {\n\n      targetBeforeCurrentLength = -1;\n      arc = fr.index.getFirstArc(arcs[0]);\n\n      // Empty string prefix must have an output (block) in the index!\n      assert arc.isFinal();\n      assert arc.output != null;\n\n      // if (DEBUG) {\n      //   System.out.println(\"    no seek state; push root frame\");\n      // }\n\n      output = arc.output;\n\n      currentFrame = staticFrame;\n\n      //term.length = 0;\n      targetUpto = 0;\n      currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), 0);\n    }\n\n    positioned = true;\n\n    // if (DEBUG) {\n    //   System.out.println(\"  start index loop targetUpto=\" + targetUpto + \" output=\" + output + \" currentFrame.ord=\" + currentFrame.ord + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength);\n    // }\n\n    // We are done sharing the common prefix with the incoming target and where we are currently seek'd; now continue walking the index:\n    while (targetUpto < target.length) {\n\n      final int targetLabel = target.bytes[target.offset + targetUpto] & 0xFF;\n\n      final FST.Arc<Output> nextArc = fr.index.findTargetArc(targetLabel, arc, getArc(1+targetUpto), fstReader);\n\n      if (nextArc == null) {\n\n        // Index is exhausted\n        // if (DEBUG) {\n        //   System.out.println(\"    index: index exhausted label=\" + ((char) targetLabel) + \" \" + toHex(targetLabel));\n        // }\n            \n        validIndexPrefix = currentFrame.prefix;\n        //validIndexPrefix = targetUpto;\n\n        currentFrame.scanToFloorFrame(target);\n\n        if (!currentFrame.hasTerms) {\n          termExists = false;\n          term.bytes[targetUpto] = (byte) targetLabel;\n          term.length = 1+targetUpto;\n          // if (DEBUG) {\n          //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n\n        currentFrame.loadBlock();\n\n        final SeekStatus result = currentFrame.scanToTerm(target, true);            \n        if (result == SeekStatus.FOUND) {\n          // if (DEBUG) {\n          //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  got \" + result + \"; return NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n      } else {\n        // Follow this arc\n        arc = nextArc;\n        term.bytes[targetUpto] = (byte) targetLabel;\n        // Aggregate output as we go:\n        assert arc.output != null;\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    index: follow label=\" + toHex(target.bytes[target.offset + targetUpto]&0xff) + \" arc.output=\" + arc.output + \" arc.nfo=\" + arc.nextFinalOutput);\n        // }\n        targetUpto++;\n\n        if (arc.isFinal()) {\n          //if (DEBUG) System.out.println(\"    arc is final!\");\n          currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), targetUpto);\n          //if (DEBUG) System.out.println(\"    curFrame.ord=\" + currentFrame.ord + \" hasTerms=\" + currentFrame.hasTerms);\n        }\n      }\n    }\n\n    //validIndexPrefix = targetUpto;\n    validIndexPrefix = currentFrame.prefix;\n\n    currentFrame.scanToFloorFrame(target);\n\n    // Target term is entirely contained in the index:\n    if (!currentFrame.hasTerms) {\n      termExists = false;\n      term.length = targetUpto;\n      // if (DEBUG) {\n      //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n      // }\n      return false;\n    }\n\n    currentFrame.loadBlock();\n\n    final SeekStatus result = currentFrame.scanToTerm(target, true);            \n    if (result == SeekStatus.FOUND) {\n      // if (DEBUG) {\n      //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n      // }\n      return true;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  got result \" + result + \"; return NOT_FOUND term=\" + term.utf8ToString());\n      // }\n\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(BytesRef).mjava","sourceNew":"  @Override\n  public boolean seekExact(final BytesRef target) throws IOException {\n\n    if (fr.index == null) {\n      throw new IllegalStateException(\"terms index was not loaded\");\n    }\n\n    term.grow(1+target.length);\n\n    assert clearEOF();\n\n    /*\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.seekExact seg=\" + fr.parent.segment + \" target=\" + fr.fieldInfo.name + \":\" + brToString(target) + \" current=\" + brToString(term) + \" (exists?=\" + termExists + \") validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n    */\n\n    FST.Arc<Output> arc;\n    int targetUpto;\n    Output output;\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    if (positioned && currentFrame != staticFrame) {\n\n      // We are already seek'd; find the common\n      // prefix of new seek term vs current term and\n      // re-use the corresponding seek state.  For\n      // example, if app first seeks to foobar, then\n      // seeks to foobaz, we can re-use the seek state\n      // for the first 5 bytes.\n\n      // if (DEBUG) {\n      //   System.out.println(\"  re-use current seek state validIndexPrefix=\" + validIndexPrefix);\n      // }\n\n      arc = arcs[0];\n      assert arc.isFinal();\n      output = arc.output;\n      targetUpto = 0;\n          \n      OrdsSegmentTermsEnumFrame lastFrame = stack[0];\n      assert validIndexPrefix <= term.length();\n\n      final int targetLimit = Math.min(target.length, validIndexPrefix);\n\n      int cmp = 0;\n\n      // TODO: reverse vLong byte order for better FST\n      // prefix output sharing\n\n      // First compare up to valid seek frames:\n      while (targetUpto < targetLimit) {\n        cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n        // if (DEBUG) {\n        //    System.out.println(\"    cycle targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\"   + \" arc.output=\" + arc.output + \" output=\" + output);\n        // }\n        if (cmp != 0) {\n          break;\n        }\n        arc = arcs[1+targetUpto];\n        assert arc.label == (target.bytes[target.offset + targetUpto] & 0xFF): \"arc.label=\" + (char) arc.label + \" targetLabel=\" + (char) (target.bytes[target.offset + targetUpto] & 0xFF);\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          lastFrame = stack[1+lastFrame.ord];\n        }\n        targetUpto++;\n      }\n\n      if (cmp == 0) {\n        final int targetUptoMid = targetUpto;\n\n        // Second compare the rest of the term, but\n        // don't save arc/output/frame; we only do this\n        // to find out if the target term is before,\n        // equal or after the current term\n        final int targetLimit2 = Math.min(target.length, term.length());\n        while (targetUpto < targetLimit2) {\n          cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n          // if (DEBUG) {\n          //    System.out.println(\"    cycle2 targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\");\n          // }\n          if (cmp != 0) {\n            break;\n          }\n          targetUpto++;\n        }\n\n        if (cmp == 0) {\n          cmp = term.length() - target.length;\n        }\n        targetUpto = targetUptoMid;\n      }\n\n      if (cmp < 0) {\n        // Common case: target term is after current\n        // term, ie, app is seeking multiple terms\n        // in sorted order\n        // if (DEBUG) {\n        //   System.out.println(\"  target is after current (shares prefixLen=\" + targetUpto + \"); frame.ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n\n      } else if (cmp > 0) {\n        // Uncommon case: target term\n        // is before current term; this means we can\n        // keep the currentFrame but we must rewind it\n        // (so we scan from the start)\n        targetBeforeCurrentLength = lastFrame.ord;\n        // if (DEBUG) {\n        //   System.out.println(\"  target is before current (shares prefixLen=\" + targetUpto + \"); rewind frame ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n        currentFrame.rewind();\n      } else {\n        // Target is exactly the same as current term\n        assert term.length() == target.length;\n        if (termExists) {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current; return true\");\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current but term doesn't exist\");\n          // }\n        }\n        //validIndexPrefix = currentFrame.depth;\n        //term.length = target.length;\n        //return termExists;\n      }\n\n    } else {\n\n      targetBeforeCurrentLength = -1;\n      arc = fr.index.getFirstArc(arcs[0]);\n\n      // Empty string prefix must have an output (block) in the index!\n      assert arc.isFinal();\n      assert arc.output != null;\n\n      // if (DEBUG) {\n      //   System.out.println(\"    no seek state; push root frame\");\n      // }\n\n      output = arc.output;\n\n      currentFrame = staticFrame;\n\n      //term.length = 0;\n      targetUpto = 0;\n      currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), 0);\n    }\n\n    positioned = true;\n\n    // if (DEBUG) {\n    //   System.out.println(\"  start index loop targetUpto=\" + targetUpto + \" output=\" + output + \" currentFrame.ord=\" + currentFrame.ord + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength);\n    // }\n\n    // We are done sharing the common prefix with the incoming target and where we are currently seek'd; now continue walking the index:\n    while (targetUpto < target.length) {\n\n      final int targetLabel = target.bytes[target.offset + targetUpto] & 0xFF;\n\n      final FST.Arc<Output> nextArc = fr.index.findTargetArc(targetLabel, arc, getArc(1+targetUpto), fstReader);\n\n      if (nextArc == null) {\n\n        // Index is exhausted\n        // if (DEBUG) {\n        //   System.out.println(\"    index: index exhausted label=\" + ((char) targetLabel) + \" \" + toHex(targetLabel));\n        // }\n            \n        validIndexPrefix = currentFrame.prefix;\n        //validIndexPrefix = targetUpto;\n\n        currentFrame.scanToFloorFrame(target);\n\n        if (!currentFrame.hasTerms) {\n          termExists = false;\n          term.setByteAt(targetUpto, (byte) targetLabel);\n          term.setLength(1+targetUpto);\n          // if (DEBUG) {\n          //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n\n        currentFrame.loadBlock();\n\n        final SeekStatus result = currentFrame.scanToTerm(target, true);            \n        if (result == SeekStatus.FOUND) {\n          // if (DEBUG) {\n          //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  got \" + result + \"; return NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n      } else {\n        // Follow this arc\n        arc = nextArc;\n        term.setByteAt(targetUpto, (byte) targetLabel);\n        // Aggregate output as we go:\n        assert arc.output != null;\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    index: follow label=\" + toHex(target.bytes[target.offset + targetUpto]&0xff) + \" arc.output=\" + arc.output + \" arc.nfo=\" + arc.nextFinalOutput);\n        // }\n        targetUpto++;\n\n        if (arc.isFinal()) {\n          //if (DEBUG) System.out.println(\"    arc is final!\");\n          currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), targetUpto);\n          //if (DEBUG) System.out.println(\"    curFrame.ord=\" + currentFrame.ord + \" hasTerms=\" + currentFrame.hasTerms);\n        }\n      }\n    }\n\n    //validIndexPrefix = targetUpto;\n    validIndexPrefix = currentFrame.prefix;\n\n    currentFrame.scanToFloorFrame(target);\n\n    // Target term is entirely contained in the index:\n    if (!currentFrame.hasTerms) {\n      termExists = false;\n      term.setLength(targetUpto);\n      // if (DEBUG) {\n      //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n      // }\n      return false;\n    }\n\n    currentFrame.loadBlock();\n\n    final SeekStatus result = currentFrame.scanToTerm(target, true);            \n    if (result == SeekStatus.FOUND) {\n      // if (DEBUG) {\n      //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n      // }\n      return true;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  got result \" + result + \"; return NOT_FOUND term=\" + term.utf8ToString());\n      // }\n\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(final BytesRef target) throws IOException {\n\n    if (fr.index == null) {\n      throw new IllegalStateException(\"terms index was not loaded\");\n    }\n\n    if (term.bytes.length <= target.length) {\n      term.bytes = ArrayUtil.grow(term.bytes, 1+target.length);\n    }\n\n    assert clearEOF();\n\n    /*\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.seekExact seg=\" + fr.parent.segment + \" target=\" + fr.fieldInfo.name + \":\" + brToString(target) + \" current=\" + brToString(term) + \" (exists?=\" + termExists + \") validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n    */\n\n    FST.Arc<Output> arc;\n    int targetUpto;\n    Output output;\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    if (positioned && currentFrame != staticFrame) {\n\n      // We are already seek'd; find the common\n      // prefix of new seek term vs current term and\n      // re-use the corresponding seek state.  For\n      // example, if app first seeks to foobar, then\n      // seeks to foobaz, we can re-use the seek state\n      // for the first 5 bytes.\n\n      // if (DEBUG) {\n      //   System.out.println(\"  re-use current seek state validIndexPrefix=\" + validIndexPrefix);\n      // }\n\n      arc = arcs[0];\n      assert arc.isFinal();\n      output = arc.output;\n      targetUpto = 0;\n          \n      OrdsSegmentTermsEnumFrame lastFrame = stack[0];\n      assert validIndexPrefix <= term.length;\n\n      final int targetLimit = Math.min(target.length, validIndexPrefix);\n\n      int cmp = 0;\n\n      // TODO: reverse vLong byte order for better FST\n      // prefix output sharing\n\n      // First compare up to valid seek frames:\n      while (targetUpto < targetLimit) {\n        cmp = (term.bytes[targetUpto]&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n        // if (DEBUG) {\n        //    System.out.println(\"    cycle targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\"   + \" arc.output=\" + arc.output + \" output=\" + output);\n        // }\n        if (cmp != 0) {\n          break;\n        }\n        arc = arcs[1+targetUpto];\n        assert arc.label == (target.bytes[target.offset + targetUpto] & 0xFF): \"arc.label=\" + (char) arc.label + \" targetLabel=\" + (char) (target.bytes[target.offset + targetUpto] & 0xFF);\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          lastFrame = stack[1+lastFrame.ord];\n        }\n        targetUpto++;\n      }\n\n      if (cmp == 0) {\n        final int targetUptoMid = targetUpto;\n\n        // Second compare the rest of the term, but\n        // don't save arc/output/frame; we only do this\n        // to find out if the target term is before,\n        // equal or after the current term\n        final int targetLimit2 = Math.min(target.length, term.length);\n        while (targetUpto < targetLimit2) {\n          cmp = (term.bytes[targetUpto]&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n          // if (DEBUG) {\n          //    System.out.println(\"    cycle2 targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\");\n          // }\n          if (cmp != 0) {\n            break;\n          }\n          targetUpto++;\n        }\n\n        if (cmp == 0) {\n          cmp = term.length - target.length;\n        }\n        targetUpto = targetUptoMid;\n      }\n\n      if (cmp < 0) {\n        // Common case: target term is after current\n        // term, ie, app is seeking multiple terms\n        // in sorted order\n        // if (DEBUG) {\n        //   System.out.println(\"  target is after current (shares prefixLen=\" + targetUpto + \"); frame.ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n\n      } else if (cmp > 0) {\n        // Uncommon case: target term\n        // is before current term; this means we can\n        // keep the currentFrame but we must rewind it\n        // (so we scan from the start)\n        targetBeforeCurrentLength = lastFrame.ord;\n        // if (DEBUG) {\n        //   System.out.println(\"  target is before current (shares prefixLen=\" + targetUpto + \"); rewind frame ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n        currentFrame.rewind();\n      } else {\n        // Target is exactly the same as current term\n        assert term.length == target.length;\n        if (termExists) {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current; return true\");\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current but term doesn't exist\");\n          // }\n        }\n        //validIndexPrefix = currentFrame.depth;\n        //term.length = target.length;\n        //return termExists;\n      }\n\n    } else {\n\n      targetBeforeCurrentLength = -1;\n      arc = fr.index.getFirstArc(arcs[0]);\n\n      // Empty string prefix must have an output (block) in the index!\n      assert arc.isFinal();\n      assert arc.output != null;\n\n      // if (DEBUG) {\n      //   System.out.println(\"    no seek state; push root frame\");\n      // }\n\n      output = arc.output;\n\n      currentFrame = staticFrame;\n\n      //term.length = 0;\n      targetUpto = 0;\n      currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), 0);\n    }\n\n    positioned = true;\n\n    // if (DEBUG) {\n    //   System.out.println(\"  start index loop targetUpto=\" + targetUpto + \" output=\" + output + \" currentFrame.ord=\" + currentFrame.ord + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength);\n    // }\n\n    // We are done sharing the common prefix with the incoming target and where we are currently seek'd; now continue walking the index:\n    while (targetUpto < target.length) {\n\n      final int targetLabel = target.bytes[target.offset + targetUpto] & 0xFF;\n\n      final FST.Arc<Output> nextArc = fr.index.findTargetArc(targetLabel, arc, getArc(1+targetUpto), fstReader);\n\n      if (nextArc == null) {\n\n        // Index is exhausted\n        // if (DEBUG) {\n        //   System.out.println(\"    index: index exhausted label=\" + ((char) targetLabel) + \" \" + toHex(targetLabel));\n        // }\n            \n        validIndexPrefix = currentFrame.prefix;\n        //validIndexPrefix = targetUpto;\n\n        currentFrame.scanToFloorFrame(target);\n\n        if (!currentFrame.hasTerms) {\n          termExists = false;\n          term.bytes[targetUpto] = (byte) targetLabel;\n          term.length = 1+targetUpto;\n          // if (DEBUG) {\n          //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n\n        currentFrame.loadBlock();\n\n        final SeekStatus result = currentFrame.scanToTerm(target, true);            \n        if (result == SeekStatus.FOUND) {\n          // if (DEBUG) {\n          //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  got \" + result + \"; return NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n      } else {\n        // Follow this arc\n        arc = nextArc;\n        term.bytes[targetUpto] = (byte) targetLabel;\n        // Aggregate output as we go:\n        assert arc.output != null;\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    index: follow label=\" + toHex(target.bytes[target.offset + targetUpto]&0xff) + \" arc.output=\" + arc.output + \" arc.nfo=\" + arc.nextFinalOutput);\n        // }\n        targetUpto++;\n\n        if (arc.isFinal()) {\n          //if (DEBUG) System.out.println(\"    arc is final!\");\n          currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), targetUpto);\n          //if (DEBUG) System.out.println(\"    curFrame.ord=\" + currentFrame.ord + \" hasTerms=\" + currentFrame.hasTerms);\n        }\n      }\n    }\n\n    //validIndexPrefix = targetUpto;\n    validIndexPrefix = currentFrame.prefix;\n\n    currentFrame.scanToFloorFrame(target);\n\n    // Target term is entirely contained in the index:\n    if (!currentFrame.hasTerms) {\n      termExists = false;\n      term.length = targetUpto;\n      // if (DEBUG) {\n      //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n      // }\n      return false;\n    }\n\n    currentFrame.loadBlock();\n\n    final SeekStatus result = currentFrame.scanToTerm(target, true);            \n    if (result == SeekStatus.FOUND) {\n      // if (DEBUG) {\n      //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n      // }\n      return true;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  got result \" + result + \"; return NOT_FOUND term=\" + term.utf8ToString());\n      // }\n\n      return false;\n    }\n  }\n\n","bugFix":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(BytesRef).mjava","sourceNew":"  @Override\n  public boolean seekExact(final BytesRef target) throws IOException {\n\n    if (fr.index == null) {\n      throw new IllegalStateException(\"terms index was not loaded\");\n    }\n\n    term.grow(1+target.length);\n\n    assert clearEOF();\n\n    /*\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.seekExact seg=\" + fr.parent.segment + \" target=\" + fr.fieldInfo.name + \":\" + brToString(target) + \" current=\" + brToString(term) + \" (exists?=\" + termExists + \") validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n    */\n\n    FST.Arc<Output> arc;\n    int targetUpto;\n    Output output;\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    if (positioned && currentFrame != staticFrame) {\n\n      // We are already seek'd; find the common\n      // prefix of new seek term vs current term and\n      // re-use the corresponding seek state.  For\n      // example, if app first seeks to foobar, then\n      // seeks to foobaz, we can re-use the seek state\n      // for the first 5 bytes.\n\n      // if (DEBUG) {\n      //   System.out.println(\"  re-use current seek state validIndexPrefix=\" + validIndexPrefix);\n      // }\n\n      arc = arcs[0];\n      assert arc.isFinal();\n      output = arc.output();\n      targetUpto = 0;\n          \n      OrdsSegmentTermsEnumFrame lastFrame = stack[0];\n      assert validIndexPrefix <= term.length();\n\n      final int targetLimit = Math.min(target.length, validIndexPrefix);\n\n      int cmp = 0;\n\n      // TODO: reverse vLong byte order for better FST\n      // prefix output sharing\n\n      // First compare up to valid seek frames:\n      while (targetUpto < targetLimit) {\n        cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n        // if (DEBUG) {\n        //    System.out.println(\"    cycle targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\"   + \" arc.output=\" + arc.output + \" output=\" + output);\n        // }\n        if (cmp != 0) {\n          break;\n        }\n        arc = arcs[1+targetUpto];\n        assert arc.label() == (target.bytes[target.offset + targetUpto] & 0xFF): \"arc.label=\" + (char) arc.label() + \" targetLabel=\" + (char) (target.bytes[target.offset + targetUpto] & 0xFF);\n        if (arc.output() != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output());\n        }\n        if (arc.isFinal()) {\n          lastFrame = stack[1+lastFrame.ord];\n        }\n        targetUpto++;\n      }\n\n      if (cmp == 0) {\n        final int targetUptoMid = targetUpto;\n\n        // Second compare the rest of the term, but\n        // don't save arc/output/frame; we only do this\n        // to find out if the target term is before,\n        // equal or after the current term\n        final int targetLimit2 = Math.min(target.length, term.length());\n        while (targetUpto < targetLimit2) {\n          cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n          // if (DEBUG) {\n          //    System.out.println(\"    cycle2 targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\");\n          // }\n          if (cmp != 0) {\n            break;\n          }\n          targetUpto++;\n        }\n\n        if (cmp == 0) {\n          cmp = term.length() - target.length;\n        }\n        targetUpto = targetUptoMid;\n      }\n\n      if (cmp < 0) {\n        // Common case: target term is after current\n        // term, ie, app is seeking multiple terms\n        // in sorted order\n        // if (DEBUG) {\n        //   System.out.println(\"  target is after current (shares prefixLen=\" + targetUpto + \"); frame.ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n\n      } else if (cmp > 0) {\n        // Uncommon case: target term\n        // is before current term; this means we can\n        // keep the currentFrame but we must rewind it\n        // (so we scan from the start)\n        targetBeforeCurrentLength = lastFrame.ord;\n        // if (DEBUG) {\n        //   System.out.println(\"  target is before current (shares prefixLen=\" + targetUpto + \"); rewind frame ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n        currentFrame.rewind();\n      } else {\n        // Target is exactly the same as current term\n        assert term.length() == target.length;\n        if (termExists) {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current; return true\");\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current but term doesn't exist\");\n          // }\n        }\n        //validIndexPrefix = currentFrame.depth;\n        //term.length = target.length;\n        //return termExists;\n      }\n\n    } else {\n\n      targetBeforeCurrentLength = -1;\n      arc = fr.index.getFirstArc(arcs[0]);\n\n      // Empty string prefix must have an output (block) in the index!\n      assert arc.isFinal();\n      assert arc.output() != null;\n\n      // if (DEBUG) {\n      //   System.out.println(\"    no seek state; push root frame\");\n      // }\n\n      output = arc.output();\n\n      currentFrame = staticFrame;\n\n      //term.length = 0;\n      targetUpto = 0;\n      currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput()), 0);\n    }\n\n    positioned = true;\n\n    // if (DEBUG) {\n    //   System.out.println(\"  start index loop targetUpto=\" + targetUpto + \" output=\" + output + \" currentFrame.ord=\" + currentFrame.ord + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength);\n    // }\n\n    // We are done sharing the common prefix with the incoming target and where we are currently seek'd; now continue walking the index:\n    while (targetUpto < target.length) {\n\n      final int targetLabel = target.bytes[target.offset + targetUpto] & 0xFF;\n\n      final FST.Arc<Output> nextArc = fr.index.findTargetArc(targetLabel, arc, getArc(1+targetUpto), fstReader);\n\n      if (nextArc == null) {\n\n        // Index is exhausted\n        // if (DEBUG) {\n        //   System.out.println(\"    index: index exhausted label=\" + ((char) targetLabel) + \" \" + toHex(targetLabel));\n        // }\n            \n        validIndexPrefix = currentFrame.prefix;\n        //validIndexPrefix = targetUpto;\n\n        currentFrame.scanToFloorFrame(target);\n\n        if (!currentFrame.hasTerms) {\n          termExists = false;\n          term.setByteAt(targetUpto, (byte) targetLabel);\n          term.setLength(1+targetUpto);\n          // if (DEBUG) {\n          //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n\n        currentFrame.loadBlock();\n\n        final SeekStatus result = currentFrame.scanToTerm(target, true);            \n        if (result == SeekStatus.FOUND) {\n          // if (DEBUG) {\n          //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  got \" + result + \"; return NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n      } else {\n        // Follow this arc\n        arc = nextArc;\n        term.setByteAt(targetUpto, (byte) targetLabel);\n        // Aggregate output as we go:\n        assert arc.output() != null;\n        if (arc.output() != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output());\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    index: follow label=\" + toHex(target.bytes[target.offset + targetUpto]&0xff) + \" arc.output=\" + arc.output + \" arc.nfo=\" + arc.nextFinalOutput);\n        // }\n        targetUpto++;\n\n        if (arc.isFinal()) {\n          //if (DEBUG) System.out.println(\"    arc is final!\");\n          currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput()), targetUpto);\n          //if (DEBUG) System.out.println(\"    curFrame.ord=\" + currentFrame.ord + \" hasTerms=\" + currentFrame.hasTerms);\n        }\n      }\n    }\n\n    //validIndexPrefix = targetUpto;\n    validIndexPrefix = currentFrame.prefix;\n\n    currentFrame.scanToFloorFrame(target);\n\n    // Target term is entirely contained in the index:\n    if (!currentFrame.hasTerms) {\n      termExists = false;\n      term.setLength(targetUpto);\n      // if (DEBUG) {\n      //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n      // }\n      return false;\n    }\n\n    currentFrame.loadBlock();\n\n    final SeekStatus result = currentFrame.scanToTerm(target, true);            \n    if (result == SeekStatus.FOUND) {\n      // if (DEBUG) {\n      //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n      // }\n      return true;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  got result \" + result + \"; return NOT_FOUND term=\" + term.utf8ToString());\n      // }\n\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(final BytesRef target) throws IOException {\n\n    if (fr.index == null) {\n      throw new IllegalStateException(\"terms index was not loaded\");\n    }\n\n    term.grow(1+target.length);\n\n    assert clearEOF();\n\n    /*\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.seekExact seg=\" + fr.parent.segment + \" target=\" + fr.fieldInfo.name + \":\" + brToString(target) + \" current=\" + brToString(term) + \" (exists?=\" + termExists + \") validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n    */\n\n    FST.Arc<Output> arc;\n    int targetUpto;\n    Output output;\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    if (positioned && currentFrame != staticFrame) {\n\n      // We are already seek'd; find the common\n      // prefix of new seek term vs current term and\n      // re-use the corresponding seek state.  For\n      // example, if app first seeks to foobar, then\n      // seeks to foobaz, we can re-use the seek state\n      // for the first 5 bytes.\n\n      // if (DEBUG) {\n      //   System.out.println(\"  re-use current seek state validIndexPrefix=\" + validIndexPrefix);\n      // }\n\n      arc = arcs[0];\n      assert arc.isFinal();\n      output = arc.output;\n      targetUpto = 0;\n          \n      OrdsSegmentTermsEnumFrame lastFrame = stack[0];\n      assert validIndexPrefix <= term.length();\n\n      final int targetLimit = Math.min(target.length, validIndexPrefix);\n\n      int cmp = 0;\n\n      // TODO: reverse vLong byte order for better FST\n      // prefix output sharing\n\n      // First compare up to valid seek frames:\n      while (targetUpto < targetLimit) {\n        cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n        // if (DEBUG) {\n        //    System.out.println(\"    cycle targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\"   + \" arc.output=\" + arc.output + \" output=\" + output);\n        // }\n        if (cmp != 0) {\n          break;\n        }\n        arc = arcs[1+targetUpto];\n        assert arc.label == (target.bytes[target.offset + targetUpto] & 0xFF): \"arc.label=\" + (char) arc.label + \" targetLabel=\" + (char) (target.bytes[target.offset + targetUpto] & 0xFF);\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          lastFrame = stack[1+lastFrame.ord];\n        }\n        targetUpto++;\n      }\n\n      if (cmp == 0) {\n        final int targetUptoMid = targetUpto;\n\n        // Second compare the rest of the term, but\n        // don't save arc/output/frame; we only do this\n        // to find out if the target term is before,\n        // equal or after the current term\n        final int targetLimit2 = Math.min(target.length, term.length());\n        while (targetUpto < targetLimit2) {\n          cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n          // if (DEBUG) {\n          //    System.out.println(\"    cycle2 targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\");\n          // }\n          if (cmp != 0) {\n            break;\n          }\n          targetUpto++;\n        }\n\n        if (cmp == 0) {\n          cmp = term.length() - target.length;\n        }\n        targetUpto = targetUptoMid;\n      }\n\n      if (cmp < 0) {\n        // Common case: target term is after current\n        // term, ie, app is seeking multiple terms\n        // in sorted order\n        // if (DEBUG) {\n        //   System.out.println(\"  target is after current (shares prefixLen=\" + targetUpto + \"); frame.ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n\n      } else if (cmp > 0) {\n        // Uncommon case: target term\n        // is before current term; this means we can\n        // keep the currentFrame but we must rewind it\n        // (so we scan from the start)\n        targetBeforeCurrentLength = lastFrame.ord;\n        // if (DEBUG) {\n        //   System.out.println(\"  target is before current (shares prefixLen=\" + targetUpto + \"); rewind frame ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n        currentFrame.rewind();\n      } else {\n        // Target is exactly the same as current term\n        assert term.length() == target.length;\n        if (termExists) {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current; return true\");\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current but term doesn't exist\");\n          // }\n        }\n        //validIndexPrefix = currentFrame.depth;\n        //term.length = target.length;\n        //return termExists;\n      }\n\n    } else {\n\n      targetBeforeCurrentLength = -1;\n      arc = fr.index.getFirstArc(arcs[0]);\n\n      // Empty string prefix must have an output (block) in the index!\n      assert arc.isFinal();\n      assert arc.output != null;\n\n      // if (DEBUG) {\n      //   System.out.println(\"    no seek state; push root frame\");\n      // }\n\n      output = arc.output;\n\n      currentFrame = staticFrame;\n\n      //term.length = 0;\n      targetUpto = 0;\n      currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), 0);\n    }\n\n    positioned = true;\n\n    // if (DEBUG) {\n    //   System.out.println(\"  start index loop targetUpto=\" + targetUpto + \" output=\" + output + \" currentFrame.ord=\" + currentFrame.ord + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength);\n    // }\n\n    // We are done sharing the common prefix with the incoming target and where we are currently seek'd; now continue walking the index:\n    while (targetUpto < target.length) {\n\n      final int targetLabel = target.bytes[target.offset + targetUpto] & 0xFF;\n\n      final FST.Arc<Output> nextArc = fr.index.findTargetArc(targetLabel, arc, getArc(1+targetUpto), fstReader);\n\n      if (nextArc == null) {\n\n        // Index is exhausted\n        // if (DEBUG) {\n        //   System.out.println(\"    index: index exhausted label=\" + ((char) targetLabel) + \" \" + toHex(targetLabel));\n        // }\n            \n        validIndexPrefix = currentFrame.prefix;\n        //validIndexPrefix = targetUpto;\n\n        currentFrame.scanToFloorFrame(target);\n\n        if (!currentFrame.hasTerms) {\n          termExists = false;\n          term.setByteAt(targetUpto, (byte) targetLabel);\n          term.setLength(1+targetUpto);\n          // if (DEBUG) {\n          //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n\n        currentFrame.loadBlock();\n\n        final SeekStatus result = currentFrame.scanToTerm(target, true);            \n        if (result == SeekStatus.FOUND) {\n          // if (DEBUG) {\n          //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  got \" + result + \"; return NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n      } else {\n        // Follow this arc\n        arc = nextArc;\n        term.setByteAt(targetUpto, (byte) targetLabel);\n        // Aggregate output as we go:\n        assert arc.output != null;\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    index: follow label=\" + toHex(target.bytes[target.offset + targetUpto]&0xff) + \" arc.output=\" + arc.output + \" arc.nfo=\" + arc.nextFinalOutput);\n        // }\n        targetUpto++;\n\n        if (arc.isFinal()) {\n          //if (DEBUG) System.out.println(\"    arc is final!\");\n          currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), targetUpto);\n          //if (DEBUG) System.out.println(\"    curFrame.ord=\" + currentFrame.ord + \" hasTerms=\" + currentFrame.hasTerms);\n        }\n      }\n    }\n\n    //validIndexPrefix = targetUpto;\n    validIndexPrefix = currentFrame.prefix;\n\n    currentFrame.scanToFloorFrame(target);\n\n    // Target term is entirely contained in the index:\n    if (!currentFrame.hasTerms) {\n      termExists = false;\n      term.setLength(targetUpto);\n      // if (DEBUG) {\n      //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n      // }\n      return false;\n    }\n\n    currentFrame.loadBlock();\n\n    final SeekStatus result = currentFrame.scanToTerm(target, true);            \n    if (result == SeekStatus.FOUND) {\n      // if (DEBUG) {\n      //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n      // }\n      return true;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  got result \" + result + \"; return NOT_FOUND term=\" + term.utf8ToString());\n      // }\n\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(BytesRef).mjava","sourceNew":"  @Override\n  public boolean seekExact(final BytesRef target) throws IOException {\n\n    if (fr.index == null) {\n      throw new IllegalStateException(\"terms index was not loaded\");\n    }\n\n    term.grow(1+target.length);\n\n    assert clearEOF();\n\n    /*\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.seekExact seg=\" + fr.parent.segment + \" target=\" + fr.fieldInfo.name + \":\" + brToString(target) + \" current=\" + brToString(term) + \" (exists?=\" + termExists + \") validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n    */\n\n    FST.Arc<Output> arc;\n    int targetUpto;\n    Output output;\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    if (positioned && currentFrame != staticFrame) {\n\n      // We are already seek'd; find the common\n      // prefix of new seek term vs current term and\n      // re-use the corresponding seek state.  For\n      // example, if app first seeks to foobar, then\n      // seeks to foobaz, we can re-use the seek state\n      // for the first 5 bytes.\n\n      // if (DEBUG) {\n      //   System.out.println(\"  re-use current seek state validIndexPrefix=\" + validIndexPrefix);\n      // }\n\n      arc = arcs[0];\n      assert arc.isFinal();\n      output = arc.output();\n      targetUpto = 0;\n          \n      OrdsSegmentTermsEnumFrame lastFrame = stack[0];\n      assert validIndexPrefix <= term.length();\n\n      final int targetLimit = Math.min(target.length, validIndexPrefix);\n\n      int cmp = 0;\n\n      // TODO: reverse vLong byte order for better FST\n      // prefix output sharing\n\n      // First compare up to valid seek frames:\n      while (targetUpto < targetLimit) {\n        cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n        // if (DEBUG) {\n        //    System.out.println(\"    cycle targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\"   + \" arc.output=\" + arc.output + \" output=\" + output);\n        // }\n        if (cmp != 0) {\n          break;\n        }\n        arc = arcs[1+targetUpto];\n        assert arc.label() == (target.bytes[target.offset + targetUpto] & 0xFF): \"arc.label=\" + (char) arc.label() + \" targetLabel=\" + (char) (target.bytes[target.offset + targetUpto] & 0xFF);\n        if (arc.output() != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output());\n        }\n        if (arc.isFinal()) {\n          lastFrame = stack[1+lastFrame.ord];\n        }\n        targetUpto++;\n      }\n\n      if (cmp == 0) {\n        final int targetUptoMid = targetUpto;\n\n        // Second compare the rest of the term, but\n        // don't save arc/output/frame; we only do this\n        // to find out if the target term is before,\n        // equal or after the current term\n        final int targetLimit2 = Math.min(target.length, term.length());\n        while (targetUpto < targetLimit2) {\n          cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n          // if (DEBUG) {\n          //    System.out.println(\"    cycle2 targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\");\n          // }\n          if (cmp != 0) {\n            break;\n          }\n          targetUpto++;\n        }\n\n        if (cmp == 0) {\n          cmp = term.length() - target.length;\n        }\n        targetUpto = targetUptoMid;\n      }\n\n      if (cmp < 0) {\n        // Common case: target term is after current\n        // term, ie, app is seeking multiple terms\n        // in sorted order\n        // if (DEBUG) {\n        //   System.out.println(\"  target is after current (shares prefixLen=\" + targetUpto + \"); frame.ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n\n      } else if (cmp > 0) {\n        // Uncommon case: target term\n        // is before current term; this means we can\n        // keep the currentFrame but we must rewind it\n        // (so we scan from the start)\n        targetBeforeCurrentLength = lastFrame.ord;\n        // if (DEBUG) {\n        //   System.out.println(\"  target is before current (shares prefixLen=\" + targetUpto + \"); rewind frame ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n        currentFrame.rewind();\n      } else {\n        // Target is exactly the same as current term\n        assert term.length() == target.length;\n        if (termExists) {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current; return true\");\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current but term doesn't exist\");\n          // }\n        }\n        //validIndexPrefix = currentFrame.depth;\n        //term.length = target.length;\n        //return termExists;\n      }\n\n    } else {\n\n      targetBeforeCurrentLength = -1;\n      arc = fr.index.getFirstArc(arcs[0]);\n\n      // Empty string prefix must have an output (block) in the index!\n      assert arc.isFinal();\n      assert arc.output() != null;\n\n      // if (DEBUG) {\n      //   System.out.println(\"    no seek state; push root frame\");\n      // }\n\n      output = arc.output();\n\n      currentFrame = staticFrame;\n\n      //term.length = 0;\n      targetUpto = 0;\n      currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput()), 0);\n    }\n\n    positioned = true;\n\n    // if (DEBUG) {\n    //   System.out.println(\"  start index loop targetUpto=\" + targetUpto + \" output=\" + output + \" currentFrame.ord=\" + currentFrame.ord + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength);\n    // }\n\n    // We are done sharing the common prefix with the incoming target and where we are currently seek'd; now continue walking the index:\n    while (targetUpto < target.length) {\n\n      final int targetLabel = target.bytes[target.offset + targetUpto] & 0xFF;\n\n      final FST.Arc<Output> nextArc = fr.index.findTargetArc(targetLabel, arc, getArc(1+targetUpto), fstReader);\n\n      if (nextArc == null) {\n\n        // Index is exhausted\n        // if (DEBUG) {\n        //   System.out.println(\"    index: index exhausted label=\" + ((char) targetLabel) + \" \" + toHex(targetLabel));\n        // }\n            \n        validIndexPrefix = currentFrame.prefix;\n        //validIndexPrefix = targetUpto;\n\n        currentFrame.scanToFloorFrame(target);\n\n        if (!currentFrame.hasTerms) {\n          termExists = false;\n          term.setByteAt(targetUpto, (byte) targetLabel);\n          term.setLength(1+targetUpto);\n          // if (DEBUG) {\n          //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n\n        currentFrame.loadBlock();\n\n        final SeekStatus result = currentFrame.scanToTerm(target, true);            \n        if (result == SeekStatus.FOUND) {\n          // if (DEBUG) {\n          //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  got \" + result + \"; return NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n      } else {\n        // Follow this arc\n        arc = nextArc;\n        term.setByteAt(targetUpto, (byte) targetLabel);\n        // Aggregate output as we go:\n        assert arc.output() != null;\n        if (arc.output() != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output());\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    index: follow label=\" + toHex(target.bytes[target.offset + targetUpto]&0xff) + \" arc.output=\" + arc.output + \" arc.nfo=\" + arc.nextFinalOutput);\n        // }\n        targetUpto++;\n\n        if (arc.isFinal()) {\n          //if (DEBUG) System.out.println(\"    arc is final!\");\n          currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput()), targetUpto);\n          //if (DEBUG) System.out.println(\"    curFrame.ord=\" + currentFrame.ord + \" hasTerms=\" + currentFrame.hasTerms);\n        }\n      }\n    }\n\n    //validIndexPrefix = targetUpto;\n    validIndexPrefix = currentFrame.prefix;\n\n    currentFrame.scanToFloorFrame(target);\n\n    // Target term is entirely contained in the index:\n    if (!currentFrame.hasTerms) {\n      termExists = false;\n      term.setLength(targetUpto);\n      // if (DEBUG) {\n      //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n      // }\n      return false;\n    }\n\n    currentFrame.loadBlock();\n\n    final SeekStatus result = currentFrame.scanToTerm(target, true);            \n    if (result == SeekStatus.FOUND) {\n      // if (DEBUG) {\n      //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n      // }\n      return true;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  got result \" + result + \"; return NOT_FOUND term=\" + term.utf8ToString());\n      // }\n\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean seekExact(final BytesRef target) throws IOException {\n\n    if (fr.index == null) {\n      throw new IllegalStateException(\"terms index was not loaded\");\n    }\n\n    term.grow(1+target.length);\n\n    assert clearEOF();\n\n    /*\n    if (DEBUG) {\n      System.out.println(\"\\nBTTR.seekExact seg=\" + fr.parent.segment + \" target=\" + fr.fieldInfo.name + \":\" + brToString(target) + \" current=\" + brToString(term) + \" (exists?=\" + termExists + \") validIndexPrefix=\" + validIndexPrefix);\n      printSeekState(System.out);\n    }\n    */\n\n    FST.Arc<Output> arc;\n    int targetUpto;\n    Output output;\n\n    targetBeforeCurrentLength = currentFrame.ord;\n\n    if (positioned && currentFrame != staticFrame) {\n\n      // We are already seek'd; find the common\n      // prefix of new seek term vs current term and\n      // re-use the corresponding seek state.  For\n      // example, if app first seeks to foobar, then\n      // seeks to foobaz, we can re-use the seek state\n      // for the first 5 bytes.\n\n      // if (DEBUG) {\n      //   System.out.println(\"  re-use current seek state validIndexPrefix=\" + validIndexPrefix);\n      // }\n\n      arc = arcs[0];\n      assert arc.isFinal();\n      output = arc.output;\n      targetUpto = 0;\n          \n      OrdsSegmentTermsEnumFrame lastFrame = stack[0];\n      assert validIndexPrefix <= term.length();\n\n      final int targetLimit = Math.min(target.length, validIndexPrefix);\n\n      int cmp = 0;\n\n      // TODO: reverse vLong byte order for better FST\n      // prefix output sharing\n\n      // First compare up to valid seek frames:\n      while (targetUpto < targetLimit) {\n        cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n        // if (DEBUG) {\n        //    System.out.println(\"    cycle targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\"   + \" arc.output=\" + arc.output + \" output=\" + output);\n        // }\n        if (cmp != 0) {\n          break;\n        }\n        arc = arcs[1+targetUpto];\n        assert arc.label == (target.bytes[target.offset + targetUpto] & 0xFF): \"arc.label=\" + (char) arc.label + \" targetLabel=\" + (char) (target.bytes[target.offset + targetUpto] & 0xFF);\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n        if (arc.isFinal()) {\n          lastFrame = stack[1+lastFrame.ord];\n        }\n        targetUpto++;\n      }\n\n      if (cmp == 0) {\n        final int targetUptoMid = targetUpto;\n\n        // Second compare the rest of the term, but\n        // don't save arc/output/frame; we only do this\n        // to find out if the target term is before,\n        // equal or after the current term\n        final int targetLimit2 = Math.min(target.length, term.length());\n        while (targetUpto < targetLimit2) {\n          cmp = (term.byteAt(targetUpto)&0xFF) - (target.bytes[target.offset + targetUpto]&0xFF);\n          // if (DEBUG) {\n          //    System.out.println(\"    cycle2 targetUpto=\" + targetUpto + \" (vs limit=\" + targetLimit + \") cmp=\" + cmp + \" (targetLabel=\" + (char) (target.bytes[target.offset + targetUpto]) + \" vs termLabel=\" + (char) (term.bytes[targetUpto]) + \")\");\n          // }\n          if (cmp != 0) {\n            break;\n          }\n          targetUpto++;\n        }\n\n        if (cmp == 0) {\n          cmp = term.length() - target.length;\n        }\n        targetUpto = targetUptoMid;\n      }\n\n      if (cmp < 0) {\n        // Common case: target term is after current\n        // term, ie, app is seeking multiple terms\n        // in sorted order\n        // if (DEBUG) {\n        //   System.out.println(\"  target is after current (shares prefixLen=\" + targetUpto + \"); frame.ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n\n      } else if (cmp > 0) {\n        // Uncommon case: target term\n        // is before current term; this means we can\n        // keep the currentFrame but we must rewind it\n        // (so we scan from the start)\n        targetBeforeCurrentLength = lastFrame.ord;\n        // if (DEBUG) {\n        //   System.out.println(\"  target is before current (shares prefixLen=\" + targetUpto + \"); rewind frame ord=\" + lastFrame.ord);\n        // }\n        currentFrame = lastFrame;\n        currentFrame.rewind();\n      } else {\n        // Target is exactly the same as current term\n        assert term.length() == target.length;\n        if (termExists) {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current; return true\");\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  target is same as current but term doesn't exist\");\n          // }\n        }\n        //validIndexPrefix = currentFrame.depth;\n        //term.length = target.length;\n        //return termExists;\n      }\n\n    } else {\n\n      targetBeforeCurrentLength = -1;\n      arc = fr.index.getFirstArc(arcs[0]);\n\n      // Empty string prefix must have an output (block) in the index!\n      assert arc.isFinal();\n      assert arc.output != null;\n\n      // if (DEBUG) {\n      //   System.out.println(\"    no seek state; push root frame\");\n      // }\n\n      output = arc.output;\n\n      currentFrame = staticFrame;\n\n      //term.length = 0;\n      targetUpto = 0;\n      currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), 0);\n    }\n\n    positioned = true;\n\n    // if (DEBUG) {\n    //   System.out.println(\"  start index loop targetUpto=\" + targetUpto + \" output=\" + output + \" currentFrame.ord=\" + currentFrame.ord + \" targetBeforeCurrentLength=\" + targetBeforeCurrentLength);\n    // }\n\n    // We are done sharing the common prefix with the incoming target and where we are currently seek'd; now continue walking the index:\n    while (targetUpto < target.length) {\n\n      final int targetLabel = target.bytes[target.offset + targetUpto] & 0xFF;\n\n      final FST.Arc<Output> nextArc = fr.index.findTargetArc(targetLabel, arc, getArc(1+targetUpto), fstReader);\n\n      if (nextArc == null) {\n\n        // Index is exhausted\n        // if (DEBUG) {\n        //   System.out.println(\"    index: index exhausted label=\" + ((char) targetLabel) + \" \" + toHex(targetLabel));\n        // }\n            \n        validIndexPrefix = currentFrame.prefix;\n        //validIndexPrefix = targetUpto;\n\n        currentFrame.scanToFloorFrame(target);\n\n        if (!currentFrame.hasTerms) {\n          termExists = false;\n          term.setByteAt(targetUpto, (byte) targetLabel);\n          term.setLength(1+targetUpto);\n          // if (DEBUG) {\n          //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n\n        currentFrame.loadBlock();\n\n        final SeekStatus result = currentFrame.scanToTerm(target, true);            \n        if (result == SeekStatus.FOUND) {\n          // if (DEBUG) {\n          //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n          // }\n          return true;\n        } else {\n          // if (DEBUG) {\n          //   System.out.println(\"  got \" + result + \"; return NOT_FOUND term=\" + brToString(term));\n          // }\n          return false;\n        }\n      } else {\n        // Follow this arc\n        arc = nextArc;\n        term.setByteAt(targetUpto, (byte) targetLabel);\n        // Aggregate output as we go:\n        assert arc.output != null;\n        if (arc.output != OrdsBlockTreeTermsWriter.NO_OUTPUT) {\n          output = OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.output);\n        }\n\n        // if (DEBUG) {\n        //   System.out.println(\"    index: follow label=\" + toHex(target.bytes[target.offset + targetUpto]&0xff) + \" arc.output=\" + arc.output + \" arc.nfo=\" + arc.nextFinalOutput);\n        // }\n        targetUpto++;\n\n        if (arc.isFinal()) {\n          //if (DEBUG) System.out.println(\"    arc is final!\");\n          currentFrame = pushFrame(arc, OrdsBlockTreeTermsWriter.FST_OUTPUTS.add(output, arc.nextFinalOutput), targetUpto);\n          //if (DEBUG) System.out.println(\"    curFrame.ord=\" + currentFrame.ord + \" hasTerms=\" + currentFrame.hasTerms);\n        }\n      }\n    }\n\n    //validIndexPrefix = targetUpto;\n    validIndexPrefix = currentFrame.prefix;\n\n    currentFrame.scanToFloorFrame(target);\n\n    // Target term is entirely contained in the index:\n    if (!currentFrame.hasTerms) {\n      termExists = false;\n      term.setLength(targetUpto);\n      // if (DEBUG) {\n      //   System.out.println(\"  FAST NOT_FOUND term=\" + brToString(term));\n      // }\n      return false;\n    }\n\n    currentFrame.loadBlock();\n\n    final SeekStatus result = currentFrame.scanToTerm(target, true);            \n    if (result == SeekStatus.FOUND) {\n      // if (DEBUG) {\n      //   System.out.println(\"  return FOUND term=\" + term.utf8ToString() + \" \" + term);\n      // }\n      return true;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"  got result \" + result + \"; return NOT_FOUND term=\" + term.utf8ToString());\n      // }\n\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}