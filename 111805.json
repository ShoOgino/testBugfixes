{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setSortSpec(ResponseBuilder,boolean,ElevationComparatorSource).mjava","commits":[{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":0,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setSortSpec(ResponseBuilder,boolean,ElevationComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  private void setSortSpec(ResponseBuilder rb, boolean forceElevation, ElevationComparatorSource comparator) {\n    // if the sort is 'score desc' use a custom sorting method to\n    // insert documents in their proper place\n    SortSpec sortSpec = rb.getSortSpec();\n    if (sortSpec.getSort() == null) {\n      sortSpec.setSortAndFields(\n              new Sort(\n                      new SortField(\"_elevate_\", comparator, true),\n                      new SortField(null, SortField.Type.SCORE, false)),\n              Arrays.asList(new SchemaField[2]));\n    } else {\n      // Check if the sort is based on score\n      SortSpec modSortSpec = this.modifySortSpec(sortSpec, forceElevation, comparator);\n      if (null != modSortSpec) {\n        rb.setSortSpec(modSortSpec);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setSortSpec(ResponseBuilder,boolean,ElevationComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  private void setSortSpec(ResponseBuilder rb, boolean forceElevation, ElevationComparatorSource comparator) {\n    // if the sort is 'score desc' use a custom sorting method to\n    // insert documents in their proper place\n    SortSpec sortSpec = rb.getSortSpec();\n    if (sortSpec.getSort() == null) {\n      sortSpec.setSortAndFields(\n              new Sort(\n                      new SortField(\"_elevate_\", comparator, true),\n                      new SortField(null, SortField.Type.SCORE, false)),\n              Arrays.asList(new SchemaField[2]));\n    } else {\n      // Check if the sort is based on score\n      SortSpec modSortSpec = this.modifySortSpec(sortSpec, forceElevation, comparator);\n      if (null != modSortSpec) {\n        rb.setSortSpec(modSortSpec);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#setSortSpec(ResponseBuilder,boolean,ElevationComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  private void setSortSpec(ResponseBuilder rb, boolean forceElevation, ElevationComparatorSource comparator) {\n    // if the sort is 'score desc' use a custom sorting method to\n    // insert documents in their proper place\n    SortSpec sortSpec = rb.getSortSpec();\n    if (sortSpec.getSort() == null) {\n      sortSpec.setSortAndFields(\n              new Sort(\n                      new SortField(\"_elevate_\", comparator, true),\n                      new SortField(null, SortField.Type.SCORE, false)),\n              Arrays.asList(new SchemaField[2]));\n    } else {\n      // Check if the sort is based on score\n      SortSpec modSortSpec = this.modifySortSpec(sortSpec, forceElevation, comparator);\n      if (null != modSortSpec) {\n        rb.setSortSpec(modSortSpec);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ad458affd82a1d762eb506003907d9363a333cb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}