{"path":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#beforeClass().mjava","commits":[{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-update-processor-chains.xml\", \"schema-nest.xml\"); // use \"nest\" schema\n    final boolean useSegments = random().nextBoolean();\n    if(useSegments) {\n      // create random segments\n      final int numOfDocs = 10;\n      for(int i = 0; i < numOfDocs; ++i) {\n        updateJ(generateDocHierarchy(i), params(\"update.chain\", \"nested\"));\n        if(random().nextBoolean()) {\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n      fqToExcludeNonTestedDocs = \"{!frange l=\" + firstTestedDocId + \" incl=false}id_i\";\n    } else {\n      fqToExcludeNonTestedDocs = \"*:*\";\n    }\n    firstTestedDocId = idCounter.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357","date":1535564142,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-update-processor-chains.xml\", \"schema-nest.xml\"); // use \"nest\" schema\n\n    if(random().nextBoolean()) {\n      idCounter.set(-100); // start docIDs at -100 for these random docs we don't care about (all less than 0)\n      // create random segments\n      final int numOfDocs = 10;\n      for(int i = 0; i < numOfDocs; ++i) {\n        updateJ(generateDocHierarchy(i), params(\"update.chain\", \"nested\"));\n        if(random().nextBoolean()) {\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-update-processor-chains.xml\", \"schema-nest.xml\"); // use \"nest\" schema\n    final boolean useSegments = random().nextBoolean();\n    if(useSegments) {\n      // create random segments\n      final int numOfDocs = 10;\n      for(int i = 0; i < numOfDocs; ++i) {\n        updateJ(generateDocHierarchy(i), params(\"update.chain\", \"nested\"));\n        if(random().nextBoolean()) {\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n      fqToExcludeNonTestedDocs = \"{!frange l=\" + firstTestedDocId + \" incl=false}id_i\";\n    } else {\n      fqToExcludeNonTestedDocs = \"*:*\";\n    }\n    firstTestedDocId = idCounter.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5fe1ea1e20c7450be523c41001a625ea3c15f5","date":1547007782,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-minimal.xml\", \"schema-nest.xml\"); // use \"nest\" schema\n\n    if(random().nextBoolean()) {\n      idCounter.set(-100); // start docIDs at -100 for these random docs we don't care about (all less than 0)\n      // create random segments\n      final int numOfDocs = 10;\n      for(int i = 0; i < numOfDocs; ++i) {\n        updateJ(generateDocHierarchy(i), null);\n        if(random().nextBoolean()) {\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-update-processor-chains.xml\", \"schema-nest.xml\"); // use \"nest\" schema\n\n    if(random().nextBoolean()) {\n      idCounter.set(-100); // start docIDs at -100 for these random docs we don't care about (all less than 0)\n      // create random segments\n      final int numOfDocs = 10;\n      for(int i = 0; i < numOfDocs; ++i) {\n        updateJ(generateDocHierarchy(i), params(\"update.chain\", \"nested\"));\n        if(random().nextBoolean()) {\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb5fe1ea1e20c7450be523c41001a625ea3c15f5":["fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb5fe1ea1e20c7450be523c41001a625ea3c15f5"]},"commit2Childs":{"fb5fe1ea1e20c7450be523c41001a625ea3c15f5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357":["fb5fe1ea1e20c7450be523c41001a625ea3c15f5"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["fb249836d4ea694f0d4e6ac26a8a5c7ec3e53357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}