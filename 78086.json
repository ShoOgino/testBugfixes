{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testStringLiteralFields().mjava","commits":[{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testStringLiteralFields().mjava","pathOld":"/dev/null","sourceNew":"  private void testStringLiteralFields() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"Field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"Field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"Field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"Field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"Field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"Field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"Field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"Field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, 'Field_i', str_s from Collection1 where 'Text_t'='XXXX' order by 'Field_i' desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"Field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"Field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"Field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"Field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"Field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"Field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"Field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"Field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testMixedCaseFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testStringLiteralFields().mjava","sourceNew":"  private void testMixedCaseFields() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"Text_t\", \"XXXX XXXX\", \"Str_s\", \"a\", \"Field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"Text_t\", \"XXXX XXXX\", \"Str_s\", \"b\", \"Field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"Text_t\", \"XXXX XXXX\", \"Str_s\", \"a\", \"Field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"Text_t\", \"XXXX XXXX\", \"Str_s\", \"b\", \"Field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"Text_t\", \"XXXX XXXX\", \"Str_s\", \"c\", \"Field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"Text_t\", \"XXXX XXXX\", \"Str_s\", \"c\", \"Field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"Text_t\", \"XXXX XXXX\", \"Str_s\", \"c\", \"Field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"Text_t\", \"XXXX XXXX\", \"Str_s\", \"c\", \"Field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select id, Field_i, Str_s from Collection1 where Text_t='XXXX' order by Field_i desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"Field_i\") == 60);\n      assert(tuple.get(\"Str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"Field_i\") == 50);\n      assert(tuple.get(\"Str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"Field_i\") == 40);\n      assert(tuple.get(\"Str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"Field_i\") == 30);\n      assert(tuple.get(\"Str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"Field_i\") == 20);\n      assert(tuple.get(\"Str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"Field_i\") == 11);\n      assert(tuple.get(\"Str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"Field_i\") == 8);\n      assert(tuple.get(\"Str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"Field_i\") == 7);\n      assert(tuple.get(\"Str_s\").equals(\"a\"));\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select Str_s, sum(Field_i) from Collection1 where 'id'='(1 8)' group by Str_s having (sum(Field_i) = 7 OR 'sum(Field_i)' = 60) order by 'sum(Field_i)' desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"Str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"sum(Field_i)\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"Str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"sum(Field_i)\") == 7);\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select Str_s, sum(Field_i) from Collection1 where 'id'='(1 8)' group by 'Str_s' having (sum(Field_i) = 7 OR 'sum(Field_i)' = 60) order by 'sum(Field_i)' desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"Str_s\").equals(\"c\"));\n      assert(tuple.getDouble(\"sum(Field_i)\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"Str_s\").equals(\"a\"));\n      assert(tuple.getDouble(\"sum(Field_i)\") == 7);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testStringLiteralFields() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexDoc(sdoc(\"id\", \"1\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"Field_i\", \"7\"));\n      indexDoc(sdoc(\"id\", \"2\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"Field_i\", \"8\"));\n      indexDoc(sdoc(\"id\", \"3\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"Field_i\", \"20\"));\n      indexDoc(sdoc(\"id\", \"4\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"Field_i\", \"11\"));\n      indexDoc(sdoc(\"id\", \"5\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"Field_i\", \"30\"));\n      indexDoc(sdoc(\"id\", \"6\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"Field_i\", \"40\"));\n      indexDoc(sdoc(\"id\", \"7\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"Field_i\", \"50\"));\n      indexDoc(sdoc(\"id\", \"8\", \"Text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"Field_i\", \"60\"));\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select id, 'Field_i', str_s from Collection1 where 'Text_t'='XXXX' order by 'Field_i' desc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 8);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.getLong(\"id\") == 8);\n      assert(tuple.getLong(\"Field_i\") == 60);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(1);\n      assert(tuple.getLong(\"id\") == 7);\n      assert(tuple.getLong(\"Field_i\") == 50);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(2);\n      assert(tuple.getLong(\"id\") == 6);\n      assert(tuple.getLong(\"Field_i\") == 40);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(3);\n      assert(tuple.getLong(\"id\") == 5);\n      assert(tuple.getLong(\"Field_i\") == 30);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n\n      tuple = tuples.get(4);\n      assert(tuple.getLong(\"id\") == 3);\n      assert(tuple.getLong(\"Field_i\") == 20);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n      tuple = tuples.get(5);\n      assert(tuple.getLong(\"id\") == 4);\n      assert(tuple.getLong(\"Field_i\") == 11);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(6);\n      assert(tuple.getLong(\"id\") == 2);\n      assert(tuple.getLong(\"Field_i\") == 8);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n\n      tuple = tuples.get(7);\n      assert(tuple.getLong(\"id\") == 1);\n      assert(tuple.getLong(\"Field_i\") == 7);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ec71d4701edbd96cfea97384101d13611393552"]},"commit2Childs":{"3ec71d4701edbd96cfea97384101d13611393552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36479872320bb00635cb97ca6757614c88562e1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}