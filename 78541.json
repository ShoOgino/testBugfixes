{"path":"lucene/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n  public void search(Query query, Collector results)\n    throws IOException {\n    search(createWeight(query), null, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":null,"sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Searcher#search(Query,Collector).mjava","sourceNew":null,"sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query, int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * <p>Note: The <code>score</code> passed to this method is a raw score.\n  * In other words, the score will not necessarily be a float whose value is\n  * between 0 and 1.\n  * @throws BooleanQuery.TooManyClauses\n  */\n public void search(Query query, Collector results)\n   throws IOException {\n   search(createWeight(query), null, results);\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}