{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String ph1 = \"\\\"a b c d\\\"\";\n    String ph2 = \"\\\"b c g\\\"\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n    String f1c = f1 + \":\";\n    String f2c = f2 + \":\";\n    String q = \"(\" + f1c + ph1 + \" OR \" + f2c + ph1 + \") AND (\" + f1c + ph2\n        + \" OR \" + f2c + ph2 + \")\";\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, f1, analyzer);\n    Query query = qp.parse(q);\n\n    QueryScorer scorer = new QueryScorer(query, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testRepeatingTermsInMultBooleans().mjava","sourceNew":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","sourceOld":"  // LUCENE-1752\n  public void testRepeatingTermsInMultBooleans() throws Exception {\n    String content = \"x y z a b c d e f g b c g\";\n    String f1 = \"f1\";\n    String f2 = \"f2\";\n\n    PhraseQuery f1ph1 = new PhraseQuery();\n    f1ph1.add(new Term(f1, \"a\"));\n    f1ph1.add(new Term(f1, \"b\"));\n    f1ph1.add(new Term(f1, \"c\"));\n    f1ph1.add(new Term(f1, \"d\"));\n\n    PhraseQuery f2ph1 = new PhraseQuery();\n    f2ph1.add(new Term(f2, \"a\"));\n    f2ph1.add(new Term(f2, \"b\"));\n    f2ph1.add(new Term(f2, \"c\"));\n    f2ph1.add(new Term(f2, \"d\"));\n\n    PhraseQuery f1ph2 = new PhraseQuery();\n    f1ph2.add(new Term(f1, \"b\"));\n    f1ph2.add(new Term(f1, \"c\"));\n    f1ph2.add(new Term(f1, \"g\"));\n\n    PhraseQuery f2ph2 = new PhraseQuery();\n    f2ph2.add(new Term(f2, \"b\"));\n    f2ph2.add(new Term(f2, \"c\"));\n    f2ph2.add(new Term(f2, \"g\"));\n\n    BooleanQuery booleanQuery = new BooleanQuery();\n    BooleanQuery leftChild = new BooleanQuery();\n    leftChild.add(f1ph1, Occur.SHOULD);\n    leftChild.add(f2ph1, Occur.SHOULD);\n    booleanQuery.add(leftChild, Occur.MUST);\n\n    BooleanQuery rightChild = new BooleanQuery();\n    rightChild.add(f1ph2, Occur.SHOULD);\n    rightChild.add(f2ph2, Occur.SHOULD);\n    booleanQuery.add(rightChild, Occur.MUST);\n\n    QueryScorer scorer = new QueryScorer(booleanQuery, f1);\n    scorer.setExpandMultiTermQuery(false);\n\n    Highlighter h = new Highlighter(this, scorer);\n\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    h.getBestFragment(analyzer, f1, content);\n\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c7f8e68717c68517265937c911e1ce9f25750247"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a3776dccca01c11e7046323cfad46a3b4a471233","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"c7f8e68717c68517265937c911e1ce9f25750247":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}