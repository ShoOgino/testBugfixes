{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,CloudConfig,String).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,CloudConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public OverseerSolrResponse processMessage(ZkNodeProps message, CloudConfig cloudConfig, String operation) {\n    MDCLoggingContext.setCollection(message.getStr(COLLECTION));\n    MDCLoggingContext.setShard(message.getStr(SHARD_ID_PROP));\n    MDCLoggingContext.setReplica(message.getStr(REPLICA_PROP));\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : {} , {}\", operation, message);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), cloudConfig, message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap<Object> nl = new SimpleOrderedMap<>();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public OverseerSolrResponse processMessage(ZkNodeProps message, String operation) {\n    MDCLoggingContext.setCollection(message.getStr(COLLECTION));\n    MDCLoggingContext.setShard(message.getStr(SHARD_ID_PROP));\n    MDCLoggingContext.setReplica(message.getStr(REPLICA_PROP));\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : {} , {}\", operation, message);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap<Object> nl = new SimpleOrderedMap<>();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,CloudConfig,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public OverseerSolrResponse processMessage(ZkNodeProps message, String operation) {\n    MDCLoggingContext.setCollection(message.getStr(COLLECTION));\n    MDCLoggingContext.setShard(message.getStr(SHARD_ID_PROP));\n    MDCLoggingContext.setReplica(message.getStr(REPLICA_PROP));\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : {} , {}\", operation, message);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap<Object> nl = new SimpleOrderedMap<>();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public OverseerSolrResponse processMessage(ZkNodeProps message, CloudConfig cloudConfig, String operation) {\n    MDCLoggingContext.setCollection(message.getStr(COLLECTION));\n    MDCLoggingContext.setShard(message.getStr(SHARD_ID_PROP));\n    MDCLoggingContext.setReplica(message.getStr(REPLICA_PROP));\n    log.debug(\"OverseerCollectionMessageHandler.processMessage : {} , {}\", operation, message);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList results = new NamedList();\n    try {\n      CollectionAction action = getCollectionAction(operation);\n      Cmd command = commandMap.get(action);\n      if (command != null) {\n        command.call(cloudManager.getClusterStateProvider().getClusterState(), cloudConfig, message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap<Object> nl = new SimpleOrderedMap<>();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}