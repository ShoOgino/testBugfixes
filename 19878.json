{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","commits":[{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getCloudState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getCloudState().getLeader(collection, shard)!=null)?reader.getCloudState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getCloudState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getCloudState().getLeader(collection, shard)!=null)?reader.getCloudState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fae587917424e74e7780a722fd2761c19633ad0","date":1339562443,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateCloudState(true); // poll state\n      ZkNodeProps props =  reader.getCloudState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getCloudState().getLeader(collection, shard)!=null)?reader.getCloudState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getCloudState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getCloudState().getLeader(collection, shard)!=null)?reader.getCloudState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateCloudState(true); // poll state\n      ZkNodeProps props =  reader.getCloudState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getCloudState().getLeader(collection, shard)!=null)?reader.getCloudState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateCloudState(true); // poll state\n      ZkNodeProps props =  reader.getCloudState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getCloudState().getLeader(collection, shard)!=null)?reader.getCloudState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateCloudState(true); // poll state\n      ZkNodeProps props =  reader.getCloudState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getCloudState().getLeader(collection, shard)!=null)?reader.getCloudState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.get(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).get(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 100;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a508967ceedc0f8b09d505797630fc071b76a57","date":1385347487,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(100);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(true); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      reader.updateClusterState(); // poll state\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getClusterState().getCollection(collection).getLeader(shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    DocCollection docCollection = reader.getClusterState().getCollection(collection);\n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore,\n        (docCollection.getLeader(shard)!=null)?docCollection.getLeader(shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":["3f767f8c99eaedb984df754fe61f21c5de260f94","fa64435b5902ce266c23755a4a00691a3285dab8","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getClusterState().getCollection(collection).getLeader(shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    DocCollection docCollection = reader.getClusterState().getCollection(collection);\n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore,\n        (docCollection.getLeader(shard)!=null)?docCollection.getLeader(shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getClusterState().getLeader(collection, shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    \n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore, (reader.getClusterState().getLeader(collection, shard)!=null)?reader.getClusterState().getLeader(collection, shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#verifyShardLeader(ZkStateReader,String,String,String).mjava","sourceNew":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore)\n      throws InterruptedException, KeeperException, TimeoutException {\n\n    reader.waitForState(collection, 15000, TimeUnit.MILLISECONDS,\n        (liveNodes, collectionState) -> collectionState != null\n            && expectedCore.equals((collectionState.getLeader(shard) != null)\n                ? collectionState.getLeader(shard).getStr(ZkStateReader.CORE_NAME_PROP) : null));\n\n    DocCollection docCollection = reader.getClusterState().getCollection(collection);\n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore,\n        (docCollection.getLeader(shard) != null) ? docCollection.getLeader(shard).getStr(ZkStateReader.CORE_NAME_PROP)\n            : null);\n  }\n\n","sourceOld":"  private void verifyShardLeader(ZkStateReader reader, String collection, String shard, String expectedCore) throws InterruptedException, KeeperException {\n    int maxIterations = 200;\n    while(maxIterations-->0) {\n      ZkNodeProps props =  reader.getClusterState().getCollection(collection).getLeader(shard);\n      if(props!=null) {\n        if(expectedCore.equals(props.getStr(ZkStateReader.CORE_NAME_PROP))) {\n          return;\n        }\n      }\n      Thread.sleep(200);\n    }\n    DocCollection docCollection = reader.getClusterState().getCollection(collection);\n    assertEquals(\"Unexpected shard leader coll:\" + collection + \" shard:\" + shard, expectedCore,\n        (docCollection.getLeader(shard)!=null)?docCollection.getLeader(shard).getStr(ZkStateReader.CORE_NAME_PROP):null);\n  }\n\n","bugFix":["fa64435b5902ce266c23755a4a00691a3285dab8","7a508967ceedc0f8b09d505797630fc071b76a57","d9405f486872f1e416304dfe389741f4ee2f8a4d","344b0840364d990b29b97467bfcc766ff8325d11","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["344b0840364d990b29b97467bfcc766ff8325d11"],"7a508967ceedc0f8b09d505797630fc071b76a57":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"344b0840364d990b29b97467bfcc766ff8325d11":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7a508967ceedc0f8b09d505797630fc071b76a57"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["fa64435b5902ce266c23755a4a00691a3285dab8"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4fae587917424e74e7780a722fd2761c19633ad0","3f767f8c99eaedb984df754fe61f21c5de260f94"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"4fae587917424e74e7780a722fd2761c19633ad0":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["4fae587917424e74e7780a722fd2761c19633ad0"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","344b0840364d990b29b97467bfcc766ff8325d11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4fae587917424e74e7780a722fd2761c19633ad0","3f767f8c99eaedb984df754fe61f21c5de260f94"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["d9405f486872f1e416304dfe389741f4ee2f8a4d","7a508967ceedc0f8b09d505797630fc071b76a57"],"f2126b84bd093fa3d921582a109a0ee578c28126":["fa64435b5902ce266c23755a4a00691a3285dab8","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a508967ceedc0f8b09d505797630fc071b76a57":["102da6baafc0f534a59f31729343dbab9d3b9e9a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"344b0840364d990b29b97467bfcc766ff8325d11":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"fa64435b5902ce266c23755a4a00691a3285dab8":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["7a508967ceedc0f8b09d505797630fc071b76a57","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"4fae587917424e74e7780a722fd2761c19633ad0":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4fae587917424e74e7780a722fd2761c19633ad0"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8fd5be977c105554c6a7b68afcdbc511439723ab","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}