{"path":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testRandomTriangles().mjava","commits":[{"id":"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc","date":1582124610,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testRandomTriangles().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomTriangles() {\n    Component2D circle2D;\n    if (random().nextBoolean()) {\n      Circle circle = GeoTestUtil.nextCircle();\n      circle2D = LatLonGeometry.create(circle);\n    } else {\n      XYCircle circle = ShapeTestUtil.nextCircle();\n      circle2D = XYGeometry.create(circle);\n    }\n    for (int i =0; i < 100; i++) {\n      double ax = GeoTestUtil.nextLongitude();\n      double ay = GeoTestUtil.nextLatitude();\n      double bx = GeoTestUtil.nextLongitude();\n      double by = GeoTestUtil.nextLatitude();\n      double cx = GeoTestUtil.nextLongitude();\n      double cy = GeoTestUtil.nextLatitude();\n\n      double tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      double tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      double tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      PointValues.Relation r = circle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.NOTWITHIN, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d78e41f7c7f70d1eaaa8515e97fb4ccbf6096e6","date":1582132863,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testRandomTriangles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Component2D circle2D;\n    if (random().nextBoolean()) {\n      Circle circle = GeoTestUtil.nextCircle();\n      circle2D = LatLonGeometry.create(circle);\n    } else {\n      XYCircle circle = ShapeTestUtil.nextCircle();\n      circle2D = XYGeometry.create(circle);\n    }\n    for (int i =0; i < 100; i++) {\n      double ax = GeoTestUtil.nextLongitude();\n      double ay = GeoTestUtil.nextLatitude();\n      double bx = GeoTestUtil.nextLongitude();\n      double by = GeoTestUtil.nextLatitude();\n      double cx = GeoTestUtil.nextLongitude();\n      double cy = GeoTestUtil.nextLatitude();\n\n      double tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      double tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      double tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      PointValues.Relation r = circle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n        assertNotEquals(Component2D.WithinRelation.CANDIDATE, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Component2D circle2D;\n    if (random().nextBoolean()) {\n      Circle circle = GeoTestUtil.nextCircle();\n      circle2D = LatLonGeometry.create(circle);\n    } else {\n      XYCircle circle = ShapeTestUtil.nextCircle();\n      circle2D = XYGeometry.create(circle);\n    }\n    for (int i =0; i < 100; i++) {\n      double ax = GeoTestUtil.nextLongitude();\n      double ay = GeoTestUtil.nextLatitude();\n      double bx = GeoTestUtil.nextLongitude();\n      double by = GeoTestUtil.nextLatitude();\n      double cx = GeoTestUtil.nextLongitude();\n      double cy = GeoTestUtil.nextLatitude();\n\n      double tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      double tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      double tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      PointValues.Relation r = circle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.NOTWITHIN, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testRandomTriangles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Component2D circle2D;\n    if (random().nextBoolean()) {\n      Circle circle = GeoTestUtil.nextCircle();\n      circle2D = LatLonGeometry.create(circle);\n    } else {\n      XYCircle circle = ShapeTestUtil.nextCircle();\n      circle2D = XYGeometry.create(circle);\n    }\n    for (int i =0; i < 100; i++) {\n      double ax = GeoTestUtil.nextLongitude();\n      double ay = GeoTestUtil.nextLatitude();\n      double bx = GeoTestUtil.nextLongitude();\n      double by = GeoTestUtil.nextLatitude();\n      double cx = GeoTestUtil.nextLongitude();\n      double cy = GeoTestUtil.nextLatitude();\n\n      double tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      double tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      double tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      PointValues.Relation r = circle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(circle2D.intersectsTriangle(ax, ay, bx, by, cx, cy));\n        assertFalse(circle2D.intersectsLine(ax, ay, bx, by));\n        assertFalse(circle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(circle2D.containsLine(ax, ay, bx, by));\n        assertEquals(Component2D.WithinRelation.DISJOINT, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertTrue(circle2D.intersectsTriangle(ax, ay, bx, by, cx, cy));\n        assertTrue(circle2D.intersectsLine(ax, ay, bx, by));\n        assertTrue(circle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(circle2D.containsLine(ax, ay, bx, by));\n        assertNotEquals(Component2D.WithinRelation.CANDIDATE, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Component2D circle2D;\n    if (random().nextBoolean()) {\n      Circle circle = GeoTestUtil.nextCircle();\n      circle2D = LatLonGeometry.create(circle);\n    } else {\n      XYCircle circle = ShapeTestUtil.nextCircle();\n      circle2D = XYGeometry.create(circle);\n    }\n    for (int i =0; i < 100; i++) {\n      double ax = GeoTestUtil.nextLongitude();\n      double ay = GeoTestUtil.nextLatitude();\n      double bx = GeoTestUtil.nextLongitude();\n      double by = GeoTestUtil.nextLatitude();\n      double cx = GeoTestUtil.nextLongitude();\n      double cy = GeoTestUtil.nextLatitude();\n\n      double tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      double tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      double tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      double tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      PointValues.Relation r = circle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n        assertNotEquals(Component2D.WithinRelation.CANDIDATE, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c568a1e2a5125c2245150eebb030a81baa158b31":["1d78e41f7c7f70d1eaaa8515e97fb4ccbf6096e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d78e41f7c7f70d1eaaa8515e97fb4ccbf6096e6":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["1d78e41f7c7f70d1eaaa8515e97fb4ccbf6096e6"],"1d78e41f7c7f70d1eaaa8515e97fb4ccbf6096e6":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}