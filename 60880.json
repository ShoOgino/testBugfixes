{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoBBoxRect().mjava","commits":[{"id":"173639a6794ea2c67915700c0b4b5ecb4b69a0fb","date":1429717236,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoBBoxRect().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoBBoxRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected boolean isRandomShapeRectangular() {\n        return true;\n      }\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        // (ignoring nearP)\n        Point ulhcPoint = randomPoint();\n        Point lrhcPoint = randomPoint();\n        if (ulhcPoint.getY() < lrhcPoint.getY()) {\n          //swap\n          Point temp = ulhcPoint;\n          ulhcPoint = lrhcPoint;\n          lrhcPoint = temp;\n        }\n        final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n            lrhcPoint.getY() * DEGREES_TO_RADIANS,\n            ulhcPoint.getX() * DEGREES_TO_RADIANS,\n            lrhcPoint.getX() * DEGREES_TO_RADIANS);\n        return new Geo3dShape(shape, ctx);\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        return shape.getBoundingBox().getCenter();\n      }\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoBBoxRect().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoBBoxRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected boolean isRandomShapeRectangular() {\n        return true;\n      }\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        // (ignoring nearP)\n        Point ulhcPoint = randomPoint();\n        Point lrhcPoint = randomPoint();\n        if (ulhcPoint.getY() < lrhcPoint.getY()) {\n          //swap\n          Point temp = ulhcPoint;\n          ulhcPoint = lrhcPoint;\n          lrhcPoint = temp;\n        }\n        final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n            lrhcPoint.getY() * DEGREES_TO_RADIANS,\n            ulhcPoint.getX() * DEGREES_TO_RADIANS,\n            lrhcPoint.getX() * DEGREES_TO_RADIANS);\n        return new Geo3dShape(shape, ctx);\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        return shape.getBoundingBox().getCenter();\n      }\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoBBoxRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoBBoxRect().mjava","sourceNew":"  @Test\n  public void testGeoBBoxRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected boolean isRandomShapeRectangular() {\n        return true;\n      }\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        // (ignoring nearP)\n        Point ulhcPoint = randomPoint();\n        Point lrhcPoint = randomPoint();\n        if (ulhcPoint.getY() < lrhcPoint.getY()) {\n          //swap\n          Point temp = ulhcPoint;\n          ulhcPoint = lrhcPoint;\n          lrhcPoint = temp;\n        }\n        final GeoShape shape = GeoBBoxFactory.makeGeoBBox(planetModel, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n            lrhcPoint.getY() * DEGREES_TO_RADIANS,\n            ulhcPoint.getX() * DEGREES_TO_RADIANS,\n            lrhcPoint.getX() * DEGREES_TO_RADIANS);\n        return new Geo3dShape(planetModel, shape, ctx);\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        return shape.getBoundingBox().getCenter();\n      }\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoBBoxRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected boolean isRandomShapeRectangular() {\n        return true;\n      }\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        // (ignoring nearP)\n        Point ulhcPoint = randomPoint();\n        Point lrhcPoint = randomPoint();\n        if (ulhcPoint.getY() < lrhcPoint.getY()) {\n          //swap\n          Point temp = ulhcPoint;\n          ulhcPoint = lrhcPoint;\n          lrhcPoint = temp;\n        }\n        final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n            lrhcPoint.getY() * DEGREES_TO_RADIANS,\n            ulhcPoint.getX() * DEGREES_TO_RADIANS,\n            lrhcPoint.getX() * DEGREES_TO_RADIANS);\n        return new Geo3dShape(shape, ctx);\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        return shape.getBoundingBox().getCenter();\n      }\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":5,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoBBoxRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoBBoxRect().mjava","sourceNew":"  @Test\n  public void testGeoBBoxRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected boolean isRandomShapeRectangular() {\n        return true;\n      }\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        // (ignoring nearP)\n        Point ulhcPoint = randomPoint();\n        Point lrhcPoint = randomPoint();\n        if (ulhcPoint.getY() < lrhcPoint.getY()) {\n          //swap\n          Point temp = ulhcPoint;\n          ulhcPoint = lrhcPoint;\n          lrhcPoint = temp;\n        }\n        final GeoShape shape = GeoBBoxFactory.makeGeoBBox(planetModel, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n            lrhcPoint.getY() * DEGREES_TO_RADIANS,\n            ulhcPoint.getX() * DEGREES_TO_RADIANS,\n            lrhcPoint.getX() * DEGREES_TO_RADIANS);\n        return new Geo3dShape(planetModel, shape, ctx);\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        return shape.getBoundingBox().getCenter();\n      }\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoBBoxRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected boolean isRandomShapeRectangular() {\n        return true;\n      }\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        // (ignoring nearP)\n        Point ulhcPoint = randomPoint();\n        Point lrhcPoint = randomPoint();\n        if (ulhcPoint.getY() < lrhcPoint.getY()) {\n          //swap\n          Point temp = ulhcPoint;\n          ulhcPoint = lrhcPoint;\n          lrhcPoint = temp;\n        }\n        final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n            lrhcPoint.getY() * DEGREES_TO_RADIANS,\n            ulhcPoint.getX() * DEGREES_TO_RADIANS,\n            lrhcPoint.getX() * DEGREES_TO_RADIANS);\n        return new Geo3dShape(shape, ctx);\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        return shape.getBoundingBox().getCenter();\n      }\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","173639a6794ea2c67915700c0b4b5ecb4b69a0fb"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"173639a6794ea2c67915700c0b4b5ecb4b69a0fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fec06d6753751ae302c7d35866763e6cb414112d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","173639a6794ea2c67915700c0b4b5ecb4b69a0fb"],"fec06d6753751ae302c7d35866763e6cb414112d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"173639a6794ea2c67915700c0b4b5ecb4b69a0fb":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}