{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"/dev/null","sourceNew":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            if (DEBUG) {\n              System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        readBlock(posIn, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          if (DEBUG) {\n            System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          readBlock(payIn, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          if (DEBUG) {\n            System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          if (DEBUG) {\n            System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          readBlock(payIn, offsetStartDeltaBuffer);\n          readBlock(payIn, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aed6489ab771989e9105eff4656265bdfb15d89f","date":1342808296,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            if (DEBUG) {\n              System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        readBlock(posIn, encoded, encodedBuffer, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          if (DEBUG) {\n            System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          readBlock(payIn, encoded, encodedBuffer, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          if (DEBUG) {\n            System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          if (DEBUG) {\n            System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          readBlock(payIn, encoded, encodedBuffer, offsetStartDeltaBuffer);\n          readBlock(payIn, encoded, encodedBuffer, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            if (DEBUG) {\n              System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        readBlock(posIn, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          if (DEBUG) {\n            System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          readBlock(payIn, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          if (DEBUG) {\n            System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          if (DEBUG) {\n            System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          readBlock(payIn, offsetStartDeltaBuffer);\n          readBlock(payIn, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            if (DEBUG) {\n              System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          if (DEBUG) {\n            System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          if (DEBUG) {\n            System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          if (DEBUG) {\n            System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            if (DEBUG) {\n              System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        readBlock(posIn, encoded, encodedBuffer, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          if (DEBUG) {\n            System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          readBlock(payIn, encoded, encodedBuffer, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          if (DEBUG) {\n            System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          if (DEBUG) {\n            System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          readBlock(payIn, encoded, encodedBuffer, offsetStartDeltaBuffer);\n          readBlock(payIn, encoded, encodedBuffer, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc6cbc7e8693270112e8d40ca98226199c0288e","date":1345039720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"      refillPositions\");\n      }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        if (DEBUG) {\n          System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            if (DEBUG) {\n              System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          if (DEBUG) {\n            System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          if (DEBUG) {\n            System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          if (DEBUG) {\n            System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"/dev/null","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"/dev/null","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.EverythingEnum#refillPositions().mjava","sourceNew":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","sourceOld":"    private void refillPositions() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"      refillPositions\");\n      // }\n      if (posIn.getFilePointer() == lastPosBlockFP) {\n        // if (DEBUG) {\n        //   System.out.println(\"        vInt pos block @ fp=\" + posIn.getFilePointer() + \" hasPayloads=\" + indexHasPayloads + \" hasOffsets=\" + indexHasOffsets);\n        // }\n        final int count = posIn.readVInt();\n        int payloadLength = 0;\n        payloadByteUpto = 0;\n        for(int i=0;i<count;i++) {\n          int code = posIn.readVInt();\n          if (indexHasPayloads) {\n            if ((code & 1) != 0) {\n              payloadLength = posIn.readVInt();\n            }\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n            payloadLengthBuffer[i] = payloadLength;\n            posDeltaBuffer[i] = code >>> 1;\n            if (payloadLength != 0) {\n              if (payloadByteUpto + payloadLength > payloadBytes.length) {\n                payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payloadLength);\n              }\n              //System.out.println(\"          read payload @ pos.fp=\" + posIn.getFilePointer());\n              posIn.readBytes(payloadBytes, payloadByteUpto, payloadLength);\n              payloadByteUpto += payloadLength;\n            }\n          } else {\n            posDeltaBuffer[i] = code;\n          }\n\n          if (indexHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" read offsets from posIn.fp=\" + posIn.getFilePointer());\n            // }\n            offsetStartDeltaBuffer[i] = posIn.readVInt();\n            offsetLengthBuffer[i] = posIn.readVInt();\n            // if (DEBUG) {\n            //   System.out.println(\"          startOffDelta=\" + offsetStartDeltaBuffer[i] + \" offsetLen=\" + offsetLengthBuffer[i]);\n            // }\n          }\n        }\n        payloadByteUpto = 0;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"        bulk pos block @ fp=\" + posIn.getFilePointer());\n        // }\n        forUtil.readBlock(posIn, encoded, posDeltaBuffer);\n\n        if (indexHasPayloads) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk payload block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, payloadLengthBuffer);\n          int numBytes = payIn.readVInt();\n          // if (DEBUG) {\n          //   System.out.println(\"        \" + numBytes + \" payload bytes @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          if (numBytes > payloadBytes.length) {\n            payloadBytes = ArrayUtil.grow(payloadBytes, numBytes);\n          }\n          payIn.readBytes(payloadBytes, 0, numBytes);\n          payloadByteUpto = 0;\n        }\n\n        if (indexHasOffsets) {\n          // if (DEBUG) {\n          //   System.out.println(\"        bulk offset block @ pay.fp=\" + payIn.getFilePointer());\n          // }\n          forUtil.readBlock(payIn, encoded, offsetStartDeltaBuffer);\n          forUtil.readBlock(payIn, encoded, offsetLengthBuffer);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc6cbc7e8693270112e8d40ca98226199c0288e"],"aed6489ab771989e9105eff4656265bdfb15d89f":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["aed6489ab771989e9105eff4656265bdfb15d89f"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"aed6489ab771989e9105eff4656265bdfb15d89f":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["aed6489ab771989e9105eff4656265bdfb15d89f"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}