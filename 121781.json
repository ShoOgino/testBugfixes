{"path":"solr/core/src/java/org/apache/solr/update/processor/CdcrUpdateProcessor#versionAdd(AddUpdateCommand).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/CdcrUpdateProcessor#versionAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected boolean versionAdd(AddUpdateCommand cmd) throws IOException {\n    /*\n    temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.versionAdd doesn't execute leader logic\n    but the else part of that if. That way version remains preserved.\n\n    we cannot set the flag for the whole processAdd method because DistributedUpdateProcessor.setupRequest() would set\n    isLeader to false which wouldn't work\n     */\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() | UpdateCommand.PEER_SYNC); // we need super.versionAdd() to set leaderLogic to false\n    }\n\n    boolean result = super.versionAdd(cmd);\n\n    // unset the flag to avoid unintended consequences down the chain\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() & ~UpdateCommand.PEER_SYNC);\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc","date":1507866341,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/CdcrUpdateProcessor#versionAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/CdcrUpdateProcessor#versionAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  protected boolean versionAdd(AddUpdateCommand cmd) throws IOException {\n    /*\n    temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.versionAdd doesn't execute leader logic\n    but the else part of that if. That way version remains preserved.\n\n    we cannot set the flag for the whole processAdd method because DistributedUpdateProcessor.setupRequest() would set\n    isLeader to false which wouldn't work\n     */\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() | UpdateCommand.PEER_SYNC); // we need super.versionAdd() to set leaderLogic to false\n    }\n\n    boolean result = super.versionAdd(cmd);\n\n    // unset the flag to avoid unintended consequences down the chain\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() & ~UpdateCommand.PEER_SYNC);\n    }\n\n    //additional logging\n    log.info(\"cdcr: version received at target: \" + cmd.getVersion());\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  protected boolean versionAdd(AddUpdateCommand cmd) throws IOException {\n    /*\n    temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.versionAdd doesn't execute leader logic\n    but the else part of that if. That way version remains preserved.\n\n    we cannot set the flag for the whole processAdd method because DistributedUpdateProcessor.setupRequest() would set\n    isLeader to false which wouldn't work\n     */\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() | UpdateCommand.PEER_SYNC); // we need super.versionAdd() to set leaderLogic to false\n    }\n\n    boolean result = super.versionAdd(cmd);\n\n    // unset the flag to avoid unintended consequences down the chain\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() & ~UpdateCommand.PEER_SYNC);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786","date":1508967813,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/CdcrUpdateProcessor#versionAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/CdcrUpdateProcessor#versionAdd(AddUpdateCommand).mjava","sourceNew":"  @Override\n  protected boolean versionAdd(AddUpdateCommand cmd) throws IOException {\n    /*\n    temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.versionAdd doesn't execute leader logic\n    but the else part of that if. That way version remains preserved.\n\n    we cannot set the flag for the whole processAdd method because DistributedUpdateProcessor.setupRequest() would set\n    isLeader to false which wouldn't work\n     */\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() | UpdateCommand.PEER_SYNC); // we need super.versionAdd() to set leaderLogic to false\n    }\n\n    boolean result = super.versionAdd(cmd);\n\n    // unset the flag to avoid unintended consequences down the chain\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() & ~UpdateCommand.PEER_SYNC);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  protected boolean versionAdd(AddUpdateCommand cmd) throws IOException {\n    /*\n    temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.versionAdd doesn't execute leader logic\n    but the else part of that if. That way version remains preserved.\n\n    we cannot set the flag for the whole processAdd method because DistributedUpdateProcessor.setupRequest() would set\n    isLeader to false which wouldn't work\n     */\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() | UpdateCommand.PEER_SYNC); // we need super.versionAdd() to set leaderLogic to false\n    }\n\n    boolean result = super.versionAdd(cmd);\n\n    // unset the flag to avoid unintended consequences down the chain\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() & ~UpdateCommand.PEER_SYNC);\n    }\n\n    //additional logging\n    log.info(\"cdcr: version received at target: \" + cmd.getVersion());\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/CdcrUpdateProcessor#versionAdd(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected boolean versionAdd(AddUpdateCommand cmd) throws IOException {\n    /*\n    temporarily set the PEER_SYNC flag so that DistributedUpdateProcessor.versionAdd doesn't execute leader logic\n    but the else part of that if. That way version remains preserved.\n\n    we cannot set the flag for the whole processAdd method because DistributedUpdateProcessor.setupRequest() would set\n    isLeader to false which wouldn't work\n     */\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() | UpdateCommand.PEER_SYNC); // we need super.versionAdd() to set leaderLogic to false\n    }\n\n    boolean result = super.versionAdd(cmd);\n\n    // unset the flag to avoid unintended consequences down the chain\n    if (cmd.getReq().getParams().get(CDCR_UPDATE) != null) {\n      cmd.setFlags(cmd.getFlags() & ~UpdateCommand.PEER_SYNC);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}