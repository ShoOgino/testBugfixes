{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testInvalidOffsets().mjava","commits":[{"id":"ad9b045ba726c4e5cd4a99bac259518a632bc901","date":1327250466,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testInvalidOffsets().mjava","pathOld":"/dev/null","sourceNew":"  // SOLR-2891\n  // *CompoundWordTokenFilter blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case ü -> ue)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    final CharArraySet dict = makeDictionary(\"fall\");\n    final NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"ü\", \"ue\");\n    \n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, tokenizer, dict);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(normMap, CharReader.get(reader));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"banküberfall\", \n        new String[] { \"bankueberfall\", \"fall\" },\n        new int[] { 0,  0 },\n        new int[] { 12, 12 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testInvalidOffsets().mjava","pathOld":"/dev/null","sourceNew":"  // SOLR-2891\n  // *CompoundWordTokenFilter blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case ü -> ue)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    final CharArraySet dict = makeDictionary(\"fall\");\n    final NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"ü\", \"ue\");\n    \n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, tokenizer, dict);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(normMap, CharReader.get(reader));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"banküberfall\", \n        new String[] { \"bankueberfall\", \"fall\" },\n        new int[] { 0,  0 },\n        new int[] { 12, 12 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testInvalidOffsets().mjava","pathOld":"/dev/null","sourceNew":"  // SOLR-2891\n  // *CompoundWordTokenFilter blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case ü -> ue)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    final CharArraySet dict = makeDictionary(\"fall\");\n    final NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"ü\", \"ue\");\n    \n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, tokenizer, dict);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(normMap, CharReader.get(reader));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"banküberfall\", \n        new String[] { \"bankueberfall\", \"fall\" },\n        new int[] { 0,  0 },\n        new int[] { 12, 12 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testInvalidOffsets().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testInvalidOffsets().mjava","sourceNew":"  // SOLR-2891\n  // *CompoundWordTokenFilter blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case ü -> ue)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    final CharArraySet dict = makeDictionary(\"fall\");\n    final NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"ü\", \"ue\");\n    \n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, tokenizer, dict);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(normMap, CharReader.get(reader));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"banküberfall\", \n        new String[] { \"bankueberfall\", \"fall\" },\n        new int[] { 0,  0 },\n        new int[] { 12, 12 });\n  }\n\n","sourceOld":"  // SOLR-2891\n  // *CompoundWordTokenFilter blindly adds term length to offset, but this can take things out of bounds\n  // wrt original text if a previous filter increases the length of the word (in this case ü -> ue)\n  // so in this case we behave like WDF, and preserve any modified offsets\n  public void testInvalidOffsets() throws Exception {\n    final CharArraySet dict = makeDictionary(\"fall\");\n    final NormalizeCharMap normMap = new NormalizeCharMap();\n    normMap.add(\"ü\", \"ue\");\n    \n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        TokenFilter filter = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, tokenizer, dict);\n        return new TokenStreamComponents(tokenizer, filter);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MappingCharFilter(normMap, CharReader.get(reader));\n      }\n    };\n\n    assertAnalyzesTo(analyzer, \"banküberfall\", \n        new String[] { \"bankueberfall\", \"fall\" },\n        new int[] { 0,  0 },\n        new int[] { 12, 12 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad9b045ba726c4e5cd4a99bac259518a632bc901"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9b045ba726c4e5cd4a99bac259518a632bc901"],"ad9b045ba726c4e5cd4a99bac259518a632bc901":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad9b045ba726c4e5cd4a99bac259518a632bc901"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9b045ba726c4e5cd4a99bac259518a632bc901":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","ad9b045ba726c4e5cd4a99bac259518a632bc901","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}