{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<Term>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<Term>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<Term>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, false).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, false, 1f).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, false).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, false, 1f).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, false).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, false, 1f).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, false, 1f).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.visit(QueryVisitor.termCollector(terms));\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanTermQuery(new Term(\"first\", \"sally\")),\n                new SpanTermQuery(new Term(\"first\", \"james\")));\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<>();\n    qr.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, 1f).extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c257cd8ddb1ed5632a36c7488614a2ee21705d24","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["9fc47cb7b4346802411bb432f501ed0673d7119e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}