{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int sz = doc.size() + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n    if (children != null) {\n      for (SolrDocument child : children) {\n        writeSolrDocument(child);\n      }\n    }\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, doc.size());\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int fieldsCount = 0;\n    if(writableDocFields == null || writableDocFields.wantsAllFields() || ignoreWritable){\n      fieldsCount = doc.size();\n    } else {\n      for (Entry<String, Object> e : doc) {\n        if(toWrite(e.getKey())) fieldsCount++;\n      }\n    }\n    int sz = fieldsCount + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      if(toWrite(name)) {\n        writeExternString(name);\n        Object val = entry.getValue();\n        writeVal(val);\n      }\n    }\n    if (children != null) {\n      try {\n        ignoreWritable = true;\n        for (SolrDocument child : children) {\n          writeSolrDocument(child);\n        }\n      } finally {\n        ignoreWritable = false;\n      }\n    }\n\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int sz = doc.size() + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      writeExternString(name);\n      Object val = entry.getValue();\n      writeVal(val);\n    }\n    if (children != null) {\n      for (SolrDocument child : children) {\n        writeSolrDocument(child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e7ba4f223712927a09f4dfb65a4c261d07ccc54","date":1544513757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int fieldsCount = 0;\n    if(writableDocFields == null || writableDocFields.wantsAllFields() || ignoreWritable){\n      fieldsCount = doc.size();\n    } else {\n      for (Entry<String, Object> e : doc) {\n        if(toWrite(e.getKey())) fieldsCount++;\n      }\n    }\n    int sz = fieldsCount + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    if (cew == null) cew = new ConditionalMapWriter.EntryWriterWrapper(ew, (k, o) -> toWrite(k.toString()));\n    doc.writeMap(cew);\n    if (children != null) {\n      try {\n        ignoreWritable = true;\n        for (SolrDocument child : children) {\n          writeSolrDocument(child);\n        }\n      } finally {\n        ignoreWritable = false;\n      }\n    }\n\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int fieldsCount = 0;\n    if(writableDocFields == null || writableDocFields.wantsAllFields() || ignoreWritable){\n      fieldsCount = doc.size();\n    } else {\n      for (Entry<String, Object> e : doc) {\n        if(toWrite(e.getKey())) fieldsCount++;\n      }\n    }\n    int sz = fieldsCount + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    for (Map.Entry<String, Object> entry : doc) {\n      String name = entry.getKey();\n      if(toWrite(name)) {\n        writeExternString(name);\n        Object val = entry.getValue();\n        writeVal(val);\n      }\n    }\n    if (children != null) {\n      try {\n        ignoreWritable = true;\n        for (SolrDocument child : children) {\n          writeSolrDocument(child);\n        }\n      } finally {\n        ignoreWritable = false;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int fieldsCount = 0;\n    if(writableDocFields == null || writableDocFields.wantsAllFields() || ignoreWritable){\n      fieldsCount = doc.size();\n    } else {\n      for (Entry<String, Object> e : doc) {\n        if(toWrite(e.getKey())) fieldsCount++;\n      }\n    }\n    int sz = fieldsCount + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    if (cew == null) cew = new ConditionalKeyMapWriter.EntryWriterWrapper(ew, (k) -> toWrite(k.toString()));\n    doc.writeMap(cew);\n    if (children != null) {\n      try {\n        ignoreWritable = true;\n        for (SolrDocument child : children) {\n          writeSolrDocument(child);\n        }\n      } finally {\n        ignoreWritable = false;\n      }\n    }\n\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int fieldsCount = 0;\n    if(writableDocFields == null || writableDocFields.wantsAllFields() || ignoreWritable){\n      fieldsCount = doc.size();\n    } else {\n      for (Entry<String, Object> e : doc) {\n        if(toWrite(e.getKey())) fieldsCount++;\n      }\n    }\n    int sz = fieldsCount + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    if (cew == null) cew = new ConditionalMapWriter.EntryWriterWrapper(ew, (k, o) -> toWrite(k.toString()));\n    doc.writeMap(cew);\n    if (children != null) {\n      try {\n        ignoreWritable = true;\n        for (SolrDocument child : children) {\n          writeSolrDocument(child);\n        }\n      } finally {\n        ignoreWritable = false;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeSolrDocument(SolrDocument).mjava","sourceNew":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int fieldsCount = 0;\n    if(writableDocFields == null || writableDocFields.wantsAllFields() || ignoreWritable){\n      fieldsCount = doc.size();\n    } else {\n      for (Entry<String, Object> e : doc) {\n        if(toWrite(e.getKey())) fieldsCount++;\n      }\n    }\n    int sz = fieldsCount + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    if (cew == null) cew = new ConditionalKeyMapWriter.EntryWriterWrapper(ew, (k) -> toWrite(k.toString()));\n    doc.writeMap(cew);\n    if (children != null) {\n      try {\n        ignoreWritable = true;\n        for (SolrDocument child : children) {\n          writeSolrDocument(child);\n        }\n      } finally {\n        ignoreWritable = false;\n      }\n    }\n\n  }\n\n","sourceOld":"  public void writeSolrDocument(SolrDocument doc) throws IOException {\n    List<SolrDocument> children = doc.getChildDocuments();\n    int fieldsCount = 0;\n    if(writableDocFields == null || writableDocFields.wantsAllFields() || ignoreWritable){\n      fieldsCount = doc.size();\n    } else {\n      for (Entry<String, Object> e : doc) {\n        if(toWrite(e.getKey())) fieldsCount++;\n      }\n    }\n    int sz = fieldsCount + (children==null ? 0 : children.size());\n    writeTag(SOLRDOC);\n    writeTag(ORDERED_MAP, sz);\n    if (cew == null) cew = new ConditionalMapWriter.EntryWriterWrapper(ew, (k, o) -> toWrite(k.toString()));\n    doc.writeMap(cew);\n    if (children != null) {\n      try {\n        ignoreWritable = true;\n        for (SolrDocument child : children) {\n          writeSolrDocument(child);\n        }\n      } finally {\n        ignoreWritable = false;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["074c4e385ea7c9ae29556e95c886ea0ccc614029","b0b597c65628ca9e73913a07e81691f8229bae35"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}