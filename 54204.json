{"path":"src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","commits":[{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Object).mjava","sourceNew":"    public Object get(IndexReader reader, Entry key) throws IOException {\n      Map innerCache;\n      Object value;\n      final Object readerKey = reader.getFieldCacheKey();\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","sourceOld":"    public Object get(IndexReader reader, Object key) throws IOException {\n      Map innerCache;\n      Object value;\n      final Object readerKey = reader.getFieldCacheKey();\n\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc49125c51f0faf2f4139ab868a05fdc8e1f3206","date":1251200685,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","sourceNew":"    public Object get(IndexReader reader, Entry key) throws IOException {\n      Map innerCache;\n      Object value;\n      final Object readerKey = reader.getFieldCacheKey();\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.custom != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","sourceOld":"    public Object get(IndexReader reader, Entry key) throws IOException {\n      Map innerCache;\n      Object value;\n      final Object readerKey = reader.getFieldCacheKey();\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce","date":1255993146,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","sourceNew":"    public Object get(IndexReader reader, Entry key) throws IOException {\n      Map<Entry,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getFieldCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.custom != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","sourceOld":"    public Object get(IndexReader reader, Entry key) throws IOException {\n      Map innerCache;\n      Object value;\n      final Object readerKey = reader.getFieldCacheKey();\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.custom != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl.Cache#get(IndexReader,Entry).mjava","sourceNew":"    public Object get(IndexReader reader, Entry key) throws IOException {\n      Map<Entry,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getFieldCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.custom != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","sourceOld":"    public Object get(IndexReader reader, Entry key) throws IOException {\n      Map<Entry,Object> innerCache;\n      Object value;\n      final Object readerKey = reader.getFieldCacheKey();\n      synchronized (readerCache) {\n        innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n\n            // Only check if key.custom (the parser) is\n            // non-null; else, we check twice for a single\n            // call to FieldCache.getXXX\n            if (key.custom != null && wrapper != null) {\n              final PrintStream infoStream = wrapper.getInfoStream();\n              if (infoStream != null) {\n                printNewInsanity(infoStream, progress.value);\n              }\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc49125c51f0faf2f4139ab868a05fdc8e1f3206":["e69f59b863731d864bf3047235e718f0f88f8841"],"e69f59b863731d864bf3047235e718f0f88f8841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce":["bc49125c51f0faf2f4139ab868a05fdc8e1f3206"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce"]},"commit2Childs":{"bc49125c51f0faf2f4139ab868a05fdc8e1f3206":["20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce"],"e69f59b863731d864bf3047235e718f0f88f8841":["bc49125c51f0faf2f4139ab868a05fdc8e1f3206"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69f59b863731d864bf3047235e718f0f88f8841"],"20ff1ff2aa6f91149e9cd75f65a56fbdda5266ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}