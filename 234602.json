{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(Suggestion.Ctx,Set[String]).mjava","commits":[{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(Suggestion.Ctx,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private List<String> getSortedShards(Suggestion.Ctx ctx, Set<String> shardSet) {\n    return  shardSet.stream()\n        .map(shard1 -> {\n          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();\n          for (Row node : ctx.session.matrix) {\n            node.forEachShard(ctx.violation.coll, (s, ri) -> {\n              if (result.get() != null) return;\n              if (s.equals(shard1) && ri.size() > 0) {\n                Number sz = ((Number) ri.get(0).getVariable(CORE_IDX.tagName));\n                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));\n              }\n            });\n          }\n          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();\n        })\n        .sorted(Comparator.comparingLong(Pair::second))\n        .map(Pair::first)\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":5,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(List[Row],Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(Suggestion.Ctx,Set[String]).mjava","sourceNew":"  static List<String> getSortedShards(List<Row> matrix, Collection<String> shardSet, String coll) {\n    return  shardSet.stream()\n        .map(shard1 -> {\n          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();\n          for (Row node : matrix) {\n            node.forEachShard(coll, (s, ri) -> {\n              if (result.get() != null) return;\n              if (s.equals(shard1) && ri.size() > 0) {\n                Number sz = ((Number) ri.get(0).getVariable(CORE_IDX.tagName));\n                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));\n              }\n            });\n          }\n          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();\n        })\n        .sorted(Comparator.comparingLong(Pair::second))\n        .map(Pair::first)\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  private List<String> getSortedShards(Suggestion.Ctx ctx, Set<String> shardSet) {\n    return  shardSet.stream()\n        .map(shard1 -> {\n          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();\n          for (Row node : ctx.session.matrix) {\n            node.forEachShard(ctx.violation.coll, (s, ri) -> {\n              if (result.get() != null) return;\n              if (s.equals(shard1) && ri.size() > 0) {\n                Number sz = ((Number) ri.get(0).getVariable(CORE_IDX.tagName));\n                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));\n              }\n            });\n          }\n          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();\n        })\n        .sorted(Comparator.comparingLong(Pair::second))\n        .map(Pair::first)\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6428b274f6593f368c4f838379620e7f5d196d65"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"6428b274f6593f368c4f838379620e7f5d196d65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["6428b274f6593f368c4f838379620e7f5d196d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}