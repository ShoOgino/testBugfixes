{"path":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, final String scope) {\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.register(this, registryName, metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, final String scope) {\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.register(this, registryName, metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n        shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["52275555c0ae3b55430cef26ad7fca3f02440944"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a117d95183986014a31f25bb04e5464ca06d6068":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"52275555c0ae3b55430cef26ad7fca3f02440944":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}