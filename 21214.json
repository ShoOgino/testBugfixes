{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.setData(payloadStream.convertStreamToByteArray());\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.setData(payloadStream.convertStreamToByteArray());\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.bytes = payloadStream.convertStreamToByteArray();\n      payload.offset = 0;\n      payload.length = payload.bytes.length;\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.setData(payloadStream.convertStreamToByteArray());\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.bytes = payloadStream.convertStreamToByteArray();\n      payload.offset = 0;\n      payload.length = payload.bytes.length;\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CountingListTokenizer#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      if (this.categoryAttribute != null) {\n        OrdinalProperty ordinalProperty = (OrdinalProperty) this.categoryAttribute\n            .getProperty(OrdinalProperty.class);\n        if (ordinalProperty != null && legalCategory()) {\n          CategoryPath categoryPath = this.categoryAttribute\n              .getCategoryPath();\n          int ordinal = ordinalProperty.getOrdinal();\n          CategoryListPayloadStream payloadStream = getPayloadStream(\n              categoryPath, ordinal);\n          int partitionSize = indexingParams.getPartitionSize();\n          payloadStream.appendIntToStream(ordinal % partitionSize);\n        }\n      }\n      return true;\n    }\n    if (this.payloadStreamIterator == null) {\n      this.handleEndOfInput();\n      this.payloadStreamIterator = this.payloadStreamsByName.entrySet()\n          .iterator();\n    }\n    if (this.payloadStreamIterator.hasNext()) {\n      Entry<String, CategoryListPayloadStream> entry = this.payloadStreamIterator\n          .next();\n      String countingListName = entry.getKey();\n      int length = countingListName.length();\n      this.termAttribute.resizeBuffer(length);\n      countingListName.getChars(0, length, termAttribute.buffer(), 0);\n      this.termAttribute.setLength(length);\n      CategoryListPayloadStream payloadStream = entry.getValue();\n      payload.bytes = payloadStream.convertStreamToByteArray();\n      payload.offset = 0;\n      payload.length = payload.bytes.length;\n      this.payloadAttribute.setPayload(payload);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["76fa9933adb0556e752e8af9734c4d0ae14622ff","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}