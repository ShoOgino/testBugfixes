{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanSimilarity#build(SpanQuery,IndexSearcher,boolean,SpanWeight...).mjava","commits":[{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanSimilarity#build(SpanQuery,IndexSearcher,boolean,SpanWeight...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build a SpanSimilarity\n   * @param query the SpanQuery to run\n   * @param searcher the searcher\n   * @param needsScores whether or not scores are required\n   * @param weights an array of {@link org.apache.lucene.search.spans.SpanWeight}s to extract terms from\n   * @return a SpanSimilarity, or null if there are no statistics to use\n   * @throws IOException on error\n   */\n  public static SpanSimilarity build(SpanQuery query, IndexSearcher searcher, boolean needsScores, SpanWeight... weights) throws IOException {\n\n    if (!needsScores)\n      return new NonScoringSimilarity(query.getField());\n\n    Map<Term, TermContext> contexts = new HashMap<>();\n    for (SpanWeight w : weights) {\n      w.extractTermContexts(contexts);\n    }\n\n    if (contexts.size() == 0)\n      return null;\n\n    TermStatistics[] stats = new TermStatistics[contexts.size()];\n    int i = 0;\n    for (Term term : contexts.keySet()) {\n      stats[i] = searcher.termStatistics(term, contexts.get(term));\n      i++;\n    }\n\n    return new ScoringSimilarity(query, searcher, stats);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4b6308fa66dc96de36abfae5d3e7c92c805e227","date":1432916588,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanSimilarity#build(SpanQuery,IndexSearcher,boolean,SpanWeight...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Build a SpanSimilarity\n   * @param query the SpanQuery to run\n   * @param searcher the searcher\n   * @param needsScores whether or not scores are required\n   * @param weights an array of {@link org.apache.lucene.search.spans.SpanWeight}s to extract terms from\n   * @return a SpanSimilarity, or null if there are no statistics to use\n   * @throws IOException on error\n   */\n  public static SpanSimilarity build(SpanQuery query, IndexSearcher searcher, boolean needsScores, SpanWeight... weights) throws IOException {\n\n    if (!needsScores)\n      return new NonScoringSimilarity(query.getField());\n\n    Map<Term, TermContext> contexts = new HashMap<>();\n    for (SpanWeight w : weights) {\n      w.extractTermContexts(contexts);\n    }\n\n    if (contexts.size() == 0)\n      return null;\n\n    TermStatistics[] stats = new TermStatistics[contexts.size()];\n    int i = 0;\n    for (Term term : contexts.keySet()) {\n      stats[i] = searcher.termStatistics(term, contexts.get(term));\n      i++;\n    }\n\n    return new ScoringSimilarity(query, searcher, stats);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}