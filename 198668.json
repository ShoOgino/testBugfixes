{"path":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) throws IOException {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","sourceNew":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits);\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) throws IOException {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","sourceNew":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits);\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) throws IOException {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500a89755c0c3953ca1886b5abb653b8cef8e299","date":1487933004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","sourceNew":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * Note: This method will fill the {@link ScoreDoc#shardIndex} on all score docs returned iff all ScoreDocs passed\n   * to this have it's shard index set to <tt>-1</tt>. Otherwise the shard index is not set. This allows to predefine\n   * the shard index in order to incrementally merge shard responses without losing the original shard index.\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits);\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5b816df64f2b489d1e711be80f9416f9862c1b","date":1487973679,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","sourceNew":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * Note: If {@code setShardIndex} is true, this method will assume the incoming order of {@code shardHits} reflects\n   * each shard's index and will fill the {@link ScoreDoc#shardIndex}, otherwise\n   * it must already be set for all incoming {@code ScoreDoc}s, which can be useful when doing multiple reductions\n   * (merges) of TopDocs.\n   *\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits, boolean setShardIndex) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits, setShardIndex);\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * Note: This method will fill the {@link ScoreDoc#shardIndex} on all score docs returned iff all ScoreDocs passed\n   * to this have it's shard index set to <tt>-1</tt>. Otherwise the shard index is not set. This allows to predefine\n   * the shard index in order to incrementally merge shard responses without losing the original shard index.\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36510a8e3c1ec60d366b45f8f716e9dc47589661","date":1561989412,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[],boolean).mjava","sourceNew":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * docIDs are expected to be in consistent pattern i.e. either all ScoreDocs have their shardIndex set,\n   * or all have them as -1 (signifying that all hits belong to same searcher)\n   *\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits, DEFAULT_TIE_BREAKER);\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * Note: If {@code setShardIndex} is true, this method will assume the incoming order of {@code shardHits} reflects\n   * each shard's index and will fill the {@link ScoreDoc#shardIndex}, otherwise\n   * it must already be set for all incoming {@code ScoreDoc}s, which can be useful when doing multiple reductions\n   * (merges) of TopDocs.\n   *\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits, boolean setShardIndex) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits, setShardIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4f6b0fb6f08ac48f438f03002a283a63cb9992","date":1561992803,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","sourceNew":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * Note: If {@code setShardIndex} is true, this method will assume the incoming order of {@code shardHits} reflects\n   * each shard's index and will fill the {@link ScoreDoc#shardIndex}, otherwise\n   * it must already be set for all incoming {@code ScoreDoc}s, which can be useful when doing multiple reductions\n   * (merges) of TopDocs.\n   *\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits, boolean setShardIndex) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits, setShardIndex);\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * docIDs are expected to be in consistent pattern i.e. either all ScoreDocs have their shardIndex set,\n   * or all have them as -1 (signifying that all hits belong to same searcher)\n   *\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits, DEFAULT_TIE_BREAKER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fccd4a691aac1aff06ab8110d8693514a34160c3","date":1562092518,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopFieldDocs[],boolean).mjava","sourceNew":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * docIDs are expected to be in consistent pattern i.e. either all ScoreDocs have their shardIndex set,\n   * or all have them as -1 (signifying that all hits belong to same searcher)\n   *\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits, DEFAULT_TIE_BREAKER);\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #merge(Sort, int, TopFieldDocs[])} but also ignores the top\n   * {@code start} top docs. This is typically useful for pagination.\n   *\n   * Note: If {@code setShardIndex} is true, this method will assume the incoming order of {@code shardHits} reflects\n   * each shard's index and will fill the {@link ScoreDoc#shardIndex}, otherwise\n   * it must already be set for all incoming {@code ScoreDoc}s, which can be useful when doing multiple reductions\n   * (merges) of TopDocs.\n   *\n   * @lucene.experimental\n   */\n  public static TopFieldDocs merge(Sort sort, int start, int topN, TopFieldDocs[] shardHits, boolean setShardIndex) {\n    if (sort == null) {\n      throw new IllegalArgumentException(\"sort must be non-null when merging field-docs\");\n    }\n    return (TopFieldDocs) mergeAux(sort, start, topN, shardHits, setShardIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["9a5b816df64f2b489d1e711be80f9416f9862c1b"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a5b816df64f2b489d1e711be80f9416f9862c1b":["500a89755c0c3953ca1886b5abb653b8cef8e299"],"03e38c6374c23083c93e212a9498ff0a9c255476":["fb17639909a369c1e64866842e5c213440acc17e"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["03e38c6374c23083c93e212a9498ff0a9c255476"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["fb17639909a369c1e64866842e5c213440acc17e","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["36510a8e3c1ec60d366b45f8f716e9dc47589661"]},"commit2Childs":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"fb17639909a369c1e64866842e5c213440acc17e":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"9a5b816df64f2b489d1e711be80f9416f9862c1b":["36510a8e3c1ec60d366b45f8f716e9dc47589661"],"03e38c6374c23083c93e212a9498ff0a9c255476":["500a89755c0c3953ca1886b5abb653b8cef8e299","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["9a5b816df64f2b489d1e711be80f9416f9862c1b"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}