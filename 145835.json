{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","commits":[{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void abort() {\n    Set<String> files = new HashSet<String>();\n    files(state.directory, state.fieldInfos, state.segmentName, files, segmentSuffix);\n    IOUtils.deleteFilesIgnoringExceptions(state.directory,\n        files.toArray(new String[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void abort() {\n    Set<String> files = new HashSet<String>();\n    files(state.directory, state.fieldInfos, state.segmentName, files, segmentSuffix);\n    IOUtils.deleteFilesIgnoringExceptions(state.directory,\n        files.toArray(new String[0]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    Set<String> files = new HashSet<String>();\n    files(state.directory, state.segmentName, files, segmentSuffix);\n    IOUtils.deleteFilesIgnoringExceptions(state.directory,\n                                          SegmentInfo.findMatchingFiles(state.directory, files).toArray(new String[0]));\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    Set<String> files = new HashSet<String>();\n    files(state.directory, state.fieldInfos, state.segmentName, files, segmentSuffix);\n    IOUtils.deleteFilesIgnoringExceptions(state.directory,\n        files.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    Set<String> files = new HashSet<String>();\n    files(state.directory, state.segmentName, files, segmentSuffix);\n    IOUtils.deleteFilesIgnoringExceptions(state.directory,\n                                          SegmentInfo.findMatchingFiles(state.segmentName, state.directory, files).toArray(new String[0]));\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    Set<String> files = new HashSet<String>();\n    files(state.directory, state.segmentName, files, segmentSuffix);\n    IOUtils.deleteFilesIgnoringExceptions(state.directory,\n                                          SegmentInfo.findMatchingFiles(state.directory, files).toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"158aaabb931562cac88d162045176b17cf7b15a2","date":1337619251,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    // nocommit must we really delete the files...?  IFD\n    // will do so I think?\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    Set<String> files = new HashSet<String>();\n    files(state.directory, state.segmentName, files, segmentSuffix);\n    IOUtils.deleteFilesIgnoringExceptions(state.directory,\n                                          SegmentInfo.findMatchingFiles(state.segmentName, state.directory, files).toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"662f233ff219b7c334eb6c65cd68cc71b27a4ffe","date":1337732885,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    // We don't have to remove files here: IndexFileDeleter\n    // will do so\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    // nocommit must we really delete the files...?  IFD\n    // will do so I think?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    // We don't have to remove files here: IndexFileDeleter\n    // will do so\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    Set<String> files = new HashSet<String>();\n    files(state.directory, state.fieldInfos, state.segmentName, files, segmentSuffix);\n    IOUtils.deleteFilesIgnoringExceptions(state.directory,\n        files.toArray(new String[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocConsumer#abort().mjava","sourceNew":"  @Override\n  public void abort() {\n    // We don't have to remove files here: IndexFileDeleter\n    // will do so\n  }\n\n","sourceOld":"  @Override\n  public void abort() {\n    // We don't have to remove files here: IndexFileDeleter\n    // will do so\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["de5bbadeb3abac0f650298bff584bd4317bd75aa","662f233ff219b7c334eb6c65cd68cc71b27a4ffe"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"158aaabb931562cac88d162045176b17cf7b15a2":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"662f233ff219b7c334eb6c65cd68cc71b27a4ffe":["158aaabb931562cac88d162045176b17cf7b15a2"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["158aaabb931562cac88d162045176b17cf7b15a2"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"158aaabb931562cac88d162045176b17cf7b15a2":["662f233ff219b7c334eb6c65cd68cc71b27a4ffe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"662f233ff219b7c334eb6c65cd68cc71b27a4ffe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}