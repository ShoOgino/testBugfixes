{"path":"backwards/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"/dev/null","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestCharArraySet#testModifyOnUnmodifiable().mjava","sourceNew":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","sourceOld":"  public void testModifyOnUnmodifiable(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    String NOT_IN_SET = \"SirGallahad\";\n    assertFalse(\"Test String already exists in set\", set.contains(NOT_IN_SET));\n    \n    try{\n      set.add(NOT_IN_SET.toCharArray());  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.add(new StringBuilder(NOT_IN_SET));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.clear();  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Changed unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.add((Object) NOT_IN_SET);  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    try{\n      set.removeAll(Arrays.asList(TEST_STOP_WORDS));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.retainAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertEquals(\"Size of unmodifiable set has changed\", size, set.size());\n    }\n    \n    try{\n      set.addAll(Arrays.asList(new String[]{NOT_IN_SET}));  \n      fail(\"Modified unmodifiable set\");\n    }catch (UnsupportedOperationException e) {\n      // expected\n      assertFalse(\"Test String has been added to unmodifiable set\", set.contains(NOT_IN_SET));\n    }\n    \n    for (int i = 0; i < TEST_STOP_WORDS.length; i++) {\n      assertTrue(set.contains(TEST_STOP_WORDS[i]));  \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}