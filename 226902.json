{"path":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#RandomAcceptedStringsLight(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#RandomAcceptedStringsLight(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"    public RandomAcceptedStringsLight(LightAutomaton a) {\n      this.a = a;\n      if (a.getNumStates() == 0) {\n        throw new IllegalArgumentException(\"this automaton accepts nothing\");\n      }\n      this.transitions = a.getSortedTransitions();\n\n      leadsToAccept = new HashMap<>();\n      final Map<Integer,List<ArrivingTransition>> allArriving = new HashMap<>();\n\n      final LinkedList<Integer> q = new LinkedList<>();\n      final Set<Integer> seen = new HashSet<>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        for(LightAutomaton.Transition t : transitions[s]) {\n          List<ArrivingTransition> tl = allArriving.get(t.dest);\n          if (tl == null) {\n            tl = new ArrayList<>();\n            allArriving.put(t.dest, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (a.isAccept(s)) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while (q.isEmpty() == false) {\n        final int s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final int from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#RandomAcceptedStringsLight(LightAutomaton).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#RandomAcceptedStringsLight(LightAutomaton).mjava","sourceNew":"    public RandomAcceptedStringsLight(LightAutomaton a) {\n      this.a = a;\n      if (a.getNumStates() == 0) {\n        throw new IllegalArgumentException(\"this automaton accepts nothing\");\n      }\n      this.transitions = a.getSortedTransitions();\n\n      leadsToAccept = new HashMap<>();\n      final Map<Integer,List<ArrivingTransition>> allArriving = new HashMap<>();\n\n      final LinkedList<Integer> q = new LinkedList<>();\n      final Set<Integer> seen = new HashSet<>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        for(Transition t : transitions[s]) {\n          List<ArrivingTransition> tl = allArriving.get(t.dest);\n          if (tl == null) {\n            tl = new ArrayList<>();\n            allArriving.put(t.dest, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (a.isAccept(s)) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while (q.isEmpty() == false) {\n        final int s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final int from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public RandomAcceptedStringsLight(LightAutomaton a) {\n      this.a = a;\n      if (a.getNumStates() == 0) {\n        throw new IllegalArgumentException(\"this automaton accepts nothing\");\n      }\n      this.transitions = a.getSortedTransitions();\n\n      leadsToAccept = new HashMap<>();\n      final Map<Integer,List<ArrivingTransition>> allArriving = new HashMap<>();\n\n      final LinkedList<Integer> q = new LinkedList<>();\n      final Set<Integer> seen = new HashSet<>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        for(LightAutomaton.Transition t : transitions[s]) {\n          List<ArrivingTransition> tl = allArriving.get(t.dest);\n          if (tl == null) {\n            tl = new ArrayList<>();\n            allArriving.put(t.dest, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (a.isAccept(s)) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while (q.isEmpty() == false) {\n        final int s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final int from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStrings#RandomAcceptedStrings(LightAutomaton).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil.RandomAcceptedStringsLight#RandomAcceptedStringsLight(LightAutomaton).mjava","sourceNew":"    public RandomAcceptedStrings(LightAutomaton a) {\n      this.a = a;\n      if (a.getNumStates() == 0) {\n        throw new IllegalArgumentException(\"this automaton accepts nothing\");\n      }\n      this.transitions = a.getSortedTransitions();\n\n      leadsToAccept = new HashMap<>();\n      final Map<Integer,List<ArrivingTransition>> allArriving = new HashMap<>();\n\n      final LinkedList<Integer> q = new LinkedList<>();\n      final Set<Integer> seen = new HashSet<>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        for(Transition t : transitions[s]) {\n          List<ArrivingTransition> tl = allArriving.get(t.dest);\n          if (tl == null) {\n            tl = new ArrayList<>();\n            allArriving.put(t.dest, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (a.isAccept(s)) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while (q.isEmpty() == false) {\n        final int s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final int from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public RandomAcceptedStringsLight(LightAutomaton a) {\n      this.a = a;\n      if (a.getNumStates() == 0) {\n        throw new IllegalArgumentException(\"this automaton accepts nothing\");\n      }\n      this.transitions = a.getSortedTransitions();\n\n      leadsToAccept = new HashMap<>();\n      final Map<Integer,List<ArrivingTransition>> allArriving = new HashMap<>();\n\n      final LinkedList<Integer> q = new LinkedList<>();\n      final Set<Integer> seen = new HashSet<>();\n\n      // reverse map the transitions, so we can quickly look\n      // up all arriving transitions to a given state\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        for(Transition t : transitions[s]) {\n          List<ArrivingTransition> tl = allArriving.get(t.dest);\n          if (tl == null) {\n            tl = new ArrayList<>();\n            allArriving.put(t.dest, tl);\n          }\n          tl.add(new ArrivingTransition(s, t));\n        }\n        if (a.isAccept(s)) {\n          q.add(s);\n          seen.add(s);\n        }\n      }\n\n      // Breadth-first search, from accept states,\n      // backwards:\n      while (q.isEmpty() == false) {\n        final int s = q.removeFirst();\n        List<ArrivingTransition> arriving = allArriving.get(s);\n        if (arriving != null) {\n          for(ArrivingTransition at : arriving) {\n            final int from = at.from;\n            if (!seen.contains(from)) {\n              q.add(from);\n              seen.add(from);\n              leadsToAccept.put(at.t, Boolean.TRUE);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}