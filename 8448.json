{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointReader#initReader(long).mjava","sourceNew":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","sourceOld":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd630fded84c5695bd4e07bda0a20634517a4224","date":1476795950,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","sourceNew":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","sourceOld":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef","date":1476800106,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","sourceNew":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","sourceOld":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","sourceNew":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","sourceOld":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","sourceNew":"  private SimpleTextBKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","sourceOld":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","sourceNew":"  private SimpleTextBKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","sourceOld":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointsReader#initReader(long).mjava","sourceNew":"  private SimpleTextBKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDataDims = parseInt(NUM_DATA_DIMS);\n\n    readLine(dataIn);\n    int numIndexDims = parseInt(NUM_INDEX_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numIndexDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numIndexDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numIndexDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numIndexDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDataDims, numIndexDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","sourceOld":"  private SimpleTextBKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointsWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(POINT_COUNT);\n    long pointCount = parseLong(POINT_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(DOC_COUNT);\n    int docCount = parseInt(DOC_COUNT);\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues;\n    int bytesPerIndexEntry;\n    if (numDims == 1) {\n      bytesPerIndexEntry = bytesPerDim;\n    } else {\n      bytesPerIndexEntry = 1 + bytesPerDim;\n    }\n    splitPackedValues = new byte[count * bytesPerIndexEntry];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      int address = bytesPerIndexEntry * i;\n      int splitDim = parseInt(SPLIT_DIM);\n      if (numDims != 1) {\n        splitPackedValues[address++] = (byte) splitDim;\n      }\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, address, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes, pointCount, docCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd630fded84c5695bd4e07bda0a20634517a4224":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","dd630fded84c5695bd4e07bda0a20634517a4224"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["dd630fded84c5695bd4e07bda0a20634517a4224","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"dd630fded84c5695bd4e07bda0a20634517a4224":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}