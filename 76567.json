{"path":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#writeBytes(int,byte[],int,int).mjava","commits":[{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#writeBytes(int,byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Absolute writeBytes without changing the current\n   *  position.  Note: this cannot \"grow\" the bytes, so you\n   *  must only call it on already written parts. */\n  void writeBytes(int dest, byte[] b, int offset, int len) {\n    //System.out.println(\"  BS.writeBytes dest=\" + dest + \" offset=\" + offset + \" len=\" + len);\n    assert dest + len <= getPosition(): \"dest=\" + dest + \" pos=\" + getPosition() + \" len=\" + len;\n\n    // Note: weird: must go \"backwards\" because copyBytes\n    // calls us with overlapping src/dest.  If we\n    // go forwards then we overwrite bytes before we can\n    // copy them:\n\n    /*\n    int blockIndex = dest >> blockBits;\n    int upto = dest & blockMask;\n    byte[] block = blocks.get(blockIndex);\n    while (len > 0) {\n      int chunk = blockSize - upto;\n      System.out.println(\"    cycle chunk=\" + chunk + \" len=\" + len);\n      if (len <= chunk) {\n        System.arraycopy(b, offset, block, upto, len);\n        break;\n      } else {\n        System.arraycopy(b, offset, block, upto, chunk);\n        offset += chunk;\n        len -= chunk;\n        blockIndex++;\n        block = blocks.get(blockIndex);\n        upto = 0;\n      }\n    }\n    */\n\n    final int end = dest + len;\n    int blockIndex = end >> blockBits;\n    int downTo = end & blockMask;\n    if (downTo == 0) {\n      blockIndex--;\n      downTo = blockSize;\n    }\n    byte[] block = blocks.get(blockIndex);\n\n    while (len > 0) {\n      //System.out.println(\"    cycle downTo=\" + downTo + \" len=\" + len);\n      if (len <= downTo) {\n        //System.out.println(\"      final: offset=\" + offset + \" len=\" + len + \" dest=\" + (downTo-len));\n        System.arraycopy(b, offset, block, downTo-len, len);\n        break;\n      } else {\n        len -= downTo;\n        //System.out.println(\"      partial: offset=\" + (offset + len) + \" len=\" + downTo + \" dest=0\");\n        System.arraycopy(b, offset + len, block, 0, downTo);\n        blockIndex--;\n        block = blocks.get(blockIndex);\n        downTo = blockSize;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#writeBytes(long,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesStore#writeBytes(int,byte[],int,int).mjava","sourceNew":"  /** Absolute writeBytes without changing the current\n   *  position.  Note: this cannot \"grow\" the bytes, so you\n   *  must only call it on already written parts. */\n  void writeBytes(long dest, byte[] b, int offset, int len) {\n    //System.out.println(\"  BS.writeBytes dest=\" + dest + \" offset=\" + offset + \" len=\" + len);\n    assert dest + len <= getPosition(): \"dest=\" + dest + \" pos=\" + getPosition() + \" len=\" + len;\n\n    // Note: weird: must go \"backwards\" because copyBytes\n    // calls us with overlapping src/dest.  If we\n    // go forwards then we overwrite bytes before we can\n    // copy them:\n\n    /*\n    int blockIndex = dest >> blockBits;\n    int upto = dest & blockMask;\n    byte[] block = blocks.get(blockIndex);\n    while (len > 0) {\n      int chunk = blockSize - upto;\n      System.out.println(\"    cycle chunk=\" + chunk + \" len=\" + len);\n      if (len <= chunk) {\n        System.arraycopy(b, offset, block, upto, len);\n        break;\n      } else {\n        System.arraycopy(b, offset, block, upto, chunk);\n        offset += chunk;\n        len -= chunk;\n        blockIndex++;\n        block = blocks.get(blockIndex);\n        upto = 0;\n      }\n    }\n    */\n\n    final long end = dest + len;\n    int blockIndex = (int) (end >> blockBits);\n    int downTo = (int) (end & blockMask);\n    if (downTo == 0) {\n      blockIndex--;\n      downTo = blockSize;\n    }\n    byte[] block = blocks.get(blockIndex);\n\n    while (len > 0) {\n      //System.out.println(\"    cycle downTo=\" + downTo + \" len=\" + len);\n      if (len <= downTo) {\n        //System.out.println(\"      final: offset=\" + offset + \" len=\" + len + \" dest=\" + (downTo-len));\n        System.arraycopy(b, offset, block, downTo-len, len);\n        break;\n      } else {\n        len -= downTo;\n        //System.out.println(\"      partial: offset=\" + (offset + len) + \" len=\" + downTo + \" dest=0\");\n        System.arraycopy(b, offset + len, block, 0, downTo);\n        blockIndex--;\n        block = blocks.get(blockIndex);\n        downTo = blockSize;\n      }\n    }\n  }\n\n","sourceOld":"  /** Absolute writeBytes without changing the current\n   *  position.  Note: this cannot \"grow\" the bytes, so you\n   *  must only call it on already written parts. */\n  void writeBytes(int dest, byte[] b, int offset, int len) {\n    //System.out.println(\"  BS.writeBytes dest=\" + dest + \" offset=\" + offset + \" len=\" + len);\n    assert dest + len <= getPosition(): \"dest=\" + dest + \" pos=\" + getPosition() + \" len=\" + len;\n\n    // Note: weird: must go \"backwards\" because copyBytes\n    // calls us with overlapping src/dest.  If we\n    // go forwards then we overwrite bytes before we can\n    // copy them:\n\n    /*\n    int blockIndex = dest >> blockBits;\n    int upto = dest & blockMask;\n    byte[] block = blocks.get(blockIndex);\n    while (len > 0) {\n      int chunk = blockSize - upto;\n      System.out.println(\"    cycle chunk=\" + chunk + \" len=\" + len);\n      if (len <= chunk) {\n        System.arraycopy(b, offset, block, upto, len);\n        break;\n      } else {\n        System.arraycopy(b, offset, block, upto, chunk);\n        offset += chunk;\n        len -= chunk;\n        blockIndex++;\n        block = blocks.get(blockIndex);\n        upto = 0;\n      }\n    }\n    */\n\n    final int end = dest + len;\n    int blockIndex = end >> blockBits;\n    int downTo = end & blockMask;\n    if (downTo == 0) {\n      blockIndex--;\n      downTo = blockSize;\n    }\n    byte[] block = blocks.get(blockIndex);\n\n    while (len > 0) {\n      //System.out.println(\"    cycle downTo=\" + downTo + \" len=\" + len);\n      if (len <= downTo) {\n        //System.out.println(\"      final: offset=\" + offset + \" len=\" + len + \" dest=\" + (downTo-len));\n        System.arraycopy(b, offset, block, downTo-len, len);\n        break;\n      } else {\n        len -= downTo;\n        //System.out.println(\"      partial: offset=\" + (offset + len) + \" len=\" + downTo + \" dest=0\");\n        System.arraycopy(b, offset + len, block, 0, downTo);\n        blockIndex--;\n        block = blocks.get(blockIndex);\n        downTo = blockSize;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"]},"commit2Childs":{"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}