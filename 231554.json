{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new WildcardQuery(new Term(\"body\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"one\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"se*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.startOffset > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.startOffset;\n              for (int i = 0; i < passage.numMatches; i++) {\n                int start = passage.matchStarts[i];\n                int end = passage.matchEnds[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.endOffset));\n              pos = passage.endOffset;\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter bolds each hit:\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:one)</b> <b>sentence(body:se*)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["46e1d94eff339f485fea1578f61a41eb374073ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new WildcardQuery(new Term(\"body\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"one\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"se*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.startOffset > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.startOffset;\n              for (int i = 0; i < passage.numMatches; i++) {\n                int start = passage.matchStarts[i];\n                int end = passage.matchEnds[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.endOffset));\n              pos = passage.endOffset;\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter bolds each hit:\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:one)</b> <b>sentence(body:se*)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f714d649962c934166dedd1e83173e36356b328","date":1479399594,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","sourceNew":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new WildcardQuery(new Term(\"body\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"one\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"se*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter bolds each hit:\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:one)</b> <b>sentence(body:se*)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new WildcardQuery(new Term(\"body\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"one\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"se*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.startOffset > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.startOffset;\n              for (int i = 0; i < passage.numMatches; i++) {\n                int start = passage.matchStarts[i];\n                int end = passage.matchEnds[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.endOffset));\n              pos = passage.endOffset;\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter bolds each hit:\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:one)</b> <b>sentence(body:se*)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","sourceNew":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new WildcardQuery(new Term(\"body\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"one\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"se*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter bolds each hit:\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:one)</b> <b>sentence(body:se*)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new WildcardQuery(new Term(\"body\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"one\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"se*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.startOffset > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.startOffset;\n              for (int i = 0; i < passage.numMatches; i++) {\n                int start = passage.matchStarts[i];\n                int end = passage.matchEnds[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.endOffset));\n              pos = passage.endOffset;\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter bolds each hit:\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:one)</b> <b>sentence(body:se*)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e1d94eff339f485fea1578f61a41eb374073ab","date":1488350334,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","sourceNew":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    // use a variety of common MTQ types\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new PrefixQuery(new Term(\"body\", \"te\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"*one*\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"body\", \"zentence~\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:*one*)</b> <b>sentence(body:zentence~~2)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new WildcardQuery(new Term(\"body\", \"te*\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"one\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"se*\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter bolds each hit:\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:one)</b> <b>sentence(body:se*)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","bugFix":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","sourceNew":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    // use a variety of common MTQ types\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new PrefixQuery(new Term(\"body\", \"te\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"*one*\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"body\", \"zentence~\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:*one*)</b> <b>sentence(body:zentence~~2)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    // use a variety of common MTQ types\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new PrefixQuery(new Term(\"body\", \"te\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"*one*\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"body\", \"zentence~\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:*one*)</b> <b>sentence(body:zentence~~2)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","sourceNew":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    // use a variety of common MTQ types\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new PrefixQuery(new Term(\"body\", \"te\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"*one*\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"body\", \"zentence~\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:*one*)</b> <b>sentence(body:zentence~~2)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    // use a variety of common MTQ types\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new PrefixQuery(new Term(\"body\", \"te\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"*one*\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"body\", \"zentence~\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:*one*)</b> <b>sentence(body:zentence~~2)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterMTQ#testWhichMTQMatched().mjava","sourceNew":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    // use a variety of common MTQ types\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new PrefixQuery(new Term(\"body\", \"te\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"*one*\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"body\", \"zentence~\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits.value);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits.value);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:*one*)</b> <b>sentence(body:zentence~~2)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","sourceOld":"  /**\n   * Runs a query with two MTQs and confirms the formatter\n   * can tell which query matched which hit.\n   */\n  public void testWhichMTQMatched() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    Field body = new Field(\"body\", \"\", fieldType);\n    Document doc = new Document();\n    doc.add(body);\n\n    body.setStringValue(\"Test a one sentence document.\");\n    iw.addDocument(doc);\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    // use a variety of common MTQ types\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new PrefixQuery(new Term(\"body\", \"te\")), BooleanClause.Occur.SHOULD)\n        .add(new WildcardQuery(new Term(\"body\", \"*one*\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"body\", \"zentence~\")), BooleanClause.Occur.SHOULD)\n        .build();\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    // Default formatter just bolds each hit:\n    assertEquals(\"<b>Test</b> a <b>one</b> <b>sentence</b> document.\", snippets[0]);\n\n    // Now use our own formatter, that also stuffs the\n    // matching term's text into the result:\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer) {\n\n      @Override\n      protected PassageFormatter getFormatter(String field) {\n        return new PassageFormatter() {\n\n          @Override\n          public Object format(Passage passages[], String content) {\n            // Copied from DefaultPassageFormatter, but\n            // tweaked to include the matched term:\n            StringBuilder sb = new StringBuilder();\n            int pos = 0;\n            for (Passage passage : passages) {\n              // don't add ellipsis if its the first one, or if its connected.\n              if (passage.getStartOffset() > pos && pos > 0) {\n                sb.append(\"... \");\n              }\n              pos = passage.getStartOffset();\n              for (int i = 0; i < passage.getNumMatches(); i++) {\n                int start = passage.getMatchStarts()[i];\n                int end = passage.getMatchEnds()[i];\n                // its possible to have overlapping terms\n                if (start > pos) {\n                  sb.append(content, pos, start);\n                }\n                if (end > pos) {\n                  sb.append(\"<b>\");\n                  sb.append(content, Math.max(pos, start), end);\n                  sb.append('(');\n                  sb.append(passage.getMatchTerms()[i].utf8ToString());\n                  sb.append(')');\n                  sb.append(\"</b>\");\n                  pos = end;\n                }\n              }\n              // its possible a \"term\" from the analyzer could span a sentence boundary.\n              sb.append(content, pos, Math.max(pos, passage.getEndOffset()));\n              pos = passage.getEndOffset();\n            }\n            return sb.toString();\n          }\n        };\n      }\n    };\n\n    assertEquals(1, topDocs.totalHits);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n    assertEquals(1, snippets.length);\n\n    assertEquals(\"<b>Test(body:te*)</b> a <b>one(body:*one*)</b> <b>sentence(body:zentence~~2)</b> document.\", snippets[0]);\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e1d94eff339f485fea1578f61a41eb374073ab":["1f714d649962c934166dedd1e83173e36356b328"],"b94236357aaa22b76c10629851fe4e376e0cea82":["46e1d94eff339f485fea1578f61a41eb374073ab","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["46e1d94eff339f485fea1578f61a41eb374073ab"],"1f714d649962c934166dedd1e83173e36356b328":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["b94236357aaa22b76c10629851fe4e376e0cea82"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","1f714d649962c934166dedd1e83173e36356b328"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"46e1d94eff339f485fea1578f61a41eb374073ab":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"b94236357aaa22b76c10629851fe4e376e0cea82":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["1f714d649962c934166dedd1e83173e36356b328","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1f714d649962c934166dedd1e83173e36356b328":["46e1d94eff339f485fea1578f61a41eb374073ab","2e859e664a65796dadf8aaf65db6f66f3a885368"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2e859e664a65796dadf8aaf65db6f66f3a885368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}