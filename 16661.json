{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalReader#Lucene60DimensionalReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60PointFormat.CODEC_NAME,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n        //reader.verify(readState.segmentInfo.maxDoc());\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene60DimensionalReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60DimensionalFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60DimensionalFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60DimensionalFormat.CODEC_NAME,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 Lucene60DimensionalFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n        //reader.verify(readState.segmentInfo.maxDoc());\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","date":1453975275,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    Map<Integer,Long> fieldToFileOffset = new HashMap<>();\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(indexIn,\n                                   Lucene60PointFormat.META_CODEC_NAME,\n                                   Lucene60PointFormat.INDEX_VERSION_START,\n                                   Lucene60PointFormat.INDEX_VERSION_START,\n                                   readState.segmentInfo.getId(),\n                                   readState.segmentSuffix);\n        int count = indexIn.readVInt();\n        for(int i=0;i<count;i++) {\n          int fieldNumber = indexIn.readVInt();\n          long fp = indexIn.readVLong();\n          fieldToFileOffset.put(fieldNumber, fp);\n        }\n      } catch (Throwable t) {\n        priorE = t;\n      } finally {\n        CodecUtil.checkFooter(indexIn, priorE);\n      }\n    }\n\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    boolean success = false;\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    try {\n\n      CodecUtil.checkIndexHeader(dataIn,\n                                 Lucene60PointFormat.DATA_CODEC_NAME,\n                                 Lucene60PointFormat.DATA_VERSION_START,\n                                 Lucene60PointFormat.DATA_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(dataIn);\n\n      for(Map.Entry<Integer,Long> ent : fieldToFileOffset.entrySet()) {\n        int fieldNumber = ent.getKey();\n        long fp = ent.getValue();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n      }\n\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60PointFormat.CODEC_NAME,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n        //reader.verify(readState.segmentInfo.maxDoc());\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","bugFix":["1eee4175312c41f89aa23427f9e4edfc00deeaac","1786be6a11f9cf5e48ce84869d1bb71e9c02f966","cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    Map<Integer,Long> fieldToFileOffset = new HashMap<>();\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(indexIn,\n                                   Lucene60PointFormat.META_CODEC_NAME,\n                                   Lucene60PointFormat.INDEX_VERSION_START,\n                                   Lucene60PointFormat.INDEX_VERSION_START,\n                                   readState.segmentInfo.getId(),\n                                   readState.segmentSuffix);\n        int count = indexIn.readVInt();\n        for(int i=0;i<count;i++) {\n          int fieldNumber = indexIn.readVInt();\n          long fp = indexIn.readVLong();\n          fieldToFileOffset.put(fieldNumber, fp);\n        }\n      } catch (Throwable t) {\n        priorE = t;\n      } finally {\n        CodecUtil.checkFooter(indexIn, priorE);\n      }\n    }\n\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    boolean success = false;\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    try {\n\n      CodecUtil.checkIndexHeader(dataIn,\n                                 Lucene60PointFormat.DATA_CODEC_NAME,\n                                 Lucene60PointFormat.DATA_VERSION_START,\n                                 Lucene60PointFormat.DATA_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(dataIn);\n\n      for(Map.Entry<Integer,Long> ent : fieldToFileOffset.entrySet()) {\n        int fieldNumber = ent.getKey();\n        long fp = ent.getValue();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n      }\n\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60PointFormat.CODEC_NAME,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n        //reader.verify(readState.segmentInfo.maxDoc());\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    Map<Integer,Long> fieldToFileOffset = new HashMap<>();\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(indexIn,\n                                   Lucene60PointFormat.META_CODEC_NAME,\n                                   Lucene60PointFormat.INDEX_VERSION_START,\n                                   Lucene60PointFormat.INDEX_VERSION_START,\n                                   readState.segmentInfo.getId(),\n                                   readState.segmentSuffix);\n        int count = indexIn.readVInt();\n        for(int i=0;i<count;i++) {\n          int fieldNumber = indexIn.readVInt();\n          long fp = indexIn.readVLong();\n          fieldToFileOffset.put(fieldNumber, fp);\n        }\n      } catch (Throwable t) {\n        priorE = t;\n      } finally {\n        CodecUtil.checkFooter(indexIn, priorE);\n      }\n    }\n\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    boolean success = false;\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    try {\n\n      CodecUtil.checkIndexHeader(dataIn,\n                                 Lucene60PointFormat.DATA_CODEC_NAME,\n                                 Lucene60PointFormat.DATA_VERSION_START,\n                                 Lucene60PointFormat.DATA_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(dataIn);\n\n      for(Map.Entry<Integer,Long> ent : fieldToFileOffset.entrySet()) {\n        int fieldNumber = ent.getKey();\n        long fp = ent.getValue();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n      }\n\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    boolean success = false;\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      CodecUtil.checkIndexHeader(indexIn,\n                                 Lucene60PointFormat.CODEC_NAME,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 Lucene60PointFormat.INDEX_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n      int count = indexIn.readVInt();\n      for(int i=0;i<count;i++) {\n        int fieldNumber = indexIn.readVInt();\n        long fp = indexIn.readVLong();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n        //reader.verify(readState.segmentInfo.maxDoc());\n      }\n      CodecUtil.checkFooter(indexIn);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsReader#Lucene60PointsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointReader#Lucene60PointReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene60PointsReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointsFormat.INDEX_EXTENSION);\n\n    Map<Integer,Long> fieldToFileOffset = new HashMap<>();\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(indexIn,\n                                   Lucene60PointsFormat.META_CODEC_NAME,\n                                   Lucene60PointsFormat.INDEX_VERSION_START,\n                                   Lucene60PointsFormat.INDEX_VERSION_START,\n                                   readState.segmentInfo.getId(),\n                                   readState.segmentSuffix);\n        int count = indexIn.readVInt();\n        for(int i=0;i<count;i++) {\n          int fieldNumber = indexIn.readVInt();\n          long fp = indexIn.readVLong();\n          fieldToFileOffset.put(fieldNumber, fp);\n        }\n      } catch (Throwable t) {\n        priorE = t;\n      } finally {\n        CodecUtil.checkFooter(indexIn, priorE);\n      }\n    }\n\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    boolean success = false;\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    try {\n\n      CodecUtil.checkIndexHeader(dataIn,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_START,\n                                 Lucene60PointsFormat.DATA_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(dataIn);\n\n      for(Map.Entry<Integer,Long> ent : fieldToFileOffset.entrySet()) {\n        int fieldNumber = ent.getKey();\n        long fp = ent.getValue();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n      }\n\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene60PointReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointFormat.INDEX_EXTENSION);\n\n    Map<Integer,Long> fieldToFileOffset = new HashMap<>();\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(indexIn,\n                                   Lucene60PointFormat.META_CODEC_NAME,\n                                   Lucene60PointFormat.INDEX_VERSION_START,\n                                   Lucene60PointFormat.INDEX_VERSION_START,\n                                   readState.segmentInfo.getId(),\n                                   readState.segmentSuffix);\n        int count = indexIn.readVInt();\n        for(int i=0;i<count;i++) {\n          int fieldNumber = indexIn.readVInt();\n          long fp = indexIn.readVLong();\n          fieldToFileOffset.put(fieldNumber, fp);\n        }\n      } catch (Throwable t) {\n        priorE = t;\n      } finally {\n        CodecUtil.checkFooter(indexIn, priorE);\n      }\n    }\n\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    boolean success = false;\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    try {\n\n      CodecUtil.checkIndexHeader(dataIn,\n                                 Lucene60PointFormat.DATA_CODEC_NAME,\n                                 Lucene60PointFormat.DATA_VERSION_START,\n                                 Lucene60PointFormat.DATA_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(dataIn);\n\n      for(Map.Entry<Integer,Long> ent : fieldToFileOffset.entrySet()) {\n        int fieldNumber = ent.getKey();\n        long fp = ent.getValue();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n      }\n\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8d15e34266d75e4e8b95da046cd0afc812367b38":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}