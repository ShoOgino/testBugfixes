{"path":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object).mjava","commits":[{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value, boost));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value, boost);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value) {\n    if (!isFieldUsed(sf)) {\n      return Collections.emptyList();\n    }\n    List<IndexableField> fields = new ArrayList<>(3);\n    IndexableField field = null;\n    if (sf.indexed()) {\n      field = createField(sf, value);\n      fields.add(field);\n    }\n    \n    if (sf.hasDocValues()) {\n      final Number numericValue;\n      if (field == null) {\n        final Object nativeTypeObject = toNativeType(value);\n        if (getNumberType() == NumberType.DATE) {\n          numericValue = ((Date)nativeTypeObject).getTime();\n        } else {\n          numericValue = (Number) nativeTypeObject;\n        }\n      } else {\n        numericValue = field.numericValue();\n      }\n      final long bits;\n      if (!sf.multiValued()) {\n        if (numericValue instanceof Integer || numericValue instanceof Long) {\n          bits = numericValue.longValue();\n        } else if (numericValue instanceof Float) {\n          bits = Float.floatToIntBits(numericValue.floatValue());\n        } else {\n          assert numericValue instanceof Double;\n          bits = Double.doubleToLongBits(numericValue.doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (numericValue instanceof Integer || numericValue instanceof Long) {\n          bits = numericValue.longValue();\n        } else if (numericValue instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(numericValue.floatValue());\n        } else {\n          assert numericValue instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(numericValue.doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c","acd9883560fd89e6448b2b447302fe543040cd4f","897b06b1364bd1f658a8be7591e43f0851458e7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointField#createFields(SchemaField,Object).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value) {\n    if (!isFieldUsed(sf)) {\n      return Collections.emptyList();\n    }\n    List<IndexableField> fields = new ArrayList<>(3);\n    IndexableField field = null;\n    if (sf.indexed()) {\n      field = createField(sf, value);\n      fields.add(field);\n    }\n    \n    if (sf.hasDocValues()) {\n      final Number numericValue;\n      if (field == null) {\n        final Object nativeTypeObject = toNativeType(value);\n        if (getNumberType() == NumberType.DATE) {\n          numericValue = ((Date)nativeTypeObject).getTime();\n        } else {\n          numericValue = (Number) nativeTypeObject;\n        }\n      } else {\n        numericValue = field.numericValue();\n      }\n      final long bits;\n      if (!sf.multiValued()) {\n        if (numericValue instanceof Integer || numericValue instanceof Long) {\n          bits = numericValue.longValue();\n        } else if (numericValue instanceof Float) {\n          bits = Float.floatToIntBits(numericValue.floatValue());\n        } else {\n          assert numericValue instanceof Double;\n          bits = Double.doubleToLongBits(numericValue.doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (numericValue instanceof Integer || numericValue instanceof Long) {\n          bits = numericValue.longValue();\n        } else if (numericValue instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(numericValue.floatValue());\n        } else {\n          assert numericValue instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(numericValue.doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField sf, Object value) {\n    if (!(sf.hasDocValues() || sf.stored())) {\n      return Collections.singletonList(createField(sf, value));\n    }\n    List<IndexableField> fields = new ArrayList<>();\n    final IndexableField field = createField(sf, value);\n    fields.add(field);\n    \n    if (sf.hasDocValues()) {\n      final long bits;\n      if (!sf.multiValued()) {\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = Float.floatToIntBits(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = Double.doubleToLongBits(field.numericValue().doubleValue());\n        }\n        fields.add(new NumericDocValuesField(sf.getName(), bits));\n      } else {\n        // MultiValued\n        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {\n          bits = field.numericValue().longValue();\n        } else if (field.numericValue() instanceof Float) {\n          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());\n        } else {\n          assert field.numericValue() instanceof Double;\n          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());\n        }\n        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n      }\n    } \n    if (sf.stored()) {\n      fields.add(getStoredField(sf, value));\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}