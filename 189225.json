{"path":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","commits":[{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public abstract void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public abstract void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"624e284b3877a558eba46e7fe63f3aec4c781938","date":1026942878,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public abstract void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5b33cb896b29b18a1c1348527a7f5889a852551","date":1103050801,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fa51042d1c5e4892a5ad811989e7db3f5614389","date":1109467793,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   *\n   * @deprecated\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Expert: Low-level search implementation.\n   * @deprecated use {@link Searcher#search(Query, Filter, HitCollector)} instead.\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   * <br>HitCollector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   *\n   * @deprecated\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f597d83f82cb10bc9c7414dd9340421b8f73eeb","date":1132588832,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Expert: Low-level search implementation.\n   * @deprecated use {@link Searcher#search(Weight, Filter, HitCollector)} instead.\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","sourceOld":"  /** Expert: Low-level search implementation.\n   * @deprecated use {@link Searcher#search(Query, Filter, HitCollector)} instead.\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/Searchable#search(Query,Filter,HitCollector).mjava","sourceNew":null,"sourceOld":"  /** Expert: Low-level search implementation.\n   * @deprecated use {@link Searcher#search(Weight, Filter, HitCollector)} instead.\n   */\n  void search(Query query, Filter filter, HitCollector results)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4fa51042d1c5e4892a5ad811989e7db3f5614389":["f5b33cb896b29b18a1c1348527a7f5889a852551"],"f5b33cb896b29b18a1c1348527a7f5889a852551":["624e284b3877a558eba46e7fe63f3aec4c781938"],"4ceaa9738cad9616d1831286111af106e13e0e4b":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4fa51042d1c5e4892a5ad811989e7db3f5614389"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["9f597d83f82cb10bc9c7414dd9340421b8f73eeb"],"624e284b3877a558eba46e7fe63f3aec4c781938":["9c7454619ea6a0710272c1dd947345cee64489f6"],"9f597d83f82cb10bc9c7414dd9340421b8f73eeb":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7454619ea6a0710272c1dd947345cee64489f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"4fa51042d1c5e4892a5ad811989e7db3f5614389":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"f5b33cb896b29b18a1c1348527a7f5889a852551":["4fa51042d1c5e4892a5ad811989e7db3f5614389"],"4ceaa9738cad9616d1831286111af106e13e0e4b":["9f597d83f82cb10bc9c7414dd9340421b8f73eeb"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"624e284b3877a558eba46e7fe63f3aec4c781938":["f5b33cb896b29b18a1c1348527a7f5889a852551"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9f597d83f82cb10bc9c7414dd9340421b8f73eeb":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c7454619ea6a0710272c1dd947345cee64489f6"],"9c7454619ea6a0710272c1dd947345cee64489f6":["624e284b3877a558eba46e7fe63f3aec4c781938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}