{"path":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2639ce99440b7a55fa879228f7e66c337443e77a","date":1317007442,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new MockTokenizer(new StringReader(germanUmlaut), MockTokenizer.KEYWORD, false));\n    TokenStream tsOE = factory.create(\n        new MockTokenizer(new StringReader(germanOE), MockTokenizer.KEYWORD, false));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new KeywordTokenizer(new StringReader(germanUmlaut)));\n    TokenStream tsOE = factory.create(\n        new KeywordTokenizer(new StringReader(germanOE)));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#testCustomRules().mjava","sourceNew":null,"sourceOld":"  /*\n   * For german, you might want oe to sort and match with o umlaut.\n   * This is not the default, but you can make a customized ruleset to do this.\n   *\n   * The default is DIN 5007-1, this shows how to tailor a collator to get DIN 5007-2 behavior.\n   *  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4423383\n   */\n  public void testCustomRules() throws Exception {\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new Locale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    //\n    // at this point, you would save these tailoredRules to a file, \n    // and use the custom parameter.\n    //\n    String germanUmlaut = \"Töne\";\n    String germanOE = \"Toene\";\n    CollationKeyFilterFactory factory = new CollationKeyFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"custom\", \"rules.txt\");\n    args.put(\"strength\", \"primary\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(tailoredRules));\n    TokenStream tsUmlaut = factory.create(\n        new MockTokenizer(new StringReader(germanUmlaut), MockTokenizer.KEYWORD, false));\n    TokenStream tsOE = factory.create(\n        new MockTokenizer(new StringReader(germanOE), MockTokenizer.KEYWORD, false));\n\n    assertCollatesToSame(tsUmlaut, tsOE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2639ce99440b7a55fa879228f7e66c337443e77a":["c26f00b574427b55127e869b935845554afde1fa"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["2639ce99440b7a55fa879228f7e66c337443e77a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"2639ce99440b7a55fa879228f7e66c337443e77a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2639ce99440b7a55fa879228f7e66c337443e77a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}