{"path":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","commits":[{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /** The pattern used to detect float values in a field */\n  /**\n   * removed for java 1.3 compatibility\n   * protected static final Object pFloats = Pattern.compile (\"[0-9+\\\\-\\\\.eEfFdD]+\");\n   */\n\n  // inherit javadocs\n  public Object getAuto (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, SortField.AUTO);\n    if (ret == null) {\n      TermEnum enumerator = reader.terms (new Term (field, \"\"));\n      try {\n        Term term = enumerator.term();\n        if (term == null) {\n          throw new RuntimeException (\"no terms in field \" + field + \" - cannot determine sort type\");\n        }\n        if (term.field() == field) {\n          String termtext = term.text().trim();\n\n          /**\n           * Java 1.4 level code:\n\n           if (pIntegers.matcher(termtext).matches())\n           return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n           else if (pFloats.matcher(termtext).matches())\n           return FloatSortedHitQueue.comparator (reader, enumerator, field);\n           */\n\n          // Java 1.3 level code:\n          try {\n            Integer.parseInt (termtext);\n            ret = getInts (reader, field);\n          } catch (NumberFormatException nfe1) {\n            try {\n              Float.parseFloat (termtext);\n              ret = getFloats (reader, field);\n            } catch (NumberFormatException nfe2) {\n              ret = getStringIndex (reader, field);\n            }\n          }\n          if (ret != null) {\n            store (reader, field, SortField.AUTO, ret);\n          }\n        } else {\n          throw new RuntimeException (\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n        }\n      } finally {\n        enumerator.close();\n      }\n\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2275c46fba03d235b53596f1b08c77ad11a24459"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2275c46fba03d235b53596f1b08c77ad11a24459","date":1144296129,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","sourceNew":"  /** The pattern used to detect float values in a field */\n  /**\n   * removed for java 1.3 compatibility\n   * protected static final Object pFloats = Pattern.compile (\"[0-9+\\\\-\\\\.eEfFdD]+\");\n   */\n\n  // inherit javadocs\n  public Object getAuto (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, SortField.AUTO, null);\n    if (ret == null) {\n      TermEnum enumerator = reader.terms (new Term (field, \"\"));\n      try {\n        Term term = enumerator.term();\n        if (term == null) {\n          throw new RuntimeException (\"no terms in field \" + field + \" - cannot determine sort type\");\n        }\n        if (term.field() == field) {\n          String termtext = term.text().trim();\n\n          /**\n           * Java 1.4 level code:\n\n           if (pIntegers.matcher(termtext).matches())\n           return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n           else if (pFloats.matcher(termtext).matches())\n           return FloatSortedHitQueue.comparator (reader, enumerator, field);\n           */\n\n          // Java 1.3 level code:\n          try {\n            Integer.parseInt (termtext);\n            ret = getInts (reader, field);\n          } catch (NumberFormatException nfe1) {\n            try {\n              Float.parseFloat (termtext);\n              ret = getFloats (reader, field);\n            } catch (NumberFormatException nfe2) {\n              ret = getStringIndex (reader, field);\n            }\n          }\n          if (ret != null) {\n            store (reader, field, SortField.AUTO, null, ret);\n          }\n        } else {\n          throw new RuntimeException (\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n        }\n      } finally {\n        enumerator.close();\n      }\n\n    }\n    return ret;\n  }\n\n","sourceOld":"  /** The pattern used to detect float values in a field */\n  /**\n   * removed for java 1.3 compatibility\n   * protected static final Object pFloats = Pattern.compile (\"[0-9+\\\\-\\\\.eEfFdD]+\");\n   */\n\n  // inherit javadocs\n  public Object getAuto (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, SortField.AUTO);\n    if (ret == null) {\n      TermEnum enumerator = reader.terms (new Term (field, \"\"));\n      try {\n        Term term = enumerator.term();\n        if (term == null) {\n          throw new RuntimeException (\"no terms in field \" + field + \" - cannot determine sort type\");\n        }\n        if (term.field() == field) {\n          String termtext = term.text().trim();\n\n          /**\n           * Java 1.4 level code:\n\n           if (pIntegers.matcher(termtext).matches())\n           return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n           else if (pFloats.matcher(termtext).matches())\n           return FloatSortedHitQueue.comparator (reader, enumerator, field);\n           */\n\n          // Java 1.3 level code:\n          try {\n            Integer.parseInt (termtext);\n            ret = getInts (reader, field);\n          } catch (NumberFormatException nfe1) {\n            try {\n              Float.parseFloat (termtext);\n              ret = getFloats (reader, field);\n            } catch (NumberFormatException nfe2) {\n              ret = getStringIndex (reader, field);\n            }\n          }\n          if (ret != null) {\n            store (reader, field, SortField.AUTO, ret);\n          }\n        } else {\n          throw new RuntimeException (\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n        }\n      } finally {\n        enumerator.close();\n      }\n\n    }\n    return ret;\n  }\n\n","bugFix":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e4e7cc130365302adc717b9353553a80f892b73","date":1164006604,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","sourceNew":"  /** The pattern used to detect float values in a field */\n  /**\n   * removed for java 1.3 compatibility\n   * protected static final Object pFloats = Pattern.compile (\"[0-9+\\\\-\\\\.eEfFdD]+\");\n   */\n\n\t// inherit javadocs\n  public Object getAuto(IndexReader reader, String field) throws IOException {\n    return autoCache.get(reader, field);\n  }\n\n","sourceOld":"  /** The pattern used to detect float values in a field */\n  /**\n   * removed for java 1.3 compatibility\n   * protected static final Object pFloats = Pattern.compile (\"[0-9+\\\\-\\\\.eEfFdD]+\");\n   */\n\n  // inherit javadocs\n  public Object getAuto (IndexReader reader, String field)\n  throws IOException {\n    field = field.intern();\n    Object ret = lookup (reader, field, SortField.AUTO, null);\n    if (ret == null) {\n      TermEnum enumerator = reader.terms (new Term (field, \"\"));\n      try {\n        Term term = enumerator.term();\n        if (term == null) {\n          throw new RuntimeException (\"no terms in field \" + field + \" - cannot determine sort type\");\n        }\n        if (term.field() == field) {\n          String termtext = term.text().trim();\n\n          /**\n           * Java 1.4 level code:\n\n           if (pIntegers.matcher(termtext).matches())\n           return IntegerSortedHitQueue.comparator (reader, enumerator, field);\n\n           else if (pFloats.matcher(termtext).matches())\n           return FloatSortedHitQueue.comparator (reader, enumerator, field);\n           */\n\n          // Java 1.3 level code:\n          try {\n            Integer.parseInt (termtext);\n            ret = getInts (reader, field);\n          } catch (NumberFormatException nfe1) {\n            try {\n              Float.parseFloat (termtext);\n              ret = getFloats (reader, field);\n            } catch (NumberFormatException nfe2) {\n              ret = getStringIndex (reader, field);\n            }\n          }\n          if (ret != null) {\n            store (reader, field, SortField.AUTO, null, ret);\n          }\n        } else {\n          throw new RuntimeException (\"field \\\"\" + field + \"\\\" does not appear to be indexed\");\n        }\n      } finally {\n        enumerator.close();\n      }\n\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","sourceNew":"  /** The pattern used to detect float values in a field */\n  /**\n   * removed for java 1.3 compatibility\n   * protected static final Object pFloats = Pattern.compile (\"[0-9+\\\\-\\\\.eEfFdD]+\");\n   */\n\n\t// inherit javadocs\n  public Object getAuto(IndexReader reader, String field) throws IOException {\n    return ((Cache)caches.get(Object.class)).get(reader, new Entry(field, (Parser)null));\n  }\n\n","sourceOld":"  /** The pattern used to detect float values in a field */\n  /**\n   * removed for java 1.3 compatibility\n   * protected static final Object pFloats = Pattern.compile (\"[0-9+\\\\-\\\\.eEfFdD]+\");\n   */\n\n\t// inherit javadocs\n  public Object getAuto(IndexReader reader, String field) throws IOException {\n    return autoCache.get(reader, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldCacheImpl#getAuto(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /** The pattern used to detect float values in a field */\n  /**\n   * removed for java 1.3 compatibility\n   * protected static final Object pFloats = Pattern.compile (\"[0-9+\\\\-\\\\.eEfFdD]+\");\n   */\n\n\t// inherit javadocs\n  public Object getAuto(IndexReader reader, String field) throws IOException {\n    return ((Cache)caches.get(Object.class)).get(reader, new Entry(field, (Parser)null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e69f59b863731d864bf3047235e718f0f88f8841":["4e4e7cc130365302adc717b9353553a80f892b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e4e7cc130365302adc717b9353553a80f892b73":["2275c46fba03d235b53596f1b08c77ad11a24459"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["e69f59b863731d864bf3047235e718f0f88f8841"],"2275c46fba03d235b53596f1b08c77ad11a24459":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["2275c46fba03d235b53596f1b08c77ad11a24459"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"e69f59b863731d864bf3047235e718f0f88f8841":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"4e4e7cc130365302adc717b9353553a80f892b73":["e69f59b863731d864bf3047235e718f0f88f8841"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2275c46fba03d235b53596f1b08c77ad11a24459":["4e4e7cc130365302adc717b9353553a80f892b73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}