{"path":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int).mjava","commits":[{"id":"1b9bf80497a9632e1675d4f7d7f73ae1d800cf79","date":1050978317,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int logic) throws IOException\n    {\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic == AND)\n        {\n            result = chain[i].bits(reader);\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic, chain[i]);\n        }\n        return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40c9a370460f9a76be3d7e5800c5912ef2952536","date":1084801263,"type":3,"author":"Kelvin Tan","isMerge":false,"pathNew":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int).mjava","pathOld":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int).mjava","sourceNew":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int logic) throws IOException\n    {\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic == AND)\n        {\n            result = chain[i].bits(reader).clone();\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic, chain[i]);\n        }\n        return result;\n    }\n\n","sourceOld":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int logic) throws IOException\n    {\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic == AND)\n        {\n            result = chain[i].bits(reader);\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic, chain[i]);\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"912e92ecad862451b7c72fdb39c68b66f02fc6a6","date":1084801505,"type":3,"author":"Kelvin Tan","isMerge":false,"pathNew":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int).mjava","pathOld":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int).mjava","sourceNew":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int logic) throws IOException\n    {\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic == AND)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic, chain[i]);\n        }\n        return result;\n    }\n\n","sourceOld":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int logic) throws IOException\n    {\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic == AND)\n        {\n            result = chain[i].bits(reader).clone();\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic, chain[i]);\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17aa383cdefa6c6eb46c3288753026d489892e36","date":1114593391,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int).mjava","pathOld":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#bits(IndexReader,int).mjava","sourceNew":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int logic) throws IOException\n    {\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic == AND)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic, chain[i]);\n        }\n        return result;\n    }\n\n","sourceOld":"    /**\n     * Delegates to each filter in the chain.\n     * @param reader IndexReader\n     * @param logic Logical operation\n     * @return BitSet\n     */\n    private BitSet bits(IndexReader reader, int logic) throws IOException\n    {\n        BitSet result;\n        int i = 0;\n\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results. Thanks to\n         * Daniel Armbrust for pointing this out and suggesting workaround.\n         */\n        if (logic == AND)\n        {\n            result = (BitSet) chain[i].bits(reader).clone();\n            ++i;\n        }\n        else\n        {\n            result = new BitSet(reader.maxDoc());\n        }\n\n        for (; i < chain.length; i++)\n        {\n            doChain(result, reader, logic, chain[i]);\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b9bf80497a9632e1675d4f7d7f73ae1d800cf79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17aa383cdefa6c6eb46c3288753026d489892e36":["912e92ecad862451b7c72fdb39c68b66f02fc6a6"],"40c9a370460f9a76be3d7e5800c5912ef2952536":["1b9bf80497a9632e1675d4f7d7f73ae1d800cf79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"912e92ecad862451b7c72fdb39c68b66f02fc6a6":["40c9a370460f9a76be3d7e5800c5912ef2952536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17aa383cdefa6c6eb46c3288753026d489892e36"]},"commit2Childs":{"1b9bf80497a9632e1675d4f7d7f73ae1d800cf79":["40c9a370460f9a76be3d7e5800c5912ef2952536"],"17aa383cdefa6c6eb46c3288753026d489892e36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40c9a370460f9a76be3d7e5800c5912ef2952536":["912e92ecad862451b7c72fdb39c68b66f02fc6a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b9bf80497a9632e1675d4f7d7f73ae1d800cf79"],"912e92ecad862451b7c72fdb39c68b66f02fc6a6":["17aa383cdefa6c6eb46c3288753026d489892e36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}