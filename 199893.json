{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseString(String).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseString(String).mjava","sourceNew":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseString(String).mjava","sourceNew":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseString(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseString(String).mjava","sourceNew":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new InitializationException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseString(String).mjava","pathOld":"/dev/null","sourceNew":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseString(String).mjava","pathOld":"/dev/null","sourceNew":"  protected String parseString( String s ){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case '\"' : c = '\"'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6f80818731469e00f54165ec94aae2db868ea05"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}