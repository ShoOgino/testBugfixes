{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeQuery#TrieRangeQuery(String,String,String,boolean,boolean,TrieUtils).mjava","commits":[{"id":"e91724d755098f0c856c612bf56d1edc31044a82","date":1233069324,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeQuery#TrieRangeQuery(String,String,String,boolean,boolean,TrieUtils).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeQuery#TrieRangeQuery(String,String,String).mjava","sourceNew":"  /**\n   * Universal constructor (expert use only): Uses already trie-converted min/max values.\n   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.\n   * With <code>minInclusive</code> and <code>maxInclusive</code> can be choosen, if the corresponding\n   * bound should be included or excluded from the range.\n   */\n  public TrieRangeQuery(final String field, final String min, final String max,\n    final boolean minInclusive, final boolean maxInclusive, final TrieUtils variant\n  ) {\n    super(new TrieRangeFilter(field,min,max,minInclusive,maxInclusive,variant));\n  }\n\n","sourceOld":"  /**\n   * Universal constructor (expert use only): Uses already trie-converted min/max values.\n   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.\n   * <p>This constructor uses the trie variant returned by {@link TrieUtils#getDefaultTrieVariant()}.\n   */\n  public TrieRangeQuery(final String field, final String min, final String max) {\n    super(new TrieRangeFilter(field,min,max));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeQuery#TrieRangeQuery(String,String,String,boolean,boolean,TrieUtils).mjava","sourceNew":null,"sourceOld":"  /**\n   * Universal constructor (expert use only): Uses already trie-converted min/max values.\n   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.\n   * With <code>minInclusive</code> and <code>maxInclusive</code> can be choosen, if the corresponding\n   * bound should be included or excluded from the range.\n   */\n  public TrieRangeQuery(final String field, final String min, final String max,\n    final boolean minInclusive, final boolean maxInclusive, final TrieUtils variant\n  ) {\n    super(new TrieRangeFilter(field,min,max,minInclusive,maxInclusive,variant));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["e91724d755098f0c856c612bf56d1edc31044a82"],"e91724d755098f0c856c612bf56d1edc31044a82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e91724d755098f0c856c612bf56d1edc31044a82":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91724d755098f0c856c612bf56d1edc31044a82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}