{"path":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#postings(PostingsEnum,int).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#postings(Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n    MultiPostingsEnum docsEnum;\n\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiPostingsEnum) {\n      docsEnum = (MultiPostingsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiPostingsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiPostingsEnum(this, subs.length);\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      assert entry.index < docsEnum.subPostingsEnums.length: entry.index + \" vs \" + docsEnum.subPostingsEnums.length + \"; \" + subs.length;\n      final PostingsEnum subPostingsEnum = entry.terms.postings(docsEnum.subPostingsEnums[entry.index], flags);\n      assert subPostingsEnum != null;\n      docsEnum.subPostingsEnums[entry.index] = subPostingsEnum;\n      subDocs[upto].postingsEnum = subPostingsEnum;\n      subDocs[upto].slice = entry.subSlice;\n      upto++;\n    }\n    \n    return docsEnum.reset(subDocs, upto);\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    MultiPostingsEnum docsEnum;\n\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiPostingsEnum) {\n      docsEnum = (MultiPostingsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiPostingsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiPostingsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(entry.subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access\n          b = new BitsSlice(liveDocs, entry.subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, entry.subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsEnum.subPostingsEnums.length: entry.index + \" vs \" + docsEnum.subPostingsEnums.length + \"; \" + subs.length;\n      final PostingsEnum subPostingsEnum = entry.terms.postings(b, docsEnum.subPostingsEnums[entry.index], flags);\n      assert subPostingsEnum != null;\n      docsEnum.subPostingsEnums[entry.index] = subPostingsEnum;\n      subDocs[upto].postingsEnum = subPostingsEnum;\n      subDocs[upto].slice = entry.subSlice;\n      upto++;\n    }\n    \n    return docsEnum.reset(subDocs, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a945737c80e9ec5eb2cc9b67cbb82cd6c485a8e","date":1437562988,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n    MultiPostingsEnum docsEnum;\n\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiPostingsEnum) {\n      docsEnum = (MultiPostingsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiPostingsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiPostingsEnum(this, subs.length);\n    }\n\n    int upto = 0;\n\n    ArrayUtil.timSort(top, 0, numTop, INDEX_COMPARATOR);\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      assert entry.index < docsEnum.subPostingsEnums.length: entry.index + \" vs \" + docsEnum.subPostingsEnums.length + \"; \" + subs.length;\n      final PostingsEnum subPostingsEnum = entry.terms.postings(docsEnum.subPostingsEnums[entry.index], flags);\n      assert subPostingsEnum != null;\n      docsEnum.subPostingsEnums[entry.index] = subPostingsEnum;\n      subDocs[upto].postingsEnum = subPostingsEnum;\n      subDocs[upto].slice = entry.subSlice;\n      upto++;\n    }\n    \n    return docsEnum.reset(subDocs, upto);\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {\n    MultiPostingsEnum docsEnum;\n\n    // Can only reuse if incoming enum is also a MultiDocsEnum\n    if (reuse != null && reuse instanceof MultiPostingsEnum) {\n      docsEnum = (MultiPostingsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsEnum.canReuse(this)) {\n        docsEnum = new MultiPostingsEnum(this, subs.length);\n      }\n    } else {\n      docsEnum = new MultiPostingsEnum(this, subs.length);\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      assert entry.index < docsEnum.subPostingsEnums.length: entry.index + \" vs \" + docsEnum.subPostingsEnums.length + \"; \" + subs.length;\n      final PostingsEnum subPostingsEnum = entry.terms.postings(docsEnum.subPostingsEnums[entry.index], flags);\n      assert subPostingsEnum != null;\n      docsEnum.subPostingsEnums[entry.index] = subPostingsEnum;\n      subDocs[upto].postingsEnum = subPostingsEnum;\n      subDocs[upto].slice = entry.subSlice;\n      upto++;\n    }\n    \n    return docsEnum.reset(subDocs, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a945737c80e9ec5eb2cc9b67cbb82cd6c485a8e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a945737c80e9ec5eb2cc9b67cbb82cd6c485a8e"]},"commit2Childs":{"5a945737c80e9ec5eb2cc9b67cbb82cd6c485a8e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["5a945737c80e9ec5eb2cc9b67cbb82cd6c485a8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}