{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testNonRAMDelete().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testNonRAMDelete().mjava","pathOld":"/dev/null","sourceNew":"  // test when delete terms only apply to disk segments\n  public void testNonRAMDelete() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    assertEquals(0, modifier.getNumBufferedDocuments());\n    assertTrue(0 < modifier.getSegmentCount());\n\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    modifier.commit();\n\n    reader = IndexReader.open(dir, true);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testNonRAMDelete().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testNonRAMDelete().mjava","sourceNew":"  // test when delete terms only apply to disk segments\n  public void testNonRAMDelete() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    assertEquals(0, modifier.getNumBufferedDocuments());\n    assertTrue(0 < modifier.getSegmentCount());\n\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    modifier.commit();\n\n    reader = IndexReader.open(dir, true);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test when delete terms only apply to disk segments\n  public void testNonRAMDelete() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setMaxBufferedDocs(2);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    assertEquals(0, modifier.getNumBufferedDocuments());\n    assertTrue(0 < modifier.getSegmentCount());\n\n    modifier.commit();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n\n    modifier.commit();\n\n    reader = IndexReader.open(dir, true);\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}