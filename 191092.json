{"path":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory(newRandom());\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory(newRandom());\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","date":1286712181,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    Field f = new Field(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    DocValues v1 = s1.getValues(r);\n    DocValues v2 = new MultiValueSource(s1).getValues(r);\n\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(v1.intVal(i), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f5ce7b2d496c11c5dde63e6d7bec712747c1b7c","date":1303925155,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(_TestUtil.nextInt(random, 2, 16));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"035192620b9cf0e452f79836afa70a44c89dbed3","date":1303935270,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(_TestUtil.nextInt(random, 2, 16));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81a29affdd8c8083273a6d8de80d3dba266bb47","date":1304261898,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(\"reader=\" + r, r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(_TestUtil.nextInt(random, 2, 16));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(\"reader=\" + r, r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(\"reader=\" + r, r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":null,"sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(\"reader=\" + r, r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":null,"sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(\"reader=\" + r, r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestValueSource#testMultiValueSource().mjava","sourceNew":null,"sourceOld":"  public void testMultiValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) w.getConfig().getMergePolicy()).setMergeFactor(10);\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Store.NO, Field.Index.NOT_ANALYZED);\n    doc.add(f);\n\n    for(int i=0;i<17;i++) {\n      f.setValue(\"\"+i);\n      w.addDocument(doc);\n      w.commit();\n    }\n\n    IndexReader r = IndexReader.open(w, true);\n    w.close();\n\n    assertTrue(\"reader=\" + r, r.getSequentialSubReaders().length > 1);\n\n    ValueSource s1 = new IntFieldSource(\"field\");\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(r.getTopReaderContext());\n    DocValues v1 = null;\n    DocValues v2 = new MultiValueSource(s1).getValues(r.getTopReaderContext());\n    int leafOrd = -1;\n    for(int i=0;i<r.maxDoc();i++) {\n      int subIndex = ReaderUtil.subIndex(i, leaves);\n      if (subIndex != leafOrd) {\n        leafOrd = subIndex;\n        v1 = s1.getValues(leaves[leafOrd]);\n      }\n      assertEquals(v1.intVal(i - leaves[leafOrd].docBase), i);\n      assertEquals(v2.intVal(i), i);\n    }\n\n    FieldCache.DEFAULT.purgeAllCaches();\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f5ce7b2d496c11c5dde63e6d7bec712747c1b7c":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"035192620b9cf0e452f79836afa70a44c89dbed3":["962d04139994fce5193143ef35615499a9a96d78","3f5ce7b2d496c11c5dde63e6d7bec712747c1b7c"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"c220849f876de24a79f756f65b3eb045db59f63f":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["e81a29affdd8c8083273a6d8de80d3dba266bb47"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","eb378f8bdee16a26810e086303a4a86b4930ea12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81a29affdd8c8083273a6d8de80d3dba266bb47":["3f5ce7b2d496c11c5dde63e6d7bec712747c1b7c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","eb378f8bdee16a26810e086303a4a86b4930ea12"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","e81a29affdd8c8083273a6d8de80d3dba266bb47"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["c220849f876de24a79f756f65b3eb045db59f63f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e81a29affdd8c8083273a6d8de80d3dba266bb47","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["eb378f8bdee16a26810e086303a4a86b4930ea12","e81a29affdd8c8083273a6d8de80d3dba266bb47"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"]},"commit2Childs":{"3f5ce7b2d496c11c5dde63e6d7bec712747c1b7c":["035192620b9cf0e452f79836afa70a44c89dbed3","e81a29affdd8c8083273a6d8de80d3dba266bb47"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"035192620b9cf0e452f79836afa70a44c89dbed3":[],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c220849f876de24a79f756f65b3eb045db59f63f":["eb378f8bdee16a26810e086303a4a86b4930ea12","868da859b43505d9d2a023bfeae6dd0c795f5295"],"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3f5ce7b2d496c11c5dde63e6d7bec712747c1b7c","962d04139994fce5193143ef35615499a9a96d78"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"e81a29affdd8c8083273a6d8de80d3dba266bb47":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"962d04139994fce5193143ef35615499a9a96d78":["035192620b9cf0e452f79836afa70a44c89dbed3"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["035192620b9cf0e452f79836afa70a44c89dbed3","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}