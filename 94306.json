{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          Long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                if (currentDocsWithField.get(docIDUpto)) {\n                                  nextValue = currentValues.get(docIDUpto);\n                                } else {\n                                  nextValue = null;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            // TODO: make a mutable number\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          Long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                if (currentDocsWithField.get(docIDUpto)) {\n                                  nextValue = currentValues.get(docIDUpto);\n                                } else {\n                                  nextValue = null;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            // TODO: make a mutable number\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          Long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                if (currentDocsWithField.get(docIDUpto)) {\n                                  nextValue = currentValues.get(docIDUpto);\n                                } else {\n                                  nextValue = null;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f5df494f5e9f438dc01605c2ae20e5f5b3ed5e1","date":1404219983,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          Long nextValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextValue;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                if (currentDocsWithField.get(docIDUpto)) {\n                                  nextValue = currentValues.get(docIDUpto);\n                                } else {\n                                  nextValue = null;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          LeafReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          AtomicReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          int currentMaxDoc;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (docIDUpto == currentMaxDoc) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                  currentLiveDocs = mergeState.liveDocs[readerUpto];\n                                  currentMaxDoc = mergeState.maxDocs[readerUpto];\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          LeafReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          int currentMaxDoc;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (docIDUpto == currentMaxDoc) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                  currentLiveDocs = mergeState.liveDocs[readerUpto];\n                                  currentMaxDoc = mergeState.maxDocs[readerUpto];\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          LeafReader currentReader;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentReader = mergeState.readers.get(readerUpto);\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentLiveDocs = currentReader.getLiveDocs();\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              NumericDocValuesSub sub = docIDMerger.next();\n                              if (sub == null) {\n                                return false;\n                              }\n                              nextIsSet = true;\n                              nextValue = sub.values.get(sub.docID);\n                              nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                              return true;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          int currentMaxDoc;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (docIDUpto == currentMaxDoc) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                  currentLiveDocs = mergeState.liveDocs[readerUpto];\n                                  currentMaxDoc = mergeState.maxDocs[readerUpto];\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            NumericDocValuesSub sub = docIDMerger.next();\n                            if (sub == null) {\n                              return false;\n                            }\n                            nextIsSet = true;\n                            nextValue = sub.values.get(sub.docID);\n                            nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                            return true;\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              NumericDocValuesSub sub = docIDMerger.next();\n                              if (sub == null) {\n                                return false;\n                              }\n                              nextIsSet = true;\n                              nextValue = sub.values.get(sub.docID);\n                              nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                              return true;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14","date":1462698019,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            NumericDocValuesSub sub = docIDMerger.next();\n                            if (sub == null) {\n                              return false;\n                            }\n                            nextIsSet = true;\n                            nextValue = sub.values.get(sub.docID);\n                            nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                            return true;\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], mergeState.liveDocs[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            NumericDocValuesSub sub = docIDMerger.next();\n                            if (sub == null) {\n                              return false;\n                            }\n                            nextIsSet = true;\n                            nextValue = sub.values.get(sub.docID);\n                            nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                            return true;\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            NumericDocValuesSub sub = docIDMerger.next();\n                            if (sub == null) {\n                              return false;\n                            }\n                            nextIsSet = true;\n                            nextValue = sub.values.get(sub.docID);\n                            nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                            return true;\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          int currentMaxDoc;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (docIDUpto == currentMaxDoc) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                  currentLiveDocs = mergeState.liveDocs[readerUpto];\n                                  currentMaxDoc = mergeState.maxDocs[readerUpto];\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            NumericDocValuesSub sub = docIDMerger.next();\n                            if (sub == null) {\n                              return false;\n                            }\n                            nextIsSet = true;\n                            nextValue = sub.values.get(sub.docID);\n                            nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                            return true;\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          int currentMaxDoc;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (docIDUpto == currentMaxDoc) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                  currentLiveDocs = mergeState.liveDocs[readerUpto];\n                                  currentMaxDoc = mergeState.maxDocs[readerUpto];\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            NumericDocValuesSub sub = docIDMerger.next();\n                            if (sub == null) {\n                              return false;\n                            }\n                            nextIsSet = true;\n                            nextValue = sub.values.get(sub.docID);\n                            nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                            return true;\n                          }\n                        };\n                      }\n                    });\n  }\n\n","sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          int currentMaxDoc;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (docIDUpto == currentMaxDoc) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                  currentLiveDocs = mergeState.liveDocs[readerUpto];\n                                  currentMaxDoc = mergeState.maxDocs[readerUpto];\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            NumericDocValuesSub sub = docIDMerger.next();\n                            if (sub == null) {\n                              return false;\n                            }\n                            nextIsSet = true;\n                            nextValue = sub.values.get(sub.docID);\n                            nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                            return true;\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n\n                        // We must make a new DocIDMerger for each iterator:\n                        List<NumericDocValuesSub> subs = new ArrayList<>();\n                        assert mergeState.docMaps.length == toMerge.size();\n                        for(int i=0;i<toMerge.size();i++) {\n                          subs.add(new NumericDocValuesSub(mergeState.docMaps[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));\n                        }\n\n                        final DocIDMerger<NumericDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n\n                        return new Iterator<Number>() {\n                          long nextValue;\n                          boolean nextHasValue;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (hasNext() == false) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            NumericDocValuesSub sub = docIDMerger.next();\n                            if (sub == null) {\n                              return false;\n                            }\n                            nextIsSet = true;\n                            nextValue = sub.values.get(sub.docID);\n                            nextHasValue = nextValue != 0 || sub.docsWithField.get(sub.docID);\n                            return true;\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues],List[Bits]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the numeric docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addNumericField}, passing\n   * an Iterable that merges and filters deleted documents on the fly.\n   */\n  public void mergeNumericField(final FieldInfo fieldInfo, final MergeState mergeState, final List<NumericDocValues> toMerge, final List<Bits> docsWithField) throws IOException {\n\n    addNumericField(fieldInfo,\n                    new Iterable<Number>() {\n                      @Override\n                      public Iterator<Number> iterator() {\n                        return new Iterator<Number>() {\n                          int readerUpto = -1;\n                          int docIDUpto;\n                          long nextValue;\n                          boolean nextHasValue;\n                          int currentMaxDoc;\n                          NumericDocValues currentValues;\n                          Bits currentLiveDocs;\n                          Bits currentDocsWithField;\n                          boolean nextIsSet;\n\n                          @Override\n                          public boolean hasNext() {\n                            return nextIsSet || setNext();\n                          }\n\n                          @Override\n                          public void remove() {\n                            throw new UnsupportedOperationException();\n                          }\n\n                          @Override\n                          public Number next() {\n                            if (!hasNext()) {\n                              throw new NoSuchElementException();\n                            }\n                            assert nextIsSet;\n                            nextIsSet = false;\n                            return nextHasValue ? nextValue : null;\n                          }\n\n                          private boolean setNext() {\n                            while (true) {\n                              if (readerUpto == toMerge.size()) {\n                                return false;\n                              }\n\n                              if (docIDUpto == currentMaxDoc) {\n                                readerUpto++;\n                                if (readerUpto < toMerge.size()) {\n                                  currentValues = toMerge.get(readerUpto);\n                                  currentDocsWithField = docsWithField.get(readerUpto);\n                                  currentLiveDocs = mergeState.liveDocs[readerUpto];\n                                  currentMaxDoc = mergeState.maxDocs[readerUpto];\n                                }\n                                docIDUpto = 0;\n                                continue;\n                              }\n\n                              if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                                nextIsSet = true;\n                                nextValue = currentValues.get(docIDUpto);\n                                if (nextValue == 0 && currentDocsWithField.get(docIDUpto) == false) {\n                                  nextHasValue = false;\n                                } else {\n                                  nextHasValue = true;\n                                }\n                                docIDUpto++;\n                                return true;\n                              }\n\n                              docIDUpto++;\n                            }\n                          }\n                        };\n                      }\n                    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0ad30c6a479e764150a3316e57263319775f1df2":["9bb9a29a5e71a90295f175df8919802993142c9a","3d33e731a93d4b57e662ff094f64f94a745422d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9faa42f41b6adb98daf009cf99a4ee239189e469"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["1f5df494f5e9f438dc01605c2ae20e5f5b3ed5e1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9bb9a29a5e71a90295f175df8919802993142c9a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9bb9a29a5e71a90295f175df8919802993142c9a","0ad30c6a479e764150a3316e57263319775f1df2"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"1f5df494f5e9f438dc01605c2ae20e5f5b3ed5e1":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["9bb9a29a5e71a90295f175df8919802993142c9a","6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","1f5df494f5e9f438dc01605c2ae20e5f5b3ed5e1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["9bb9a29a5e71a90295f175df8919802993142c9a"],"6d8200beeffd3fa5155855f4cb8a8a5e38aeff14":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"1f5df494f5e9f438dc01605c2ae20e5f5b3ed5e1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["6d8200beeffd3fa5155855f4cb8a8a5e38aeff14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}