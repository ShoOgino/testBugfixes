{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","sourceNew":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 && \n        (endsWith(s, len, \"heter\") ||  // general ending (hemmelig-heter -> hemmelig)\n         endsWith(s, len, \"heten\")))   // general ending (hemmelig-heten -> hemmelig)\n      return len - 5;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") || // general ending (kristen-dom -> kristen)\n         endsWith(s, len, \"het\")))  // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        (endsWith(s, len, \"ende\") ||  // (sov-ende -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         endsWith(s, len, \"este\") ||  // adj (fin-este -> fin)\n         endsWith(s, len, \"eren\")))   // masc\n      return len - 4;\n    \n    if (len > 5 &&\n        (endsWith(s, len, \"ere\") || // adj (fin-ere -> fin)\n         endsWith(s, len, \"est\") || // adj (fin-est -> fin)\n         endsWith(s, len, \"ene\")    // masc/fem/neutr pl definite (hus-ene)\n         )) \n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         endsWith(s, len, \"st\") ||  // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n    \n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","sourceOld":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 && \n        (endsWith(s, len, \"heter\") ||  // general ending (hemmelig-heter -> hemmelig)\n         endsWith(s, len, \"heten\")))   // general ending (hemmelig-heten -> hemmelig)\n      return len - 5;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") || // general ending (kristen-dom -> kristen)\n         endsWith(s, len, \"het\")))  // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        (endsWith(s, len, \"ende\") ||  // (sov-ende -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         endsWith(s, len, \"este\") ||  // adj (fin-este -> fin)\n         endsWith(s, len, \"eren\")))   // masc\n      return len - 4;\n    \n    if (len > 5 &&\n        (endsWith(s, len, \"ere\") || // adj (fin-ere -> fin)\n         endsWith(s, len, \"est\") || // adj (fin-est -> fin)\n         endsWith(s, len, \"ene\")    // masc/fem/neutr pl definite (hus-ene)\n         )) \n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         endsWith(s, len, \"st\") ||  // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n    \n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb2596a1dcedacf5c843ed19f93ce2113f071dc","date":1372346925,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","sourceNew":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 &&\n        ((endsWith(s, len, \"heter\") &&\n          useBokmaal) ||  // general ending (hemmelig-heter -> hemmelig)\n         (endsWith(s, len, \"heten\") &&\n          useBokmaal) ||  // general ending (hemmelig-heten -> hemmelig)\n         (endsWith(s, len, \"heita\") &&\n          useNynorsk)))   // general ending (hemmeleg-heita -> hemmeleg)\n      return len - 5;\n    \n    // Remove Nynorsk common endings, single-pass\n    if (len > 8 && useNynorsk &&\n        (endsWith(s, len, \"heiter\") ||  // general ending (hemmeleg-heiter -> hemmeleg)\n         endsWith(s, len, \"leiken\") ||  // general ending (trygg-leiken -> trygg)\n         endsWith(s, len, \"leikar\")))   // general ending (trygg-leikar -> trygg)\n      return len - 6;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") ||  // general ending (kristen-dom -> kristen)\n         (endsWith(s, len, \"het\") &&\n          useBokmaal)))              // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 6 && useNynorsk &&\n        (endsWith(s, len, \"heit\") ||  // general ending (hemmeleg-heit -> hemmeleg)\n         endsWith(s, len, \"semd\") ||  // general ending (verk-semd -> verk)\n         endsWith(s, len, \"leik\")))   // general ending (trygg-leik -> trygg)\n      return len - 4;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        ((endsWith(s, len, \"ende\") &&\n          useBokmaal) ||      // (sov-ende -> sov)\n         (endsWith(s, len, \"ande\") &&\n          useNynorsk) ||      // (sov-ande -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         (endsWith(s, len, \"este\") &&\n          useBokmaal) ||      // adj (fin-este -> fin)\n         (endsWith(s, len, \"aste\") &&\n          useNynorsk) ||      // adj (fin-aste -> fin)\n         (endsWith(s, len, \"eren\") &&\n          useBokmaal) ||      // masc\n         (endsWith(s, len, \"aren\") &&\n          useNynorsk)))       // masc \n      return len - 4;\n    \n    if (len > 5 &&\n        ((endsWith(s, len, \"ere\") &&\n         useBokmaal) ||     // adj (fin-ere -> fin)\n         (endsWith(s, len, \"are\") &&\n          useNynorsk) ||    // adj (fin-are -> fin)\n         (endsWith(s, len, \"est\") &&\n          useBokmaal) ||    // adj (fin-est -> fin)\n         (endsWith(s, len, \"ast\") &&\n          useNynorsk) ||    // adj (fin-ast -> fin)\n         endsWith(s, len, \"ene\") || // masc/fem/neutr pl definite (hus-ene)\n         (endsWith(s, len, \"ane\") &&\n          useNynorsk)))     // masc pl definite (gut-ane)\n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         (endsWith(s, len, \"ar\") &&\n          useNynorsk) ||    // masc pl indefinite\n         (endsWith(s, len, \"st\") &&\n          useBokmaal) ||    // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n\n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","sourceOld":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 && \n        (endsWith(s, len, \"heter\") ||  // general ending (hemmelig-heter -> hemmelig)\n         endsWith(s, len, \"heten\")))   // general ending (hemmelig-heten -> hemmelig)\n      return len - 5;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") || // general ending (kristen-dom -> kristen)\n         endsWith(s, len, \"het\")))  // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        (endsWith(s, len, \"ende\") ||  // (sov-ende -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         endsWith(s, len, \"este\") ||  // adj (fin-este -> fin)\n         endsWith(s, len, \"eren\")))   // masc\n      return len - 4;\n    \n    if (len > 5 &&\n        (endsWith(s, len, \"ere\") || // adj (fin-ere -> fin)\n         endsWith(s, len, \"est\") || // adj (fin-est -> fin)\n         endsWith(s, len, \"ene\")    // masc/fem/neutr pl definite (hus-ene)\n         )) \n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         endsWith(s, len, \"st\") ||  // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n    \n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemmer#stem(char[],int).mjava","sourceNew":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 &&\n        ((endsWith(s, len, \"heter\") &&\n          useBokmaal) ||  // general ending (hemmelig-heter -> hemmelig)\n         (endsWith(s, len, \"heten\") &&\n          useBokmaal) ||  // general ending (hemmelig-heten -> hemmelig)\n         (endsWith(s, len, \"heita\") &&\n          useNynorsk)))   // general ending (hemmeleg-heita -> hemmeleg)\n      return len - 5;\n    \n    // Remove Nynorsk common endings, single-pass\n    if (len > 8 && useNynorsk &&\n        (endsWith(s, len, \"heiter\") ||  // general ending (hemmeleg-heiter -> hemmeleg)\n         endsWith(s, len, \"leiken\") ||  // general ending (trygg-leiken -> trygg)\n         endsWith(s, len, \"leikar\")))   // general ending (trygg-leikar -> trygg)\n      return len - 6;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") ||  // general ending (kristen-dom -> kristen)\n         (endsWith(s, len, \"het\") &&\n          useBokmaal)))              // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 6 && useNynorsk &&\n        (endsWith(s, len, \"heit\") ||  // general ending (hemmeleg-heit -> hemmeleg)\n         endsWith(s, len, \"semd\") ||  // general ending (verk-semd -> verk)\n         endsWith(s, len, \"leik\")))   // general ending (trygg-leik -> trygg)\n      return len - 4;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        ((endsWith(s, len, \"ende\") &&\n          useBokmaal) ||      // (sov-ende -> sov)\n         (endsWith(s, len, \"ande\") &&\n          useNynorsk) ||      // (sov-ande -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         (endsWith(s, len, \"este\") &&\n          useBokmaal) ||      // adj (fin-este -> fin)\n         (endsWith(s, len, \"aste\") &&\n          useNynorsk) ||      // adj (fin-aste -> fin)\n         (endsWith(s, len, \"eren\") &&\n          useBokmaal) ||      // masc\n         (endsWith(s, len, \"aren\") &&\n          useNynorsk)))       // masc \n      return len - 4;\n    \n    if (len > 5 &&\n        ((endsWith(s, len, \"ere\") &&\n         useBokmaal) ||     // adj (fin-ere -> fin)\n         (endsWith(s, len, \"are\") &&\n          useNynorsk) ||    // adj (fin-are -> fin)\n         (endsWith(s, len, \"est\") &&\n          useBokmaal) ||    // adj (fin-est -> fin)\n         (endsWith(s, len, \"ast\") &&\n          useNynorsk) ||    // adj (fin-ast -> fin)\n         endsWith(s, len, \"ene\") || // masc/fem/neutr pl definite (hus-ene)\n         (endsWith(s, len, \"ane\") &&\n          useNynorsk)))     // masc pl definite (gut-ane)\n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         (endsWith(s, len, \"ar\") &&\n          useNynorsk) ||    // masc pl indefinite\n         (endsWith(s, len, \"st\") &&\n          useBokmaal) ||    // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n\n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","sourceOld":"  public int stem(char s[], int len) {   \n    // Remove posessive -s (bilens -> bilen) and continue checking \n    if (len > 4 && s[len-1] == 's')\n      len--;\n\n    // Remove common endings, single-pass\n    if (len > 7 && \n        (endsWith(s, len, \"heter\") ||  // general ending (hemmelig-heter -> hemmelig)\n         endsWith(s, len, \"heten\")))   // general ending (hemmelig-heten -> hemmelig)\n      return len - 5;\n\n    if (len > 5 &&\n        (endsWith(s, len, \"dom\") || // general ending (kristen-dom -> kristen)\n         endsWith(s, len, \"het\")))  // general ending (hemmelig-het -> hemmelig)\n      return len - 3;\n    \n    if (len > 7 && \n        (endsWith(s, len, \"elser\") ||   // general ending (føl-elser -> føl)\n         endsWith(s, len, \"elsen\")))    // general ending (føl-elsen -> føl)\n      return len - 5;\n    \n    if (len > 6 &&\n        (endsWith(s, len, \"ende\") ||  // (sov-ende -> sov)\n         endsWith(s, len, \"else\") ||  // general ending (føl-else -> føl)\n         endsWith(s, len, \"este\") ||  // adj (fin-este -> fin)\n         endsWith(s, len, \"eren\")))   // masc\n      return len - 4;\n    \n    if (len > 5 &&\n        (endsWith(s, len, \"ere\") || // adj (fin-ere -> fin)\n         endsWith(s, len, \"est\") || // adj (fin-est -> fin)\n         endsWith(s, len, \"ene\")    // masc/fem/neutr pl definite (hus-ene)\n         )) \n      return len - 3;\n    \n    if (len > 4 &&\n        (endsWith(s, len, \"er\") ||  // masc/fem indefinite\n         endsWith(s, len, \"en\") ||  // masc/fem definite\n         endsWith(s, len, \"et\") ||  // neutr definite\n         endsWith(s, len, \"st\") ||  // adj (billig-st -> billig)\n         endsWith(s, len, \"te\")))\n      return len - 2;\n    \n    if (len > 3)\n      switch(s[len-1]) {\n        case 'a':     // fem definite\n        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)\n        case 'n': \n          return len - 1;\n      }\n    \n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9fb2596a1dcedacf5c843ed19f93ce2113f071dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb2596a1dcedacf5c843ed19f93ce2113f071dc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb2596a1dcedacf5c843ed19f93ce2113f071dc"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9fb2596a1dcedacf5c843ed19f93ce2113f071dc"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9fb2596a1dcedacf5c843ed19f93ce2113f071dc":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}