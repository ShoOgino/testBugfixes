{"path":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","sourceNew":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        EmbeddedSolrServer solr = SolrRecordWriter.createEmbeddedSolrServer(\n            new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath());\n        \n        try {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        } finally {\n          solr.shutdown();\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","sourceOld":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        EmbeddedSolrServer solr = SolrRecordWriter.createEmbeddedSolrServer(\n            new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath());\n        \n        try {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        } finally {\n          solr.shutdown();\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        EmbeddedSolrServer solr = SolrRecordWriter.createEmbeddedSolrServer(\n            new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath());\n        \n        try {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        } finally {\n          solr.shutdown();\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","sourceNew":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        try (EmbeddedSolrServer solr\n                 = SolrRecordWriter.createEmbeddedSolrServer(new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath())) {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","sourceOld":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        EmbeddedSolrServer solr = SolrRecordWriter.createEmbeddedSolrServer(\n            new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath());\n        \n        try {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        } finally {\n          solr.shutdown();\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","sourceNew":null,"sourceOld":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        try (EmbeddedSolrServer solr\n                 = SolrRecordWriter.createEmbeddedSolrServer(new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath())) {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","sourceNew":null,"sourceOld":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        try (EmbeddedSolrServer solr\n                 = SolrRecordWriter.createEmbeddedSolrServer(new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath())) {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cc3b13b430571c2e169f98fe38e1e7666f88522d"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}