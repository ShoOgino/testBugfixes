{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#getOldUserVersionsFromFieldCache(BytesRef).mjava","commits":[{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessor#getOldUserVersionsFromFieldCache(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  private DocFoundAndOldUserAndSolrVersions getOldUserVersionsFromFieldCache(BytesRef indexedDocId) {\n    SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId, null, null, true);\n    if (oldDoc == RealTimeGetComponent.DELETED) {\n      return DocFoundAndOldUserAndSolrVersions.NOT_FOUND;\n    }\n    if (oldDoc == null) {\n      // need to look up in index now...\n      RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();\n      try {\n        SolrIndexSearcher searcher = newestSearcher.get();\n        long lookup = searcher.lookupId(indexedDocId);\n        if (lookup < 0) {\n          // doc not in index either...\n          return DocFoundAndOldUserAndSolrVersions.NOT_FOUND;\n        }\n        final LeafReaderContext segmentContext = searcher.getTopReaderContext().leaves().get((int)(lookup>>32));\n        final int docIdInSegment = (int)lookup;\n\n        long oldSolrVersion = getFunctionValues(segmentContext, solrVersionField, searcher).longVal(docIdInSegment);\n        Object[] oldUserVersions = getObjectValues(segmentContext, userVersionFields, searcher, docIdInSegment);\n        return new DocFoundAndOldUserAndSolrVersions(oldUserVersions, oldSolrVersion);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading version from index\", e);\n      } finally {\n        if (newestSearcher != null) { //TODO can this ever be null?\n          newestSearcher.decref();\n        }\n      }\n    } else {\n      return getUserVersionAndSolrVersionFromDocument(oldDoc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}