{"path":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"solr/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d8770f1cf41b019832667e392030ec054ea577a","date":1408383229,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      final Process proc;\n      try {\n        proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n      } catch (Error err) {\n        // Create better error message\n        if (err.getMessage() != null && err.getMessage().contains(\"posix_spawn\")) {\n          Error newErr = new Error(\"Error forking command due to JVM locale bug (see https://issues.apache.org/jira/browse/SOLR-6387): \" + err.getMessage());\n          newErr.setStackTrace(err.getStackTrace());\n          err = newErr;\n        }\n        throw err;\n      }\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      Process proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dfe01fdf105c0729e80893e0520176aa9891f2a","date":1408475467,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      final Process proc;\n      try {\n        proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n      } catch (Error err) {\n        // Create better error message\n        if (err.getMessage() != null && (err.getMessage().contains(\"posix_spawn\") || err.getMessage().contains(\"UNIXProcess\"))) {\n          Error newErr = new Error(\"Error forking command due to JVM locale bug (see https://issues.apache.org/jira/browse/SOLR-6387): \" + err.getMessage());\n          newErr.setStackTrace(err.getStackTrace());\n          err = newErr;\n        }\n        throw err;\n      }\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      final Process proc;\n      try {\n        proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n      } catch (Error err) {\n        // Create better error message\n        if (err.getMessage() != null && err.getMessage().contains(\"posix_spawn\")) {\n          Error newErr = new Error(\"Error forking command due to JVM locale bug (see https://issues.apache.org/jira/browse/SOLR-6387): \" + err.getMessage());\n          newErr.setStackTrace(err.getStackTrace());\n          err = newErr;\n        }\n        throw err;\n      }\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f0b4931f82e73df43ec2bffad92362391dd90a8","date":1507895298,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RunExecutableListener#exec(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * External executable listener.\n   * \n   * @param callback Unused (As of solr 1.4-dev)\n   * @return Error code indicating if the command has executed successfully. <br />\n   *  0 , indicates normal termination.<br />\n   *  non-zero , otherwise.\n   */\n  protected int exec(String callback) {\n    int ret = 0;\n\n    try {\n      boolean doLog = log.isDebugEnabled();\n      if (doLog) {\n        log.debug(\"About to exec \" + cmd[0]);\n      }\n      final Process proc;\n      try {\n        proc = Runtime.getRuntime().exec(cmd, envp ,dir);\n      } catch (Error err) {\n        // Create better error message\n        if (err.getMessage() != null && (err.getMessage().contains(\"posix_spawn\") || err.getMessage().contains(\"UNIXProcess\"))) {\n          Error newErr = new Error(\"Error forking command due to JVM locale bug (see https://issues.apache.org/jira/browse/SOLR-6387): \" + err.getMessage());\n          newErr.setStackTrace(err.getStackTrace());\n          err = newErr;\n        }\n        throw err;\n      }\n\n      if (wait) {\n        try {\n          ret = proc.waitFor();\n        } catch (InterruptedException e) {\n          SolrException.log(log,e);\n          ret = INVALID_PROCESS_RETURN_CODE;\n        }\n      }\n\n      if (wait && doLog) {\n        log.debug(\"Executable \" + cmd[0] + \" returned \" + ret);\n      }\n\n    } catch (IOException e) {\n      // don't throw exception, just log it...\n      SolrException.log(log,e);\n      ret = INVALID_PROCESS_RETURN_CODE;\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0d8770f1cf41b019832667e392030ec054ea577a":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dfe01fdf105c0729e80893e0520176aa9891f2a":["0d8770f1cf41b019832667e392030ec054ea577a"],"1f0b4931f82e73df43ec2bffad92362391dd90a8":["3dfe01fdf105c0729e80893e0520176aa9891f2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f0b4931f82e73df43ec2bffad92362391dd90a8"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d8770f1cf41b019832667e392030ec054ea577a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0d8770f1cf41b019832667e392030ec054ea577a":["3dfe01fdf105c0729e80893e0520176aa9891f2a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3dfe01fdf105c0729e80893e0520176aa9891f2a":["1f0b4931f82e73df43ec2bffad92362391dd90a8"],"1f0b4931f82e73df43ec2bffad92362391dd90a8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}