{"path":"src/java/org/apache/solr/schema/DateField#getRangeQuery(QParser,SchemaField,Date,Date,boolean,boolean).mjava","commits":[{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/DateField#getRangeQuery(QParser,SchemaField,Date,Date,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** DateField specific range query */\n  public Query getRangeQuery(QParser parser, SchemaField sf, Date part1, Date part2, boolean minInclusive, boolean maxInclusive) {\n    return new TermRangeQuery(\n            sf.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/DateField#getRangeQuery(QParser,SchemaField,Date,Date,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/DateField#getRangeQuery(QParser,SchemaField,Date,Date,boolean,boolean).mjava","sourceNew":"  /** DateField specific range query */\n  public Query getRangeQuery(QParser parser, SchemaField sf, Date part1, Date part2, boolean minInclusive, boolean maxInclusive) {\n    return new TermRangeQuery(\n            sf.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /** DateField specific range query */\n  public Query getRangeQuery(QParser parser, SchemaField sf, Date part1, Date part2, boolean minInclusive, boolean maxInclusive) {\n    return new TermRangeQuery(\n            sf.getName(),\n            part1 == null ? null : toInternal(part1),\n            part2 == null ? null : toInternal(part2),\n            minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}