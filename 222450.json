{"path":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","commits":[{"id":"7275084e1d7b0abe30ec663515a101fdf56648b8","date":1450100130,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent.booleanValue()) {\n      final Collection<Slice> slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collectionName);\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == (slices == null ? 0 : slices.size())) {\n        isPresent = false;\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              if (coreName.equals(replica.get(\"core\"))) {\n                isPresent = true;\n              }\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11","add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","sourceNew":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent.booleanValue()) {\n      final DocCollection docCollection = getCommonCloudSolrClient().getZkStateReader().getClusterState().getCollectionOrNull(collectionName);\n      final Collection<Slice> slices = (docCollection != null) ? docCollection.getSlices() : null;\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == (slices == null ? 0 : slices.size())) {\n        isPresent = false;\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              if (coreName.equals(replica.get(\"core\"))) {\n                isPresent = true;\n              }\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent.booleanValue()) {\n      final Collection<Slice> slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collectionName);\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == (slices == null ? 0 : slices.size())) {\n        isPresent = false;\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              if (coreName.equals(replica.get(\"core\"))) {\n                isPresent = true;\n              }\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":["7275084e1d7b0abe30ec663515a101fdf56648b8"],"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","sourceNew":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent.booleanValue()) {\n      final DocCollection docCollection = getCommonCloudSolrClient().getZkStateReader().getClusterState().getCollectionOrNull(collectionName);\n      final Collection<Slice> slices = (docCollection != null) ? docCollection.getSlices() : null;\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == (slices == null ? 0 : slices.size())) {\n        isPresent = false;\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              if (coreName.equals(replica.get(\"core\"))) {\n                isPresent = true;\n              }\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent.booleanValue()) {\n      final Collection<Slice> slices = getCommonCloudSolrClient().getZkStateReader().getClusterState().getSlices(collectionName);\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == (slices == null ? 0 : slices.size())) {\n        isPresent = false;\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              if (coreName.equals(replica.get(\"core\"))) {\n                isPresent = true;\n              }\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","sourceNew":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent.booleanValue()) {\n      final DocCollection docCollection = getCommonCloudSolrClient().getZkStateReader().getClusterState().getCollectionOrNull(collectionName);\n      final Collection<Slice> slices = (docCollection != null) ? docCollection.getSlices() : null;\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == (slices == null ? 0 : slices.size())) {\n        isPresent = false;\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              if (coreName.equals(replica.get(\"core\"))) {\n                isPresent = true;\n              }\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent.booleanValue()) {\n      final DocCollection docCollection = getCommonCloudSolrClient().getZkStateReader().getClusterState().getCollectionOrNull(collectionName);\n      final Collection<Slice> slices = (docCollection != null) ? docCollection.getSlices() : null;\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == (slices == null ? 0 : slices.size())) {\n        isPresent = false;\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              if (coreName.equals(replica.get(\"core\"))) {\n                isPresent = true;\n              }\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#checkCoreNamePresenceAndSliceCount(String,String,boolean,int).mjava","sourceNew":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent) {\n      final DocCollection docCollection = getCommonCloudSolrClient().getZkStateReader().getClusterState().getCollectionOrNull(collectionName);\n      final Collection<Slice> slices = (docCollection != null) ? docCollection.getSlices() : Collections.emptyList();\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == slices.size()) {\n        isPresent = false;\n        for (Slice slice : slices) {\n          for (Replica replica : slice.getReplicas()) {\n            if (coreName.equals(replica.get(\"core\"))) {\n              isPresent = true;\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  private void checkCoreNamePresenceAndSliceCount(String collectionName, String coreName,\n      boolean shouldBePresent, int expectedSliceCount) throws Exception {\n    final TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    Boolean isPresent = null; // null meaning \"don't know\"\n    while (null == isPresent || shouldBePresent != isPresent.booleanValue()) {\n      final DocCollection docCollection = getCommonCloudSolrClient().getZkStateReader().getClusterState().getCollectionOrNull(collectionName);\n      final Collection<Slice> slices = (docCollection != null) ? docCollection.getSlices() : null;\n      if (timeout.hasTimedOut()) {\n        printLayout();\n        fail(\"checkCoreNamePresenceAndSliceCount failed:\"\n            +\" collection=\"+collectionName+\" CoreName=\"+coreName\n            +\" shouldBePresent=\"+shouldBePresent+\" isPresent=\"+isPresent\n            +\" expectedSliceCount=\"+expectedSliceCount+\" actualSliceCount=\"+slices.size());\n      }\n      if (expectedSliceCount == (slices == null ? 0 : slices.size())) {\n        isPresent = false;\n        if (slices != null) {\n          for (Slice slice : slices) {\n            for (Replica replica : slice.getReplicas()) {\n              if (coreName.equals(replica.get(\"core\"))) {\n                isPresent = true;\n              }\n            }\n          }\n        }\n      }\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":["7275084e1d7b0abe30ec663515a101fdf56648b8","344b0840364d990b29b97467bfcc766ff8325d11"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7275084e1d7b0abe30ec663515a101fdf56648b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["7275084e1d7b0abe30ec663515a101fdf56648b8","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["7275084e1d7b0abe30ec663515a101fdf56648b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"7275084e1d7b0abe30ec663515a101fdf56648b8":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7275084e1d7b0abe30ec663515a101fdf56648b8"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}