{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","pathOld":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","sourceNew":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#toString().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a String representation of the index data for debugging purposes.\n   * \n   * @return a String representation\n   */\n  @Override\n  public String toString() {\n    StringBuilder buf = new StringBuilder();\n    Iterator<String> iter = new TreeMap<String,String[]>(table).keySet().iterator();\n    int count = 0;\n    int f0 = 0;\n    int f1 = 0;\n    int f2 = 0;\n    int f3 = 0;\n    \n    while (iter.hasNext()) {\n      String word = iter.next();\n      buf.append(word + \":\");\n      String[] synonyms = getSynonyms(word);\n      buf.append(Arrays.asList(synonyms));\n      buf.append(\"\\n\");\n      count += synonyms.length;\n      if (synonyms.length == 0) f0++;\n      if (synonyms.length == 1) f1++;\n      if (synonyms.length == 2) f2++;\n      if (synonyms.length == 3) f3++;\n    }\n    \n    buf.append(\"\\n\\nkeys=\" + table.size() + \", synonyms=\" + count + \", f0=\" + f0 +\", f1=\" + f1 + \", f2=\" + f2 + \", f3=\" + f3);\n    return buf.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}