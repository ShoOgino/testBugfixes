{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          final BytesRef term = terms.get(doc);\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          final BytesRef term = terms.get(doc);\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator(null);\n    \n    return new IntDocValues(this) {\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          final BytesRef term = terms.get(doc);\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      int lastDocID = -1;\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = terms.docID();\n        if (doc > curDocID) {\n          curDocID = terms.advance(doc);\n        }\n        if (doc == curDocID) {\n          BytesRef term = terms.binaryValue();\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          }\n        }\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          final BytesRef term = terms.get(doc);\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      int lastDocID = -1;\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = terms.docID();\n        if (doc > curDocID) {\n          curDocID = terms.advance(doc);\n        }\n        if (doc == curDocID) {\n          BytesRef term = terms.binaryValue();\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          }\n        }\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          final BytesRef term = terms.get(doc);\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      int lastDocID = -1;\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = terms.docID();\n        if (doc > curDocID) {\n          curDocID = terms.advance(doc);\n        }\n        if (doc == curDocID) {\n          BytesRef term = terms.binaryValue();\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          }\n        }\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      @Override\n      public int intVal(int doc) \n      {\n        try {\n          final BytesRef term = terms.get(doc);\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          } else {\n            return 0;\n          }\n        } \n        catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiTerms.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      int lastDocID = -1;\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = terms.docID();\n        if (doc > curDocID) {\n          curDocID = terms.advance(doc);\n        }\n        if (doc == curDocID) {\n          BytesRef term = terms.binaryValue();\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          }\n        }\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiFields.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      int lastDocID = -1;\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = terms.docID();\n        if (doc > curDocID) {\n          curDocID = terms.advance(doc);\n        }\n        if (doc == curDocID) {\n          BytesRef term = terms.binaryValue();\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          }\n        }\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/JoinDocFreqValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiTerms.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      int lastDocID = -1;\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = terms.docID();\n        if (doc > curDocID) {\n          curDocID = terms.advance(doc);\n        }\n        if (doc == curDocID) {\n          BytesRef term = terms.binaryValue();\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          }\n        }\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException\n  {\n    final BinaryDocValues terms = DocValues.getBinary(readerContext.reader(), field);\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader();\n    Terms t = MultiTerms.getTerms(top, qfield);\n    final TermsEnum termsEnum = t == null ? TermsEnum.EMPTY : t.iterator();\n    \n    return new IntDocValues(this) {\n\n      int lastDocID = -1;\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = terms.docID();\n        if (doc > curDocID) {\n          curDocID = terms.advance(doc);\n        }\n        if (doc == curDocID) {\n          BytesRef term = terms.binaryValue();\n          if (termsEnum.seekExact(term)) {\n            return termsEnum.docFreq();\n          }\n        }\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["04e775de416dd2d8067b10db1c8af975a1d5017e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}