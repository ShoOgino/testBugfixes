{"path":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0f2476332da483dc2ea1fdd80b5968380653166","date":1316180489,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float)\n   * \n   * @deprecated\n   *  use suggestSimilar(String, int, IndexReader, String, SuggestMode)\n   *  <ul>\n\t *  \t<li>SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX instead of morePopular=false</li>\n\t *  \t<li>SuggestMode.SuGGEST_MORE_POPULAR instead of morePopular=true</li>\n   *  </ul>\n   */\n  @Deprecated\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, org.apache.lucene.index.IndexReader, String, boolean, float)\n   */\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd43031c9af26f2955774bb908512b3a9c2301c","date":1316181946,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int,IndexReader,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Suggest similar words (optionally restricted to a field of an index).\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * <p>Uses the {@link #getAccuracy()} value passed into the constructor as the accuracy.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @param ir the indexReader of the user index (can be null see field param)\n   * @param field the field of the user index: if field is not null, the suggested\n   * words are restricted to the words present in this field.\n   * @param morePopular return only the suggest words that are as frequent or more frequent than the searched word\n   * (only if restricted mode = (indexReader!=null and field!=null)\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[] the sorted list of the suggest words with these 2 criteria:\n   * first criteria: the edit distance, second criteria (only if restricted mode): the popularity\n   * of the suggest words in the field of the user index\n   *\n   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float)\n   * \n   * @deprecated\n   *  use suggestSimilar(String, int, IndexReader, String, SuggestMode)\n   *  <ul>\n\t *  \t<li>SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX instead of morePopular=false</li>\n\t *  \t<li>SuggestMode.SuGGEST_MORE_POPULAR instead of morePopular=true</li>\n   *  </ul>\n   */\n  @Deprecated\n  public String[] suggestSimilar(String word, int numSug, IndexReader ir,\n      String field, boolean morePopular) throws IOException {\n    return suggestSimilar(word, numSug, ir, field, morePopular, accuracy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b0f2476332da483dc2ea1fdd80b5968380653166":["e230a61047bc041516c811baa08a7174d6f8322a"],"ecd43031c9af26f2955774bb908512b3a9c2301c":["b0f2476332da483dc2ea1fdd80b5968380653166"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecd43031c9af26f2955774bb908512b3a9c2301c"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b0f2476332da483dc2ea1fdd80b5968380653166":["ecd43031c9af26f2955774bb908512b3a9c2301c"],"ecd43031c9af26f2955774bb908512b3a9c2301c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["b0f2476332da483dc2ea1fdd80b5968380653166","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}