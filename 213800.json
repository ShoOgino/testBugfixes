{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase#parseRules(LineNumberReader,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase#parseRules(LineNumberReader,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase#parseRules(LineNumberReader,int).mjava","sourceNew":"  private static Rule[] parseRules(LineNumberReader r, int type) throws IOException {\n    List<Rule> rules = new ArrayList<Rule>();\n    String line;\n    while ((line = readLine(r)) != null) {\n      Matcher matcher = stripPattern.matcher(line);\n      if (matcher.matches()) {\n        rules.add(new Rule(matcher.group(1), Integer.parseInt(matcher.group(2)), \"\"));\n      } else {\n        matcher = repPattern.matcher(line);\n        if (matcher.matches()) {\n          rules.add(new Rule(matcher.group(1), Integer.parseInt(matcher.group(2)), matcher.group(3)));\n        } else {\n          matcher = excPattern.matcher(line);\n          if (matcher.matches()) {\n            if (type == 0) {\n              rules.add(new RuleWithSuffixExceptions(matcher.group(1), \n                        Integer.parseInt(matcher.group(2)), \n                        matcher.group(3), \n                        parseList(matcher.group(4))));\n            } else {\n              rules.add(new RuleWithSetExceptions(matcher.group(1), \n                        Integer.parseInt(matcher.group(2)), \n                        matcher.group(3), \n                        parseList(matcher.group(4))));\n            }\n          } else {\n            throw new RuntimeException(\"Illegal Step rule specified at line \" + r.getLineNumber());\n          }\n        }\n      }\n      if (line.endsWith(\";\"))\n        return rules.toArray(new Rule[rules.size()]);\n    }\n    return null;\n  }\n\n","sourceOld":"  private static Rule[] parseRules(LineNumberReader r, int type) throws IOException {\n    List<Rule> rules = new ArrayList<Rule>();\n    String line;\n    while ((line = readLine(r)) != null) {\n      Matcher matcher = stripPattern.matcher(line);\n      if (matcher.matches()) {\n        rules.add(new Rule(matcher.group(1), Integer.parseInt(matcher.group(2)), \"\"));\n      } else {\n        matcher = repPattern.matcher(line);\n        if (matcher.matches()) {\n          rules.add(new Rule(matcher.group(1), Integer.parseInt(matcher.group(2)), matcher.group(3)));\n        } else {\n          matcher = excPattern.matcher(line);\n          if (matcher.matches()) {\n            if (type == 0) {\n              rules.add(new RuleWithSuffixExceptions(matcher.group(1), \n                        Integer.parseInt(matcher.group(2)), \n                        matcher.group(3), \n                        parseList(matcher.group(4))));\n            } else {\n              rules.add(new RuleWithSetExceptions(matcher.group(1), \n                        Integer.parseInt(matcher.group(2)), \n                        matcher.group(3), \n                        parseList(matcher.group(4))));\n            }\n          } else {\n            throw new RuntimeException(\"Illegal Step rule specified at line \" + r.getLineNumber());\n          }\n        }\n      }\n      if (line.endsWith(\";\"))\n        return rules.toArray(new Rule[rules.size()]);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase#parseRules(LineNumberReader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase#parseRules(LineNumberReader,int).mjava","sourceNew":"  private static Rule[] parseRules(LineNumberReader r, int type) throws IOException {\n    List<Rule> rules = new ArrayList<>();\n    String line;\n    while ((line = readLine(r)) != null) {\n      Matcher matcher = stripPattern.matcher(line);\n      if (matcher.matches()) {\n        rules.add(new Rule(matcher.group(1), Integer.parseInt(matcher.group(2)), \"\"));\n      } else {\n        matcher = repPattern.matcher(line);\n        if (matcher.matches()) {\n          rules.add(new Rule(matcher.group(1), Integer.parseInt(matcher.group(2)), matcher.group(3)));\n        } else {\n          matcher = excPattern.matcher(line);\n          if (matcher.matches()) {\n            if (type == 0) {\n              rules.add(new RuleWithSuffixExceptions(matcher.group(1), \n                        Integer.parseInt(matcher.group(2)), \n                        matcher.group(3), \n                        parseList(matcher.group(4))));\n            } else {\n              rules.add(new RuleWithSetExceptions(matcher.group(1), \n                        Integer.parseInt(matcher.group(2)), \n                        matcher.group(3), \n                        parseList(matcher.group(4))));\n            }\n          } else {\n            throw new RuntimeException(\"Illegal Step rule specified at line \" + r.getLineNumber());\n          }\n        }\n      }\n      if (line.endsWith(\";\"))\n        return rules.toArray(new Rule[rules.size()]);\n    }\n    return null;\n  }\n\n","sourceOld":"  private static Rule[] parseRules(LineNumberReader r, int type) throws IOException {\n    List<Rule> rules = new ArrayList<Rule>();\n    String line;\n    while ((line = readLine(r)) != null) {\n      Matcher matcher = stripPattern.matcher(line);\n      if (matcher.matches()) {\n        rules.add(new Rule(matcher.group(1), Integer.parseInt(matcher.group(2)), \"\"));\n      } else {\n        matcher = repPattern.matcher(line);\n        if (matcher.matches()) {\n          rules.add(new Rule(matcher.group(1), Integer.parseInt(matcher.group(2)), matcher.group(3)));\n        } else {\n          matcher = excPattern.matcher(line);\n          if (matcher.matches()) {\n            if (type == 0) {\n              rules.add(new RuleWithSuffixExceptions(matcher.group(1), \n                        Integer.parseInt(matcher.group(2)), \n                        matcher.group(3), \n                        parseList(matcher.group(4))));\n            } else {\n              rules.add(new RuleWithSetExceptions(matcher.group(1), \n                        Integer.parseInt(matcher.group(2)), \n                        matcher.group(3), \n                        parseList(matcher.group(4))));\n            }\n          } else {\n            throw new RuntimeException(\"Illegal Step rule specified at line \" + r.getLineNumber());\n          }\n        }\n      }\n      if (line.endsWith(\";\"))\n        return rules.toArray(new Rule[rules.size()]);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}