{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e837b9e725093b56ed9d86c0ea3fe415bccd4b58","date":1312113179,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); continue;\n          case ARR:    vals.add( readArray( parser ) ); continue;\n          case RESULT: vals.add( readDocuments( parser ) ); continue;\n          case DOC:    vals.add( readDocument( parser ) ); continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ENGLISH) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<Object>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165b9f5714e75d5242c0953800b3257db2dc4137","date":1518457431,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          case BOOL:\n          case DATE:\n          case DOUBLE:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case NULL:\n          case STR:\n            break;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          case BOOL:\n          case DATE:\n          case DOUBLE:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case NULL:\n          case STR:\n            break;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readArray(XMLStreamReader).mjava","sourceNew":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<>();\n\n    int depth = 0;\n    while( true )\n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n\n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          case BOOL:\n          case DATE:\n          case DOUBLE:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case NULL:\n          case STR:\n            break;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n\n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","sourceOld":"  protected List<Object> readArray( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n    if( !\"arr\".equals( parser.getLocalName().toLowerCase(Locale.ROOT) ) ) {\n      throw new RuntimeException( \"must be 'arr', not: \"+parser.getLocalName() );\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    KnownType type = null;\n\n    List<Object> vals = new ArrayList<>();\n\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        KnownType t = KnownType.get( parser.getLocalName() );\n        if( t == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        if( type == null ) {\n          type = t;\n        }\n        /*** actually, there is no rule that arrays need the same type\n        else if( type != t && !(t == KnownType.NULL || type == KnownType.NULL)) {\n          throw new RuntimeException( \"arrays must have the same type! (\"+type+\"!=\"+t+\") \"+parser.getLocalName() );\n        }\n        ***/\n        type = t;\n\n        builder.setLength( 0 ); // reset the text\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    vals.add( readNamedList( parser ) ); depth--; continue;\n          case ARR:    vals.add( readArray( parser ) ); depth--; continue;\n          case RESULT: vals.add( readDocuments( parser ) ); depth--; continue;\n          case DOC:    vals.add( readDocument( parser ) ); depth--; continue;\n          case BOOL:\n          case DATE:\n          case DOUBLE:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case NULL:\n          case STR:\n            break;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return vals; // the last element is itself\n        }\n        //System.out.println( \"ARR:\"+type+\"::\"+builder );\n        Object val = type.read( builder.toString().trim() );\n        if( val == null && type != KnownType.NULL) {\n          throw new XMLStreamException( \"error reading value:\"+type, parser.getLocation() );\n        }\n        vals.add( val );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2acf500f78aa12b92e371fd89c719291986b6b90"],"e837b9e725093b56ed9d86c0ea3fe415bccd4b58":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58"],"2acf500f78aa12b92e371fd89c719291986b6b90":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","165b9f5714e75d5242c0953800b3257db2dc4137"],"46d8ada1fff8d18cb197c38c7983225162599948":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58","2acf500f78aa12b92e371fd89c719291986b6b90"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"165b9f5714e75d5242c0953800b3257db2dc4137":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bfcdec9fcf0409223f35c5ec3bc14094314941b4","165b9f5714e75d5242c0953800b3257db2dc4137"],"e837b9e725093b56ed9d86c0ea3fe415bccd4b58":["9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c26f00b574427b55127e869b935845554afde1fa":["e837b9e725093b56ed9d86c0ea3fe415bccd4b58"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"165b9f5714e75d5242c0953800b3257db2dc4137":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}