{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","commits":[{"id":"d38075bc94ec45477bc193ace787dcfa443154e9","date":1349986934,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6efad415dcdbcca7d440f909743e6e3152eeb6c0","date":1350055371,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.shutdown();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.shutdown();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n    searcher.search(query.build(), collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery query = new BooleanQuery();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n    searcher.search(query, collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBooleanSpanQuery().mjava","sourceNew":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000, Integer.MAX_VALUE);\n    searcher.search(query.build(), collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":"  // LUCENE-4477 / LUCENE-4401:\n  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    Analyzer indexerAnalyzer = new MockAnalyzer(random());\n\n    IndexWriterConfig config = new IndexWriterConfig(indexerAnalyzer);\n    IndexWriter writer = new IndexWriter(directory, config);\n    String FIELD = \"content\";\n    Document d = new Document();\n    d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n    writer.addDocument(d);\n    writer.close();\n\n    IndexReader indexReader = DirectoryReader.open(directory);\n    IndexSearcher searcher = newSearcher(indexReader);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n    SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n    query.add(sq1, BooleanClause.Occur.SHOULD);\n    query.add(sq2, BooleanClause.Occur.SHOULD);\n    TopScoreDocCollector collector = TopScoreDocCollector.create(1000);\n    searcher.search(query.build(), collector);\n    hits = collector.topDocs().scoreDocs.length;\n    for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n      System.out.println(scoreDoc.doc);\n    }\n    indexReader.close();\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"d38075bc94ec45477bc193ace787dcfa443154e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["d38075bc94ec45477bc193ace787dcfa443154e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d38075bc94ec45477bc193ace787dcfa443154e9"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d38075bc94ec45477bc193ace787dcfa443154e9","6efad415dcdbcca7d440f909743e6e3152eeb6c0"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d38075bc94ec45477bc193ace787dcfa443154e9":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","6efad415dcdbcca7d440f909743e6e3152eeb6c0"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6efad415dcdbcca7d440f909743e6e3152eeb6c0":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","6efad415dcdbcca7d440f909743e6e3152eeb6c0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}