{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n  \n      @SuppressWarnings(\"unchecked\") \n      List<String> excepts = (List<String>)facet_counts.get(\"exception\");\n      fi.addExceptions(excepts);\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n  \n      @SuppressWarnings(\"unchecked\") \n      List<String> excepts = (List<String>)facet_counts.get(\"exception\");\n      fi.addExceptions(excepts);\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n  \n      @SuppressWarnings(\"unchecked\") \n      List<String> excepts = (List<String>)facet_counts.get(\"exception\");\n      fi.addExceptions(excepts);\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n  \n      @SuppressWarnings(\"unchecked\") \n      List<String> excepts = (List<String>)facet_counts.get(\"exception\");\n      fi.addExceptions(excepts);\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n  \n      @SuppressWarnings(\"unchecked\") \n      List<String> excepts = (List<String>)facet_counts.get(\"exception\");\n      fi.addExceptions(excepts);\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n  \n      @SuppressWarnings(\"unchecked\") \n      List<String> excepts = (List<String>)facet_counts.get(\"exception\");\n      fi.addExceptions(excepts);\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f3eb2c0361adcc3828df1543195800e225f146e","date":1312072219,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n  \n      @SuppressWarnings(\"unchecked\") \n      List<String> excepts = (List<String>)facet_counts.get(\"exception\");\n      fi.addExceptions(excepts);\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96bde7a2f3f93837583b98edc2f372b615deaec5","date":1334683609,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          if (sfc == null) {\n            // we got back a term we didn't ask for?\n            log.error(\"Unexpected term returned for facet refining. key=\" + key + \" term='\" + name + \"'\"\n              + \"\\n\\trequest params=\" + sreq.params\n              + \"\\n\\ttoRefine=\" + dff._toRefine\n              + \"\\n\\tresponse=\" + shardCounts\n            );\n            continue;\n          }\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n    \n    for (ShardResponse srsp : sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList) srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList) facet_counts.get(\"facet_fields\");\n      \n      if (facet_fields == null) continue; // this can happen when there's an exception\n      \n      for (int i = 0; i < facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n        \n        NamedList shardCounts = (NamedList) facet_fields.getVal(i);\n        \n        for (int j = 0; j < shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number) shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          if (sfc == null) {\n            // we got back a term we didn't ask for?\n            log.error(\"Unexpected term returned for facet refining. key=\" + key\n                      + \" term='\" + name + \"'\" + \"\\n\\trequest params=\" + sreq.params\n                      + \"\\n\\ttoRefine=\" + dff._toRefine + \"\\n\\tresponse=\"\n                      + shardCounts);\n            continue;\n          }\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp: sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList)facet_counts.get(\"facet_fields\");\n\n      if (facet_fields == null) continue; // this can happen when there's an exception      \n\n      for (int i=0; i<facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList)facet_fields.getVal(i);\n\n        for (int j=0; j<shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number)shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          if (sfc == null) {\n            // we got back a term we didn't ask for?\n            log.error(\"Unexpected term returned for facet refining. key=\" + key + \" term='\" + name + \"'\"\n              + \"\\n\\trequest params=\" + sreq.params\n              + \"\\n\\ttoRefine=\" + dff._toRefine\n              + \"\\n\\tresponse=\" + shardCounts\n            );\n            continue;\n          }\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff4734b6c86245e852fe8b6a286716d5e59d415","date":1410194063,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList) srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList) facet_counts.get(\"facet_fields\");\n      \n      if (facet_fields == null) continue; // this can happen when there's an exception\n      \n      for (int i = 0; i < facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList) facet_fields.getVal(i);\n        \n        for (int j = 0; j < shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number) shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          if (sfc == null) {\n            // we got back a term we didn't ask for?\n            log.error(\"Unexpected term returned for facet refining. key=\" + key\n                      + \" term='\" + name + \"'\" + \"\\n\\trequest params=\" + sreq.params\n                      + \"\\n\\ttoRefine=\" + dff._toRefine + \"\\n\\tresponse=\"\n                      + shardCounts);\n            continue;\n          }\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n    \n    for (ShardResponse srsp : sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList) srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList) facet_counts.get(\"facet_fields\");\n      \n      if (facet_fields == null) continue; // this can happen when there's an exception\n      \n      for (int i = 0; i < facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n        \n        NamedList shardCounts = (NamedList) facet_fields.getVal(i);\n        \n        for (int j = 0; j < shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number) shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          if (sfc == null) {\n            // we got back a term we didn't ask for?\n            log.error(\"Unexpected term returned for facet refining. key=\" + key\n                      + \" term='\" + name + \"'\" + \"\\n\\trequest params=\" + sreq.params\n                      + \"\\n\\ttoRefine=\" + dff._toRefine + \"\\n\\tresponse=\"\n                      + shardCounts);\n            continue;\n          }\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#refineFacets(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList) srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList) facet_counts.get(\"facet_fields\");\n      \n      if (facet_fields == null) continue; // this can happen when there's an exception\n      \n      for (int i = 0; i < facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList) facet_fields.getVal(i);\n        \n        for (int j = 0; j < shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number) shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          if (sfc == null) {\n            // we got back a term we didn't ask for?\n            log.error(\"Unexpected term returned for facet refining. key='{}'  term='{}'\\n\\trequest params={}\\n\\ttoRefine={}\\n\\tresponse={}\"\n                , key, name, sreq.params, dff._toRefine, shardCounts);\n            continue;\n          }\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void refineFacets(ResponseBuilder rb, ShardRequest sreq) {\n    FacetInfo fi = rb._facetInfo;\n\n    for (ShardResponse srsp : sreq.responses) {\n      // int shardNum = rb.getShardNum(srsp.shard);\n      NamedList facet_counts = (NamedList) srsp.getSolrResponse().getResponse().get(\"facet_counts\");\n      NamedList facet_fields = (NamedList) facet_counts.get(\"facet_fields\");\n      \n      if (facet_fields == null) continue; // this can happen when there's an exception\n      \n      for (int i = 0; i < facet_fields.size(); i++) {\n        String key = facet_fields.getName(i);\n        DistribFieldFacet dff = fi.facets.get(key);\n        if (dff == null) continue;\n\n        NamedList shardCounts = (NamedList) facet_fields.getVal(i);\n        \n        for (int j = 0; j < shardCounts.size(); j++) {\n          String name = shardCounts.getName(j);\n          long count = ((Number) shardCounts.getVal(j)).longValue();\n          ShardFacetCount sfc = dff.counts.get(name);\n          if (sfc == null) {\n            // we got back a term we didn't ask for?\n            log.error(\"Unexpected term returned for facet refining. key=\" + key\n                      + \" term='\" + name + \"'\" + \"\\n\\trequest params=\" + sreq.params\n                      + \"\\n\\ttoRefine=\" + dff._toRefine + \"\\n\\tresponse=\"\n                      + shardCounts);\n            continue;\n          }\n          sfc.count += count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96bde7a2f3f93837583b98edc2f372b615deaec5":["2f3eb2c0361adcc3828df1543195800e225f146e"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["96bde7a2f3f93837583b98edc2f372b615deaec5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"2f3eb2c0361adcc3828df1543195800e225f146e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"96bde7a2f3f93837583b98edc2f372b615deaec5":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2f3eb2c0361adcc3828df1543195800e225f146e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["575e66bd4b2349209027f6801184da7fc3cba13f"],"2f3eb2c0361adcc3828df1543195800e225f146e":["96bde7a2f3f93837583b98edc2f372b615deaec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}