{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","commits":[{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","pathOld":"/dev/null","sourceNew":"  public Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61558dab896ba60794837a7dd3b3be5b7940044d","date":1376939269,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","sourceNew":"  private Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  public Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","sourceNew":"  private Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getMissingBits(long).mjava","sourceNew":"  private Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private Bits getMissingBits(final long offset) throws IOException {\n    if (offset == -1) {\n      return new Bits.MatchAllBits(maxDoc);\n    } else {\n      final IndexInput in = data.clone();\n      return new Bits() {\n\n        @Override\n        public boolean get(int index) {\n          try {\n            in.seek(offset + (index >> 3));\n            return (in.readByte() & (1 << (index & 7))) != 0;\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n\n        @Override\n        public int length() {\n          return maxDoc;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61558dab896ba60794837a7dd3b3be5b7940044d":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61558dab896ba60794837a7dd3b3be5b7940044d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"61558dab896ba60794837a7dd3b3be5b7940044d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","1a7bf5332d569e3d07c4b248462f5d212e26e9af","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["61558dab896ba60794837a7dd3b3be5b7940044d"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}