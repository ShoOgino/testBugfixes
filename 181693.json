{"path":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,DocValuesConsumer).mjava","commits":[{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,SimpleDVConsumer).mjava","sourceNew":"  void flush(SegmentWriteState state, DocValuesConsumer normsWriter) throws IOException {\n    int docCount = state.segmentInfo.getDocCount();\n    if (consumer == null) {\n      return; // null type - not omitted but not written -\n              // nocommit meaning the only docs that had\n              // norms hit exceptions?\n    }\n    consumer.finish(docCount);\n    consumer.flush(state, normsWriter);\n  }\n\n","sourceOld":"  void flush(SegmentWriteState state, SimpleDVConsumer normsWriter) throws IOException {\n    int docCount = state.segmentInfo.getDocCount();\n    if (consumer == null) {\n      return; // null type - not omitted but not written -\n              // nocommit meaning the only docs that had\n              // norms hit exceptions?\n    }\n    consumer.finish(docCount);\n    consumer.flush(state, normsWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d51b9496691c7108d6d92f2c239c5dbf55f08a5f","date":1360017711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":"  void flush(SegmentWriteState state, DocValuesConsumer normsWriter) throws IOException {\n    int docCount = state.segmentInfo.getDocCount();\n    if (consumer == null) {\n      return; // null type - not omitted but not written -\n              // meaning the only docs that had\n              // norms hit exceptions (but indexed=true is set...)\n    }\n    consumer.finish(docCount);\n    consumer.flush(state, normsWriter);\n  }\n\n","sourceOld":"  void flush(SegmentWriteState state, DocValuesConsumer normsWriter) throws IOException {\n    int docCount = state.segmentInfo.getDocCount();\n    if (consumer == null) {\n      return; // null type - not omitted but not written -\n              // nocommit meaning the only docs that had\n              // norms hit exceptions?\n    }\n    consumer.finish(docCount);\n    consumer.flush(state, normsWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  void flush(SegmentWriteState state, DocValuesConsumer normsWriter) throws IOException {\n    int docCount = state.segmentInfo.getDocCount();\n    if (consumer == null) {\n      return; // null type - not omitted but not written -\n              // meaning the only docs that had\n              // norms hit exceptions (but indexed=true is set...)\n    }\n    consumer.finish(docCount);\n    consumer.flush(state, normsWriter);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":null,"sourceOld":"  void flush(SegmentWriteState state, DocValuesConsumer normsWriter) throws IOException {\n    int docCount = state.segmentInfo.getDocCount();\n    if (consumer == null) {\n      return; // null type - not omitted but not written -\n              // meaning the only docs that had\n              // norms hit exceptions (but indexed=true is set...)\n    }\n    consumer.finish(docCount);\n    consumer.flush(state, normsWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":null,"sourceOld":"  void flush(SegmentWriteState state, DocValuesConsumer normsWriter) throws IOException {\n    int docCount = state.segmentInfo.getDocCount();\n    if (consumer == null) {\n      return; // null type - not omitted but not written -\n              // meaning the only docs that had\n              // norms hit exceptions (but indexed=true is set...)\n    }\n    consumer.finish(docCount);\n    consumer.flush(state, normsWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NormsConsumerPerField#flush(SegmentWriteState,DocValuesConsumer).mjava","sourceNew":null,"sourceOld":"  void flush(SegmentWriteState state, DocValuesConsumer normsWriter) throws IOException {\n    int docCount = state.segmentInfo.getDocCount();\n    if (consumer == null) {\n      return; // null type - not omitted but not written -\n              // meaning the only docs that had\n              // norms hit exceptions (but indexed=true is set...)\n    }\n    consumer.finish(docCount);\n    consumer.flush(state, normsWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["d4d69c535930b5cce125cff868d40f6373dc27d4","52c7e49be259508735752fba88085255014a6ecf"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["d4d69c535930b5cce125cff868d40f6373dc27d4","3394716f52b34ab259ad5247e7595d9f9db6e935"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d51b9496691c7108d6d92f2c239c5dbf55f08a5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d51b9496691c7108d6d92f2c239c5dbf55f08a5f":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"52c7e49be259508735752fba88085255014a6ecf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d51b9496691c7108d6d92f2c239c5dbf55f08a5f"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","d4d69c535930b5cce125cff868d40f6373dc27d4"],"d51b9496691c7108d6d92f2c239c5dbf55f08a5f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}