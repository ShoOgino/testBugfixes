{"path":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterFieldData#writeVectors(FieldInfo).mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to *\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  void writeVectors(FieldInfo fieldInfo) throws IOException {\n\n    assert fieldInfo.storeTermVector;\n    assert threadState.vectorFieldsInOrder(fieldInfo);\n\n    threadState.vectorFieldNumbers[threadState.numVectorFields] = fieldInfo.number;\n    threadState.vectorFieldPointers[threadState.numVectorFields] = threadState.tvfLocal.getFilePointer();\n    threadState.numVectorFields++;\n\n    final int numPostingsVectors = postingsVectorsUpto;\n    final PostingVector[] postingsVectors = threadState.postingsVectors;\n\n    final IndexOutput tvfLocal = threadState.tvfLocal;\n\n    threadState.tvfLocal.writeVInt(numPostingsVectors);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    threadState.tvfLocal.writeByte(bits);\n\n    threadState.doVectorSort(postingsVectors, numPostingsVectors);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = vectorSliceReader;\n    final char[][] charBuffers = threadState.charPool.buffers;\n\n    for(int j=0;j<numPostingsVectors;j++) {\n      final PostingVector vector = postingsVectors[j];\n      Posting posting = vector.p;\n      final int freq = posting.docFreq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = threadState.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = threadState.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = threadState.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvfLocal.writeVInt(prefix);\n      tvfLocal.writeVInt(suffix);\n      tvfLocal.writeBytes(utf8Result.result, prefix, suffix);\n      tvfLocal.writeVInt(freq);\n\n      if (doVectorPositions) {\n        reader.init(threadState.vectorsPool, vector.posStart, vector.posUpto);\n        reader.writeTo(tvfLocal);\n      }\n\n      if (doVectorOffsets) {\n        reader.init(threadState.vectorsPool, vector.offsetStart, vector.offsetUpto);\n        reader.writeTo(tvfLocal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.tvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["8a9e385641d717e641408d8fbbc62be8fc766357"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}