{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","sourceNew":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","sourceOld":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","sourceNew":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(new StringReader(test));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","sourceOld":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ab081a78869a616f9c93e5b2f3ec2f99c2f7f741"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","sourceNew":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(new StringReader(test));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","sourceOld":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","sourceNew":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(new StringReader(test));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","sourceOld":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab081a78869a616f9c93e5b2f3ec2f99c2f7f741","date":1397714897,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testBR().mjava","sourceNew":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      assertHTMLStripsTo(testGold[i], testGold[i + 1], null);\n    }\n  }\n\n","sourceOld":"  public void testBR() throws Exception {\n    String[] testGold = {\n        \"one<BR />two<br>three\",\n        \"one\\ntwo\\nthree\",\n\n        \"one<BR some stuff here too>two</BR>\",\n        \"one\\ntwo\\n\",\n    };\n    for (int i = 0 ; i < testGold.length ; i += 2) {\n      String test = testGold[i];\n      String gold = testGold[i + 1];\n      Reader reader = new HTMLStripCharFilter(new StringReader(test));\n      StringBuilder builder = new StringBuilder();\n      int ch = 0;\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n      String result = builder.toString();\n      assertEquals(\"Test: '\" + test + \"'\", gold, result);\n    }\n  }\n\n","bugFix":["fc706b1e03a539d44d99998108feb684bb44cbb2","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fc706b1e03a539d44d99998108feb684bb44cbb2"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab081a78869a616f9c93e5b2f3ec2f99c2f7f741":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab081a78869a616f9c93e5b2f3ec2f99c2f7f741"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","fc706b1e03a539d44d99998108feb684bb44cbb2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","ab081a78869a616f9c93e5b2f3ec2f99c2f7f741"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ab081a78869a616f9c93e5b2f3ec2f99c2f7f741":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}