{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testPhraseWithSlop().mjava","commits":[{"id":"bae2070aa7aaff000145c4978276eb085e2ff279","date":1391309822,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testPhraseWithSlop().mjava","pathOld":"/dev/null","sourceNew":"  /** test a simple phrase with various slop settings */\n  public void testPhraseWithSlop() throws Exception {\n    PhraseQuery expectedWithSlop = new PhraseQuery();\n    expectedWithSlop.add(new Term(\"field\", \"foo\"));\n    expectedWithSlop.add(new Term(\"field\", \"bar\"));\n    expectedWithSlop.setSlop(2);\n\n    assertEquals(expectedWithSlop, parse(\"\\\"foo bar\\\"~2\"));\n\n    PhraseQuery expectedWithMultiDigitSlop = new PhraseQuery();\n    expectedWithMultiDigitSlop.add(new Term(\"field\", \"foo\"));\n    expectedWithMultiDigitSlop.add(new Term(\"field\", \"bar\"));\n    expectedWithMultiDigitSlop.setSlop(10);\n\n    assertEquals(expectedWithMultiDigitSlop, parse(\"\\\"foo bar\\\"~10\"));\n\n    PhraseQuery expectedNoSlop = new PhraseQuery();\n    expectedNoSlop.add(new Term(\"field\", \"foo\"));\n    expectedNoSlop.add(new Term(\"field\", \"bar\"));\n\n    assertEquals(\"Ignore trailing tilde with no slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~a\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~1a\"));\n    assertEquals(\"Ignore negative trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~-1\"));\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"foo\"));\n    pq.add(new Term(\"field\", \"bar\"));\n    pq.setSlop(12);\n\n    BooleanQuery expectedBoolean = new BooleanQuery();\n    expectedBoolean.add(pq, Occur.MUST);\n    expectedBoolean.add(new TermQuery(new Term(\"field\", \"baz\")), Occur.MUST);\n\n    assertEquals(expectedBoolean, parse(\"\\\"foo bar\\\"~12 baz\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testPhraseWithSlop().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testPhraseWithSlop().mjava","sourceNew":"  /** test a simple phrase with various slop settings */\n  public void testPhraseWithSlop() throws Exception {\n    PhraseQuery expectedWithSlop = new PhraseQuery(2, \"field\", \"foo\", \"bar\");\n\n    assertEquals(expectedWithSlop, parse(\"\\\"foo bar\\\"~2\"));\n\n    PhraseQuery expectedWithMultiDigitSlop = new PhraseQuery(10, \"field\", \"foo\", \"bar\");\n\n    assertEquals(expectedWithMultiDigitSlop, parse(\"\\\"foo bar\\\"~10\"));\n\n    PhraseQuery expectedNoSlop = new PhraseQuery(\"field\", \"foo\", \"bar\");\n\n    assertEquals(\"Ignore trailing tilde with no slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~a\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~1a\"));\n    assertEquals(\"Ignore negative trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~-1\"));\n\n    PhraseQuery pq = new PhraseQuery(12, \"field\", \"foo\", \"bar\");\n\n    BooleanQuery expectedBoolean = new BooleanQuery();\n    expectedBoolean.add(pq, Occur.MUST);\n    expectedBoolean.add(new TermQuery(new Term(\"field\", \"baz\")), Occur.MUST);\n\n    assertEquals(expectedBoolean, parse(\"\\\"foo bar\\\"~12 baz\"));\n  }\n\n","sourceOld":"  /** test a simple phrase with various slop settings */\n  public void testPhraseWithSlop() throws Exception {\n    PhraseQuery expectedWithSlop = new PhraseQuery();\n    expectedWithSlop.add(new Term(\"field\", \"foo\"));\n    expectedWithSlop.add(new Term(\"field\", \"bar\"));\n    expectedWithSlop.setSlop(2);\n\n    assertEquals(expectedWithSlop, parse(\"\\\"foo bar\\\"~2\"));\n\n    PhraseQuery expectedWithMultiDigitSlop = new PhraseQuery();\n    expectedWithMultiDigitSlop.add(new Term(\"field\", \"foo\"));\n    expectedWithMultiDigitSlop.add(new Term(\"field\", \"bar\"));\n    expectedWithMultiDigitSlop.setSlop(10);\n\n    assertEquals(expectedWithMultiDigitSlop, parse(\"\\\"foo bar\\\"~10\"));\n\n    PhraseQuery expectedNoSlop = new PhraseQuery();\n    expectedNoSlop.add(new Term(\"field\", \"foo\"));\n    expectedNoSlop.add(new Term(\"field\", \"bar\"));\n\n    assertEquals(\"Ignore trailing tilde with no slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~a\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~1a\"));\n    assertEquals(\"Ignore negative trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~-1\"));\n\n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"field\", \"foo\"));\n    pq.add(new Term(\"field\", \"bar\"));\n    pq.setSlop(12);\n\n    BooleanQuery expectedBoolean = new BooleanQuery();\n    expectedBoolean.add(pq, Occur.MUST);\n    expectedBoolean.add(new TermQuery(new Term(\"field\", \"baz\")), Occur.MUST);\n\n    assertEquals(expectedBoolean, parse(\"\\\"foo bar\\\"~12 baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testPhraseWithSlop().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/simple/TestSimpleQueryParser#testPhraseWithSlop().mjava","sourceNew":"  /** test a simple phrase with various slop settings */\n  public void testPhraseWithSlop() throws Exception {\n    PhraseQuery expectedWithSlop = new PhraseQuery(2, \"field\", \"foo\", \"bar\");\n\n    assertEquals(expectedWithSlop, parse(\"\\\"foo bar\\\"~2\"));\n\n    PhraseQuery expectedWithMultiDigitSlop = new PhraseQuery(10, \"field\", \"foo\", \"bar\");\n\n    assertEquals(expectedWithMultiDigitSlop, parse(\"\\\"foo bar\\\"~10\"));\n\n    PhraseQuery expectedNoSlop = new PhraseQuery(\"field\", \"foo\", \"bar\");\n\n    assertEquals(\"Ignore trailing tilde with no slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~a\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~1a\"));\n    assertEquals(\"Ignore negative trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~-1\"));\n\n    PhraseQuery pq = new PhraseQuery(12, \"field\", \"foo\", \"bar\");\n\n    BooleanQuery.Builder expectedBoolean = new BooleanQuery.Builder();\n    expectedBoolean.add(pq, Occur.MUST);\n    expectedBoolean.add(new TermQuery(new Term(\"field\", \"baz\")), Occur.MUST);\n\n    assertEquals(expectedBoolean.build(), parse(\"\\\"foo bar\\\"~12 baz\"));\n  }\n\n","sourceOld":"  /** test a simple phrase with various slop settings */\n  public void testPhraseWithSlop() throws Exception {\n    PhraseQuery expectedWithSlop = new PhraseQuery(2, \"field\", \"foo\", \"bar\");\n\n    assertEquals(expectedWithSlop, parse(\"\\\"foo bar\\\"~2\"));\n\n    PhraseQuery expectedWithMultiDigitSlop = new PhraseQuery(10, \"field\", \"foo\", \"bar\");\n\n    assertEquals(expectedWithMultiDigitSlop, parse(\"\\\"foo bar\\\"~10\"));\n\n    PhraseQuery expectedNoSlop = new PhraseQuery(\"field\", \"foo\", \"bar\");\n\n    assertEquals(\"Ignore trailing tilde with no slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~a\"));\n    assertEquals(\"Ignore non-numeric trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~1a\"));\n    assertEquals(\"Ignore negative trailing slop\", expectedNoSlop, parse(\"\\\"foo bar\\\"~-1\"));\n\n    PhraseQuery pq = new PhraseQuery(12, \"field\", \"foo\", \"bar\");\n\n    BooleanQuery expectedBoolean = new BooleanQuery();\n    expectedBoolean.add(pq, Occur.MUST);\n    expectedBoolean.add(new TermQuery(new Term(\"field\", \"baz\")), Occur.MUST);\n\n    assertEquals(expectedBoolean, parse(\"\\\"foo bar\\\"~12 baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["bae2070aa7aaff000145c4978276eb085e2ff279"],"bae2070aa7aaff000145c4978276eb085e2ff279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"bae2070aa7aaff000145c4978276eb085e2ff279":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bae2070aa7aaff000145c4978276eb085e2ff279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}