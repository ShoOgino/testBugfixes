{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestChangingRAMBuffer().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void xxxtestChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void xxxtestChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}