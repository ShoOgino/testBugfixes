{"path":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"/dev/null","sourceNew":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":null,"sourceOld":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","sourceOld":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"/dev/null","sourceNew":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","sourceOld":"  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79440f0b650ac4099bf4e45dc72bb463fd14973c","date":1287357299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testBad().mjava","sourceNew":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBad() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"w\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of commas\n      sort = QueryParsing.parseSort(\"pow(weight,,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad function\n      sort = QueryParsing.parseSort(\"pow() desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    try {\n      //bad number of parens\n      sort = QueryParsing.parseSort(\"pow((weight,2) desc, bday asc\", req);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["79440f0b650ac4099bf4e45dc72bb463fd14973c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["afeb033b2bd36d8ce9d82142b197da4dde13068b","79440f0b650ac4099bf4e45dc72bb463fd14973c"],"79440f0b650ac4099bf4e45dc72bb463fd14973c":["0883328ff2cc09b5c999d05c04e16530d819c627"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["79440f0b650ac4099bf4e45dc72bb463fd14973c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["79440f0b650ac4099bf4e45dc72bb463fd14973c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["0883328ff2cc09b5c999d05c04e16530d819c627","79440f0b650ac4099bf4e45dc72bb463fd14973c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["79440f0b650ac4099bf4e45dc72bb463fd14973c","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"79440f0b650ac4099bf4e45dc72bb463fd14973c":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["0883328ff2cc09b5c999d05c04e16530d819c627","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}