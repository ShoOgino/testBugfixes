{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testCustomDirectoryReader().mjava","commits":[{"id":"e6b408591e92d6caf6e2635a340e4cd5f6fb69e2","date":1417531913,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testCustomDirectoryReader().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-6087\n  public void testCustomDirectoryReader() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    DirectoryReader reader = new MyFilterDirectoryReader(w.getReader());\n    SearcherManager mgr = new SearcherManager(reader, null);\n    for(int i=0;i<10;i++) {\n      w.addDocument(new Document());\n      mgr.maybeRefresh();\n      IndexSearcher s = mgr.acquire();\n      try {\n        assertTrue(s.getIndexReader() instanceof MyFilterDirectoryReader);\n        for (LeafReaderContext ctx : s.getIndexReader().leaves()) {\n          assertTrue(ctx.reader() instanceof MyFilterLeafReader);\n        }\n      } finally {\n        mgr.release(s);\n      }\n    }\n    mgr.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47b7c62e9d3815d64e8e867bfec00e3c1ceda068","date":1418069628,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testCustomDirectoryReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testCustomDirectoryReader().mjava","sourceNew":"  // LUCENE-6087\n  public void testCustomDirectoryReader() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    DirectoryReader nrtReader = w.getReader();\n\n    FilterDirectoryReader reader = new MyFilterDirectoryReader(nrtReader);\n    assertEquals(nrtReader, reader.getDelegate());\n    assertEquals(nrtReader, FilterDirectoryReader.unwrap(reader));\n\n    SearcherManager mgr = new SearcherManager(reader, null);\n    for(int i=0;i<10;i++) {\n      w.addDocument(new Document());\n      mgr.maybeRefresh();\n      IndexSearcher s = mgr.acquire();\n      try {\n        assertTrue(s.getIndexReader() instanceof MyFilterDirectoryReader);\n        for (LeafReaderContext ctx : s.getIndexReader().leaves()) {\n          assertTrue(ctx.reader() instanceof MyFilterLeafReader);\n        }\n      } finally {\n        mgr.release(s);\n      }\n    }\n    mgr.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6087\n  public void testCustomDirectoryReader() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    DirectoryReader reader = new MyFilterDirectoryReader(w.getReader());\n    SearcherManager mgr = new SearcherManager(reader, null);\n    for(int i=0;i<10;i++) {\n      w.addDocument(new Document());\n      mgr.maybeRefresh();\n      IndexSearcher s = mgr.acquire();\n      try {\n        assertTrue(s.getIndexReader() instanceof MyFilterDirectoryReader);\n        for (LeafReaderContext ctx : s.getIndexReader().leaves()) {\n          assertTrue(ctx.reader() instanceof MyFilterLeafReader);\n        }\n      } finally {\n        mgr.release(s);\n      }\n    }\n    mgr.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb0130363fa13c53e4e78317c35b3b45a3089276","date":1523267438,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testCustomDirectoryReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testCustomDirectoryReader().mjava","sourceNew":"  // LUCENE-6087\n  public void testCustomDirectoryReader() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    DirectoryReader nrtReader = w.getReader();\n\n    FilterDirectoryReader reader = new MyFilterDirectoryReader(nrtReader);\n    assertEquals(nrtReader, reader.getDelegate());\n    assertEquals(FilterDirectoryReader.unwrap(nrtReader), FilterDirectoryReader.unwrap(reader));\n\n    SearcherManager mgr = new SearcherManager(reader, null);\n    for(int i=0;i<10;i++) {\n      w.addDocument(new Document());\n      mgr.maybeRefresh();\n      IndexSearcher s = mgr.acquire();\n      try {\n        assertTrue(s.getIndexReader() instanceof MyFilterDirectoryReader);\n        for (LeafReaderContext ctx : s.getIndexReader().leaves()) {\n          assertTrue(ctx.reader() instanceof MyFilterLeafReader);\n        }\n      } finally {\n        mgr.release(s);\n      }\n    }\n    mgr.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6087\n  public void testCustomDirectoryReader() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    DirectoryReader nrtReader = w.getReader();\n\n    FilterDirectoryReader reader = new MyFilterDirectoryReader(nrtReader);\n    assertEquals(nrtReader, reader.getDelegate());\n    assertEquals(nrtReader, FilterDirectoryReader.unwrap(reader));\n\n    SearcherManager mgr = new SearcherManager(reader, null);\n    for(int i=0;i<10;i++) {\n      w.addDocument(new Document());\n      mgr.maybeRefresh();\n      IndexSearcher s = mgr.acquire();\n      try {\n        assertTrue(s.getIndexReader() instanceof MyFilterDirectoryReader);\n        for (LeafReaderContext ctx : s.getIndexReader().leaves()) {\n          assertTrue(ctx.reader() instanceof MyFilterLeafReader);\n        }\n      } finally {\n        mgr.release(s);\n      }\n    }\n    mgr.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testCustomDirectoryReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testCustomDirectoryReader().mjava","sourceNew":"  // LUCENE-6087\n  public void testCustomDirectoryReader() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    DirectoryReader nrtReader = w.getReader();\n\n    FilterDirectoryReader reader = new MyFilterDirectoryReader(nrtReader);\n    assertEquals(nrtReader, reader.getDelegate());\n    assertEquals(FilterDirectoryReader.unwrap(nrtReader), FilterDirectoryReader.unwrap(reader));\n\n    SearcherManager mgr = new SearcherManager(reader, null);\n    for(int i=0;i<10;i++) {\n      w.addDocument(new Document());\n      mgr.maybeRefresh();\n      IndexSearcher s = mgr.acquire();\n      try {\n        assertTrue(s.getIndexReader() instanceof MyFilterDirectoryReader);\n        for (LeafReaderContext ctx : s.getIndexReader().leaves()) {\n          assertTrue(ctx.reader() instanceof MyFilterLeafReader);\n        }\n      } finally {\n        mgr.release(s);\n      }\n    }\n    mgr.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-6087\n  public void testCustomDirectoryReader() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    DirectoryReader nrtReader = w.getReader();\n\n    FilterDirectoryReader reader = new MyFilterDirectoryReader(nrtReader);\n    assertEquals(nrtReader, reader.getDelegate());\n    assertEquals(nrtReader, FilterDirectoryReader.unwrap(reader));\n\n    SearcherManager mgr = new SearcherManager(reader, null);\n    for(int i=0;i<10;i++) {\n      w.addDocument(new Document());\n      mgr.maybeRefresh();\n      IndexSearcher s = mgr.acquire();\n      try {\n        assertTrue(s.getIndexReader() instanceof MyFilterDirectoryReader);\n        for (LeafReaderContext ctx : s.getIndexReader().leaves()) {\n          assertTrue(ctx.reader() instanceof MyFilterLeafReader);\n        }\n      } finally {\n        mgr.release(s);\n      }\n    }\n    mgr.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["47b7c62e9d3815d64e8e867bfec00e3c1ceda068","cb0130363fa13c53e4e78317c35b3b45a3089276"],"e6b408591e92d6caf6e2635a340e4cd5f6fb69e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb0130363fa13c53e4e78317c35b3b45a3089276":["47b7c62e9d3815d64e8e867bfec00e3c1ceda068"],"47b7c62e9d3815d64e8e867bfec00e3c1ceda068":["e6b408591e92d6caf6e2635a340e4cd5f6fb69e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6b408591e92d6caf6e2635a340e4cd5f6fb69e2":["47b7c62e9d3815d64e8e867bfec00e3c1ceda068"],"cb0130363fa13c53e4e78317c35b3b45a3089276":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6b408591e92d6caf6e2635a340e4cd5f6fb69e2"],"47b7c62e9d3815d64e8e867bfec00e3c1ceda068":["d58e44159788900f4a2113b84463dc3fbbf80f20","cb0130363fa13c53e4e78317c35b3b45a3089276"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}