{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2ba67a463f52915e77a5fd8714aa7d36faf59c","date":1348538193,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), docs);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), base);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c","date":1378490020,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    return getListedTermCounts(field, termList, this.docs);\n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    FieldType ft = searcher.getSchema().getFieldType(field);\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    NamedList<Integer> res = new NamedList<Integer>();\n    for (String term : terms) {\n      String internal = ft.toInternal(term);\n      int count = searcher.numDocs(new TermQuery(new Term(field, internal)), docs);\n      res.add(term, count);\n    }\n    return res;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":"  /**\n   * Computes the term-&gt;count counts for the specified termList relative to the \n   * @param field the name of the field to compute term counts against\n   * @param termList a comma seperated (and backslash escaped) list of term values (in the specified field) to compute the counts for\n   * @see StrUtils#splitSmart\n   */\n  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    return getListedTermCounts(field, this.docs, terms);\n  }\n\n","sourceOld":"  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    return getListedTermCounts(field, termList, this.docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getListedTermCounts(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes the term-&gt;count counts for the specified termList relative to the \n   * @param field the name of the field to compute term counts against\n   * @param termList a comma seperated (and backslash escaped) list of term values (in the specified field) to compute the counts for\n   * @see StrUtils#splitSmart\n   */\n  private NamedList<Integer> getListedTermCounts(String field, String termList) throws IOException {\n    List<String> terms = StrUtils.splitSmart(termList, \",\", true);\n    return getListedTermCounts(field, this.docs, terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"540d8a5fd510a46e41f9a51f7a93f8b2d37c1c4c":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}