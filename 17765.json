{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#testJoinMethodSyntax().mjava","commits":[{"id":"c3f827e37672b604f6c8ea8457b0c6ce14528cf3","date":1597148467,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#testJoinMethodSyntax().mjava","pathOld":"/dev/null","sourceNew":"  public void testJoinMethodSyntax() throws Exception {\n    // 'method' value that doesn't exist at all\n    {\n      final String joinJson = \"{from:foo, to:bar, method:invalidValue}\";\n      SolrException e = expectThrows(SolrException.class, () -> {\n        final SolrParams req = params(\"q\", \"*:*\", \"json.facet\",\n            \"{ x : { type:terms, field:x_s, domain: { join:\"+joinJson+\" } } }\");\n        getRandClient(random()).request(new QueryRequest(req));\n      });\n      assertEquals(joinJson + \" -> \" + e, SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(joinJson + \" -> \" + e, e.getMessage().contains(\"join method 'invalidValue' not supported\"));\n    }\n\n    // 'method' value that exists on joins generally but isn't supported for join domain transforms\n    {\n      final String joinJson = \"{from:foo, to:bar, method:crossCollection}\";\n      SolrException e = expectThrows(SolrException.class, () -> {\n        final SolrParams req = params(\"q\", \"*:*\", \"json.facet\",\n            \"{ x : { type:terms, field:x_s, domain: { join:\"+joinJson+\" } } }\");\n        getRandClient(random()).request(new QueryRequest(req));\n      });\n      assertEquals(joinJson + \" -> \" + e, SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(joinJson + \" -> \" + e, e.getMessage().contains(\"Join method crossCollection not supported\"));\n    }\n\n\n    // Valid, supported method value\n    {\n      final String joinJson = \"{from:\" +strfield(1)+ \", to:\"+strfield(1)+\", method:index}\";\n        final SolrParams req = params(\"q\", \"*:*\", \"json.facet\", \"{ x : { type:terms, field:x_s, domain: { join:\"+joinJson+\" } } }\");\n        getRandClient(random()).request(new QueryRequest(req));\n        // For the purposes of this test, we're not interested in the response so much as that Solr will accept a valid 'method' value\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f827e37672b604f6c8ea8457b0c6ce14528cf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c3f827e37672b604f6c8ea8457b0c6ce14528cf3"]},"commit2Childs":{"c3f827e37672b604f6c8ea8457b0c6ce14528cf3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3f827e37672b604f6c8ea8457b0c6ce14528cf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}