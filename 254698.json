{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","date":1344893790,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory();\n    factory.init(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = whitespaceMockTokenizer(input);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#assertAlgorithm(String,String,String,String[]).mjava","sourceNew":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = whitespaceMockTokenizer(input);\n    Map<String,String> args = new HashMap<>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","sourceOld":"  static void assertAlgorithm(String algName, String inject, String input,\n      String[] expected) throws Exception {\n    Tokenizer tokenizer = whitespaceMockTokenizer(input);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"encoder\", algName);\n    args.put(\"inject\", inject);\n    PhoneticFilterFactory factory = new PhoneticFilterFactory(args);\n    factory.inform(new ClasspathResourceLoader(factory.getClass()));\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["aba371508186796cc6151d8223a5b4e16d02e26e","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","57da959ec15bb701bd1d1bf3c613b69009ff4bfd","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}