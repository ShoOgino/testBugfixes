{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean).mjava","commits":[{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, trackTotalHits);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   *          <code>trackDocScores</code> to true as well.\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean trackDocScores, boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, trackDocScores, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, trackDocScores, trackTotalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param totalHitsThreshold\n   *          the number of docs to count accurately. If the query matches\n   *          {@code totalHitsThreshold} hits or more then its hit count will be a\n   *          lower bound. On the other hand if the query matches less than\n   *          {@code totalHitsThreshold} hits then the hit count of the result will\n   *          be accurate. {@link Integer#MAX_VALUE} may be used to make the hit\n   *          count accurate, but this will also make query processing slower.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      int totalHitsThreshold) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold <= 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be > 0, got \" + totalHitsThreshold);\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, totalHitsThreshold);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, totalHitsThreshold);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, trackTotalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["fe3c6364bed04a73ad0884b05401d80ce96027a9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}