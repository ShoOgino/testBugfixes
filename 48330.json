{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#ensureRunningJettys(int,int).mjava","commits":[{"id":"18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2","date":1534756550,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#ensureRunningJettys(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensure that the given number of solr instances are running. If less instances are found then new instances are\n   * started. If extra instances are found then they are stopped.\n   * @param nodeCount the number of Solr instances that should be running at the end of this method\n   * @throws Exception on error\n   */\n  public static void ensureRunningJettys(int nodeCount, int timeoutSeconds) throws Exception {\n    // ensure that exactly nodeCount jetty nodes are running\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    List<JettySolrRunner> copyOfJettys = new ArrayList<>(jettys);\n    int numJetties = copyOfJettys.size();\n    for (int i = nodeCount; i < numJetties; i++)  {\n      cluster.stopJettySolrRunner(copyOfJettys.get(i));\n    }\n    for (int i = copyOfJettys.size(); i < nodeCount; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    // refresh the count from the source\n    jettys = cluster.getJettySolrRunners();\n    numJetties = jettys.size();\n    for (int i = 0; i < numJetties; i++) {\n      if (!jettys.get(i).isRunning()) {\n        cluster.startJettySolrRunner(jettys.get(i));\n      }\n    }\n    cluster.waitForAllNodes(timeoutSeconds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1edcb08221b33c52c3b24183d470c163dc8df4c","date":1566966875,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#ensureRunningJettys(int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudTestCase#ensureRunningJettys(int,int).mjava","sourceNew":"  /**\n   * Ensure that the given number of solr instances are running. If less instances are found then new instances are\n   * started. If extra instances are found then they are stopped.\n   *\n   * @param nodeCount the number of Solr instances that should be running at the end of this method\n   * @throws Exception on error\n   */\n  public static void ensureRunningJettys(int nodeCount, int timeoutSeconds) throws Exception {\n    // ensure that exactly nodeCount jetty nodes are running\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    List<JettySolrRunner> copyOfJettys = new ArrayList<>(jettys);\n    int numJetties = copyOfJettys.size();\n    for (int i = nodeCount; i < numJetties; i++) {\n      cluster.stopJettySolrRunner(copyOfJettys.get(i));\n    }\n    for (int i = copyOfJettys.size(); i < nodeCount; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    // refresh the count from the source\n    jettys = cluster.getJettySolrRunners();\n    numJetties = jettys.size();\n    for (int i = 0; i < numJetties; i++) {\n      if (!jettys.get(i).isRunning()) {\n        cluster.startJettySolrRunner(jettys.get(i));\n      }\n    }\n    cluster.waitForAllNodes(timeoutSeconds);\n  }\n\n","sourceOld":"  /**\n   * Ensure that the given number of solr instances are running. If less instances are found then new instances are\n   * started. If extra instances are found then they are stopped.\n   * @param nodeCount the number of Solr instances that should be running at the end of this method\n   * @throws Exception on error\n   */\n  public static void ensureRunningJettys(int nodeCount, int timeoutSeconds) throws Exception {\n    // ensure that exactly nodeCount jetty nodes are running\n    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();\n    List<JettySolrRunner> copyOfJettys = new ArrayList<>(jettys);\n    int numJetties = copyOfJettys.size();\n    for (int i = nodeCount; i < numJetties; i++)  {\n      cluster.stopJettySolrRunner(copyOfJettys.get(i));\n    }\n    for (int i = copyOfJettys.size(); i < nodeCount; i++) {\n      // start jetty instances\n      cluster.startJettySolrRunner();\n    }\n    // refresh the count from the source\n    jettys = cluster.getJettySolrRunners();\n    numJetties = jettys.size();\n    for (int i = 0; i < numJetties; i++) {\n      if (!jettys.get(i).isRunning()) {\n        cluster.startJettySolrRunner(jettys.get(i));\n      }\n    }\n    cluster.waitForAllNodes(timeoutSeconds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1edcb08221b33c52c3b24183d470c163dc8df4c":["18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1edcb08221b33c52c3b24183d470c163dc8df4c"]},"commit2Childs":{"18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2":["e1edcb08221b33c52c3b24183d470c163dc8df4c"],"e1edcb08221b33c52c3b24183d470c163dc8df4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18ff77d2a5a7c08b3e372713c2653f6de5f3f7c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}