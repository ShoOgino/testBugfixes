{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception {\n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n\n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n\n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n\n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n\n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n\n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n\n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception {\n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n\n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n\n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n\n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n\n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n\n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n\n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","sourceNew":"  @Test\n  public void missingTest() throws Exception {\n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n\n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n\n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n\n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n\n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n\n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n\n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception {\n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n\n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n\n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n\n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n\n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n\n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n\n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception {\n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n\n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n\n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n\n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n\n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n\n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n\n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @Test\n  public void missingTest() throws Exception {\n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n\n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n\n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n\n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n\n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n\n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n\n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","f8061ddd97f3352007d927dae445884a6f3d857b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}