{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/LZ4WithPresetDictCompressionMode.LZ4WithPresetDictDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","commits":[{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/LZ4WithPresetDictCompressionMode.LZ4WithPresetDictDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n\n      final int dictLength = in.readVInt();\n      final int blockLength = in.readVInt();\n\n      final int numBlocks = readCompressedLengths(in, originalLength, dictLength, blockLength);\n\n      buffer = ArrayUtil.grow(buffer, dictLength + blockLength);\n      bytes.length = 0;\n      // Read the dictionary\n      if (LZ4.decompress(in, dictLength, buffer, 0) != dictLength) {\n        throw new CorruptIndexException(\"Illegal dict length\", in);\n      }\n\n      int offsetInBlock = dictLength;\n      int offsetInBytesRef = offset;\n      if (offset >= dictLength) {\n        offsetInBytesRef -= dictLength;\n\n        // Skip unneeded blocks\n        int numBytesToSkip = 0;\n        for (int i = 0; i < numBlocks && offsetInBlock + blockLength < offset; ++i) {\n          int compressedBlockLength = compressedLengths[i];\n          numBytesToSkip += compressedBlockLength;\n          offsetInBlock += blockLength;\n          offsetInBytesRef -= blockLength;\n        }\n        in.skipBytes(numBytesToSkip);\n      } else {\n        // The dictionary contains some bytes we need, copy its content to the BytesRef\n        bytes.bytes = ArrayUtil.grow(bytes.bytes, dictLength);\n        System.arraycopy(buffer, 0, bytes.bytes, 0, dictLength);\n        bytes.length = dictLength;\n      }\n\n      // Read blocks that intersect with the interval we need\n      while (offsetInBlock < offset + length) {\n        final int bytesToDecompress = Math.min(blockLength, offset + length - offsetInBlock);\n        LZ4.decompress(in, bytesToDecompress, buffer, dictLength);\n        bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + bytesToDecompress);\n        System.arraycopy(buffer, dictLength, bytes.bytes, bytes.length, bytesToDecompress);\n        bytes.length += bytesToDecompress;\n        offsetInBlock += blockLength;\n      }\n\n      bytes.offset = offsetInBytesRef;\n      bytes.length = length;\n      assert bytes.isValid();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aefce86de8b17eed91ab011fb54d704d91102ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}