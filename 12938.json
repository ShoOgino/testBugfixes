{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList).mjava","commits":[{"id":"fe999fc2d95d6fea71f960bf9556858387ba21f5","date":1363294860,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams).mjava","sourceNew":"  private boolean collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    int failed = 0;\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n    \n    // if all calls succeeded, return true\n    if (failed > 0) {\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          \n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    int failed = 0;\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        Throwable e = srsp.getException();\n        if (e != null) {\n          // should we retry?\n          // TODO: we should return errors to the client\n          // TODO: what if one fails and others succeed?\n          failed++;\n          log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n        }\n      }\n    } while (srsp != null);\n\n    \n    // if all calls succeeded, return true\n    if (failed > 0) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e756785b6f25f3b8f7ee57c7e210c6b67fbfbbf","date":1363562282,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","sourceOld":"  private boolean collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    int failed = 0;\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n    \n    // if all calls succeeded, return true\n    if (failed > 0) {\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de051a65606160ec06ecd38df9dd6905e4b18b6d","date":1363626222,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectionCmd(ClusterState,ZkNodeProps,ModifiableSolrParams,NamedList).mjava","sourceNew":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results, String stateMatcher) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP)) && (stateMatcher != null ? node.getStr(ZkStateReader.STATE_PROP).equals(stateMatcher) : true)) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","sourceOld":"  private void collectionCmd(ClusterState clusterState, ZkNodeProps message, ModifiableSolrParams params, NamedList results) {\n    log.info(\"Executing Collection Cmd : \" + params);\n    String collectionName = message.getStr(\"name\");\n    \n    DocCollection coll = clusterState.getCollection(collectionName);\n    \n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Could not find collection:\" + collectionName);\n    }\n    \n    for (Map.Entry<String,Slice> entry : coll.getSlicesMap().entrySet()) {\n      Slice slice = entry.getValue();\n      Map<String,Replica> shards = slice.getReplicasMap();\n      Set<Map.Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String,Replica> shardEntry : shardEntries) {\n        final ZkNodeProps node = shardEntry.getValue();\n        if (clusterState.liveNodesContain(node.getStr(ZkStateReader.NODE_NAME_PROP))) {\n          // For thread safety, only simple clone the ModifiableSolrParams\n          ModifiableSolrParams cloneParams = new ModifiableSolrParams();\n          cloneParams.add(params);\n          cloneParams.set(CoreAdminParams.CORE,\n              node.getStr(ZkStateReader.CORE_NAME_PROP));\n          \n          String replica = node.getStr(ZkStateReader.BASE_URL_PROP);\n          ShardRequest sreq = new ShardRequest();\n          sreq.nodeName = node.getStr(ZkStateReader.NODE_NAME_PROP);\n          // yes, they must use same admin handler path everywhere...\n          cloneParams.set(\"qt\", adminPath);\n          sreq.purpose = 1;\n          // TODO: this sucks\n          if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n          sreq.shards = new String[] {replica};\n          sreq.actualShards = sreq.shards;\n          sreq.params = cloneParams;\n          log.info(\"Collection Admin sending CoreAdmin cmd to \" + replica\n              + \" params:\" + sreq.params);\n          shardHandler.submit(sreq, replica, sreq.params);\n        }\n      }\n    }\n    \n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n      }\n    } while (srsp != null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"de051a65606160ec06ecd38df9dd6905e4b18b6d":["6e756785b6f25f3b8f7ee57c7e210c6b67fbfbbf"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e756785b6f25f3b8f7ee57c7e210c6b67fbfbbf":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de051a65606160ec06ecd38df9dd6905e4b18b6d"]},"commit2Childs":{"de051a65606160ec06ecd38df9dd6905e4b18b6d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["6e756785b6f25f3b8f7ee57c7e210c6b67fbfbbf"],"6e756785b6f25f3b8f7ee57c7e210c6b67fbfbbf":["de051a65606160ec06ecd38df9dd6905e4b18b6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}