{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,Membership...).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,Membership...).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean intersects(Plane p, Membership... bounds)\n    {\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            SidedPlane edge = edges[edgeIndex];\n            // Construct boundaries\n            Membership[] membershipBounds = new Membership[edges.length-1];\n            int count = 0;\n            for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n                if (otherIndex != edgeIndex) {\n                    membershipBounds[count++] = edges[otherIndex];\n                }\n            }\n            if (edge.intersects(p,bounds,membershipBounds))\n                return true;\n        }\n        return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,Membership...).mjava","sourceNew":"    @Override\n    public boolean intersects(final Plane p, final Membership... bounds)\n    {\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            final SidedPlane edge = edges[edgeIndex];\n            if (!internalEdges[edgeIndex]) {\n                // Edges flagged as 'internal only' are excluded from the matching\n                // Construct boundaries\n                final Membership[] membershipBounds = new Membership[edges.length-1];\n                int count = 0;\n                for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n                    if (otherIndex != edgeIndex) {\n                        membershipBounds[count++] = edges[otherIndex];\n                    }\n                }\n                if (edge.intersects(p,bounds,membershipBounds))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean intersects(Plane p, Membership... bounds)\n    {\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            SidedPlane edge = edges[edgeIndex];\n            // Construct boundaries\n            Membership[] membershipBounds = new Membership[edges.length-1];\n            int count = 0;\n            for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n                if (otherIndex != edgeIndex) {\n                    membershipBounds[count++] = edges[otherIndex];\n                }\n            }\n            if (edge.intersects(p,bounds,membershipBounds))\n                return true;\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#intersects(Plane,Membership...).mjava","sourceNew":"    @Override\n    public boolean intersects(final Plane p, final GeoPoint[] notablePoints, final Membership... bounds)\n    {\n        //System.err.println(\"Checking for polygon intersection with plane \"+p+\"...\");\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            final SidedPlane edge = edges[edgeIndex];\n            final GeoPoint[] points = this.notableEdgePoints[edgeIndex];\n            if (!internalEdges[edgeIndex]) {\n                //System.err.println(\" non-internal edge \"+edge);\n                // Edges flagged as 'internal only' are excluded from the matching\n                // Construct boundaries\n                final Membership[] membershipBounds = new Membership[edges.length-1];\n                int count = 0;\n                for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n                    if (otherIndex != edgeIndex) {\n                        membershipBounds[count++] = edges[otherIndex];\n                    }\n                }\n                if (edge.intersects(p,notablePoints, points, bounds,membershipBounds)) {\n                    //System.err.println(\" intersects!\");\n                    return true;\n                }\n            }\n        }\n        //System.err.println(\" no intersection\");\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean intersects(final Plane p, final Membership... bounds)\n    {\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            final SidedPlane edge = edges[edgeIndex];\n            if (!internalEdges[edgeIndex]) {\n                // Edges flagged as 'internal only' are excluded from the matching\n                // Construct boundaries\n                final Membership[] membershipBounds = new Membership[edges.length-1];\n                int count = 0;\n                for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {\n                    if (otherIndex != edgeIndex) {\n                        membershipBounds[count++] = edges[otherIndex];\n                    }\n                }\n                if (edge.intersects(p,bounds,membershipBounds))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["851e4197476b684154a7b65f996f535522e67400","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}