{"path":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":null,"sourceOld":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca8a58d8530b2b451c1221baf5cc23c349088df1","date":1292964141,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \"-5\"));\n    assertEquals(0, calcMSM(5, \"-100%\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \"3\"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \"25%\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \"25%\"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \"-25%\"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \"3<25%\"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"3<25%\"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"3<-25% 10<-3\"));\n    assertEquals(2, calcMSM(2, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(3, \"3<-25% 10<-3\"));\n    assertEquals(3, calcMSM(4, \"3<-25% 10<-3\"));\n    assertEquals(4, calcMSM(5, \"3<-25% 10<-3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(8, \"3<-25% 10<-3\"));\n    assertEquals(7, calcMSM(9, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(10, \"3<-25% 10<-3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","pathOld":"solr/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchCalculator().mjava","sourceNew":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","sourceOld":"  @Test                                    \n  public void testMinShouldMatchCalculator() {\n\n    /* zero is zero is zero */\n    assertEquals(0, calcMSM(5, \"0\"));\n    assertEquals(0, calcMSM(5, \"0%\"));\n    assertEquals(0, calcMSM(5, \" -5 \"));\n    assertEquals(0, calcMSM(5, \"\\n -100% \\n\"));\n\n    /* basic integers */\n    assertEquals(3, calcMSM(5, \" \\n3\\n \"));\n    assertEquals(2, calcMSM(5, \"-3\"));\n    assertEquals(3, calcMSM(3, \"3\"));\n    assertEquals(0, calcMSM(3, \"-3\"));\n    assertEquals(3, calcMSM(3, \"5\"));\n    assertEquals(0, calcMSM(3, \"-5\"));\n\n    /* positive percentages with rounding */\n    assertEquals(0, calcMSM(3, \" \\n25% \\n\"));\n    assertEquals(1, calcMSM(4, \"25%\"));\n    assertEquals(1, calcMSM(5, \" 25% \"));\n    assertEquals(2, calcMSM(10, \"25%\"));\n        \n    /* negative percentages with rounding */\n    assertEquals(3, calcMSM(3, \" \\n-25%\\n \"));\n    assertEquals(3, calcMSM(4, \"-25%\"));\n    assertEquals(4, calcMSM(5, \"-25%\"));\n    assertEquals(8, calcMSM(10, \"-25%\"));\n\n    /* conditional */\n    assertEquals(1, calcMSM(1, \"3<0\"));\n    assertEquals(2, calcMSM(2, \"3<0\"));\n    assertEquals(3, calcMSM(3, \"3<0\"));\n    assertEquals(0, calcMSM(4, \"3<0\"));\n    assertEquals(0, calcMSM(5, \"3<0\"));\n    assertEquals(1, calcMSM(1, \"3<25%\"));\n    assertEquals(2, calcMSM(2, \" 3\\n<\\n25% \"));\n    assertEquals(3, calcMSM(3, \"3<25%\"));\n    assertEquals(1, calcMSM(4, \"\\n 3 < \\n25%\\n \"));\n    assertEquals(1, calcMSM(5, \"3<25%\"));\n\n    /* multiple conditionals */\n    assertEquals(1, calcMSM(1, \"\\n3 < -25% 10 < -3 \\n\"));\n    assertEquals(2, calcMSM(2, \" 3 < -25% 10 < -3\\n\"));\n    assertEquals(3, calcMSM(3, \" 3 < -25% \\n 10 < -3 \\n\"));\n    assertEquals(3, calcMSM(4, \" 3 < -25% 10 < -3 \"));\n    assertEquals(4, calcMSM(5, \" 3 < -25% 10 < -3\"));\n    assertEquals(5, calcMSM(6, \"3<-25% 10<-3\"));\n    assertEquals(6, calcMSM(7, \" 3 < -25% 10 < -3 \"));\n    assertEquals(6, calcMSM(8, \" 3 < -25% 10 \\n < -3\\n\"));\n    assertEquals(7, calcMSM(9, \" 3 < -25% 10 < -3 \\n\"));\n    assertEquals(8, calcMSM(10, \" 3 < -25% 10 < -3\"));\n    assertEquals(8, calcMSM(11, \"3<-25% 10<-3\"));\n    assertEquals(9, calcMSM(12, \"3<-25% 10<-3\"));\n    assertEquals(97, calcMSM(100, \"3<-25% 10<-3\"));\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"a\",\"b\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"c\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n    q.add(new TermQuery(new Term(\"a\",\"d\")), Occur.SHOULD);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"0\");\n    assertEquals(0, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"1\");\n    assertEquals(1, q.getMinimumNumberShouldMatch());\n        \n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n\n    SolrPluginUtils.setMinShouldMatch(q, \"99\");\n    assertEquals(4, q.getMinimumNumberShouldMatch());\n\n    q.add(new TermQuery(new Term(\"a\",\"e\")), Occur.MUST);\n    q.add(new TermQuery(new Term(\"a\",\"f\")), Occur.MUST);\n\n    SolrPluginUtils.setMinShouldMatch(q, \"50%\");\n    assertEquals(2, q.getMinimumNumberShouldMatch());\n        \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["afeb033b2bd36d8ce9d82142b197da4dde13068b","ca8a58d8530b2b451c1221baf5cc23c349088df1"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["ca8a58d8530b2b451c1221baf5cc23c349088df1","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["afeb033b2bd36d8ce9d82142b197da4dde13068b","ca8a58d8530b2b451c1221baf5cc23c349088df1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ca8a58d8530b2b451c1221baf5cc23c349088df1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ca8a58d8530b2b451c1221baf5cc23c349088df1"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ca8a58d8530b2b451c1221baf5cc23c349088df1":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","ca8a58d8530b2b451c1221baf5cc23c349088df1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"ca8a58d8530b2b451c1221baf5cc23c349088df1":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}