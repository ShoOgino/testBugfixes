{"path":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor.RandomNestedDocModel#parentQueryMaker(String,String).mjava","commits":[{"id":"0b5e0da3b576580fb2128e87467fa5f579ca2c33","date":1599081383,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestNestedUpdateProcessor.RandomNestedDocModel#parentQueryMaker(String,String).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * This implements the \"safe query based on parent path\" rules we're sanity checking.\n     *\n     * @param parent_path the nest path of the parents to consider\n     * @param inner_child_query the specific children whose ancestors we are looking for, must be simple string <code>*:*</code> or <code>id:foo</code>\n     */\n    private SolrParams parentQueryMaker(String parent_path, String inner_child_query) {\n      assertValidPathSytax(parent_path);\n      final boolean verbose = random().nextBoolean();\n      \n      if (parent_path.equals(\"/\")) {\n        if (verbose) {\n          return params(\"q\", \"{!parent which=$parent_filt v=$child_q}\",\n                        \"parent_filt\", \"(*:* -_nest_path_:*)\",\n                        \"child_q\", \"(+\" + inner_child_query + \" +_nest_path_:*)\");\n        } else {\n          return params(\"q\", \"{!parent which='(*:* -_nest_path_:*)'}(+\" + inner_child_query + \" +_nest_path_:*)\");\n        }\n      } // else...\n\n      if (verbose) {\n        final String path = parent_path + \"/\";\n        return params(\"q\", \"{!parent which=$parent_filt v=$child_q}\",\n                      \"parent_filt\", \"(*:* -{!prefix f='_nest_path_' v='\"+path+\"'})\",\n                      \"child_q\", \"(+\" + inner_child_query + \" +{!prefix f='_nest_path_' v='\"+path+\"'})\");\n      } else {\n        // '/' has to be escaped other wise it will be treated as a regex query...\n        // (and of course '\\' escaping is the java syntax as well, we have to double it)\n        final String path = (parent_path + \"/\").replace(\"/\", \"\\\\/\");\n        // ...and when used inside the 'which' param it has to be escaped *AGAIN* because of\n        // the \"quoted\" localparam evaluation layer...\n        return params(\"q\", \"{!parent which='(*:* -_nest_path_:\" + path.replace(\"\\\\/\",\"\\\\\\\\/\") + \"*)'}\"\n                      + \"(+\" + inner_child_query + \" +_nest_path_:\" + path + \"*)\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b5e0da3b576580fb2128e87467fa5f579ca2c33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0b5e0da3b576580fb2128e87467fa5f579ca2c33":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}