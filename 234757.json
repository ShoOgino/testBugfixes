{"path":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#serialize(DataOutput).mjava","commits":[{"id":"0274c27988a26cb0cda3a0d15b282221b1b453f0","date":1343923460,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#serialize(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(FUZZY_SERIALIZATION_VERSION);\n      out.writeString(hashFunction.getName());\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#serialize(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(FUZZY_SERIALIZATION_VERSION);\n      out.writeString(hashFunction.getName());\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#serialize(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(FUZZY_SERIALIZATION_VERSION);\n      out.writeString(hashFunction.getName());\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","date":1346918556,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet#serialize(DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FuzzySet#serialize(DataOutput).mjava","sourceNew":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(VERSION_CURRENT);\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","sourceOld":"  /**\n   * Serializes the data set to file using the following format:\n   * <ul>\n   *  <li>FuzzySet --&gt;FuzzySetVersion,HashFunctionName,BloomSize,\n   * NumBitSetWords,BitSetWord<sup>NumBitSetWords</sup></li> \n   * <li>HashFunctionName --&gt; {@link DataOutput#writeString(String) String} The\n   * name of a ServiceProvider registered {@link HashFunction}</li>\n   * <li>FuzzySetVersion --&gt; {@link DataOutput#writeInt Uint32} The version number of the {@link FuzzySet} class</li>\n   * <li>BloomSize --&gt; {@link DataOutput#writeInt Uint32} The modulo value used\n   * to project hashes into the field's Bitset</li>\n   * <li>NumBitSetWords --&gt; {@link DataOutput#writeInt Uint32} The number of\n   * longs (as returned from {@link FixedBitSet#getBits})</li>\n   * <li>BitSetWord --&gt; {@link DataOutput#writeLong Long} A long from the array\n   * returned by {@link FixedBitSet#getBits}</li>\n   * </ul>\n   * @param out Data output stream\n   * @throws IOException\n   */\n  public void serialize(DataOutput out) throws IOException\n  {\n      out.writeInt(FUZZY_SERIALIZATION_VERSION);\n      out.writeString(hashFunction.getName());\n      out.writeInt(bloomSize);\n      long[] bits = filter.getBits();\n      out.writeInt(bits.length);\n      for (int i = 0; i < bits.length; i++) {\n        // Can't used VLong encoding because cant cope with negative numbers\n        // output by FixedBitSet\n        out.writeLong(bits[i]);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["0274c27988a26cb0cda3a0d15b282221b1b453f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"]},"commit2Childs":{"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0274c27988a26cb0cda3a0d15b282221b1b453f0","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}