{"path":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","pathOld":"/dev/null","sourceNew":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","sourceNew":null,"sourceOld":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","sourceNew":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","pathOld":"/dev/null","sourceNew":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readNumericEntity().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","sourceNew":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b31138e7b06f84b96de212b2102103cb629ee68"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["9b31138e7b06f84b96de212b2102103cb629ee68"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}