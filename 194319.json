{"path":"src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","commits":[{"id":"560d9ff06b001421d5b77a46b7595c913deef74e","date":1195092229,"type":1,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"src/java/org/apache/solr/util/HiFrequencyDictionary.HiFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce664c39aec5f3a923284c202061999768425db","date":1249649666,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"560d9ff06b001421d5b77a46b7595c913deef74e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6ce664c39aec5f3a923284c202061999768425db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ce664c39aec5f3a923284c202061999768425db":["560d9ff06b001421d5b77a46b7595c913deef74e"]},"commit2Childs":{"560d9ff06b001421d5b77a46b7595c913deef74e":["6ce664c39aec5f3a923284c202061999768425db"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["560d9ff06b001421d5b77a46b7595c913deef74e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"6ce664c39aec5f3a923284c202061999768425db":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}