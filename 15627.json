{"path":"lucene/src/java/org/apache/lucene/util/BytesRef#append(BytesRef).mjava","commits":[{"id":"627ce218a5a68018115c2deb6559b41e3665b8ab","date":1284500689,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#append(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void append(BytesRef other) {\n    int newLen = length + other.length;\n    if (bytes.length < newLen) {\n      byte[] newBytes = new byte[newLen];\n      System.arraycopy(bytes, offset, newBytes, 0, length);\n      offset = 0;\n      bytes = newBytes;\n    }\n    System.arraycopy(other.bytes, other.offset, bytes, length+offset, other.length);\n    length = newLen;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ecb9a70c11e1f9dea44bb46bc2f75ed0c2603b57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#append(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void append(BytesRef other) {\n    int newLen = length + other.length;\n    if (bytes.length < newLen) {\n      byte[] newBytes = new byte[newLen];\n      System.arraycopy(bytes, offset, newBytes, 0, length);\n      offset = 0;\n      bytes = newBytes;\n    }\n    System.arraycopy(other.bytes, other.offset, bytes, length+offset, other.length);\n    length = newLen;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867c935d21f9b0e5740841f988a4919546dcb374","date":1322417002,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#append(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#append(BytesRef).mjava","sourceNew":"  /**\n   * Appends the bytes from the given {@link BytesRef}\n   * <p>\n   * NOTE: if this would exceed the array size, this method creates a \n   * new reference array.\n   */\n  public void append(BytesRef other) {\n    int newLen = length + other.length;\n    if (bytes.length < newLen) {\n      byte[] newBytes = new byte[newLen];\n      System.arraycopy(bytes, offset, newBytes, 0, length);\n      offset = 0;\n      bytes = newBytes;\n    }\n    System.arraycopy(other.bytes, other.offset, bytes, length+offset, other.length);\n    length = newLen;\n  }\n\n","sourceOld":"  public void append(BytesRef other) {\n    int newLen = length + other.length;\n    if (bytes.length < newLen) {\n      byte[] newBytes = new byte[newLen];\n      System.arraycopy(bytes, offset, newBytes, 0, length);\n      offset = 0;\n      bytes = newBytes;\n    }\n    System.arraycopy(other.bytes, other.offset, bytes, length+offset, other.length);\n    length = newLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#append(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#append(BytesRef).mjava","sourceNew":"  /**\n   * Appends the bytes from the given {@link BytesRef}\n   * <p>\n   * NOTE: if this would exceed the array size, this method creates a \n   * new reference array.\n   */\n  public void append(BytesRef other) {\n    int newLen = length + other.length;\n    if (bytes.length < newLen) {\n      byte[] newBytes = new byte[newLen];\n      System.arraycopy(bytes, offset, newBytes, 0, length);\n      offset = 0;\n      bytes = newBytes;\n    }\n    System.arraycopy(other.bytes, other.offset, bytes, length+offset, other.length);\n    length = newLen;\n  }\n\n","sourceOld":"  /**\n   * Appends the bytes from the given {@link BytesRef}\n   * <p>\n   * NOTE: if this would exceed the array size, this method creates a \n   * new reference array.\n   */\n  public void append(BytesRef other) {\n    int newLen = length + other.length;\n    if (bytes.length < newLen) {\n      byte[] newBytes = new byte[newLen];\n      System.arraycopy(bytes, offset, newBytes, 0, length);\n      offset = 0;\n      bytes = newBytes;\n    }\n    System.arraycopy(other.bytes, other.offset, bytes, length+offset, other.length);\n    length = newLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"627ce218a5a68018115c2deb6559b41e3665b8ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["867c935d21f9b0e5740841f988a4919546dcb374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","627ce218a5a68018115c2deb6559b41e3665b8ab"],"867c935d21f9b0e5740841f988a4919546dcb374":["627ce218a5a68018115c2deb6559b41e3665b8ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"627ce218a5a68018115c2deb6559b41e3665b8ab":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","867c935d21f9b0e5740841f988a4919546dcb374"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["627ce218a5a68018115c2deb6559b41e3665b8ab","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"867c935d21f9b0e5740841f988a4919546dcb374":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}