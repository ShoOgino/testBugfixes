{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","date":1484565333,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID()))\n            return (float) (scores.doubleValue() * boost);\n          else\n            return 0;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID()))\n            return (float) (scores.doubleValue() * boost);\n          else\n            return 0;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID())) {\n            double factor = scores.doubleValue();\n            if (factor >= 0) {\n              return (float) (factor * boost);\n            }\n          }\n          // default: missing value, negative value or NaN\n          return 0;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID()))\n            return (float) (scores.doubleValue() * boost);\n          else\n            return 0;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID())) {\n            double factor = scores.doubleValue();\n            if (factor >= 0) {\n              return (float) (factor * boost);\n            }\n          }\n          // default: missing value, negative value or NaN\n          return 0;\n        }\n        @Override\n        public float maxScore() {\n          return Float.POSITIVE_INFINITY;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID())) {\n            double factor = scores.doubleValue();\n            if (factor >= 0) {\n              return (float) (factor * boost);\n            }\n          }\n          // default: missing value, negative value or NaN\n          return 0;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID())) {\n            double factor = scores.doubleValue();\n            if (factor >= 0) {\n              return (float) (factor * boost);\n            }\n          }\n          // default: missing value, negative value or NaN\n          return 0;\n        }\n        @Override\n        public float maxScore() {\n          return Float.POSITIVE_INFINITY;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID())) {\n            double factor = scores.doubleValue();\n            if (factor >= 0) {\n              return (float) (factor * boost);\n            }\n          }\n          // default: missing value, negative value or NaN\n          return 0;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID())) {\n            double factor = scores.doubleValue();\n            if (factor >= 0) {\n              return (float) (factor * boost);\n            }\n          }\n          // default: missing value, negative value or NaN\n          return 0;\n        }\n        @Override\n        public float getMaxScore(int upTo) throws IOException {\n          return Float.POSITIVE_INFINITY;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      Scorer in = inner.scorer(context);\n      if (in == null)\n        return null;\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(in));\n      return new FilterScorer(in) {\n        @Override\n        public float score() throws IOException {\n          if (scores.advanceExact(docID())) {\n            double factor = scores.doubleValue();\n            if (factor >= 0) {\n              return (float) (factor * boost);\n            }\n          }\n          // default: missing value, negative value or NaN\n          return 0;\n        }\n        @Override\n        public float maxScore() {\n          return Float.POSITIVE_INFINITY;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["523cc6563c99a55527ef7993efc5413c6648852d"],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"417142ff08fda9cf0b72d5133e63097a166c6458":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["507e7decdf00981d09a74632ea30299a4ce6ba72","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","507e7decdf00981d09a74632ea30299a4ce6ba72"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}