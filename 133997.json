{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"/dev/null","sourceNew":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes().mjava","sourceNew":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","sourceOld":"  /** Expunges all deletes from the index.  When an index\n   *  has many document deletions (or updates to existing\n   *  documents), it's best to either call optimize or\n   *  expungeDeletes to remove all unused data in the index\n   *  associated with the deleted documents.  To see how\n   *  many deletions you have pending in your index, call\n   *  {@link IndexReader#numDeletedDocs}\n   *  This saves disk space and memory usage while\n   *  searching.  expungeDeletes should be somewhat faster\n   *  than optimize since it does not insist on reducing the\n   *  index to a single segment (though, this depends on the\n   *  {@link MergePolicy}; see {@link\n   *  MergePolicy#findMergesToExpungeDeletes}.). Note that\n   *  this call does not first commit any buffered\n   *  documents, so you must do so yourself if necessary.\n   *  See also {@link #expungeDeletes(boolean)}\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public void expungeDeletes() throws CorruptIndexException, IOException {\n    expungeDeletes(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}