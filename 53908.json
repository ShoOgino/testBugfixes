{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#preferReplicaTypesTest().mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#preferReplicaTypesTest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests if the specification of 'preferReplicaTypes` in the query-params\n   * limits the distributed query to locally hosted shards only\n   */\n  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void preferReplicaTypesTest() throws Exception {\n\n    String collectionName = \"replicaTypesTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For these tests we need to have multiple replica types.\n    // Hence the below configuration for our collection\n    int pullReplicas = Math.max(1, liveNodes - 2);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, 1, 1, pullReplicas)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * (2 + pullReplicas));\n    \n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual tests for 'shards.preference=replica.type:*'\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", false, collectionName);\n    // Test to verify that preferLocalShards=true doesn't break this\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", true, collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa85e8354418b9590c18bd9c24ca21cd6eb0374","date":1556010440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#preferReplicaTypesTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#preferReplicaTypesTest().mjava","sourceNew":"  /**\n   * Tests if the specification of 'preferReplicaTypes` in the query-params\n   * limits the distributed query to locally hosted shards only\n   */\n  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void preferReplicaTypesTest() throws Exception {\n\n    String collectionName = \"replicaTypesTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For these tests we need to have multiple replica types.\n    // Hence the below configuration for our collection\n    int pullReplicas = Math.max(1, liveNodes - 2);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, 1, 1, pullReplicas)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * (2 + pullReplicas));\n    \n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual tests for 'shards.preference=replica.type:*'\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", false, collectionName);\n    // Test to verify that preferLocalShards=true doesn't break this\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", true, collectionName);\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n  }\n\n","sourceOld":"  /**\n   * Tests if the specification of 'preferReplicaTypes` in the query-params\n   * limits the distributed query to locally hosted shards only\n   */\n  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void preferReplicaTypesTest() throws Exception {\n\n    String collectionName = \"replicaTypesTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For these tests we need to have multiple replica types.\n    // Hence the below configuration for our collection\n    int pullReplicas = Math.max(1, liveNodes - 2);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, 1, 1, pullReplicas)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * (2 + pullReplicas));\n    \n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual tests for 'shards.preference=replica.type:*'\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", false, collectionName);\n    // Test to verify that preferLocalShards=true doesn't break this\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", true, collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#preferReplicaTypesTest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest#preferReplicaTypesTest().mjava","sourceNew":"  /**\n   * Tests if the specification of 'preferReplicaTypes` in the query-params\n   * limits the distributed query to locally hosted shards only\n   */\n  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void preferReplicaTypesTest() throws Exception {\n\n    String collectionName = \"replicaTypesTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For these tests we need to have multiple replica types.\n    // Hence the below configuration for our collection\n    int pullReplicas = Math.max(1, liveNodes - 2);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, 1, 1, pullReplicas)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * (2 + pullReplicas));\n    \n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual tests for 'shards.preference=replica.type:*'\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", false, collectionName);\n    // Test to verify that preferLocalShards=true doesn't break this\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", true, collectionName);\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n  }\n\n","sourceOld":"  /**\n   * Tests if the specification of 'preferReplicaTypes` in the query-params\n   * limits the distributed query to locally hosted shards only\n   */\n  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void preferReplicaTypesTest() throws Exception {\n\n    String collectionName = \"replicaTypesTestColl\";\n\n    int liveNodes = cluster.getJettySolrRunners().size();\n\n    // For these tests we need to have multiple replica types.\n    // Hence the below configuration for our collection\n    int pullReplicas = Math.max(1, liveNodes - 2);\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", liveNodes, 1, 1, pullReplicas)\n        .setMaxShardsPerNode(liveNodes)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n    cluster.waitForActiveCollection(collectionName, liveNodes, liveNodes * (2 + pullReplicas));\n    \n    // Add some new documents\n    new UpdateRequest()\n        .add(id, \"0\", \"a_t\", \"hello1\")\n        .add(id, \"2\", \"a_t\", \"hello2\")\n        .add(id, \"3\", \"a_t\", \"hello2\")\n        .commit(getRandomClient(), collectionName);\n\n    // Run the actual tests for 'shards.preference=replica.type:*'\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", false, collectionName);\n    // Test to verify that preferLocalShards=true doesn't break this\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"PULL|TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"TLOG|PULL\", true, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT\", false, collectionName);\n    queryWithPreferReplicaTypes(getRandomClient(), \"NRT|PULL\", true, collectionName);\n    CollectionAdminRequest.deleteCollection(collectionName)\n        .processAndWait(cluster.getSolrClient(), TIMEOUT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fa85e8354418b9590c18bd9c24ca21cd6eb0374":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["0fa85e8354418b9590c18bd9c24ca21cd6eb0374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"0fa85e8354418b9590c18bd9c24ca21cd6eb0374":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["0fa85e8354418b9590c18bd9c24ca21cd6eb0374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}