{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedIndexDocValuesField().mjava","commits":[{"id":"594a11fd830b89fd08a253593d8e5062e20f5564","date":1317054010,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedIndexDocValuesField().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValuedIndexDocValuesField() throws Exception {\n    assumeFalse(\"cannot work with preflex codec\", CodecProvider.getDefault().getDefaultFieldCodec().equals(\"PreFlex\"));\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    IndexDocValuesField f = new IndexDocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].perDocValues().docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedIndexDocValuesField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedIndexDocValuesField().mjava","sourceNew":"  public void testMultiValuedIndexDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    IndexDocValuesField f = new IndexDocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].perDocValues().docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMultiValuedIndexDocValuesField() throws Exception {\n    assumeFalse(\"cannot work with preflex codec\", CodecProvider.getDefault().getDefaultFieldCodec().equals(\"PreFlex\"));\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    IndexDocValuesField f = new IndexDocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].perDocValues().docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedIndexDocValuesField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedIndexDocValuesField().mjava","sourceNew":"  public void testMultiValuedIndexDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    IndexDocValuesField f = new IndexDocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].perDocValues().docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMultiValuedIndexDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    IndexDocValuesField f = new IndexDocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.optimize();\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].perDocValues().docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedDocValuesField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedIndexDocValuesField().mjava","sourceNew":"  public void testMultiValuedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    DocValuesField f = new DocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].perDocValues().docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMultiValuedIndexDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    IndexDocValuesField f = new IndexDocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].perDocValues().docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedDocValuesField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testMultiValuedIndexDocValuesField().mjava","sourceNew":"  public void testMultiValuedDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    DocValuesField f = new DocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMultiValuedIndexDocValuesField() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    IndexDocValuesField f = new IndexDocValuesField(\"field\");\n    f.setInt(17);\n    // Index doc values are single-valued so we should not\n    // be able to add same field more than once:\n    doc.add(f);\n    doc.add(f);\n    try {\n      w.addDocument(doc);\n      fail(\"didn't hit expected exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n\n    doc = new Document();\n    doc.add(f);\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    w.close();\n    assertEquals(17, r.getSequentialSubReaders()[0].perDocValues().docValues(\"field\").load().getInt(0));\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["594a11fd830b89fd08a253593d8e5062e20f5564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["7b91922b55d15444d554721b352861d028eb8278"],"594a11fd830b89fd08a253593d8e5062e20f5564":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["594a11fd830b89fd08a253593d8e5062e20f5564"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"594a11fd830b89fd08a253593d8e5062e20f5564":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}