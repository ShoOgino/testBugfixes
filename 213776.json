{"path":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec57145e34263e28da6b82568e35471f7d67df69","date":1341768476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    // we use default locale since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.getDefault());\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    // we use default locale since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.getDefault());\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    // we use default locale since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.getDefault());\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    // we use default locale since LuceneTestCase randomizes it\n    Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.getDefault());\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec57145e34263e28da6b82568e35471f7d67df69":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ec57145e34263e28da6b82568e35471f7d67df69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ec57145e34263e28da6b82568e35471f7d67df69","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ec57145e34263e28da6b82568e35471f7d67df69":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}