{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && 0 != ((List<?>)first).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && 0 != ((List<?>)second).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || 0 != ((List<?>)second).stream().filter(item -> !(item instanceof Number)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Map<String,Double> m = new HashMap<>();\n      m.put(\"p-value\", ks.kolmogorovSmirnovTest(realDistribution, data));\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return new Tuple(m);\n    }\n    else if(first instanceof List<?> && 0 == ((List<?>)first).stream().filter(item -> !(item instanceof Number)).count()){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n      \n      Map<String,Double> m = new HashMap<>();\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return new Tuple(m);\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && 0 != ((List<?>)first).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && 0 != ((List<?>)second).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || 0 != ((List<?>)second).stream().filter(item -> !(item instanceof Number)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Map<String,Double> m = new HashMap<>();\n      m.put(\"p-value\", ks.kolmogorovSmirnovTest(realDistribution, data));\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return new Tuple(m);\n    }\n    else if(first instanceof List<?> && 0 == ((List<?>)first).stream().filter(item -> !(item instanceof Number)).count()){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n      \n      Map<String,Double> m = new HashMap<>();\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return new Tuple(m);\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && 0 != ((List<?>)first).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && 0 != ((List<?>)second).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || 0 != ((List<?>)second).stream().filter(item -> !(item instanceof Number)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Map<String,Double> m = new HashMap<>();\n      m.put(\"p-value\", ks.kolmogorovSmirnovTest(realDistribution, data));\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return new Tuple(m);\n    }\n    else if(first instanceof List<?> && 0 == ((List<?>)first).stream().filter(item -> !(item instanceof Number)).count()){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n      \n      Map<String,Double> m = new HashMap<>();\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return new Tuple(m);\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc61020924012c08fd69015b3edddac5fac6032b","date":1566850580,"type":3,"author":"KoenDG","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && ((List<?>) first).stream().anyMatch(item -> null == item))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && ((List<?>) second).stream().anyMatch(item -> null == item))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || ((List<?>) second).stream().anyMatch(item -> !(item instanceof Number))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Map<String,Double> m = new HashMap<>();\n      m.put(\"p-value\", ks.kolmogorovSmirnovTest(realDistribution, data));\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return new Tuple(m);\n    }\n    else if(first instanceof List<?> && ((List<?>) first).stream().noneMatch(item -> !(item instanceof Number))){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n      \n      Map<String,Double> m = new HashMap<>();\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return new Tuple(m);\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && 0 != ((List<?>)first).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && 0 != ((List<?>)second).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || 0 != ((List<?>)second).stream().filter(item -> !(item instanceof Number)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Map<String,Double> m = new HashMap<>();\n      m.put(\"p-value\", ks.kolmogorovSmirnovTest(realDistribution, data));\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return new Tuple(m);\n    }\n    else if(first instanceof List<?> && 0 == ((List<?>)first).stream().filter(item -> !(item instanceof Number)).count()){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n      \n      Map<String,Double> m = new HashMap<>();\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return new Tuple(m);\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce","date":1566931059,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && ((List<?>) first).stream().anyMatch(item -> null == item))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && ((List<?>) second).stream().anyMatch(item -> null == item))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || ((List<?>) second).stream().anyMatch(item -> !(item instanceof Number))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Map<String,Double> m = new HashMap<>();\n      m.put(\"p-value\", ks.kolmogorovSmirnovTest(realDistribution, data));\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return new Tuple(m);\n    }\n    else if(first instanceof List<?> && ((List<?>) first).stream().noneMatch(item -> !(item instanceof Number))){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n      \n      Map<String,Double> m = new HashMap<>();\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return new Tuple(m);\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && 0 != ((List<?>)first).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && 0 != ((List<?>)second).stream().filter(item -> null == item).count())){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || 0 != ((List<?>)second).stream().filter(item -> !(item instanceof Number)).count()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Map<String,Double> m = new HashMap<>();\n      m.put(\"p-value\", ks.kolmogorovSmirnovTest(realDistribution, data));\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return new Tuple(m);\n    }\n    else if(first instanceof List<?> && 0 == ((List<?>)first).stream().filter(item -> !(item instanceof Number)).count()){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n      \n      Map<String,Double> m = new HashMap<>();\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return new Tuple(m);\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && ((List<?>) first).stream().anyMatch(item -> null == item))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && ((List<?>) second).stream().anyMatch(item -> null == item))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || ((List<?>) second).stream().anyMatch(item -> !(item instanceof Number))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Tuple tuple = new Tuple();\n      tuple.put(StreamParams.P_VALUE, ks.kolmogorovSmirnovTest(realDistribution, data));\n      tuple.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return tuple;\n    }\n    else if(first instanceof List<?> && ((List<?>) first).stream().noneMatch(item -> !(item instanceof Number))){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n\n      Tuple tuple = new Tuple();\n      tuple.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return tuple;\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first || (first instanceof List<?> && ((List<?>) first).stream().anyMatch(item -> null == item))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second || (second instanceof List<?> && ((List<?>) second).stream().anyMatch(item -> null == item))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(second instanceof List<?>) || ((List<?>) second).stream().anyMatch(item -> !(item instanceof Number))){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a List of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    \n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n    \n    if(first instanceof RealDistribution){\n      RealDistribution realDistribution = (RealDistribution)first;\n\n      Map<String,Double> m = new HashMap<>();\n      m.put(\"p-value\", ks.kolmogorovSmirnovTest(realDistribution, data));\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovStatistic(realDistribution, data));\n      return new Tuple(m);\n    }\n    else if(first instanceof List<?> && ((List<?>) first).stream().noneMatch(item -> !(item instanceof Number))){\n      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();\n      \n      Map<String,Double> m = new HashMap<>();\n      m.put(\"d-statistic\", ks.kolmogorovSmirnovTest(data, data2));\n      return new Tuple(m);\n    }\n    else{\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","fc61020924012c08fd69015b3edddac5fac6032b"],"fc61020924012c08fd69015b3edddac5fac6032b":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"804a8d5358fe7b7563b85ee7838714d720b89272":["da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce","fc61020924012c08fd69015b3edddac5fac6032b"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce":["804a8d5358fe7b7563b85ee7838714d720b89272"],"fc61020924012c08fd69015b3edddac5fac6032b":["da71e4c302aa6f7bec9fdb388ff2bb2487bf92ce"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}