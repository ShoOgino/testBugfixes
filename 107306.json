{"path":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","sourceNew":"  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","sourceNew":"  @Override\n  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","sourceNew":"  @Override\n  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","sourceNew":"  @Override\n  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  @Override\n  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/mutable/MutableValue#compareTo(MutableValue).mjava","sourceNew":"  @Override\n  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","sourceOld":"  @Override\n  public int compareTo(MutableValue other) {\n    Class<? extends MutableValue> c1 = this.getClass();\n    Class<? extends MutableValue> c2 = other.getClass();\n    if (c1 != c2) {\n      int c = c1.hashCode() - c2.hashCode();\n      if (c == 0) {\n        c = c1.getCanonicalName().compareTo(c2.getCanonicalName());\n      }\n      return c;\n    }\n    return compareSameType(other);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7530de27b87b961b51f01bd1299b7004d46e8823"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}