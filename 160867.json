{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,int,NumericDocValues,NumericDocValues).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,int,NumericDocValues,NumericDocValues).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocValues(int,NumericDocValues,NumericDocValues).mjava","sourceNew":"  public void assertDocValuesEquals(String info, int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws IOException {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    for(int docID=0;docID<num;docID++) {\n      assertEquals(leftDocValues.get(docID),\n                   rightDocValues.get(docID));\n    }\n  }\n\n","sourceOld":"  public void assertDocValues(int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws Exception {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    for(int docID=0;docID<num;docID++) {\n      assertEquals(leftDocValues.get(docID),\n                   rightDocValues.get(docID));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,int,NumericDocValues,NumericDocValues).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,int,NumericDocValues,NumericDocValues).mjava","sourceNew":"  public void assertDocValuesEquals(String info, int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws IOException {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    while (true) {\n      int leftDocID = leftDocValues.nextDoc();\n      int rightDocID = rightDocValues.nextDoc();\n      assertEquals(leftDocID, rightDocID);\n      if (leftDocID == NO_MORE_DOCS) {\n        return;\n      }\n      assertEquals(leftDocValues.longValue(), rightDocValues.longValue());\n    }\n  }\n\n","sourceOld":"  public void assertDocValuesEquals(String info, int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws IOException {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    for(int docID=0;docID<num;docID++) {\n      assertEquals(leftDocValues.get(docID),\n                   rightDocValues.get(docID));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,int,NumericDocValues,NumericDocValues).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,int,NumericDocValues,NumericDocValues).mjava","sourceNew":"  public void assertDocValuesEquals(String info, int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws IOException {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    while (true) {\n      int leftDocID = leftDocValues.nextDoc();\n      int rightDocID = rightDocValues.nextDoc();\n      assertEquals(leftDocID, rightDocID);\n      if (leftDocID == NO_MORE_DOCS) {\n        return;\n      }\n      assertEquals(leftDocValues.longValue(), rightDocValues.longValue());\n    }\n  }\n\n","sourceOld":"  public void assertDocValuesEquals(String info, int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws IOException {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    for(int docID=0;docID<num;docID++) {\n      assertEquals(leftDocValues.get(docID),\n                   rightDocValues.get(docID));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,int,NumericDocValues,NumericDocValues).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocValuesEquals(String,int,NumericDocValues,NumericDocValues).mjava","sourceNew":"  public void assertDocValuesEquals(String info, int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws IOException {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    while (true) {\n      int leftDocID = leftDocValues.nextDoc();\n      int rightDocID = rightDocValues.nextDoc();\n      assertEquals(leftDocID, rightDocID);\n      if (leftDocID == NO_MORE_DOCS) {\n        return;\n      }\n      assertEquals(leftDocValues.longValue(), rightDocValues.longValue());\n    }\n  }\n\n","sourceOld":"  public void assertDocValuesEquals(String info, int num, NumericDocValues leftDocValues, NumericDocValues rightDocValues) throws IOException {\n    assertNotNull(info, leftDocValues);\n    assertNotNull(info, rightDocValues);\n    for(int docID=0;docID<num;docID++) {\n      assertEquals(leftDocValues.get(docID),\n                   rightDocValues.get(docID));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["51c8450b3b616b6777f722ff4083c0bf946381a2","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["51c8450b3b616b6777f722ff4083c0bf946381a2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}