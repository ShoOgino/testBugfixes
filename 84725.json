{"path":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","pathOld":"/dev/null","sourceNew":"  public void testBadSeek() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"647c9fae7d892e2bdf895f30a6df68335b919be8","date":1082565346,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","sourceNew":"  public void testBadSeek() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testBadSeek() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","sourceNew":"  public void testBadSeek() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testBadSeek() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","sourceNew":"  public void testBadSeek() throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf637fee66c296142fb5989e338efc018320655","date":1168455996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","sourceNew":"  public void testBadSeek() throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek() throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 3, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","sourceNew":"  public void testBadSeek() throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(info);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(info);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek() throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa","date":1195161267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","sourceNew":"  public void testBadSeek() throws IOException {\n    testBadSeek(1);\n  }\n\n","sourceOld":"  public void testBadSeek() throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(info);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"textField2\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(info);\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(\"junk\", \"bad\"));\n      assertTrue(segTermDocs.next() == false);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek().mjava","sourceNew":"  public void testBadSeek() throws IOException {\n    testBadSeek(1);\n  }\n\n","sourceOld":"  public void testBadSeek() throws IOException {\n    testBadSeek(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fcf637fee66c296142fb5989e338efc018320655":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["fcf637fee66c296142fb5989e338efc018320655"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["647c9fae7d892e2bdf895f30a6df68335b919be8"],"647c9fae7d892e2bdf895f30a6df68335b919be8":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1229e4509cad6bf268c0fe18199b63a72216c66b":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["647c9fae7d892e2bdf895f30a6df68335b919be8"],"fcf637fee66c296142fb5989e338efc018320655":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"647c9fae7d892e2bdf895f30a6df68335b919be8":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["fcf637fee66c296142fb5989e338efc018320655"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}