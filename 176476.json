{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createMockedIterator(String,List[Hierarchy],ContextHolder).mjava","commits":[{"id":"5238b7e551c27d6d8b882878a8f8b114bd79f1b5","date":1421397215,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createMockedIterator(String,List[Hierarchy],ContextHolder).mjava","pathOld":"/dev/null","sourceNew":"  private List<Hierarchy> createMockedIterator(String type, List<Hierarchy> parentData, ContextHolder holder) {\n    List<Hierarchy> result = new ArrayList<Hierarchy>();\n    for (Hierarchy parentHierarchy: parentData) {\n      Map<String, Object> data = parentHierarchy.elementData;\n      String id = (String) data.get(FIELD_ID);\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", type, type + \"_parent_id\", id);\n      List<Hierarchy> childHierarchies = createMockedIterator(type, select, atLeast(5), holder);\n      parentHierarchy.elements.addAll(childHierarchies);\n      result.addAll(childHierarchies);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203","date":1421506313,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createMockedIterator(String,List[Hierarchy],ContextHolder).mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createMockedIterator(String,List[Hierarchy],ContextHolder).mjava","sourceNew":"  private List<Hierarchy> createMockedIterator(String type, List<Hierarchy> parentData, ContextHolder holder) {\n    List<Hierarchy> result = new ArrayList<Hierarchy>();\n    for (Hierarchy parentHierarchy: parentData) {\n      Map<String, Object> data = parentHierarchy.elementData;\n      String id = (String) data.get(FIELD_ID);\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", type, type + \"_parent_id\", id);\n      \n      // Number of actual children documents\n      int childrenNum = 1 + random().nextInt(3);\n      List<Hierarchy> childHierarchies = createMockedIterator(type, select, childrenNum, holder);\n      parentHierarchy.elements.addAll(childHierarchies);\n      result.addAll(childHierarchies);\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<Hierarchy> createMockedIterator(String type, List<Hierarchy> parentData, ContextHolder holder) {\n    List<Hierarchy> result = new ArrayList<Hierarchy>();\n    for (Hierarchy parentHierarchy: parentData) {\n      Map<String, Object> data = parentHierarchy.elementData;\n      String id = (String) data.get(FIELD_ID);\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", type, type + \"_parent_id\", id);\n      List<Hierarchy> childHierarchies = createMockedIterator(type, select, atLeast(5), holder);\n      parentHierarchy.elements.addAll(childHierarchies);\n      result.addAll(childHierarchies);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createMockedIterator(String,List[Hierarchy],ContextHolder).mjava","sourceNew":null,"sourceOld":"  private List<Hierarchy> createMockedIterator(String type, List<Hierarchy> parentData, ContextHolder holder) {\n    List<Hierarchy> result = new ArrayList<Hierarchy>();\n    for (Hierarchy parentHierarchy: parentData) {\n      Map<String, Object> data = parentHierarchy.elementData;\n      String id = (String) data.get(FIELD_ID);\n      String select = String.format(Locale.ROOT, \"select * from %s where %s='%s'\", type, type + \"_parent_id\", id);\n      \n      // Number of actual children documents\n      int childrenNum = 1 + random().nextInt(3);\n      List<Hierarchy> childHierarchies = createMockedIterator(type, select, childrenNum, holder);\n      parentHierarchy.elements.addAll(childHierarchies);\n      result.addAll(childHierarchies);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["e2f007bfc4c7f42ce6afc45811f7c7fc8b936203"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["e2f007bfc4c7f42ce6afc45811f7c7fc8b936203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"e2f007bfc4c7f42ce6afc45811f7c7fc8b936203":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}