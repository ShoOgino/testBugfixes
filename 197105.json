{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","commits":[{"id":"90329759f82c33c8fdb14d8bc0db5e81d17934b8","date":1270913806,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","sourceNew":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","sourceOld":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#initialResult(ReaderContext,int,int[]).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","sourceNew":"    private OpenBitSetDISI initialResult(ReaderContext info, int logic, int[] index)\n    throws IOException\n    {\n        IndexReader reader = info.reader;\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], info), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], info), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","sourceOld":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","sourceNew":null,"sourceOld":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","sourceNew":null,"sourceOld":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90329759f82c33c8fdb14d8bc0db5e81d17934b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["90329759f82c33c8fdb14d8bc0db5e81d17934b8","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["90329759f82c33c8fdb14d8bc0db5e81d17934b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["90329759f82c33c8fdb14d8bc0db5e81d17934b8","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"]},"commit2Childs":{"90329759f82c33c8fdb14d8bc0db5e81d17934b8":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90329759f82c33c8fdb14d8bc0db5e81d17934b8"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}