{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","sourceNew":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n            assertEquals(correctStartOffset, nextToken.startOffset());\n            assertEquals(correctEndOffset, nextToken.endOffset());\n            correctStartOffset++;\n            correctEndOffset++;\n        }\n    }\n\n","sourceOld":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n            assertEquals(correctStartOffset, nextToken.startOffset());\n            assertEquals(correctEndOffset, nextToken.endOffset());\n            correctStartOffset++;\n            correctEndOffset++;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","sourceNew":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        OffsetAttribute offsetAtt = (OffsetAttribute) tokenizer.getAttribute(OffsetAttribute.class);\n        while (tokenizer.incrementToken()) {\n          assertEquals(correctStartOffset, offsetAtt.startOffset());\n          assertEquals(correctEndOffset, offsetAtt.endOffset());\n          correctStartOffset++;\n          correctEndOffset++;\n        }\n    }\n\n","sourceOld":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        final Token reusableToken = new Token();\n        for (Token nextToken = tokenizer.next(reusableToken); nextToken != null; nextToken = tokenizer.next(reusableToken)) {\n            assertEquals(correctStartOffset, nextToken.startOffset());\n            assertEquals(correctEndOffset, nextToken.endOffset());\n            correctStartOffset++;\n            correctEndOffset++;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","sourceNew":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        OffsetAttribute offsetAtt = tokenizer.getAttribute(OffsetAttribute.class);\n        while (tokenizer.incrementToken()) {\n          assertEquals(correctStartOffset, offsetAtt.startOffset());\n          assertEquals(correctEndOffset, offsetAtt.endOffset());\n          correctStartOffset++;\n          correctEndOffset++;\n        }\n    }\n\n","sourceOld":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        OffsetAttribute offsetAtt = (OffsetAttribute) tokenizer.getAttribute(OffsetAttribute.class);\n        while (tokenizer.incrementToken()) {\n          assertEquals(correctStartOffset, offsetAtt.startOffset());\n          assertEquals(correctEndOffset, offsetAtt.endOffset());\n          correctStartOffset++;\n          correctEndOffset++;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cn/TestChineseTokenizer#testOtherLetterOffset().mjava","sourceNew":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        OffsetAttribute offsetAtt = tokenizer.getAttribute(OffsetAttribute.class);\n        while (tokenizer.incrementToken()) {\n          assertEquals(correctStartOffset, offsetAtt.startOffset());\n          assertEquals(correctEndOffset, offsetAtt.endOffset());\n          correctStartOffset++;\n          correctEndOffset++;\n        }\n    }\n\n","sourceOld":"    public void testOtherLetterOffset() throws IOException\n    {\n        String s = \"a天b\";\n        ChineseTokenizer tokenizer = new ChineseTokenizer(new StringReader(s));\n\n        int correctStartOffset = 0;\n        int correctEndOffset = 1;\n        OffsetAttribute offsetAtt = tokenizer.getAttribute(OffsetAttribute.class);\n        while (tokenizer.incrementToken()) {\n          assertEquals(correctStartOffset, offsetAtt.startOffset());\n          assertEquals(correctEndOffset, offsetAtt.endOffset());\n          correctStartOffset++;\n          correctEndOffset++;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}