{"path":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","commits":[{"id":"86c487a0031f30e4a08cfb3d4ec49266d772f957","date":1205881260,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testMissingTerms() throws Exception\r\n\t{\r\n\t\tString fieldName=\"field1\";\r\n\t\tRAMDirectory rd=new RAMDirectory();\r\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(),MaxFieldLength.UNLIMITED);\r\n\t\tfor (int i = 0; i < 100; i++)\r\n\t\t{\r\n\t\t\tDocument doc=new Document();\r\n\t\t\tint term=i*10; //terms are units of 10;\r\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.UN_TOKENIZED));\r\n\t\t\tw.addDocument(doc);\t\t\t\r\n\t\t}\r\n\t\tw.close();\r\n\t\tIndexReader reader = IndexReader.open(rd);\r\n\t\t\r\n\t\tTermsFilter tf=new TermsFilter();\r\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\r\n\t\tBitSet bits = tf.bits(reader);\r\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\r\n\r\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\r\n\t\tbits=tf.bits(reader);\r\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\r\n\t\t\r\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\r\n\t\tbits=tf.bits(reader);\r\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\r\n\t\t\r\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\r\n\t\tbits=tf.bits(reader);\r\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\r\n\t\t\t\t\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2","date":1211591790,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.UN_TOKENIZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception\r\n\t{\r\n\t\tString fieldName=\"field1\";\r\n\t\tRAMDirectory rd=new RAMDirectory();\r\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(),MaxFieldLength.UNLIMITED);\r\n\t\tfor (int i = 0; i < 100; i++)\r\n\t\t{\r\n\t\t\tDocument doc=new Document();\r\n\t\t\tint term=i*10; //terms are units of 10;\r\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.UN_TOKENIZED));\r\n\t\t\tw.addDocument(doc);\t\t\t\r\n\t\t}\r\n\t\tw.close();\r\n\t\tIndexReader reader = IndexReader.open(rd);\r\n\t\t\r\n\t\tTermsFilter tf=new TermsFilter();\r\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\r\n\t\tBitSet bits = tf.bits(reader);\r\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\r\n\r\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\r\n\t\tbits=tf.bits(reader);\r\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\r\n\t\t\r\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\r\n\t\tbits=tf.bits(reader);\r\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\r\n\t\t\r\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\r\n\t\tbits=tf.bits(reader);\r\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\r\n\t\t\t\t\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.UN_TOKENIZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(Version.LUCENE_CURRENT),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(TEST_VERSION_CURRENT),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(Version.LUCENE_CURRENT),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(TEST_VERSION_CURRENT),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(TEST_VERSION_CURRENT),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception\n\t{\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w=new IndexWriter(rd,new WhitespaceAnalyzer(TEST_VERSION_CURRENT),MaxFieldLength.UNLIMITED);\n\t\tfor (int i = 0; i < 100; i++)\n\t\t{\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/TermsFilterTest#testMissingTerms().mjava","sourceNew":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","sourceOld":"\tpublic void testMissingTerms() throws Exception {\n\t\tString fieldName=\"field1\";\n\t\tRAMDirectory rd=new RAMDirectory();\n\t\tIndexWriter w = new IndexWriter(rd, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tDocument doc=new Document();\n\t\t\tint term=i*10; //terms are units of 10;\n\t\t\tdoc.add(new Field(fieldName,\"\"+term,Field.Store.YES,Field.Index.NOT_ANALYZED));\n\t\t\tw.addDocument(doc);\t\t\t\n\t\t}\n\t\tw.close();\n\t\tIndexReader reader = IndexReader.open(rd, true);\n\t\t\n\t\tTermsFilter tf=new TermsFilter();\n\t\ttf.addTerm(new Term(fieldName,\"19\"));\n\t\tOpenBitSet bits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match nothing\", 0, bits.cardinality());\n\n\t\ttf.addTerm(new Term(fieldName,\"20\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 1\", 1, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"10\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\n\t\ttf.addTerm(new Term(fieldName,\"00\"));\n\t\tbits = (OpenBitSet)tf.getDocIdSet(reader);\n\t\tassertEquals(\"Must match 2\", 2, bits.cardinality());\n\t\t\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2":["86c487a0031f30e4a08cfb3d4ec49266d772f957"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"86c487a0031f30e4a08cfb3d4ec49266d772f957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86c487a0031f30e4a08cfb3d4ec49266d772f957"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["4256bc1b3c94786287ccdfc751230374521843cf"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"86c487a0031f30e4a08cfb3d4ec49266d772f957":["4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"4256bc1b3c94786287ccdfc751230374521843cf":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}