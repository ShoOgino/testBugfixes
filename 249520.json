{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","sourceNew":"  /**\n   * It uses \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it. If this object has been created due to a\n   * parse error, and you do not catch it (it gets thrown from the parser) the\n   * correct error message gets displayed.\n   */\n  private static String initialise(Token currentToken,\n      int[][] expectedTokenSequences, String[] tokenImage) {\n    String eol = System.getProperty(\"line.separator\", \"\\n\");\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0)\n        retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \"\n        + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","sourceOld":"  /**\n   * It uses \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it. If this object has been created due to a\n   * parse error, and you do not catch it (it gets thrown from the parser) the\n   * correct error message gets displayed.\n   */\n  private static String initialise(Token currentToken,\n      int[][] expectedTokenSequences, String[] tokenImage) {\n    String eol = System.getProperty(\"line.separator\", \"\\n\");\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0)\n        retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \"\n        + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","sourceNew":"  /**\r\n   * This method has the standard behavior when this object has been\r\n   * created using the standard constructors.  Otherwise, it uses\r\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\r\n   * error message and returns it.  If this object has been created\r\n   * due to a parse error, and you do not catch it (it gets thrown\r\n   * from the parser), then this method is called during the printing\r\n   * of the final stack trace, and hence the correct error message\r\n   * gets displayed.\r\n   */\r\n  private static String initialise(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage) {\r\n     String eol = System.getProperty(\"line.separator\", \"n\");\r\n    StringBuffer expected = new StringBuffer();\r\n    int maxSize = 0;\r\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\r\n      if (maxSize < expectedTokenSequences[i].length) {\r\n        maxSize = expectedTokenSequences[i].length;\r\n      }\r\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\r\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\r\n      }\r\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\r\n        expected.append(\"...\");\r\n      }\r\n      expected.append(eol).append(\"    \");\r\n    }\r\n    String retval = \"Encountered \\\"\";\r\n    Token tok = currentToken.next;\r\n    for (int i = 0; i < maxSize; i++) {\r\n      if (i != 0) retval += \" \";\r\n      if (tok.kind == 0) {\r\n        retval += tokenImage[0];\r\n        break;\r\n      }\r\n      retval += \" \" + tokenImage[tok.kind];\r\n      retval += \" \\\"\";\r\n      retval += add_escapes(tok.image);\r\n      retval += \" \\\"\";\r\n      tok = tok.next;\r\n    }\r\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\r\n    retval += \".\" + eol;\r\n    if (expectedTokenSequences.length == 1) {\r\n      retval += \"Was expecting:\" + eol + \"    \";\r\n    } else {\r\n      retval += \"Was expecting one of:\" + eol + \"    \";\r\n    }\r\n    retval += expected.toString();\r\n    return retval;\r\n  }\r\n\n","sourceOld":"  /**\n   * It uses \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it. If this object has been created due to a\n   * parse error, and you do not catch it (it gets thrown from the parser) the\n   * correct error message gets displayed.\n   */\n  private static String initialise(Token currentToken,\n      int[][] expectedTokenSequences, String[] tokenImage) {\n    String eol = System.getProperty(\"line.separator\", \"\\n\");\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0)\n        retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \"\n        + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","sourceNew":"  /**\n   * This method has the standard behavior when this object has been\n   * created using the standard constructors.  Otherwise, it uses\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it.  If this object has been created\n   * due to a parse error, and you do not catch it (it gets thrown\n   * from the parser), then this method is called during the printing\n   * of the final stack trace, and hence the correct error message\n   * gets displayed.\n   */\n  private static String initialise(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage) {\n     String eol = System.getProperty(\"line.separator\", \"n\");\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","sourceOld":"  /**\r\n   * This method has the standard behavior when this object has been\r\n   * created using the standard constructors.  Otherwise, it uses\r\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\r\n   * error message and returns it.  If this object has been created\r\n   * due to a parse error, and you do not catch it (it gets thrown\r\n   * from the parser), then this method is called during the printing\r\n   * of the final stack trace, and hence the correct error message\r\n   * gets displayed.\r\n   */\r\n  private static String initialise(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage) {\r\n     String eol = System.getProperty(\"line.separator\", \"n\");\r\n    StringBuffer expected = new StringBuffer();\r\n    int maxSize = 0;\r\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\r\n      if (maxSize < expectedTokenSequences[i].length) {\r\n        maxSize = expectedTokenSequences[i].length;\r\n      }\r\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\r\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\r\n      }\r\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\r\n        expected.append(\"...\");\r\n      }\r\n      expected.append(eol).append(\"    \");\r\n    }\r\n    String retval = \"Encountered \\\"\";\r\n    Token tok = currentToken.next;\r\n    for (int i = 0; i < maxSize; i++) {\r\n      if (i != 0) retval += \" \";\r\n      if (tok.kind == 0) {\r\n        retval += tokenImage[0];\r\n        break;\r\n      }\r\n      retval += \" \" + tokenImage[tok.kind];\r\n      retval += \" \\\"\";\r\n      retval += add_escapes(tok.image);\r\n      retval += \" \\\"\";\r\n      tok = tok.next;\r\n    }\r\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\r\n    retval += \".\" + eol;\r\n    if (expectedTokenSequences.length == 1) {\r\n      retval += \"Was expecting:\" + eol + \"    \";\r\n    } else {\r\n      retval += \"Was expecting one of:\" + eol + \"    \";\r\n    }\r\n    retval += expected.toString();\r\n    return retval;\r\n  }\r\n\n","bugFix":null,"bugIntro":["d06343967a29132f5d782f74e8d0988400278a02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException#initialise(Token,int[][],String[]).mjava","sourceNew":"  /**\n   * This method has the standard behavior when this object has been\n   * created using the standard constructors.  Otherwise, it uses\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it.  If this object has been created\n   * due to a parse error, and you do not catch it (it gets thrown\n   * from the parser), then this method is called during the printing\n   * of the final stack trace, and hence the correct error message\n   * gets displayed.\n   */\n  private static String initialise(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage) {\n     String eol = System.getProperty(\"line.separator\", \"n\");\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","sourceOld":"  /**\n   * This method has the standard behavior when this object has been\n   * created using the standard constructors.  Otherwise, it uses\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it.  If this object has been created\n   * due to a parse error, and you do not catch it (it gets thrown\n   * from the parser), then this method is called during the printing\n   * of the final stack trace, and hence the correct error message\n   * gets displayed.\n   */\n  private static String initialise(Token currentToken, int[][] expectedTokenSequences, String[] tokenImage) {\n     String eol = System.getProperty(\"line.separator\", \"n\");\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}