{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#mergeWith(Elevation).mjava","commits":[{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#mergeWith(Elevation).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Merges this {@link Elevation} with another and creates a new {@link Elevation}.\n\n     * @return A new instance containing the merging of the two elevations; or directly this elevation if the other\n     *         is <code>null</code>.\n     */\n    protected Elevation mergeWith(Elevation elevation) {\n      if (elevation == null) {\n        return this;\n      }\n      Set<BytesRef> elevatedIds = ImmutableSet.<BytesRef>builder().addAll(this.elevatedIds).addAll(elevation.elevatedIds).build();\n      boolean overlappingElevatedIds = elevatedIds.size() != (this.elevatedIds.size() + elevation.elevatedIds.size());\n      BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n      Set<BooleanClause> clauseSet = (overlappingElevatedIds ? Sets.newHashSetWithExpectedSize(elevatedIds.size()) : null);\n      for (BooleanClause clause : this.includeQuery.clauses()) {\n        if (!overlappingElevatedIds || clauseSet.add(clause)) {\n          includeQueryBuilder.add(clause);\n        }\n      }\n      for (BooleanClause clause : elevation.includeQuery.clauses()) {\n        if (!overlappingElevatedIds || clauseSet.add(clause)) {\n          includeQueryBuilder.add(clause);\n        }\n      }\n      Set<BytesRef> excludedIds = ImmutableSet.<BytesRef>builder().addAll(this.excludedIds).addAll(elevation.excludedIds).build();\n      TermQuery[] excludeQueries;\n      if (this.excludeQueries == null) {\n        excludeQueries = elevation.excludeQueries;\n      } else if (elevation.excludeQueries == null) {\n        excludeQueries = this.excludeQueries;\n      } else {\n        boolean overlappingExcludedIds = excludedIds.size() != (this.excludedIds.size() + elevation.excludedIds.size());\n        if (overlappingExcludedIds) {\n          excludeQueries = ImmutableSet.<TermQuery>builder().add(this.excludeQueries).add(elevation.excludeQueries)\n              .build().toArray(new TermQuery[0]);\n        } else {\n          excludeQueries = ObjectArrays.concat(this.excludeQueries, elevation.excludeQueries, TermQuery.class);\n        }\n      }\n      return new Elevation(elevatedIds, includeQueryBuilder.build(), excludedIds, excludeQueries);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#mergeWith(Elevation).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Merges this {@link Elevation} with another and creates a new {@link Elevation}.\n\n     * @return A new instance containing the merging of the two elevations; or directly this elevation if the other\n     *         is <code>null</code>.\n     */\n    protected Elevation mergeWith(Elevation elevation) {\n      if (elevation == null) {\n        return this;\n      }\n      Set<BytesRef> elevatedIds = ImmutableSet.<BytesRef>builder().addAll(this.elevatedIds).addAll(elevation.elevatedIds).build();\n      boolean overlappingElevatedIds = elevatedIds.size() != (this.elevatedIds.size() + elevation.elevatedIds.size());\n      BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n      Set<BooleanClause> clauseSet = (overlappingElevatedIds ? Sets.newHashSetWithExpectedSize(elevatedIds.size()) : null);\n      for (BooleanClause clause : this.includeQuery.clauses()) {\n        if (!overlappingElevatedIds || clauseSet.add(clause)) {\n          includeQueryBuilder.add(clause);\n        }\n      }\n      for (BooleanClause clause : elevation.includeQuery.clauses()) {\n        if (!overlappingElevatedIds || clauseSet.add(clause)) {\n          includeQueryBuilder.add(clause);\n        }\n      }\n      Set<BytesRef> excludedIds = ImmutableSet.<BytesRef>builder().addAll(this.excludedIds).addAll(elevation.excludedIds).build();\n      TermQuery[] excludeQueries;\n      if (this.excludeQueries == null) {\n        excludeQueries = elevation.excludeQueries;\n      } else if (elevation.excludeQueries == null) {\n        excludeQueries = this.excludeQueries;\n      } else {\n        boolean overlappingExcludedIds = excludedIds.size() != (this.excludedIds.size() + elevation.excludedIds.size());\n        if (overlappingExcludedIds) {\n          excludeQueries = ImmutableSet.<TermQuery>builder().add(this.excludeQueries).add(elevation.excludeQueries)\n              .build().toArray(new TermQuery[0]);\n        } else {\n          excludeQueries = ObjectArrays.concat(this.excludeQueries, elevation.excludeQueries, TermQuery.class);\n        }\n      }\n      return new Elevation(elevatedIds, includeQueryBuilder.build(), excludedIds, excludeQueries);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6046c615b67e878b7c0ab9257d01dd759493f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}