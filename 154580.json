{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    storePayloads = indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS && fieldInfo.hasPayloads();\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    storePayloads = indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS && fieldInfo.hasPayloads();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    storePayloads = indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS && fieldInfo.hasPayloads();\n    lastPayloadFP = 0;\n    lastSkipFP = 0;\n    lastState = setEmptyState();\n    return 0;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    storePayloads = indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS && fieldInfo.hasPayloads();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    storePayloads = indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS && fieldInfo.hasPayloads();\n    lastPayloadFP = 0;\n    lastSkipFP = 0;\n    lastState = setEmptyState();\n    return 0;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    storePayloads = indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS && fieldInfo.hasPayloads();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    lastPayloadFP = 0;\n    lastSkipFP = 0;\n    lastState = setEmptyState();\n    return 0;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    this.fieldInfo = fieldInfo;\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    storePayloads = indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS && fieldInfo.hasPayloads();\n    lastPayloadFP = 0;\n    lastSkipFP = 0;\n    lastState = setEmptyState();\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    lastPayloadFP = 0;\n    lastSkipFP = 0;\n    lastState = setEmptyState();\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#setField(FieldInfo).mjava","sourceNew":null,"sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    this.indexOptions = fieldInfo.getIndexOptions();\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n    }\n    skipListWriter.setIndexOptions(indexOptions);\n    lastPayloadFP = 0;\n    lastSkipFP = 0;\n    lastState = setEmptyState();\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}