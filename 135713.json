{"path":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = merger.createCompoundFile(merged + \".cfs\", info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(true, si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(true, si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = SegmentReader.get(si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = SegmentReader.get(si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#merge(Directory,SegmentInfo,SegmentInfo,String,boolean).mjava","sourceNew":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","sourceOld":"   private SegmentInfo merge(Directory dir, SegmentInfo si1, SegmentInfo si2, String merged, boolean useCompoundFile)\n   throws Exception {\n      IOContext context = newIOContext(random);\n      SegmentReader r1 = new SegmentReader(si1, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n      SegmentReader r2 = new SegmentReader(si2, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, context);\n\n      final Codec codec = Codec.getDefault();\n      SegmentMerger merger = new SegmentMerger(InfoStream.getDefault(), si1.dir, IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, merged, MergeState.CheckAbort.NONE, null, new FieldInfos(new FieldInfos.FieldNumberBiMap()), codec, context);\n\n      merger.add(r1);\n      merger.add(r2);\n      MergeState mergeState = merger.merge();\n      r1.close();\n      r2.close();\n      final FieldInfos fieldInfos =  mergeState.fieldInfos;\n      final SegmentInfo info = new SegmentInfo(merged, si1.docCount + si2.docCount, si1.dir,\n                                               false, codec, fieldInfos);\n      \n      if (useCompoundFile) {\n        Collection<String> filesToDelete = IndexWriter.createCompoundFile(dir, merged + \".cfs\", MergeState.CheckAbort.NONE, info, newIOContext(random));\n        info.setUseCompoundFile(true);\n        for (final String fileToDelete : filesToDelete) \n          si1.dir.deleteFile(fileToDelete);\n      }\n\n      return info;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ce667c6d3400b22523701c549c0d35e26da8b46","868186558eb3a854ce7e720a52bb445795d54910"],"868186558eb3a854ce7e720a52bb445795d54910":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}