{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#execute().mjava","commits":[{"id":"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1","date":1380909825,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#execute().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Execute the task.\n   */\n  @Override\n  public void execute() throws BuildException {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    int errors = verifySortedCentralizedVersionsFile() ? 0 : 1;\n    int checked = 0;\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>)ivyXmlResources.iterator();\n    while (iter.hasNext()) {\n      final Resource resource = iter.next();\n      if ( ! resource.isExists()) {\n        throw new BuildException(\"Resource does not exist: \" + resource.getName());\n      }\n      if ( ! (resource instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resources are supported: \" \n            + resource.getName() + \", was: \" + resource.getClass().getName());\n      }\n\n      File ivyXmlFile = ((FileResource)resource).getFile();\n      try {\n        if ( ! checkIvyXmlFile(ivyXmlFile) ) {\n          failures = true;\n          errors++;\n        }\n      } catch (Exception e) {\n        throw new BuildException(\"Exception reading file \" + ivyXmlFile.getPath(), e);\n      }\n      checked++;\n    }\n    log(\"Checking for orphans in \" + centralizedVersionsFile.getName(), verboseLevel);\n    for (Map.Entry<String,Boolean> entry : referencedCoordinateKeys.entrySet()) {\n      String coordinateKey = entry.getKey();\n      boolean isReferenced = entry.getValue();\n      if ( ! isReferenced) {\n        log(\"ORPHAN coordinate key '\" + coordinateKey + \"' in \" + centralizedVersionsFile.getName()\n            + \" is not found in any \" + IVY_XML_FILENAME + \" file.\",\n            Project.MSG_ERR);\n        failures = true;\n        errors++;\n      }\n    }\n\n    log(String.format(Locale.ROOT, \"Checked that %s has lexically sorted \"\n        + \"'/org/name' keys and no duplicates or orphans, and scanned %d %s \"\n        + \"file(s) for rev=\\\"${/org/name}\\\" format (in %.2fs.), %d error(s).\",\n        centralizedVersionsFile.getName(), checked, IVY_XML_FILENAME, \n        (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n\n    if (failures) {\n      throw new BuildException(\"Lib versions check failed. Check the logs.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#execute().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#execute().mjava","sourceNew":"  /**\n   * Execute the task.\n   */\n  @Override\n  public void execute() throws BuildException {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    setupIvy();\n\n    int numErrors = 0;\n    if ( ! verifySortedCoordinatesPropertiesFile(centralizedVersionsFile)) {\n      ++numErrors;\n    }\n    if ( ! verifySortedCoordinatesPropertiesFile(ignoreConflictsFile)) {\n      ++numErrors;\n    }\n    collectDirectDependencies();\n    if ( ! collectVersionConflictsToIgnore()) {\n      ++numErrors;\n    }\n\n    int numChecked = 0;\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>)ivyXmlResources.iterator();\n    while (iter.hasNext()) {\n      final Resource resource = iter.next();\n      if ( ! resource.isExists()) {\n        throw new BuildException(\"Resource does not exist: \" + resource.getName());\n      }\n      if ( ! (resource instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resources are supported: \" \n            + resource.getName() + \", was: \" + resource.getClass().getName());\n      }\n\n      File ivyXmlFile = ((FileResource)resource).getFile();\n      try {\n        if ( ! checkIvyXmlFile(ivyXmlFile)) {\n          ++numErrors;\n        }\n        if ( ! resolveTransitively(ivyXmlFile)) {\n          ++numErrors;\n        }\n      } catch (Exception e) {\n        throw new BuildException(\"Exception reading file \" + ivyXmlFile.getPath() + \" - \" + e.toString(), e);\n      }\n      ++numChecked;\n    }\n\n    log(\"Checking for orphans in \" + centralizedVersionsFile.getName(), verboseLevel);\n    for (Map.Entry<String,Versions> entry : directDependencies.entrySet()) {\n      String coordinateKey = entry.getKey();\n      if ( ! entry.getValue().directlyReferenced) {\n        log(\"ORPHAN coordinate key '\" + coordinateKey + \"' in \" + centralizedVersionsFile.getName()\n            + \" is not found in any \" + IVY_XML_FILENAME + \" file.\",\n            Project.MSG_ERR);\n        ++numErrors;\n      }\n    }\n\n    int numConflicts = emitConflicts();\n\n    int messageLevel = numErrors > 0 ? Project.MSG_ERR : Project.MSG_INFO;\n    log(\"Checked that \" + centralizedVersionsFile.getName() + \" and \" + ignoreConflictsFile.getName()\n        + \" have lexically sorted '/org/name' keys and no duplicates or orphans.\",\n        messageLevel);\n    log(\"Scanned \" + numChecked + \" \" + IVY_XML_FILENAME + \" files for rev=\\\"${/org/name}\\\" format.\",\n        messageLevel);\n    log(\"Found \" + numConflicts + \" indirect dependency version conflicts.\");\n    log(String.format(Locale.ROOT, \"Completed in %.2fs., %d error(s).\",\n                      (System.currentTimeMillis() - start) / 1000.0, numErrors),\n        messageLevel);\n\n    if (numConflicts > 0 || numErrors > 0) {\n      throw new BuildException(\"Lib versions check failed. Check the logs.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Execute the task.\n   */\n  @Override\n  public void execute() throws BuildException {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    int errors = verifySortedCentralizedVersionsFile() ? 0 : 1;\n    int checked = 0;\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>)ivyXmlResources.iterator();\n    while (iter.hasNext()) {\n      final Resource resource = iter.next();\n      if ( ! resource.isExists()) {\n        throw new BuildException(\"Resource does not exist: \" + resource.getName());\n      }\n      if ( ! (resource instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resources are supported: \" \n            + resource.getName() + \", was: \" + resource.getClass().getName());\n      }\n\n      File ivyXmlFile = ((FileResource)resource).getFile();\n      try {\n        if ( ! checkIvyXmlFile(ivyXmlFile) ) {\n          failures = true;\n          errors++;\n        }\n      } catch (Exception e) {\n        throw new BuildException(\"Exception reading file \" + ivyXmlFile.getPath(), e);\n      }\n      checked++;\n    }\n    log(\"Checking for orphans in \" + centralizedVersionsFile.getName(), verboseLevel);\n    for (Map.Entry<String,Boolean> entry : referencedCoordinateKeys.entrySet()) {\n      String coordinateKey = entry.getKey();\n      boolean isReferenced = entry.getValue();\n      if ( ! isReferenced) {\n        log(\"ORPHAN coordinate key '\" + coordinateKey + \"' in \" + centralizedVersionsFile.getName()\n            + \" is not found in any \" + IVY_XML_FILENAME + \" file.\",\n            Project.MSG_ERR);\n        failures = true;\n        errors++;\n      }\n    }\n\n    log(String.format(Locale.ROOT, \"Checked that %s has lexically sorted \"\n        + \"'/org/name' keys and no duplicates or orphans, and scanned %d %s \"\n        + \"file(s) for rev=\\\"${/org/name}\\\" format (in %.2fs.), %d error(s).\",\n        centralizedVersionsFile.getName(), checked, IVY_XML_FILENAME, \n        (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n\n    if (failures) {\n      throw new BuildException(\"Lib versions check failed. Check the logs.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151d28379beec3adbc4c091c633cb33e496a2de3","date":1401909314,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#execute().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#execute().mjava","sourceNew":"  /**\n   * Execute the task.\n   */\n  @Override\n  public void execute() throws BuildException {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    setupIvy();\n\n    int numErrors = 0;\n    if ( ! verifySortedCoordinatesPropertiesFile(centralizedVersionsFile)) {\n      ++numErrors;\n    }\n    if ( ! verifySortedCoordinatesPropertiesFile(ignoreConflictsFile)) {\n      ++numErrors;\n    }\n    collectDirectDependencies();\n    if ( ! collectVersionConflictsToIgnore()) {\n      ++numErrors;\n    }\n\n    int numChecked = 0;\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>)ivyXmlResources.iterator();\n    while (iter.hasNext()) {\n      final Resource resource = iter.next();\n      if ( ! resource.isExists()) {\n        throw new BuildException(\"Resource does not exist: \" + resource.getName());\n      }\n      if ( ! (resource instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resources are supported: \" \n            + resource.getName() + \", was: \" + resource.getClass().getName());\n      }\n\n      File ivyXmlFile = ((FileResource)resource).getFile();\n      try {\n        if ( ! checkIvyXmlFile(ivyXmlFile)) {\n          ++numErrors;\n        }\n        if ( ! resolveTransitively(ivyXmlFile)) {\n          ++numErrors;\n        }\n        if ( ! findLatestConflictVersions()) {\n          ++numErrors;\n        }\n      } catch (Exception e) {\n        throw new BuildException(\"Exception reading file \" + ivyXmlFile.getPath() + \" - \" + e.toString(), e);\n      }\n      ++numChecked;\n    }\n\n    log(\"Checking for orphans in \" + centralizedVersionsFile.getName(), verboseLevel);\n    for (Map.Entry<String,Dependency> entry : directDependencies.entrySet()) {\n      String coordinateKey = entry.getKey();\n      if ( ! entry.getValue().directlyReferenced) {\n        log(\"ORPHAN coordinate key '\" + coordinateKey + \"' in \" + centralizedVersionsFile.getName()\n            + \" is not found in any \" + IVY_XML_FILENAME + \" file.\",\n            Project.MSG_ERR);\n        ++numErrors;\n      }\n    }\n\n    int numConflicts = emitConflicts();\n\n    int messageLevel = numErrors > 0 ? Project.MSG_ERR : Project.MSG_INFO;\n    log(\"Checked that \" + centralizedVersionsFile.getName() + \" and \" + ignoreConflictsFile.getName()\n        + \" have lexically sorted '/org/name' keys and no duplicates or orphans.\",\n        messageLevel);\n    log(\"Scanned \" + numChecked + \" \" + IVY_XML_FILENAME + \" files for rev=\\\"${/org/name}\\\" format.\",\n        messageLevel);\n    log(\"Found \" + numConflicts + \" indirect dependency version conflicts.\");\n    log(String.format(Locale.ROOT, \"Completed in %.2fs., %d error(s).\",\n                      (System.currentTimeMillis() - start) / 1000.0, numErrors),\n        messageLevel);\n\n    if (numConflicts > 0 || numErrors > 0) {\n      throw new BuildException(\"Lib versions check failed. Check the logs.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Execute the task.\n   */\n  @Override\n  public void execute() throws BuildException {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    setupIvy();\n\n    int numErrors = 0;\n    if ( ! verifySortedCoordinatesPropertiesFile(centralizedVersionsFile)) {\n      ++numErrors;\n    }\n    if ( ! verifySortedCoordinatesPropertiesFile(ignoreConflictsFile)) {\n      ++numErrors;\n    }\n    collectDirectDependencies();\n    if ( ! collectVersionConflictsToIgnore()) {\n      ++numErrors;\n    }\n\n    int numChecked = 0;\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>)ivyXmlResources.iterator();\n    while (iter.hasNext()) {\n      final Resource resource = iter.next();\n      if ( ! resource.isExists()) {\n        throw new BuildException(\"Resource does not exist: \" + resource.getName());\n      }\n      if ( ! (resource instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resources are supported: \" \n            + resource.getName() + \", was: \" + resource.getClass().getName());\n      }\n\n      File ivyXmlFile = ((FileResource)resource).getFile();\n      try {\n        if ( ! checkIvyXmlFile(ivyXmlFile)) {\n          ++numErrors;\n        }\n        if ( ! resolveTransitively(ivyXmlFile)) {\n          ++numErrors;\n        }\n      } catch (Exception e) {\n        throw new BuildException(\"Exception reading file \" + ivyXmlFile.getPath() + \" - \" + e.toString(), e);\n      }\n      ++numChecked;\n    }\n\n    log(\"Checking for orphans in \" + centralizedVersionsFile.getName(), verboseLevel);\n    for (Map.Entry<String,Versions> entry : directDependencies.entrySet()) {\n      String coordinateKey = entry.getKey();\n      if ( ! entry.getValue().directlyReferenced) {\n        log(\"ORPHAN coordinate key '\" + coordinateKey + \"' in \" + centralizedVersionsFile.getName()\n            + \" is not found in any \" + IVY_XML_FILENAME + \" file.\",\n            Project.MSG_ERR);\n        ++numErrors;\n      }\n    }\n\n    int numConflicts = emitConflicts();\n\n    int messageLevel = numErrors > 0 ? Project.MSG_ERR : Project.MSG_INFO;\n    log(\"Checked that \" + centralizedVersionsFile.getName() + \" and \" + ignoreConflictsFile.getName()\n        + \" have lexically sorted '/org/name' keys and no duplicates or orphans.\",\n        messageLevel);\n    log(\"Scanned \" + numChecked + \" \" + IVY_XML_FILENAME + \" files for rev=\\\"${/org/name}\\\" format.\",\n        messageLevel);\n    log(\"Found \" + numConflicts + \" indirect dependency version conflicts.\");\n    log(String.format(Locale.ROOT, \"Completed in %.2fs., %d error(s).\",\n                      (System.currentTimeMillis() - start) / 1000.0, numErrors),\n        messageLevel);\n\n    if (numConflicts > 0 || numErrors > 0) {\n      throw new BuildException(\"Lib versions check failed. Check the logs.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#execute().mjava","sourceNew":null,"sourceOld":"  /**\n   * Execute the task.\n   */\n  @Override\n  public void execute() throws BuildException {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    setupIvy();\n\n    int numErrors = 0;\n    if ( ! verifySortedCoordinatesPropertiesFile(centralizedVersionsFile)) {\n      ++numErrors;\n    }\n    if ( ! verifySortedCoordinatesPropertiesFile(ignoreConflictsFile)) {\n      ++numErrors;\n    }\n    collectDirectDependencies();\n    if ( ! collectVersionConflictsToIgnore()) {\n      ++numErrors;\n    }\n\n    int numChecked = 0;\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>)ivyXmlResources.iterator();\n    while (iter.hasNext()) {\n      final Resource resource = iter.next();\n      if ( ! resource.isExists()) {\n        throw new BuildException(\"Resource does not exist: \" + resource.getName());\n      }\n      if ( ! (resource instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resources are supported: \" \n            + resource.getName() + \", was: \" + resource.getClass().getName());\n      }\n\n      File ivyXmlFile = ((FileResource)resource).getFile();\n      try {\n        if ( ! checkIvyXmlFile(ivyXmlFile)) {\n          ++numErrors;\n        }\n        if ( ! resolveTransitively(ivyXmlFile)) {\n          ++numErrors;\n        }\n        if ( ! findLatestConflictVersions()) {\n          ++numErrors;\n        }\n      } catch (Exception e) {\n        throw new BuildException(\"Exception reading file \" + ivyXmlFile.getPath() + \" - \" + e.toString(), e);\n      }\n      ++numChecked;\n    }\n\n    log(\"Checking for orphans in \" + centralizedVersionsFile.getName(), verboseLevel);\n    for (Map.Entry<String,Dependency> entry : directDependencies.entrySet()) {\n      String coordinateKey = entry.getKey();\n      if ( ! entry.getValue().directlyReferenced) {\n        log(\"ORPHAN coordinate key '\" + coordinateKey + \"' in \" + centralizedVersionsFile.getName()\n            + \" is not found in any \" + IVY_XML_FILENAME + \" file.\",\n            Project.MSG_ERR);\n        ++numErrors;\n      }\n    }\n\n    int numConflicts = emitConflicts();\n\n    int messageLevel = numErrors > 0 ? Project.MSG_ERR : Project.MSG_INFO;\n    log(\"Checked that \" + centralizedVersionsFile.getName() + \" and \" + ignoreConflictsFile.getName()\n        + \" have lexically sorted '/org/name' keys and no duplicates or orphans.\",\n        messageLevel);\n    log(\"Scanned \" + numChecked + \" \" + IVY_XML_FILENAME + \" files for rev=\\\"${/org/name}\\\" format.\",\n        messageLevel);\n    log(\"Found \" + numConflicts + \" indirect dependency version conflicts.\");\n    log(String.format(Locale.ROOT, \"Completed in %.2fs., %d error(s).\",\n                      (System.currentTimeMillis() - start) / 1000.0, numErrors),\n        messageLevel);\n\n    if (numConflicts > 0 || numErrors > 0) {\n      throw new BuildException(\"Lib versions check failed. Check the logs.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151d28379beec3adbc4c091c633cb33e496a2de3":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["151d28379beec3adbc4c091c633cb33e496a2de3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["f36164b70e3e1719b71a2bd8e1ab09d551d6ada1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"151d28379beec3adbc4c091c633cb33e496a2de3":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f36164b70e3e1719b71a2bd8e1ab09d551d6ada1"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["151d28379beec3adbc4c091c633cb33e496a2de3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}