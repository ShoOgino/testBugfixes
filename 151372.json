{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","commits":[{"id":"7f351d299ea258483e82449dc6e79878d4b21185","date":1374759612,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name));\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name));\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, reader, reader.getSortedNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","sourceNew":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, reader, reader.getSortedNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDocValues(FieldInfo,AtomicReader,PrintStream,DocValuesStatus).mjava","sourceNew":null,"sourceOld":"  private static void checkDocValues(FieldInfo fi, AtomicReader reader, PrintStream infoStream, DocValuesStatus status) throws Exception {\n    Bits docsWithField = reader.getDocsWithField(fi.name);\n    if (docsWithField == null) {\n      throw new RuntimeException(fi.name + \" docsWithField does not exist\");\n    } else if (docsWithField.length() != reader.maxDoc()) {\n      throw new RuntimeException(fi.name + \" docsWithField has incorrect length: \" + docsWithField.length() + \",expected: \" + reader.maxDoc());\n    }\n    switch(fi.getDocValuesType()) {\n      case SORTED:\n        status.totalSortedFields++;\n        checkSortedDocValues(fi.name, reader, reader.getSortedDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_NUMERIC:\n        status.totalSortedNumericFields++;\n        checkSortedNumericDocValues(fi.name, reader, reader.getSortedNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case SORTED_SET:\n        status.totalSortedSetFields++;\n        checkSortedSetDocValues(fi.name, reader, reader.getSortedSetDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case BINARY:\n        status.totalBinaryFields++;\n        checkBinaryDocValues(fi.name, reader, reader.getBinaryDocValues(fi.name), docsWithField);\n        if (reader.getNumericDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      case NUMERIC:\n        status.totalNumericFields++;\n        checkNumericDocValues(fi.name, reader, reader.getNumericDocValues(fi.name), docsWithField);\n        if (reader.getBinaryDocValues(fi.name) != null ||\n            reader.getSortedDocValues(fi.name) != null ||\n            reader.getSortedNumericDocValues(fi.name) != null ||\n            reader.getSortedSetDocValues(fi.name) != null) {\n          throw new RuntimeException(fi.name + \" returns multiple docvalues types!\");\n        }\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["7f351d299ea258483e82449dc6e79878d4b21185"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["7f351d299ea258483e82449dc6e79878d4b21185","9faa42f41b6adb98daf009cf99a4ee239189e469"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"7f351d299ea258483e82449dc6e79878d4b21185":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","7f351d299ea258483e82449dc6e79878d4b21185"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f351d299ea258483e82449dc6e79878d4b21185":["9faa42f41b6adb98daf009cf99a4ee239189e469","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}