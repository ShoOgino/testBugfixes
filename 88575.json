{"path":"solr/solrj/src/java/org/apache/solr/common/util/ValidatingJsonMap#getDeepCopy(Map,int,boolean).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ValidatingJsonMap#getDeepCopy(Map,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static ValidatingJsonMap getDeepCopy(Map map, int maxDepth, boolean mutable) {\n    if (map == null) return null;\n    if (maxDepth < 1) return ValidatingJsonMap.wrap(map);\n    ValidatingJsonMap copy = mutable ? new ValidatingJsonMap(map.size()) : new ValidatingJsonMap();\n    for (Object o : map.entrySet()) {\n      Map.Entry<String, Object> e = (Entry<String, Object>) o;\n      Object v = e.getValue();\n      if (v instanceof Map) v = getDeepCopy((Map) v, maxDepth - 1, mutable);\n      else if (v instanceof Collection) v = getDeepCopy((Collection) v, maxDepth - 1, mutable);\n      copy.put(e.getKey(), v);\n    }\n    return mutable ? copy : new ValidatingJsonMap(Collections.unmodifiableMap(copy));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ValidatingJsonMap#getDeepCopy(Map,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static ValidatingJsonMap getDeepCopy(Map map, int maxDepth, boolean mutable) {\n    if (map == null) return null;\n    if (maxDepth < 1) return ValidatingJsonMap.wrap(map);\n    ValidatingJsonMap copy = mutable ? new ValidatingJsonMap(map.size()) : new ValidatingJsonMap();\n    for (Object o : map.entrySet()) {\n      Map.Entry<String, Object> e = (Entry<String, Object>) o;\n      Object v = e.getValue();\n      if (v instanceof Map) v = getDeepCopy((Map) v, maxDepth - 1, mutable);\n      else if (v instanceof Collection) v = getDeepCopy((Collection) v, maxDepth - 1, mutable);\n      copy.put(e.getKey(), v);\n    }\n    return mutable ? copy : new ValidatingJsonMap(Collections.unmodifiableMap(copy));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ValidatingJsonMap#getDeepCopy(Map,int,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ValidatingJsonMap#getDeepCopy(Map,int,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static ValidatingJsonMap getDeepCopy(Map map, int maxDepth, boolean mutable) {\n    if (map == null) return null;\n    if (maxDepth < 1) return ValidatingJsonMap.wrap(map);\n    ValidatingJsonMap copy = mutable ? new ValidatingJsonMap(map.size()) : new ValidatingJsonMap();\n    for (Object o : map.entrySet()) {\n      Map.Entry<String, Object> e = (Entry<String, Object>) o;\n      Object v = e.getValue();\n      if (v instanceof Map) v = getDeepCopy((Map) v, maxDepth - 1, mutable);\n      else if (v instanceof Collection) v = getDeepCopy((Collection) v, maxDepth - 1, mutable);\n      copy.put(e.getKey(), v);\n    }\n    return mutable ? copy : new ValidatingJsonMap(Collections.unmodifiableMap(copy));\n  }\n\n","sourceOld":"  public static ValidatingJsonMap getDeepCopy(Map map, int maxDepth, boolean mutable) {\n    if (map == null) return null;\n    if (maxDepth < 1) return ValidatingJsonMap.wrap(map);\n    ValidatingJsonMap copy = mutable ? new ValidatingJsonMap(map.size()) : new ValidatingJsonMap();\n    for (Object o : map.entrySet()) {\n      Map.Entry<String, Object> e = (Entry<String, Object>) o;\n      Object v = e.getValue();\n      if (v instanceof Map) v = getDeepCopy((Map) v, maxDepth - 1, mutable);\n      else if (v instanceof Collection) v = getDeepCopy((Collection) v, maxDepth - 1, mutable);\n      copy.put(e.getKey(), v);\n    }\n    return mutable ? copy : new ValidatingJsonMap(Collections.unmodifiableMap(copy));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}