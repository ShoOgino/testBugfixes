{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","commits":[{"id":"12cb83a3f761dc612e1ece020f46e1886fc2550e","date":1495722768,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72dc84475e6ad3fd8951c733b6e17916c03cd574","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Empirical dist expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40f06aec8ac912d126c71c7e9d6065ed70aa9c65","date":1501530021,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    Map map = new HashMap();\n    StatisticalSummary statisticalSummary = empiricalDistribution.getSampleStats();\n\n    map.put(\"max\", statisticalSummary.getMax());\n    map.put(\"mean\", statisticalSummary.getMean());\n    map.put(\"min\", statisticalSummary.getMin());\n    map.put(\"stdev\", statisticalSummary.getStandardDeviation());\n    map.put(\"sum\", statisticalSummary.getSum());\n    map.put(\"N\", statisticalSummary.getN());\n    map.put(\"var\", statisticalSummary.getVariance());\n\n    return new EmpiricalDistributionTuple(empiricalDistribution, column1, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    return empiricalDistribution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    return empiricalDistribution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    Arrays.sort(column1);\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    empiricalDistribution.load(column1);\n\n    return empiricalDistribution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65","ba1e7de64990e3928b90142a52fb92eeff556475"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["12cb83a3f761dc612e1ece020f46e1886fc2550e"],"ba1e7de64990e3928b90142a52fb92eeff556475":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["28288370235ed02234a64753cdbf0c6ec096304a"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"28288370235ed02234a64753cdbf0c6ec096304a":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12cb83a3f761dc612e1ece020f46e1886fc2550e","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}