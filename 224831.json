{"path":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory#getWrappedMergePolicy().mjava","commits":[{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory#getWrappedMergePolicy().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an instance of the wrapped {@link MergePolicy} after it has been configured with all set parameters. */\n  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs});\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b531d6853cf691cd84ab58193ce7a89a424289e","date":1455121686,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory#getWrappedMergePolicy().mjava","pathOld":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory#getWrappedMergePolicy().mjava","sourceNew":"  /** Returns an instance of the wrapped {@link MergePolicy} after it has been configured with all set parameters. */\n  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /** Returns an instance of the wrapped {@link MergePolicy} after it has been configured with all set parameters. */\n  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs});\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9abf799bced7394515f650212c0d7a685c716d65","date":1455143055,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory#getWrappedMergePolicy().mjava","pathOld":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory#getWrappedMergePolicy().mjava","sourceNew":"  /** Returns an instance of the wrapped {@link MergePolicy} after it has been configured with all set parameters. */\n  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /** Returns an instance of the wrapped {@link MergePolicy} after it has been configured with all set parameters. */\n  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final String className = (String) wrappedMergePolicyArgs.remove(CLASS);\n    if (className == null) {\n      throw new IllegalArgumentException(\"Class name not defined for wrapped MergePolicyFactory!\");\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        className,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory#getWrappedMergePolicy().mjava","pathOld":"solr/core/src/java/org/apache/solr/index/WrapperMergePolicyFactory#getWrappedMergePolicy().mjava","sourceNew":"  /** Returns an instance of the wrapped {@link MergePolicy} after it has been configured with all set parameters. */\n  @SuppressWarnings({\"rawtypes\"})\n  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n\n","sourceOld":"  /** Returns an instance of the wrapped {@link MergePolicy} after it has been configured with all set parameters. */\n  protected final MergePolicy getWrappedMergePolicy() {\n    if (wrappedMergePolicyArgs == null) {\n      return getDefaultWrappedMergePolicy();\n    }\n\n    final MergePolicyFactory mpf = resourceLoader.newInstance(\n        wrappedMergePolicyClassName,\n        MergePolicyFactory.class,\n        NO_SUB_PACKAGES,\n        new Class[] {SolrResourceLoader.class, MergePolicyFactoryArgs.class, IndexSchema.class},\n        new Object[] {resourceLoader, wrappedMergePolicyArgs, schema});\n    return mpf.getMergePolicy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0b531d6853cf691cd84ab58193ce7a89a424289e":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9abf799bced7394515f650212c0d7a685c716d65":["0b531d6853cf691cd84ab58193ce7a89a424289e"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["9abf799bced7394515f650212c0d7a685c716d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["0b531d6853cf691cd84ab58193ce7a89a424289e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"0b531d6853cf691cd84ab58193ce7a89a424289e":["9abf799bced7394515f650212c0d7a685c716d65"],"9abf799bced7394515f650212c0d7a685c716d65":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}