{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#doTestRandom(int).mjava","commits":[{"id":"6345300cb90308ddf9579f7a7396a32d98795311","date":1533248257,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numShapes = atLeast(count);\n    ShapeType type = getShapeType();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: number of \" + type.name() + \" shapes=\" + numShapes);\n    }\n\n    Object[] shapes = new Object[numShapes];\n    for (int id = 0; id < numShapes; ++id) {\n      int x = randomInt(20);\n      if (x == 17) {\n        shapes[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a new shape\n        shapes[id] = nextShape();\n      }\n    }\n    verify(shapes);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPolygons = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numPolygons=\" + numPolygons);\n    }\n\n    Polygon[] polygons = new Polygon[numPolygons];\n    for (int id = 0; id < numPolygons; ++id) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        polygons[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a polygon that does not cross the dateline\n        polygons[id] = GeoTestUtil.nextPolygon();\n      }\n    }\n    verify(polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"526dad9fa3de8833b14c43b96c2949d29d260dcd","date":1537885580,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#doTestRandom(int).mjava","sourceNew":"  protected void doTestRandom(int count) throws Exception {\n    int numShapes = atLeast(count);\n    ShapeType type = getShapeType();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: number of \" + type.name() + \" shapes=\" + numShapes);\n    }\n\n    Object[] shapes = new Object[numShapes];\n    for (int id = 0; id < numShapes; ++id) {\n      int x = randomInt(20);\n      if (x == 17) {\n        shapes[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a new shape\n        shapes[id] = nextShape();\n      }\n    }\n    verify(shapes);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numShapes = atLeast(count);\n    ShapeType type = getShapeType();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: number of \" + type.name() + \" shapes=\" + numShapes);\n    }\n\n    Object[] shapes = new Object[numShapes];\n    for (int id = 0; id < numShapes; ++id) {\n      int x = randomInt(20);\n      if (x == 17) {\n        shapes[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a new shape\n        shapes[id] = nextShape();\n      }\n    }\n    verify(shapes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb1d3c28af553b906e024a8a705042fa072efbdd","date":1547716211,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#doTestRandom(int).mjava","sourceNew":"  protected void doTestRandom(int count) throws Exception {\n    int numShapes = atLeast(count);\n    ShapeType type = getShapeType();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: number of \" + type.name() + \" shapes=\" + numShapes);\n    }\n\n    Object[] shapes = new Object[numShapes];\n    for (int id = 0; id < numShapes; ++id) {\n      int x = randomIntBetween(0, 20);\n      if (x == 17) {\n        shapes[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a new shape\n        shapes[id] = nextShape();\n      }\n    }\n    verify(shapes);\n  }\n\n","sourceOld":"  protected void doTestRandom(int count) throws Exception {\n    int numShapes = atLeast(count);\n    ShapeType type = getShapeType();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: number of \" + type.name() + \" shapes=\" + numShapes);\n    }\n\n    Object[] shapes = new Object[numShapes];\n    for (int id = 0; id < numShapes; ++id) {\n      int x = randomInt(20);\n      if (x == 17) {\n        shapes[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a new shape\n        shapes[id] = nextShape();\n      }\n    }\n    verify(shapes);\n  }\n\n","bugFix":["6345300cb90308ddf9579f7a7396a32d98795311"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#doTestRandom(int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#doTestRandom(int).mjava","sourceNew":"  protected void doTestRandom(int count) throws Exception {\n    int numShapes = atLeast(count);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: number of \" + getShapeType() + \" shapes=\" + numShapes);\n    }\n\n    Object[] shapes = new Object[numShapes];\n    for (int id = 0; id < numShapes; ++id) {\n      int x = randomIntBetween(0, 20);\n      if (x == 17) {\n        shapes[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a new shape\n        shapes[id] = nextShape();\n      }\n    }\n    verify(shapes);\n  }\n\n","sourceOld":"  protected void doTestRandom(int count) throws Exception {\n    int numShapes = atLeast(count);\n    ShapeType type = getShapeType();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: number of \" + type.name() + \" shapes=\" + numShapes);\n    }\n\n    Object[] shapes = new Object[numShapes];\n    for (int id = 0; id < numShapes; ++id) {\n      int x = randomIntBetween(0, 20);\n      if (x == 17) {\n        shapes[id] = null;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n      } else {\n        // create a new shape\n        shapes[id] = nextShape();\n      }\n    }\n    verify(shapes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1d3c28af553b906e024a8a705042fa072efbdd":["526dad9fa3de8833b14c43b96c2949d29d260dcd"],"526dad9fa3de8833b14c43b96c2949d29d260dcd":["6345300cb90308ddf9579f7a7396a32d98795311"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cb1d3c28af553b906e024a8a705042fa072efbdd"],"6345300cb90308ddf9579f7a7396a32d98795311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"]},"commit2Childs":{"cb1d3c28af553b906e024a8a705042fa072efbdd":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"526dad9fa3de8833b14c43b96c2949d29d260dcd":["cb1d3c28af553b906e024a8a705042fa072efbdd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6345300cb90308ddf9579f7a7396a32d98795311"],"6345300cb90308ddf9579f7a7396a32d98795311":["526dad9fa3de8833b14c43b96c2949d29d260dcd"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}