{"path":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77d924c3b8deab5881ed0d996d597a4ea5bbc40a","date":1316977817,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(\"org.apache.lucene.analysis.core.WhitespaceTokenizer\");\n    assertNotNull(\"Expecting WhitespaceTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":["c6744d321d7fd4ced5c99aeff28c036ac61e2314","9b31138e7b06f84b96de212b2102103cb629ee68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"  whátëvêr  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"  whatever  \", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getLatestSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7043e7411cdd4dbbc872bf9fedd21231168cd5b8","date":1426087141,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getLatestSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ae131ec9cda430231fcefc081a4c4f5d29238ee","date":1426094638,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getLatestSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n\n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getLatestSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n\n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getLatestSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n    \n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCharFilterAnalysis().mjava","sourceNew":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getLatestSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n\n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","sourceOld":"  @Test\n  public void testCharFilterAnalysis() throws Exception {\n\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"charfilthtmlmap\");\n    request.setFieldValue(\"<html><body>whátëvêr</body></html>\");\n    request.setShowMatch(false);\n\n    NamedList<NamedList> result = handler.handleAnalysisRequest(request, h.getCore().getLatestSchema());\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n\n    NamedList<NamedList> fieldTypes = result.get(\"field_types\");\n    assertNotNull(\"field_types should never be null\", fieldTypes);\n    NamedList<NamedList> textType = fieldTypes.get(\"charfilthtmlmap\");\n    assertNotNull(\"expecting result for field type 'charfilthtmlmap'\", textType);\n\n    NamedList indexPart = textType.get(\"index\");\n    assertNotNull(\"expecting an index token analysis for field type 'charfilthtmlmap'\", indexPart);\n\n    assertEquals(\"\\n\\nwhátëvêr\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter\"));\n    assertEquals(\"\\n\\nwhatever\\n\\n\", indexPart.get(\"org.apache.lucene.analysis.charfilter.MappingCharFilter\"));\n\n    List<NamedList> tokenList = (List<NamedList>)indexPart.get(MockTokenizer.class.getName());\n    assertNotNull(\"Expecting MockTokenizer analysis breakdown\", tokenList);\n    assertEquals(tokenList.size(), 1);\n    assertToken(tokenList.get(0), new TokenInfo(\"whatever\", null, \"word\", 12, 20, 1, new int[]{1}, null, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ae131ec9cda430231fcefc081a4c4f5d29238ee":["7043e7411cdd4dbbc872bf9fedd21231168cd5b8"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"77d924c3b8deab5881ed0d996d597a4ea5bbc40a":["c26f00b574427b55127e869b935845554afde1fa"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["77d924c3b8deab5881ed0d996d597a4ea5bbc40a","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["77d924c3b8deab5881ed0d996d597a4ea5bbc40a","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e98520789adb1d5ad05afb4956eca0944a929688":["9ae131ec9cda430231fcefc081a4c4f5d29238ee"],"08970e5b8411182a29412c177eff67ec1110095b":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["08970e5b8411182a29412c177eff67ec1110095b","9ae131ec9cda430231fcefc081a4c4f5d29238ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7043e7411cdd4dbbc872bf9fedd21231168cd5b8":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["77d924c3b8deab5881ed0d996d597a4ea5bbc40a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"9ae131ec9cda430231fcefc081a4c4f5d29238ee":["e98520789adb1d5ad05afb4956eca0944a929688","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c26f00b574427b55127e869b935845554afde1fa":["77d924c3b8deab5881ed0d996d597a4ea5bbc40a"],"77d924c3b8deab5881ed0d996d597a4ea5bbc40a":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7043e7411cdd4dbbc872bf9fedd21231168cd5b8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"7043e7411cdd4dbbc872bf9fedd21231168cd5b8":["9ae131ec9cda430231fcefc081a4c4f5d29238ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","08970e5b8411182a29412c177eff67ec1110095b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}