{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#contains(String,String,boolean).mjava","commits":[{"id":"5963c53b53608d00d165849e6b52e71b0209c9b6","date":1428506893,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#contains(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> if a String contains the given substring. Otherwise\n   * <code>false</code>.\n   *\n   * @param ref\n   *          the {@link String} to test\n   * @param substring\n   *          the substring to look for\n   * @param ignoreCase\n   *          whether the comparison should be case-insensitive\n   * @return Returns <code>true</code> iff the String contains the given substring.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean contains(String ref, String substring, boolean ignoreCase) {\n    if (ignoreCase)\n      return StringUtils.containsIgnoreCase(ref, substring);\n    return StringUtils.contains(ref, substring);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862ed062e72c1c01ecd8593b17804ac02b69cf0e","date":1486641184,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#contains(String,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns <code>true</code> if a String contains the given substring. Otherwise\n   * <code>false</code>.\n   *\n   * @param ref\n   *          the {@link String} to test\n   * @param substring\n   *          the substring to look for\n   * @param ignoreCase\n   *          whether the comparison should be case-insensitive\n   * @return Returns <code>true</code> iff the String contains the given substring.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean contains(String ref, String substring, boolean ignoreCase) {\n    if (ignoreCase)\n      return StringUtils.containsIgnoreCase(ref, substring);\n    return StringUtils.contains(ref, substring);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["5963c53b53608d00d165849e6b52e71b0209c9b6"],"5963c53b53608d00d165849e6b52e71b0209c9b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"]},"commit2Childs":{"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5963c53b53608d00d165849e6b52e71b0209c9b6":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5963c53b53608d00d165849e6b52e71b0209c9b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}