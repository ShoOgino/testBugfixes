{"path":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#encodeLon(double).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#encodeLon(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#encodeLon(double).mjava","sourceNew":"  /** Quantizes double (64 bit) longitude into 32 bits */\n  public static int encodeLon(double lon) {\n    assert GeoUtils.isValidLon(lon): \"lon=\" + lon;\n    long x = (long) (lon * LON_SCALE);\n    assert x < Integer.MAX_VALUE;\n    assert x > Integer.MIN_VALUE;\n    return (int) x;\n  }\n\n","sourceOld":"  /** Quantizes double (64 bit) longitude into 32 bits */\n  static int encodeLon(double lon) {\n    assert validLon(lon): \"lon=\" + lon;\n    long x = (long) (lon * LON_SCALE);\n    // We use Integer.MAX_VALUE as a sentinel:\n    assert x < Integer.MAX_VALUE;\n    assert x > Integer.MIN_VALUE;\n    return (int) x;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLon(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#encodeLon(double).mjava","sourceNew":"  /** Quantizes double (64 bit) longitude into 32 bits */\n  public static int encodeLon(double lon) {\n    assert GeoUtils.isValidLon(lon): \"lon=\" + lon;\n    long x = (long) (lon * LON_SCALE);\n    assert x < Integer.MAX_VALUE;\n    assert x > Integer.MIN_VALUE;\n    return (int) x;\n  }\n\n","sourceOld":"  /** Quantizes double (64 bit) longitude into 32 bits */\n  public static int encodeLon(double lon) {\n    assert GeoUtils.isValidLon(lon): \"lon=\" + lon;\n    long x = (long) (lon * LON_SCALE);\n    assert x < Integer.MAX_VALUE;\n    assert x > Integer.MIN_VALUE;\n    return (int) x;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}