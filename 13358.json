{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n    orig.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","744486748bc5bee772100e49230e5bca39bac99a"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","744486748bc5bee772100e49230e5bca39bac99a"],"744486748bc5bee772100e49230e5bca39bac99a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["744486748bc5bee772100e49230e5bca39bac99a"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","744486748bc5bee772100e49230e5bca39bac99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}