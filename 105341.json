{"path":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","commits":[{"id":"b01431682e11036a1a7d757a3fa7c1f903fb2c45","date":1460646145,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","pathOld":"/dev/null","sourceNew":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon, hit.distanceMeters);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c728c2c4e564b70110b013139d764abe136033f2","date":1460649910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","sourceNew":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon, hit.distanceMeters);\n        //System.out.println(\"    update bbox to \" + box);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","sourceOld":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon, hit.distanceMeters);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","sourceNew":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon, hit.distanceMeters);\n        //System.out.println(\"    update bbox to \" + box);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","sourceOld":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon, hit.distanceMeters);\n        //System.out.println(\"    update bbox to \" + box);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["c728c2c4e564b70110b013139d764abe136033f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c728c2c4e564b70110b013139d764abe136033f2":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["c728c2c4e564b70110b013139d764abe136033f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c728c2c4e564b70110b013139d764abe136033f2":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}