{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n      fail(\"should not have allowed updating an existing field to binary-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","sourceNew":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n      fail(\"should not have allowed updating an existing field to binary-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n      fail(\"should not have allowed updating an existing field to binary-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","sourceNew":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n      fail(\"should not have allowed updating an existing field to binary-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n      fail(\"should not have allowed updating an existing field to binary-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","sourceNew":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n      fail(\"should not have allowed updating an existing field to binary-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n      fail(\"should not have allowed updating an existing field to binary-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateNonBinaryDocValuesField().mjava","sourceNew":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n    });\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateNonBinaryDocValuesField() throws Exception {\n    // we don't support adding new fields or updating existing non-binary-dv\n    // fields through binary updates\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    Document doc = new Document();\n    doc.add(new StringField(\"key\", \"doc\", Store.NO));\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc); // flushed document\n    writer.commit();\n    writer.addDocument(doc); // in-memory document\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"bdv\", toBytes(17L));\n      fail(\"should not have allowed creating new fields through update\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    try {\n      writer.updateBinaryDocValue(new Term(\"key\", \"doc\"), \"foo\", toBytes(17L));\n      fail(\"should not have allowed updating an existing field to binary-dv\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["06805da26538ed636bd89b10c2699cc3834032ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}