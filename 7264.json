{"path":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","commits":[{"id":"76bed23fab69b464e4533b39b120258a5dc5a4b5","date":1357424354,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.ts = ts;\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, int precisionStep, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.precisionStep = precisionStep;\n    this.ts = ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","pathOld":"/dev/null","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.ts = ts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef","date":1363025664,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.ts = ts;\n    // dates tend to be longer, especially when math is involved\n    termAtt.resizeBuffer( type == TrieTypes.DATE ? 128 : 32 );\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.ts = ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91f33e3e71a0020f37f37fddd95cfe1e6d47d922","date":1363115046,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","sourceNew":"  public TrieTokenizer(Reader input, TrieTypes type, final NumericTokenStream ts) {\n    // Häckidy-Hick-Hack: must share the attributes with the NumericTokenStream we delegate to, so we create a fake factory:\n    super(new AttributeFactory() {\n      @Override\n      public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n        return (AttributeImpl) ts.addAttribute(attClass);\n      }\n    }, input);\n    // add all attributes:\n    for (Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator(); it.hasNext();) {\n      addAttribute(it.next());\n    }\n    this.type = type;\n    this.ts = ts;\n    // dates tend to be longer, especially when math is involved\n    termAtt.resizeBuffer( type == TrieTypes.DATE ? 128 : 32 );\n  }\n\n","sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, NumericTokenStream ts) {\n    // must share the attribute source with the NumericTokenStream we delegate to\n    super(ts, input);\n    this.type = type;\n    this.ts = ts;\n    // dates tend to be longer, especially when math is involved\n    termAtt.resizeBuffer( type == TrieTypes.DATE ? 128 : 32 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#TrieTokenizer(Reader,TrieTypes,NumericTokenStream).mjava","sourceNew":null,"sourceOld":"  public TrieTokenizer(Reader input, TrieTypes type, final NumericTokenStream ts) {\n    // Häckidy-Hick-Hack: must share the attributes with the NumericTokenStream we delegate to, so we create a fake factory:\n    super(new AttributeFactory() {\n      @Override\n      public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n        return (AttributeImpl) ts.addAttribute(attClass);\n      }\n    }, input);\n    // add all attributes:\n    for (Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator(); it.hasNext();) {\n      addAttribute(it.next());\n    }\n    this.type = type;\n    this.ts = ts;\n    // dates tend to be longer, especially when math is involved\n    termAtt.resizeBuffer( type == TrieTypes.DATE ? 128 : 32 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["91f33e3e71a0020f37f37fddd95cfe1e6d47d922"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76bed23fab69b464e4533b39b120258a5dc5a4b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91f33e3e71a0020f37f37fddd95cfe1e6d47d922":["d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef"],"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef":["76bed23fab69b464e4533b39b120258a5dc5a4b5"],"76bed23fab69b464e4533b39b120258a5dc5a4b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99c9d8533c954f661481ae44273622957dbf572f"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","76bed23fab69b464e4533b39b120258a5dc5a4b5"],"91f33e3e71a0020f37f37fddd95cfe1e6d47d922":["99c9d8533c954f661481ae44273622957dbf572f"],"76bed23fab69b464e4533b39b120258a5dc5a4b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef"],"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef":["91f33e3e71a0020f37f37fddd95cfe1e6d47d922"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}