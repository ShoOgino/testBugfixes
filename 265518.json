{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws IOException {\n    ensureOpen();\n\n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (catID < 0 || catID >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(catID);\n    synchronized (categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n\n    final LoadFullPathOnly loader = new LoadFullPathOnly();\n    indexReader.document(catID, loader);\n    String ret = loader.getFullPath();\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","sourceNew":"  private String getLabel(int catID) throws IOException {\n    ensureOpen();\n\n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (catID < 0 || catID >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(catID);\n    synchronized (categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n\n    final LoadFullPathOnly loader = new LoadFullPathOnly();\n    indexReader.document(catID, loader);\n    String ret = loader.getFullPath();\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private String getLabel(int catID) throws IOException {\n    ensureOpen();\n    // First try to find the answer in the LRU cache. It is very\n    // unfortunate that we need to allocate an Integer object here -\n    // it would have been better if we used a hash table specifically\n    // designed for int keys...\n    // GB: new Integer(int); creates a new object each and every time.\n    // Integer.valueOf(int) might not (See JavaDoc). \n    Integer catIDInteger = Integer.valueOf(catID);\n\n    synchronized(categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res!=null) {\n        return res;\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    String ret;\n    try {\n      indexReaderLock.readLock().lock();\n      // The taxonomy API dictates that if we get an invalid category\n      // ID, we should return null, If we don't check this here, we\n      // can some sort of an exception from the document() call below.\n      // NOTE: Currently, we *do not* cache this return value; There\n      // isn't much point to do so, because checking the validity of\n      // the docid doesn't require disk access - just comparing with\n      // the number indexReader.maxDoc().\n      if (catID<0 || catID>=indexReader.maxDoc()) {\n        return null;\n      }\n      final LoadFullPathOnly loader = new LoadFullPathOnly();\n      indexReader.document(catID, loader);\n      ret = loader.getFullPath();\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibility, as LRUCache replaces previous\n    // values of the same keys (it doesn't store duplicates).\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","sourceNew":null,"sourceOld":"  private String getLabel(int catID) throws IOException {\n    ensureOpen();\n\n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (catID < 0 || catID >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(catID);\n    synchronized (categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n\n    final LoadFullPathOnly loader = new LoadFullPathOnly();\n    indexReader.document(catID, loader);\n    String ret = loader.getFullPath();\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getLabel(int).mjava","sourceNew":null,"sourceOld":"  private String getLabel(int catID) throws IOException {\n    ensureOpen();\n\n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (catID < 0 || catID >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(catID);\n    synchronized (categoryCache) {\n      String res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n\n    final LoadFullPathOnly loader = new LoadFullPathOnly();\n    indexReader.document(catID, loader);\n    String ret = loader.getFullPath();\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}