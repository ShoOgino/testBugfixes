{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplayVsRecovery#assertDocsExistInBothReplicas(int,int).mjava","commits":[{"id":"df06aa21e6f41b678afd8f30568ebadd781be717","date":1578089543,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplayVsRecovery#assertDocsExistInBothReplicas(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * uses distrib=false RTG requests to verify that every doc between firstDocId and lastDocId \n   * (inclusive) can be found on both the leader and the replica\n   */\n  private void assertDocsExistInBothReplicas(int firstDocId,\n                                             int lastDocId) throws Exception {\n    try (HttpSolrClient leaderSolr = getHttpSolrClient(NODE0.getBaseUrl().toString());\n         HttpSolrClient replicaSolr = getHttpSolrClient(NODE1.getBaseUrl().toString())) {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(\"leader\", leaderSolr, docId);\n        assertDocExists(\"replica\", replicaSolr, docId);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplayVsRecovery#assertDocsExistInBothReplicas(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * uses distrib=false RTG requests to verify that every doc between firstDocId and lastDocId \n   * (inclusive) can be found on both the leader and the replica\n   */\n  private void assertDocsExistInBothReplicas(int firstDocId,\n                                             int lastDocId) throws Exception {\n    try (HttpSolrClient leaderSolr = getHttpSolrClient(NODE0.getBaseUrl().toString());\n         HttpSolrClient replicaSolr = getHttpSolrClient(NODE1.getBaseUrl().toString())) {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n        String docId = String.valueOf(d);\n        assertDocExists(\"leader\", leaderSolr, docId);\n        assertDocExists(\"replica\", replicaSolr, docId);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df06aa21e6f41b678afd8f30568ebadd781be717":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df06aa21e6f41b678afd8f30568ebadd781be717"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df06aa21e6f41b678afd8f30568ebadd781be717"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df06aa21e6f41b678afd8f30568ebadd781be717","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"df06aa21e6f41b678afd8f30568ebadd781be717":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}