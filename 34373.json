{"path":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    IndexSearcher searcher = newSearcher(reader);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperQuery cacher = new CachingWrapperQuery(filter, QueryCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperFilter cacher = new CachingWrapperFilter(filter, FilterCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    DocIdSet strongRef = cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.getDocIdSet(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","pathOld":"/dev/null","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    IndexSearcher searcher = newSearcher(reader);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperQuery cacher = new CachingWrapperQuery(filter, QueryCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    IndexSearcher searcher = newSearcher(reader);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperQuery cacher = new CachingWrapperQuery(filter, QueryCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    cacher.createWeight(searcher, false).scorer(context);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.createWeight(searcher, false).scorer(context);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.createWeight(searcher, false).scorer(context);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    IndexSearcher searcher = newSearcher(reader);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperQuery cacher = new CachingWrapperQuery(filter, QueryCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.createWeight(searcher, false).scorer(context, context.reader().getLiveDocs());\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","sourceNew":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    IndexSearcher searcher = newSearcher(reader);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockQuery filter = new MockQuery();\n    CachingWrapperQuery cacher = new CachingWrapperQuery(filter, QueryCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    cacher.createWeight(searcher, false).scorer(context);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.createWeight(searcher, false).scorer(context);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.createWeight(searcher, false).scorer(context);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    IndexSearcher searcher = newSearcher(reader);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockFilter filter = new MockFilter();\n    CachingWrapperQuery cacher = new CachingWrapperQuery(filter, QueryCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    cacher.createWeight(searcher, false).scorer(context);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.createWeight(searcher, false).scorer(context);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.createWeight(searcher, false).scorer(context);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cfc8e07724f6bd95be343b1c03ae917c9de69cc","date":1446026743,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperQuery#testCachingWorks().mjava","sourceNew":null,"sourceOld":"  public void testCachingWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    IndexSearcher searcher = newSearcher(reader);\n    LeafReaderContext context = (LeafReaderContext) reader.getContext();\n    MockQuery filter = new MockQuery();\n    CachingWrapperQuery cacher = new CachingWrapperQuery(filter, QueryCachingPolicy.ALWAYS_CACHE);\n\n    // first time, nested filter is called\n    cacher.createWeight(searcher, false).scorer(context);\n    assertTrue(\"first time\", filter.wasCalled());\n\n    // make sure no exception if cache is holding the wrong docIdSet\n    cacher.createWeight(searcher, false).scorer(context);\n\n    // second time, nested filter should not be called\n    filter.clear();\n    cacher.createWeight(searcher, false).scorer(context);\n    assertFalse(\"second time\", filter.wasCalled());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"4cfc8e07724f6bd95be343b1c03ae917c9de69cc":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cfc8e07724f6bd95be343b1c03ae917c9de69cc"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["4cfc8e07724f6bd95be343b1c03ae917c9de69cc"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0f4464508ee83288c8c4585b533f9faaa93aa314"],"4cfc8e07724f6bd95be343b1c03ae917c9de69cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}