{"path":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","sourceNew":"  // https://issues.apache.org/jira/browse/LUCENE-5156\n  public void testNoOrds() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"this is a test\", ft));\n    iw.addDocument(doc);\n    LeafReader ir = getOnlySegmentReader(iw.getReader());\n    Terms terms = ir.getTermVector(0, \"foo\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"this\")));\n    try {\n      termsEnum.ord();\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    \n    try {\n      termsEnum.seekExact(0);\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // https://issues.apache.org/jira/browse/LUCENE-5156\n  public void testNoOrds() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"this is a test\", ft));\n    iw.addDocument(doc);\n    LeafReader ir = getOnlySegmentReader(iw.getReader());\n    Terms terms = ir.getTermVector(0, \"foo\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"this\")));\n    try {\n      termsEnum.ord();\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    \n    try {\n      termsEnum.seekExact(0);\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","sourceNew":"  // https://issues.apache.org/jira/browse/LUCENE-5156\n  public void testNoOrds() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"this is a test\", ft));\n    iw.addDocument(doc);\n    LeafReader ir = getOnlyLeafReader(iw.getReader());\n    Terms terms = ir.getTermVector(0, \"foo\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"this\")));\n    try {\n      termsEnum.ord();\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    \n    try {\n      termsEnum.seekExact(0);\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // https://issues.apache.org/jira/browse/LUCENE-5156\n  public void testNoOrds() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"this is a test\", ft));\n    iw.addDocument(doc);\n    LeafReader ir = getOnlySegmentReader(iw.getReader());\n    Terms terms = ir.getTermVector(0, \"foo\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"this\")));\n    try {\n      termsEnum.ord();\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    \n    try {\n      termsEnum.seekExact(0);\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","sourceNew":"  // https://issues.apache.org/jira/browse/LUCENE-5156\n  public void testNoOrds() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"this is a test\", ft));\n    iw.addDocument(doc);\n    LeafReader ir = getOnlyLeafReader(iw.getReader());\n    Terms terms = ir.getTermVector(0, \"foo\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"this\")));\n\n    expectThrows(UnsupportedOperationException.class, termsEnum::ord);\n    expectThrows(UnsupportedOperationException.class, () -> termsEnum.seekExact(0));\n\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // https://issues.apache.org/jira/browse/LUCENE-5156\n  public void testNoOrds() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"this is a test\", ft));\n    iw.addDocument(doc);\n    LeafReader ir = getOnlyLeafReader(iw.getReader());\n    Terms terms = ir.getTermVector(0, \"foo\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"this\")));\n    try {\n      termsEnum.ord();\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    \n    try {\n      termsEnum.seekExact(0);\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingTermVectorsFormat#testNoOrds().mjava","sourceNew":"  // https://issues.apache.org/jira/browse/LUCENE-5156\n  public void testNoOrds() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"this is a test\", ft));\n    iw.addDocument(doc);\n    LeafReader ir = getOnlyLeafReader(iw.getReader());\n    Terms terms = ir.getTermVector(0, \"foo\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"this\")));\n\n    expectThrows(UnsupportedOperationException.class, termsEnum::ord);\n    expectThrows(UnsupportedOperationException.class, () -> termsEnum.seekExact(0));\n\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // https://issues.apache.org/jira/browse/LUCENE-5156\n  public void testNoOrds() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setStoreTermVectors(true);\n    doc.add(new Field(\"foo\", \"this is a test\", ft));\n    iw.addDocument(doc);\n    LeafReader ir = getOnlyLeafReader(iw.getReader());\n    Terms terms = ir.getTermVector(0, \"foo\");\n    assertNotNull(terms);\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(SeekStatus.FOUND, termsEnum.seekCeil(new BytesRef(\"this\")));\n    try {\n      termsEnum.ord();\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    \n    try {\n      termsEnum.seekExact(0);\n      fail();\n    } catch (UnsupportedOperationException expected) {\n      // expected exception\n    }\n    ir.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}