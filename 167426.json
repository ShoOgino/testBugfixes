{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentationNoOriginal().mjava","commits":[{"id":"9dcc09cac106847a24991642f3bb5444c60ddbe7","date":1580536269,"type":0,"author":"Kazuaki Hiraga","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestSearchMode#testSearchSegmentationNoOriginal().mjava","pathOld":"/dev/null","sourceNew":"  public void testSearchSegmentationNoOriginal() throws IOException {\n    InputStream is = TestSearchMode.class.getResourceAsStream(SEGMENTATION_FILENAME);\n    if (is == null) {\n      throw new FileNotFoundException(\"Cannot find \" + SEGMENTATION_FILENAME + \" in test classpath\");\n    }\n    try {\n      LineNumberReader reader = new LineNumberReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"#.*$\", \"\");\n        // Skip empty lines or comment lines\n        if (line.trim().isEmpty()) {\n          continue;\n        }\n        if (VERBOSE) {\n          System.out.println(\"Line no. \" + reader.getLineNumber() + \": \" + line);\n        }\n        String[] fields = line.split(\"\\t\", 2);\n        String sourceText = fields[0];\n        String[] tmpExpectedTokens = fields[1].split(\"\\\\s+\");\n        if (sourceText.equals(\"京都大学硬式野球部\")) {\n          // This is the only case that tokenization result is different from discardCompoundToken=false\n          tmpExpectedTokens[0] = \"京都\";\n          tmpExpectedTokens[1] = \"大学\";\n        }\n\n        List<String> expectedTokenList = new ArrayList<>();\n        for(int tokIDX=0;tokIDX<tmpExpectedTokens.length;tokIDX++) {\n          if (!tmpExpectedTokens[tokIDX].endsWith(\"/0\")) {\n            expectedTokenList.add(tmpExpectedTokens[tokIDX]);\n          }\n        }\n\n        int[] expectedPosIncrs = new int[expectedTokenList.size()];\n        int[] expectedPosLengths = new int[expectedTokenList.size()];\n        for(int tokIDX=0;tokIDX<expectedTokenList.size();tokIDX++) {\n          expectedPosIncrs[tokIDX] = 1;\n          expectedPosLengths[tokIDX] = 1;\n        }\n        assertAnalyzesTo(analyzerNoOriginal, sourceText, expectedTokenList.toArray(new String[expectedTokenList.size()]), expectedPosIncrs);\n      }\n    } finally {\n      is.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dcc09cac106847a24991642f3bb5444c60ddbe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dcc09cac106847a24991642f3bb5444c60ddbe7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dcc09cac106847a24991642f3bb5444c60ddbe7"],"9dcc09cac106847a24991642f3bb5444c60ddbe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}