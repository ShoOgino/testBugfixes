{"path":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits delDocs = MultiFields.getDeletedDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(delDocs == null || !delDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":["b8b3b526542a07c380e03ce642edd7ca82ac961f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits delDocs = MultiFields.getDeletedDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(delDocs == null || !delDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our needs here.\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(!r.isDeleted(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits delDocs = MultiFields.getDeletedDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(delDocs == null || !delDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits delDocs = MultiFields.getDeletedDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(delDocs == null || !delDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits delDocs = MultiFields.getDeletedDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if(delDocs == null || !delDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir, true);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTransactionRollback#checkExpecteds(BitSet).mjava","sourceNew":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","sourceOld":"  private void checkExpecteds(BitSet expecteds) throws Exception {\n    IndexReader r = IndexReader.open(dir);\n\t\t\n    //Perhaps not the most efficient approach but meets our\n    //needs here.\n    final Bits liveDocs = MultiFields.getLiveDocs(r);\n    for (int i = 0; i < r.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        String sval=r.document(i).get(FIELD_RECORD_ID);\n        if(sval!=null) {\n          int val=Integer.parseInt(sval);\n          assertTrue(\"Did not expect document #\"+val, expecteds.get(val));\n          expecteds.set(val,false);\n        }\n      }\n    }\n    r.close();\n    assertEquals(\"Should have 0 docs remaining \", 0 ,expecteds.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["406e7055a3e99d3fa6ce49a555a51dd18b321806","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["406e7055a3e99d3fa6ce49a555a51dd18b321806","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["406e7055a3e99d3fa6ce49a555a51dd18b321806","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}