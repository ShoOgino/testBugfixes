{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermEnum#LegacyTermEnum(Term).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermEnum#LegacyTermEnum(Term).mjava","pathOld":"/dev/null","sourceNew":"    public LegacyTermEnum(Term t) throws IOException {\n      fields = core.fields.iterator();\n      currentField = fields.next();\n      if (currentField == null) {\n        // no fields\n        done = true;\n      } else if (t != null) {\n        // Pre-seek to this term\n\n        while(currentField.compareTo(t.field) < 0) {\n          currentField = fields.next();\n          if (currentField == null) {\n            // Hit end of fields\n            done = true;\n            break;\n          }\n        }\n\n        if (!done) {\n          // We found some field -- get its terms:\n          terms = fields.terms();\n\n          if (currentField == t.field) {\n            // We found exactly the requested field; now\n            // seek the term text:\n            String text = t.text();\n\n            // this is only for backwards compatibility.\n            // previously you could supply a term with unpaired surrogates,\n            // and it would return the next Term.\n            // if someone does this, tack on the lowest possible trail surrogate.\n            // this emulates the old behavior, and forms \"valid UTF-8\" unicode.\n            BytesRef tr = new BytesRef(UnicodeUtil.nextValidUTF16String(text));\n            TermsEnum.SeekStatus status = terms.seek(tr);\n\n            if (status == TermsEnum.SeekStatus.END) {\n              // Rollover to the next field\n              terms = null;\n              next();\n            } else if (status == TermsEnum.SeekStatus.FOUND) {\n              // Found exactly the term\n              currentTerm = tr;\n            } else {\n              // Found another term, in this same field\n              currentTerm = terms.term();\n            }\n          } else {\n            // We didn't find exact field (we found the\n            // following field); advance to first term in\n            // this field\n            next();\n          }\n        }\n      } else {\n        terms = fields.terms();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermEnum#LegacyTermEnum(Term).mjava","sourceNew":null,"sourceOld":"    public LegacyTermEnum(Term t) throws IOException {\n      fields = core.fields.iterator();\n      currentField = fields.next();\n      if (currentField == null) {\n        // no fields\n        done = true;\n      } else if (t != null) {\n        // Pre-seek to this term\n\n        while(currentField.compareTo(t.field) < 0) {\n          currentField = fields.next();\n          if (currentField == null) {\n            // Hit end of fields\n            done = true;\n            break;\n          }\n        }\n\n        if (!done) {\n          // We found some field -- get its terms:\n          terms = fields.terms();\n\n          if (currentField == t.field) {\n            // We found exactly the requested field; now\n            // seek the term text:\n            String text = t.text();\n\n            // this is only for backwards compatibility.\n            // previously you could supply a term with unpaired surrogates,\n            // and it would return the next Term.\n            // if someone does this, tack on the lowest possible trail surrogate.\n            // this emulates the old behavior, and forms \"valid UTF-8\" unicode.\n            BytesRef tr = new BytesRef(UnicodeUtil.nextValidUTF16String(text));\n            TermsEnum.SeekStatus status = terms.seek(tr);\n\n            if (status == TermsEnum.SeekStatus.END) {\n              // Rollover to the next field\n              terms = null;\n              next();\n            } else if (status == TermsEnum.SeekStatus.FOUND) {\n              // Found exactly the term\n              currentTerm = tr;\n            } else {\n              // Found another term, in this same field\n              currentTerm = terms.term();\n            }\n          } else {\n            // We didn't find exact field (we found the\n            // following field); advance to first term in\n            // this field\n            next();\n          }\n        }\n      } else {\n        terms = fields.terms();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.LegacyTermEnum#LegacyTermEnum(Term).mjava","sourceNew":null,"sourceOld":"    public LegacyTermEnum(Term t) throws IOException {\n      fields = core.fields.iterator();\n      currentField = fields.next();\n      if (currentField == null) {\n        // no fields\n        done = true;\n      } else if (t != null) {\n        // Pre-seek to this term\n\n        while(currentField.compareTo(t.field) < 0) {\n          currentField = fields.next();\n          if (currentField == null) {\n            // Hit end of fields\n            done = true;\n            break;\n          }\n        }\n\n        if (!done) {\n          // We found some field -- get its terms:\n          terms = fields.terms();\n\n          if (currentField == t.field) {\n            // We found exactly the requested field; now\n            // seek the term text:\n            String text = t.text();\n\n            // this is only for backwards compatibility.\n            // previously you could supply a term with unpaired surrogates,\n            // and it would return the next Term.\n            // if someone does this, tack on the lowest possible trail surrogate.\n            // this emulates the old behavior, and forms \"valid UTF-8\" unicode.\n            BytesRef tr = new BytesRef(UnicodeUtil.nextValidUTF16String(text));\n            TermsEnum.SeekStatus status = terms.seek(tr);\n\n            if (status == TermsEnum.SeekStatus.END) {\n              // Rollover to the next field\n              terms = null;\n              next();\n            } else if (status == TermsEnum.SeekStatus.FOUND) {\n              // Found exactly the term\n              currentTerm = tr;\n            } else {\n              // Found another term, in this same field\n              currentTerm = terms.term();\n            }\n          } else {\n            // We didn't find exact field (we found the\n            // following field); advance to first term in\n            // this field\n            next();\n          }\n        }\n      } else {\n        terms = fields.terms();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}