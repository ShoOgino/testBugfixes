{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","commits":[{"id":"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5","date":1406290788,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorHandler() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"FORCE_ERROR\", \"true\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigWithErrorHandler);\n\n    assertTrue(\"Error event listener was not called\", ErrorEventListener.executed);\n    assertTrue(ErrorEventListener.lastException.getMessage().contains(\"ForcedException\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","sourceNew":"  @Test\n  public void testErrorHandler() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"FORCE_ERROR\", \"true\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_WITH_ERROR_HANDLER);\n\n    assertTrue(\"Error event listener was not called\", ErrorEventListener.executed);\n    assertTrue(ErrorEventListener.lastException.getMessage().contains(\"ForcedException\"));\n  }\n\n","sourceOld":"  @Test\n  public void testErrorHandler() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"FORCE_ERROR\", \"true\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigWithErrorHandler);\n\n    assertTrue(\"Error event listener was not called\", ErrorEventListener.executed);\n    assertTrue(ErrorEventListener.lastException.getMessage().contains(\"ForcedException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","sourceNew":"  @Test\n  public void testErrorHandler() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"FORCE_ERROR\", \"true\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_WITH_ERROR_HANDLER);\n\n    assertTrue(\"Error event listener was not called\", ErrorEventListener.executed);\n    assertTrue(ErrorEventListener.lastException.getMessage().contains(\"ForcedException\"));\n  }\n\n","sourceOld":"  @Test\n  public void testErrorHandler() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"FORCE_ERROR\", \"true\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(dataConfigWithErrorHandler);\n\n    assertTrue(\"Error event listener was not called\", ErrorEventListener.executed);\n    assertTrue(ErrorEventListener.lastException.getMessage().contains(\"ForcedException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testErrorHandler() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"FORCE_ERROR\", \"true\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_WITH_ERROR_HANDLER);\n\n    assertTrue(\"Error event listener was not called\", ErrorEventListener.executed);\n    assertTrue(ErrorEventListener.lastException.getMessage().contains(\"ForcedException\"));\n  }\n\n","sourceOld":"  @Test\n  public void testErrorHandler() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"FORCE_ERROR\", \"true\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_WITH_ERROR_HANDLER);\n\n    assertTrue(\"Error event listener was not called\", ErrorEventListener.executed);\n    assertTrue(ErrorEventListener.lastException.getMessage().contains(\"ForcedException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testErrorHandler().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testErrorHandler() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List rows = new ArrayList();\n    rows.add(createMap(\"id\", \"1\", \"FORCE_ERROR\", \"true\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    runFullImport(DATA_CONFIG_WITH_ERROR_HANDLER);\n\n    assertTrue(\"Error event listener was not called\", ErrorEventListener.executed);\n    assertTrue(ErrorEventListener.lastException.getMessage().contains(\"ForcedException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["5de502b5478255493125e7e801411ba17a6682ec"],"5de502b5478255493125e7e801411ba17a6682ec":["29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5de502b5478255493125e7e801411ba17a6682ec":["024e13388acbf5562fcbb77a129620982a5e2d79"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5"],"29d10c9c22fbdfa86201e6eb9d1cdd3a3870dde5":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}