{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","commits":[{"id":"2062967ab57824b59d116b38d53d2058ac7e4592","date":1367320813,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for(MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7","date":1369910219,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for(MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","bugFix":["2062967ab57824b59d116b38d53d2058ac7e4592"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c624da39f51912c93695bf9f48f9dbbd3ff37c95","date":1372864719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (int i = 0; i < requests.size(); i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.ranges.length; j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (int i = 0; i < requests.size(); i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.ranges.length; j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for(int i=0;i<requests.size();i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for(int j=0;j<ranges.ranges.length;j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c998805904160e01fb8b22cb84f50a2634085aef","date":1377038308,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (int i = 0; i < requests.size(); i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        Bits docsWithField = hits.context.reader().getDocsWithField(ranges.field);\n\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n\n          // Skip missing docs:\n          if (v == 0 && docsWithField.get(doc) == false) {\n            doc++;\n            continue;\n          }\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.ranges.length; j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (int i = 0; i < requests.size(); i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.ranges.length; j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (int i = 0; i < requests.size(); i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        Bits docsWithField = hits.context.reader().getDocsWithField(ranges.field);\n\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n\n          // Skip missing docs:\n          if (v == 0 && docsWithField.get(doc) == false) {\n            doc++;\n            continue;\n          }\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.ranges.length; j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (int i = 0; i < requests.size(); i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.ranges.length; j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aa0430e2aac625e9331378ddcde1dabbd8d3577","date":1383625721,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (FacetRequest req : searchParams.facetRequests) {\n      RangeFacetRequest<?> rangeFR = (RangeFacetRequest<?>) req;\n      int[] counts = new int[rangeFR.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        FunctionValues fv = rangeFR.getValues(hits.context);\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          // Skip missing docs:\n          if (!fv.exists(doc)) {\n            ++doc;\n            continue;\n          }\n          \n          long v = fv.longVal(doc);\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < rangeFR.ranges.length; j++) {\n            if (rangeFR.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n      \n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(rangeFR.ranges.length);\n      for (int j = 0; j < rangeFR.ranges.length; j++) {\n        nodes.add(new RangeFacetResultNode(rangeFR.label, rangeFR.ranges[j], counts[j]));\n      }\n      \n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = rangeFR.categoryPath;\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(req, rootNode, nodes.size()));\n    }\n    \n    return results;\n  }\n\n","sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (int i = 0; i < requests.size(); i++) {\n      RangeSet ranges = requests.get(i);\n\n      int[] counts = new int[ranges.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        NumericDocValues ndv = hits.context.reader().getNumericDocValues(ranges.field);\n        if (ndv == null) {\n          continue; // no numeric values for this field in this reader\n        }\n        Bits docsWithField = hits.context.reader().getDocsWithField(ranges.field);\n\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          long v = ndv.get(doc);\n\n          // Skip missing docs:\n          if (v == 0 && docsWithField.get(doc) == false) {\n            doc++;\n            continue;\n          }\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < ranges.ranges.length; j++) {\n            if (ranges.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n\n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(ranges.ranges.length);\n      for(int j=0;j<ranges.ranges.length;j++) {\n        nodes.add(new RangeFacetResultNode(ranges.field, ranges.ranges[j], counts[j]));\n      }\n\n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = new CategoryPath(ranges.field);\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(searchParams.facetRequests.get(i), rootNode, nodes.size()));\n    }\n\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990","date":1385332359,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (FacetRequest req : searchParams.facetRequests) {\n      RangeFacetRequest<?> rangeFR = (RangeFacetRequest<?>) req;\n      int[] counts = new int[rangeFR.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        FunctionValues fv = rangeFR.getValues(hits.context);\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          // Skip missing docs:\n          if (!fv.exists(doc)) {\n            ++doc;\n            continue;\n          }\n          \n          long v = fv.longVal(doc);\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < rangeFR.ranges.length; j++) {\n            if (rangeFR.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n      \n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(rangeFR.ranges.length);\n      for (int j = 0; j < rangeFR.ranges.length; j++) {\n        nodes.add(new RangeFacetResultNode(rangeFR.label, rangeFR.ranges[j], counts[j]));\n      }\n      \n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = rangeFR.categoryPath;\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(req, rootNode, nodes.size()));\n    }\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/RangeAccumulator#accumulate(List[MatchingDocs]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {\n\n    // TODO: test if this is faster (in the past it was\n    // faster to do MachingDocs on the inside) ... see\n    // patches on LUCENE-4965):\n    List<FacetResult> results = new ArrayList<FacetResult>();\n    for (FacetRequest req : searchParams.facetRequests) {\n      RangeFacetRequest<?> rangeFR = (RangeFacetRequest<?>) req;\n      int[] counts = new int[rangeFR.ranges.length];\n      for (MatchingDocs hits : matchingDocs) {\n        FunctionValues fv = rangeFR.getValues(hits.context);\n        final int length = hits.bits.length();\n        int doc = 0;\n        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {\n          // Skip missing docs:\n          if (!fv.exists(doc)) {\n            ++doc;\n            continue;\n          }\n          \n          long v = fv.longVal(doc);\n\n          // TODO: if all ranges are non-overlapping, we\n          // should instead do a bin-search up front\n          // (really, a specialized case of the interval\n          // tree)\n          // TODO: use interval tree instead of linear search:\n          for (int j = 0; j < rangeFR.ranges.length; j++) {\n            if (rangeFR.ranges[j].accept(v)) {\n              counts[j]++;\n            }\n          }\n\n          doc++;\n        }\n      }\n      \n      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(rangeFR.ranges.length);\n      for (int j = 0; j < rangeFR.ranges.length; j++) {\n        nodes.add(new RangeFacetResultNode(rangeFR.label, rangeFR.ranges[j], counts[j]));\n      }\n      \n      FacetResultNode rootNode = new FacetResultNode(-1, 0);\n      rootNode.label = rangeFR.categoryPath;\n      rootNode.subResults = nodes;\n\n      results.add(new FacetResult(req, rootNode, nodes.size()));\n    }\n    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990":["6aa0430e2aac625e9331378ddcde1dabbd8d3577"],"c998805904160e01fb8b22cb84f50a2634085aef":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7","c624da39f51912c93695bf9f48f9dbbd3ff37c95"],"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7":["2062967ab57824b59d116b38d53d2058ac7e4592"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","c998805904160e01fb8b22cb84f50a2634085aef"],"c624da39f51912c93695bf9f48f9dbbd3ff37c95":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"2062967ab57824b59d116b38d53d2058ac7e4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6aa0430e2aac625e9331378ddcde1dabbd8d3577","5ec3bb9046a73ab9aea7b2a07d53ca9b71904990"],"6aa0430e2aac625e9331378ddcde1dabbd8d3577":["c998805904160e01fb8b22cb84f50a2634085aef"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["c624da39f51912c93695bf9f48f9dbbd3ff37c95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"5ec3bb9046a73ab9aea7b2a07d53ca9b71904990":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c998805904160e01fb8b22cb84f50a2634085aef":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","6aa0430e2aac625e9331378ddcde1dabbd8d3577"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c624da39f51912c93695bf9f48f9dbbd3ff37c95"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"c624da39f51912c93695bf9f48f9dbbd3ff37c95":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"2062967ab57824b59d116b38d53d2058ac7e4592":["c43f6aa4bf27630c1fa15a8e2996f2c31cecf3a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2062967ab57824b59d116b38d53d2058ac7e4592"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6aa0430e2aac625e9331378ddcde1dabbd8d3577":["5ec3bb9046a73ab9aea7b2a07d53ca9b71904990","3cc728b07df73b197e6d940d27f9b08b63918f13"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["c998805904160e01fb8b22cb84f50a2634085aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}