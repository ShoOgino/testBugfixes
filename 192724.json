{"path":"src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","commits":[{"id":"ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f","date":1178835005,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","pathOld":"/dev/null","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","76cc9b4f652f477b113ac4dcf7593e1414108fcc","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( solrConfig, args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( solrConfig, args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( solrConfig, args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( solrConfig, args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( solrConfig, args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( solrConfig, args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( solrConfig, args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( solrConfig, args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPhoneticFilter#testFactory().mjava","sourceNew":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","sourceOld":"  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    try {\n      ff.init( args );\n      fail( \"missing encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    args.put( PhoneticFilterFactory.ENCODER, \"XXX\" );\n    try {\n      ff.init( args );\n      fail( \"unknown encoder parameter\" );\n    }\n    catch( Exception ex ) {}\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.encoder instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f"],"ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f":["6d6338c87060be5f66757a94945975f3bbd377a9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}