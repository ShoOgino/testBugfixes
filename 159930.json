{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnnRegress().mjava","commits":[{"id":"f7656aa7218845fc29808b9dfe775b9558ca4611","date":1533776721,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnnRegress().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testKnnRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                                  \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                                  \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                                  \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1),\" +\n        \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n    assertEquals(predictions.size(), 10);\n    //k=1 should bring back only one prediction for the exact match in the training set\n    assertEquals(predictions.get(0).doubleValue(), 85.09999847, 0);\n    assertEquals(predictions.get(1).doubleValue(), 106.3000031, 0);\n    assertEquals(predictions.get(2).doubleValue(), 50.20000076, 0);\n    assertEquals(predictions.get(3).doubleValue(), 130.6000061, 0);\n    assertEquals(predictions.get(4).doubleValue(), 54.79999924, 0);\n    assertEquals(predictions.get(5).doubleValue(), 30.29999924, 0);\n    assertEquals(predictions.get(6).doubleValue(), 79.40000153, 0);\n    assertEquals(predictions.get(7).doubleValue(), 91, 0);\n    assertEquals(predictions.get(8).doubleValue(), 135.3999939, 0);\n    assertEquals(predictions.get(9).doubleValue(), 89.30000305, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 85.09999847, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 8.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 5.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 4.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 2),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 87.20000076, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2","date":1534530377,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnnRegress().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnnRegress().mjava","sourceNew":"  @Test\n  public void testKnnRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                                  \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                                  \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                                  \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n    assertEquals(predictions.size(), 10);\n    //k=1 should bring back only one prediction for the exact match in the training set\n    assertEquals(predictions.get(0).doubleValue(), 85.09999847, 0);\n    assertEquals(predictions.get(1).doubleValue(), 106.3000031, 0);\n    assertEquals(predictions.get(2).doubleValue(), 50.20000076, 0);\n    assertEquals(predictions.get(3).doubleValue(), 130.6000061, 0);\n    assertEquals(predictions.get(4).doubleValue(), 54.79999924, 0);\n    assertEquals(predictions.get(5).doubleValue(), 30.29999924, 0);\n    assertEquals(predictions.get(6).doubleValue(), 79.40000153, 0);\n    assertEquals(predictions.get(7).doubleValue(), 91, 0);\n    assertEquals(predictions.get(8).doubleValue(), 135.3999939, 0);\n    assertEquals(predictions.get(9).doubleValue(), 89.30000305, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 85.09999847, 0);\n\n    //Test robust. Take the median rather then average\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 8.10000038, 8.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 5.599999905, 5.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 4.79999924, 4.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 3, scale=true, robust=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 89.30000305, 0);\n\n\n    //Test univariate regression with scaling off\n\n    cexpr = \"let(echo=true, a=sequence(10, 0, 1), \" +\n        \"b=transpose(matrix(a)),\" +\n        \"c=knnRegress(b, a, 3),\" +\n        \"d=predict(c, array(3)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"d\");\n    assertEquals(prediction.doubleValue(), 3, 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testKnnRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                                  \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                                  \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                                  \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1),\" +\n        \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n    assertEquals(predictions.size(), 10);\n    //k=1 should bring back only one prediction for the exact match in the training set\n    assertEquals(predictions.get(0).doubleValue(), 85.09999847, 0);\n    assertEquals(predictions.get(1).doubleValue(), 106.3000031, 0);\n    assertEquals(predictions.get(2).doubleValue(), 50.20000076, 0);\n    assertEquals(predictions.get(3).doubleValue(), 130.6000061, 0);\n    assertEquals(predictions.get(4).doubleValue(), 54.79999924, 0);\n    assertEquals(predictions.get(5).doubleValue(), 30.29999924, 0);\n    assertEquals(predictions.get(6).doubleValue(), 79.40000153, 0);\n    assertEquals(predictions.get(7).doubleValue(), 91, 0);\n    assertEquals(predictions.get(8).doubleValue(), 135.3999939, 0);\n    assertEquals(predictions.get(9).doubleValue(), 89.30000305, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 85.09999847, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 8.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 5.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 4.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 2),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 87.20000076, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffe323fac8aa24c486bbf238b6413bcf5f274ea","date":1547324745,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnnRegress().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnnRegress().mjava","sourceNew":"  @Test\n  public void testKnnRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                                  \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                                  \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                                  \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n    assertEquals(predictions.size(), 10);\n    //k=1 should bring back only one prediction for the exact match in the training set\n    assertEquals(predictions.get(0).doubleValue(), 85.09999847, 0);\n    assertEquals(predictions.get(1).doubleValue(), 106.3000031, 0);\n    assertEquals(predictions.get(2).doubleValue(), 50.20000076, 0);\n    assertEquals(predictions.get(3).doubleValue(), 130.6000061, 0);\n    assertEquals(predictions.get(4).doubleValue(), 54.79999924, 0);\n    assertEquals(predictions.get(5).doubleValue(), 30.29999924, 0);\n    assertEquals(predictions.get(6).doubleValue(), 79.40000153, 0);\n    assertEquals(predictions.get(7).doubleValue(), 91, 0);\n    assertEquals(predictions.get(8).doubleValue(), 135.3999939, 0);\n    assertEquals(predictions.get(9).doubleValue(), 89.30000305, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 85.09999847, 0);\n\n    //Test robust. Take the median rather then average\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 8.10000038, 8.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 5.599999905, 5.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 4.79999924, 4.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 3, scale=true, robust=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 89.30000305, 0);\n\n\n    //Test univariate regression with scaling off\n\n    cexpr = \"let(echo=true, a=sequence(10, 0, 1), \" +\n        \"c=knnRegress(a, a, 3),\" +\n        \"d=predict(c, 3))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"d\");\n    assertEquals(prediction.doubleValue(), 3, 0);\n\n    cexpr = \"let(echo=true, a=sequence(10, 0, 1), \" +\n        \"c=knnRegress(a, a, 3),\" +\n        \"d=predict(c, array(3,4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    predictions = (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(predictions.size(), 2);\n    assertEquals(predictions.get(0).doubleValue(), 3, 0);\n    assertEquals(predictions.get(1).doubleValue(), 4, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnnRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                                  \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                                  \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                                  \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n    assertEquals(predictions.size(), 10);\n    //k=1 should bring back only one prediction for the exact match in the training set\n    assertEquals(predictions.get(0).doubleValue(), 85.09999847, 0);\n    assertEquals(predictions.get(1).doubleValue(), 106.3000031, 0);\n    assertEquals(predictions.get(2).doubleValue(), 50.20000076, 0);\n    assertEquals(predictions.get(3).doubleValue(), 130.6000061, 0);\n    assertEquals(predictions.get(4).doubleValue(), 54.79999924, 0);\n    assertEquals(predictions.get(5).doubleValue(), 30.29999924, 0);\n    assertEquals(predictions.get(6).doubleValue(), 79.40000153, 0);\n    assertEquals(predictions.get(7).doubleValue(), 91, 0);\n    assertEquals(predictions.get(8).doubleValue(), 135.3999939, 0);\n    assertEquals(predictions.get(9).doubleValue(), 89.30000305, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 85.09999847, 0);\n\n    //Test robust. Take the median rather then average\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 8.10000038, 8.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 5.599999905, 5.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 4.79999924, 4.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 3, scale=true, robust=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 89.30000305, 0);\n\n\n    //Test univariate regression with scaling off\n\n    cexpr = \"let(echo=true, a=sequence(10, 0, 1), \" +\n        \"b=transpose(matrix(a)),\" +\n        \"c=knnRegress(b, a, 3),\" +\n        \"d=predict(c, array(3)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"d\");\n    assertEquals(prediction.doubleValue(), 3, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnnRegress().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testKnnRegress().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testKnnRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                                  \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                                  \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                                  \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n    assertEquals(predictions.size(), 10);\n    //k=1 should bring back only one prediction for the exact match in the training set\n    assertEquals(predictions.get(0).doubleValue(), 85.09999847, 0);\n    assertEquals(predictions.get(1).doubleValue(), 106.3000031, 0);\n    assertEquals(predictions.get(2).doubleValue(), 50.20000076, 0);\n    assertEquals(predictions.get(3).doubleValue(), 130.6000061, 0);\n    assertEquals(predictions.get(4).doubleValue(), 54.79999924, 0);\n    assertEquals(predictions.get(5).doubleValue(), 30.29999924, 0);\n    assertEquals(predictions.get(6).doubleValue(), 79.40000153, 0);\n    assertEquals(predictions.get(7).doubleValue(), 91, 0);\n    assertEquals(predictions.get(8).doubleValue(), 135.3999939, 0);\n    assertEquals(predictions.get(9).doubleValue(), 89.30000305, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 85.09999847, 0);\n\n    //Test robust. Take the median rather then average\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 8.10000038, 8.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 5.599999905, 5.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 4.79999924, 4.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 3, scale=true, robust=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 89.30000305, 0);\n\n\n    //Test univariate regression with scaling off\n\n    cexpr = \"let(echo=true, a=sequence(10, 0, 1), \" +\n        \"c=knnRegress(a, a, 3),\" +\n        \"d=predict(c, 3))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"d\");\n    assertEquals(prediction.doubleValue(), 3, 0);\n\n    cexpr = \"let(echo=true, a=sequence(10, 0, 1), \" +\n        \"c=knnRegress(a, a, 3),\" +\n        \"d=predict(c, array(3,4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    predictions = (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(predictions.size(), 2);\n    assertEquals(predictions.get(0).doubleValue(), 3, 0);\n    assertEquals(predictions.get(1).doubleValue(), 4, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testKnnRegress() throws Exception {\n    String cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n                                  \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n                                  \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n                                  \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, e))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> predictions = (List<Number>)tuples.get(0).get(\"g\");\n    assertEquals(predictions.size(), 10);\n    //k=1 should bring back only one prediction for the exact match in the training set\n    assertEquals(predictions.get(0).doubleValue(), 85.09999847, 0);\n    assertEquals(predictions.get(1).doubleValue(), 106.3000031, 0);\n    assertEquals(predictions.get(2).doubleValue(), 50.20000076, 0);\n    assertEquals(predictions.get(3).doubleValue(), 130.6000061, 0);\n    assertEquals(predictions.get(4).doubleValue(), 54.79999924, 0);\n    assertEquals(predictions.get(5).doubleValue(), 30.29999924, 0);\n    assertEquals(predictions.get(6).doubleValue(), 79.40000153, 0);\n    assertEquals(predictions.get(7).doubleValue(), 91, 0);\n    assertEquals(predictions.get(8).doubleValue(), 135.3999939, 0);\n    assertEquals(predictions.get(9).doubleValue(), 89.30000305, 0);\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 15.10000038, 10.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 7.599999905, 7.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 20.79999924, 7.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 1, scale=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 85.09999847, 0);\n\n    //Test robust. Take the median rather then average\n\n    cexpr = \"let(echo=true, a=array(8.5, 12.89999962, 5.199999809, 10.69999981, 3.099999905, 3.5, 9.199999809, 9, 8.10000038, 8.19999981), \" +\n        \"b=array(5.099999905, 5.800000191, 2.099999905, 8.399998665, 2.900000095, 1.200000048, 3.700000048, 5.599999905, 5.699999809, 4.5),\" +\n        \"c=array(4.699999809, 8.800000191, 15.10000038, 12.19999981, 10.60000038, 3.5, 9.699999809, 5.900000095, 4.79999924, 4.900000095),\" +\n        \"d=array(85.09999847, 106.3000031, 50.20000076, 130.6000061, 54.79999924, 30.29999924, 79.40000153, 91, 135.3999939, 89.30000305),\" +\n        \"e=transpose(matrix(a, b, c)),\" +\n        \"f=knnRegress(e, d, 3, scale=true, robust=true),\" +\n        \"g=predict(f, array(8, 5, 4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"g\");\n    assertEquals(prediction.doubleValue(), 89.30000305, 0);\n\n\n    //Test univariate regression with scaling off\n\n    cexpr = \"let(echo=true, a=sequence(10, 0, 1), \" +\n        \"c=knnRegress(a, a, 3),\" +\n        \"d=predict(c, 3))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    prediction = (Number)tuples.get(0).get(\"d\");\n    assertEquals(prediction.doubleValue(), 3, 0);\n\n    cexpr = \"let(echo=true, a=sequence(10, 0, 1), \" +\n        \"c=knnRegress(a, a, 3),\" +\n        \"d=predict(c, array(3,4)))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    predictions = (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(predictions.size(), 2);\n    assertEquals(predictions.get(0).doubleValue(), 3, 0);\n    assertEquals(predictions.get(1).doubleValue(), 4, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["0ffe323fac8aa24c486bbf238b6413bcf5f274ea"],"0ffe323fac8aa24c486bbf238b6413bcf5f274ea":["5a9a2a5c29b9076cadb74c558d61ea3e4942bed2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ffe323fac8aa24c486bbf238b6413bcf5f274ea":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2":["0ffe323fac8aa24c486bbf238b6413bcf5f274ea"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["5a9a2a5c29b9076cadb74c558d61ea3e4942bed2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}