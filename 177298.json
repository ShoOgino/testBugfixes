{"path":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#assertAnalyzesTo(Analyzer,String,String[],String[],int[]).mjava","commits":[{"id":"a5b54d19e4682ef2b08bd06f76c13a4c8d785386","date":1199633864,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#assertAnalyzesTo(Analyzer,String,String[],String[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  public void assertAnalyzesTo(Analyzer a, String input, String[] expectedImages, String[] expectedTypes, int[] expectedPosIncrs) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i = 0; i < expectedImages.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(expectedImages[i], t.termText());\n      if (expectedTypes != null) {\n        assertEquals(expectedTypes[i], t.type());\n      }\n      if (expectedPosIncrs != null) {\n        assertEquals(expectedPosIncrs[i], t.getPositionIncrement());\n      }\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#assertAnalyzesTo(Analyzer,String,String[],String[],int[]).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#assertAnalyzesTo(Analyzer,String,String[],String[],int[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a, String input, String[] expectedImages, String[] expectedTypes, int[] expectedPosIncrs) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken = new Token();\n    for (int i = 0; i < expectedImages.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(expectedImages[i], nextToken.term());\n      if (expectedTypes != null) {\n        assertEquals(expectedTypes[i], nextToken.type());\n      }\n      if (expectedPosIncrs != null) {\n        assertEquals(expectedPosIncrs[i], nextToken.getPositionIncrement());\n      }\n    }\n    assertNull(ts.next(reusableToken));\n    ts.close();\n  }\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a, String input, String[] expectedImages, String[] expectedTypes, int[] expectedPosIncrs) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i = 0; i < expectedImages.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(expectedImages[i], t.termText());\n      if (expectedTypes != null) {\n        assertEquals(expectedTypes[i], t.type());\n      }\n      if (expectedPosIncrs != null) {\n        assertEquals(expectedPosIncrs[i], t.getPositionIncrement());\n      }\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#assertAnalyzesTo(Analyzer,String,String[],String[],int[]).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#assertAnalyzesTo(Analyzer,String,String[],String[],int[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a, String input, String[] expectedImages, String[] expectedTypes, int[] expectedPosIncrs) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    // TODO Java 1.5\n    //final TypeAttribute typeAtt = reusableToken.getAttribute(TypeAttribute.class);\n    //final PositionIncrementAttribute posIncrAtt = reusableToken.getAttribute(PositionIncrementAttribute.class);\n\n    final TermAttribute termAtt = (TermAttribute) ts.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = (TypeAttribute) ts.getAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) ts.getAttribute(PositionIncrementAttribute.class);\n    \n    for (int i = 0; i < expectedImages.length; i++) {\n      assertTrue(ts.incrementToken());\n      assertEquals(expectedImages[i], new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      if (expectedTypes != null) {\n        assertEquals(expectedTypes[i], typeAtt.type());\n      }\n      if (expectedPosIncrs != null) {\n        assertEquals(expectedPosIncrs[i], posIncrAtt.getPositionIncrement());\n      }\n    }\n    assertFalse(ts.incrementToken());\n    ts.close();\n  }\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a, String input, String[] expectedImages, String[] expectedTypes, int[] expectedPosIncrs) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken = new Token();\n    for (int i = 0; i < expectedImages.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(expectedImages[i], nextToken.term());\n      if (expectedTypes != null) {\n        assertEquals(expectedTypes[i], nextToken.type());\n      }\n      if (expectedPosIncrs != null) {\n        assertEquals(expectedPosIncrs[i], nextToken.getPositionIncrement());\n      }\n    }\n    assertNull(ts.next(reusableToken));\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#assertAnalyzesTo(Analyzer,String,String[],String[],int[]).mjava","sourceNew":null,"sourceOld":"  public void assertAnalyzesTo(Analyzer a, String input, String[] expectedImages, String[] expectedTypes, int[] expectedPosIncrs) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    // TODO Java 1.5\n    //final TypeAttribute typeAtt = reusableToken.getAttribute(TypeAttribute.class);\n    //final PositionIncrementAttribute posIncrAtt = reusableToken.getAttribute(PositionIncrementAttribute.class);\n\n    final TermAttribute termAtt = (TermAttribute) ts.getAttribute(TermAttribute.class);\n    final TypeAttribute typeAtt = (TypeAttribute) ts.getAttribute(TypeAttribute.class);\n    final PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) ts.getAttribute(PositionIncrementAttribute.class);\n    \n    for (int i = 0; i < expectedImages.length; i++) {\n      assertTrue(ts.incrementToken());\n      assertEquals(expectedImages[i], new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      if (expectedTypes != null) {\n        assertEquals(expectedTypes[i], typeAtt.type());\n      }\n      if (expectedPosIncrs != null) {\n        assertEquals(expectedPosIncrs[i], posIncrAtt.getPositionIncrement());\n      }\n    }\n    assertFalse(ts.incrementToken());\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a5b54d19e4682ef2b08bd06f76c13a4c8d785386":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5b54d19e4682ef2b08bd06f76c13a4c8d785386":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}