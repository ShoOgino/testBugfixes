{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n    \n    PluginInfo restManagerPluginInfo = \n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n        \n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n      \n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>)restManagerPluginInfo.initArgs;        \n      }\n    }\n    \n    if (mgr == null) \n      mgr = new RestManager();\n    \n    if (initArgs == null)\n      initArgs = new NamedList<>();\n                                \n    String collection = coreDescriptor.getCollectionName();\n    StorageIO storageIO = \n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);    \n    mgr.init(resourceLoader, initArgs, storageIO);\n    \n    return mgr;\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","sourceNew":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n\n    PluginInfo restManagerPluginInfo =\n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n\n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n\n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>) restManagerPluginInfo.initArgs;\n      }\n    }\n\n    if (mgr == null)\n      mgr = new RestManager();\n\n    if (initArgs == null)\n      initArgs = new NamedList<>();\n\n    String collection = coreDescriptor.getCollectionName();\n    StorageIO storageIO =\n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);\n    mgr.init(resourceLoader, initArgs, storageIO);\n\n    return mgr;\n  }\n\n","sourceOld":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n    \n    PluginInfo restManagerPluginInfo = \n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n        \n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n      \n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>)restManagerPluginInfo.initArgs;        \n      }\n    }\n    \n    if (mgr == null) \n      mgr = new RestManager();\n    \n    if (initArgs == null)\n      initArgs = new NamedList<>();\n                                \n    String collection = coreDescriptor.getCollectionName();\n    StorageIO storageIO = \n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);    \n    mgr.init(resourceLoader, initArgs, storageIO);\n    \n    return mgr;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","sourceNew":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n\n    PluginInfo restManagerPluginInfo =\n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n\n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n\n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>) restManagerPluginInfo.initArgs;\n      }\n    }\n\n    if (mgr == null)\n      mgr = new RestManager();\n\n    if (initArgs == null)\n      initArgs = new NamedList<>();\n\n    String collection = coreDescriptor.getCollectionName();\n    StorageIO storageIO =\n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);\n    mgr.init(resourceLoader, initArgs, storageIO);\n\n    return mgr;\n  }\n\n","sourceOld":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n    \n    PluginInfo restManagerPluginInfo = \n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n        \n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n      \n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>)restManagerPluginInfo.initArgs;        \n      }\n    }\n    \n    if (mgr == null) \n      mgr = new RestManager();\n    \n    if (initArgs == null)\n      initArgs = new NamedList<>();\n                                \n    String collection = coreDescriptor.getCollectionName();\n    StorageIO storageIO = \n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);    \n    mgr.init(resourceLoader, initArgs, storageIO);\n    \n    return mgr;\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","sourceNew":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n\n    PluginInfo restManagerPluginInfo =\n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n\n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n\n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>) restManagerPluginInfo.initArgs;\n      }\n    }\n\n    if (mgr == null)\n      mgr = new RestManager();\n\n    if (initArgs == null)\n      initArgs = new NamedList<>();\n\n    String collection = getCoreDescriptor().getCollectionName();\n    StorageIO storageIO =\n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);\n    mgr.init(resourceLoader, initArgs, storageIO);\n\n    return mgr;\n  }\n\n","sourceOld":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n\n    PluginInfo restManagerPluginInfo =\n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n\n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n\n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>) restManagerPluginInfo.initArgs;\n      }\n    }\n\n    if (mgr == null)\n      mgr = new RestManager();\n\n    if (initArgs == null)\n      initArgs = new NamedList<>();\n\n    String collection = coreDescriptor.getCollectionName();\n    StorageIO storageIO =\n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);\n    mgr.init(resourceLoader, initArgs, storageIO);\n\n    return mgr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initRestManager().mjava","sourceNew":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n\n    PluginInfo restManagerPluginInfo =\n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n\n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n\n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>) restManagerPluginInfo.initArgs;\n      }\n    }\n\n    if (mgr == null)\n      mgr = new RestManager();\n\n    if (initArgs == null)\n      initArgs = new NamedList<>();\n\n    String collection = getCoreDescriptor().getCollectionName();\n    StorageIO storageIO =\n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);\n    mgr.init(resourceLoader, initArgs, storageIO);\n\n    return mgr;\n  }\n\n","sourceOld":"  /**\n   * Creates and initializes a RestManager based on configuration args in solrconfig.xml.\n   * RestManager provides basic storage support for managed resource data, such as to\n   * persist stopwords to ZooKeeper if running in SolrCloud mode.\n   */\n  @SuppressWarnings(\"unchecked\")\n  protected RestManager initRestManager() throws SolrException {\n\n    PluginInfo restManagerPluginInfo =\n        getSolrConfig().getPluginInfo(RestManager.class.getName());\n\n    NamedList<String> initArgs = null;\n    RestManager mgr = null;\n    if (restManagerPluginInfo != null) {\n      if (restManagerPluginInfo.className != null) {\n        mgr = resourceLoader.newInstance(restManagerPluginInfo.className, RestManager.class);\n      }\n\n      if (restManagerPluginInfo.initArgs != null) {\n        initArgs = (NamedList<String>) restManagerPluginInfo.initArgs;\n      }\n    }\n\n    if (mgr == null)\n      mgr = new RestManager();\n\n    if (initArgs == null)\n      initArgs = new NamedList<>();\n\n    String collection = coreDescriptor.getCollectionName();\n    StorageIO storageIO =\n        ManagedResourceStorage.newStorageIO(collection, resourceLoader, initArgs);\n    mgr.init(resourceLoader, initArgs, storageIO);\n\n    return mgr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d","9aea0485ecacb6734c17da2d02569816c23a69c1"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}