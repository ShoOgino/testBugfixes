{"path":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","commits":[{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implemenations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under {@link\n   * IndexWriter#addDocument(Document)} and stored then using\n   * {#encodeNorm(float)}.  Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4c10db07b7f5f0131d9d0f2cfa0ee6087963e5a","date":1092569856,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","sourceNew":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implemenations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under {@link\n   * IndexWriter#addDocument(org.apache.lucene.document.Document)} and stored then using\n   * {@link #encodeNorm(float)}.  Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","sourceOld":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implemenations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under {@link\n   * IndexWriter#addDocument(Document)} and stored then using\n   * {#encodeNorm(float)}.  Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"259b241bfd02b264ef7ac3f599b657397c583613","date":1098914342,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","sourceNew":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under {@link\n   * IndexWriter#addDocument(org.apache.lucene.document.Document)} and stored then using\n   * {@link #encodeNorm(float)}.  Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","sourceOld":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implemenations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under {@link\n   * IndexWriter#addDocument(org.apache.lucene.document.Document)} and stored then using\n   * {@link #encodeNorm(float)}.  Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","sourceNew":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under {@link\n   * IndexWriter#addDocument(org.apache.lucene.document.Document)} and stored then using\n   * {@link #encodeNorm(float)}.  Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","sourceOld":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under {@link\n   * IndexWriter#addDocument(org.apache.lucene.document.Document)} and stored then using\n   * {@link #encodeNorm(float)}.  Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c49614cb8b943c412debb24ccb614128394470","date":1178343409,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","sourceNew":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and stored then using\n   * {@link #encodeNorm(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","sourceOld":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under {@link\n   * IndexWriter#addDocument(org.apache.lucene.document.Document)} and stored then using\n   * {@link #encodeNorm(float)}.  Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41ab32fc87982eab82a896cee390971b5c08fd2","date":1225735438,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","sourceNew":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNorm(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","sourceOld":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   *\n   * <p>That these values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and stored then using\n   * {@link #encodeNorm(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","sourceNew":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","sourceOld":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNorm(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#lengthNorm(String,int).mjava","sourceNew":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","sourceOld":"  /** Computes the normalization value for a field given the total number of\n   * terms contained in a field.  These values, together with field boosts, are\n   * stored in an index and multipled into scores for hits on each field by the\n   * search code.\n   *\n   * <p>Matches in longer fields are less precise, so implementations of this\n   * method usually return smaller values when <code>numTokens</code> is large,\n   * and larger values when <code>numTokens</code> is small.\n   * \n   * <p>Note that the return values are computed under \n   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} \n   * and then stored using\n   * {@link #encodeNormValue(float)}.  \n   * Thus they have limited precision, and documents\n   * must be re-indexed if this method is altered.\n   *\n   * @param fieldName the name of the field\n   * @param numTokens the total number of tokens contained in fields named\n   * <i>fieldName</i> of <i>doc</i>.\n   * @return a normalization factor for hits on this field of this document\n   *\n   * @see org.apache.lucene.document.Field#setBoost(float)\n   */\n  public abstract float lengthNorm(String fieldName, int numTokens);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["10c49614cb8b943c412debb24ccb614128394470"],"10c49614cb8b943c412debb24ccb614128394470":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"259b241bfd02b264ef7ac3f599b657397c583613":["a4c10db07b7f5f0131d9d0f2cfa0ee6087963e5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4c10db07b7f5f0131d9d0f2cfa0ee6087963e5a":["6f5efa46fb27648cd98137d9898d819e115911bc"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"6f5efa46fb27648cd98137d9898d819e115911bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["259b241bfd02b264ef7ac3f599b657397c583613"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"]},"commit2Childs":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"10c49614cb8b943c412debb24ccb614128394470":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"259b241bfd02b264ef7ac3f599b657397c583613":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f5efa46fb27648cd98137d9898d819e115911bc"],"a4c10db07b7f5f0131d9d0f2cfa0ee6087963e5a":["259b241bfd02b264ef7ac3f599b657397c583613"],"6f5efa46fb27648cd98137d9898d819e115911bc":["a4c10db07b7f5f0131d9d0f2cfa0ee6087963e5a"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["10c49614cb8b943c412debb24ccb614128394470"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}