{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<AnalysisPhase>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<AnalysisPhase>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<AnalysisPhase>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<AnalysisPhase>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<AnalysisPhase>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<AnalysisPhase>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<AnalysisPhase>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <br>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","bugFix":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bc81b8298bf74e3d0182a5f4aeffc183e92b459","date":1530756345,"type":5,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <br>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * The special case is a CharacterFilter that just returns a string, which we then map to a single token without type.\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<>(phaseNL.size());\n    for (Map.Entry<String, Object> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      Object phaseValue = phaseEntry.getValue();\n\n      if (phaseValue instanceof String) {\n        // We are looking at CharacterFilter, which - exceptionally - returns a string\n        TokenInfo tokenInfo = buildTokenInfoFromString((String) phaseValue);\n        phase.addTokenInfo(tokenInfo);\n      } else {\n        List<NamedList<Object>> tokens = (List<NamedList<Object>>) phaseEntry.getValue();\n        for (NamedList<Object> token : tokens) {\n          TokenInfo tokenInfo = buildTokenInfo(token);\n          phase.addTokenInfo(tokenInfo);\n        }\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <br>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <br>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildPhases(NamedList[List[NamedList[Object]]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:\n   * <br>\n   * <pre><code>\n   *  &lt;lst name=\"index\"&gt;\n   *      &lt;arr name=\"Tokenizer\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      &lt;arr name=\"Filter1\"&gt;\n   *          &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *          &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *          &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *          &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *          &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *          &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *          &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *      &lt;/arr&gt;\n   *      ...\n   *  &lt;/lst&gt;\n   * </code></pre>\n   *\n   * @param phaseNL The names list to parse.\n   *\n   * @return The built analysis phases list.\n   */\n  protected List<AnalysisPhase> buildPhases(NamedList<List<NamedList<Object>>> phaseNL) {\n    List<AnalysisPhase> phases = new ArrayList<>(phaseNL.size());\n    for (Map.Entry<String, List<NamedList<Object>>> phaseEntry : phaseNL) {\n      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());\n      List<NamedList<Object>> tokens = phaseEntry.getValue();\n      for (NamedList<Object> token : tokens) {\n        TokenInfo tokenInfo = buildTokenInfo(token);\n        phase.addTokenInfo(tokenInfo);\n      }\n      phases.add(phase);\n    }\n    return phases;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","2bc81b8298bf74e3d0182a5f4aeffc183e92b459"],"2bc81b8298bf74e3d0182a5f4aeffc183e92b459":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bc81b8298bf74e3d0182a5f4aeffc183e92b459"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","2bc81b8298bf74e3d0182a5f4aeffc183e92b459"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"2bc81b8298bf74e3d0182a5f4aeffc183e92b459":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2bc81b8298bf74e3d0182a5f4aeffc183e92b459","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}