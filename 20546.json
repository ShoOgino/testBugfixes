{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","commits":[{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}