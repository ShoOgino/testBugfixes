{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = uninstallCodecsAfterClass();\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    InfoStream.setDefault(savedInfoStream);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}