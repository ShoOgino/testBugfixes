{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    // initially the user provided value,\n    // but if minNrShouldMatch == optional.size(),\n    // we will optimize and move these to required, making this 0\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    List<Scorer> required = new ArrayList<>();\n    // clauses that are required AND participate in scoring, subset of 'required'\n    List<Scorer> requiredScoring = new ArrayList<>();\n    List<Scorer> prohibited = new ArrayList<>();\n    List<Scorer> optional = new ArrayList<>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      Scorer subScorer = w.scorer(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        required.add(subScorer);\n        if (c.isScoring()) {\n          requiredScoring.add(subScorer);\n        }\n      } else if (c.isProhibited()) {\n        prohibited.add(subScorer);\n      } else {\n        optional.add(subScorer);\n      }\n    }\n    \n    // scorer simplifications:\n    \n    if (optional.size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      required.addAll(optional);\n      requiredScoring.addAll(optional);\n      optional.clear();\n      minShouldMatch = 0;\n    }\n    \n    if (required.isEmpty() && optional.isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (optional.size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n      optional.clear();\n    }\n    \n    // three cases: conjunction, disjunction, or mix\n    \n    // pure conjunction\n    if (optional.isEmpty()) {\n      return excl(req(required, requiredScoring, disableCoord), prohibited);\n    }\n    \n    // pure disjunction\n    if (required.isEmpty()) {\n      return excl(opt(optional, minShouldMatch, disableCoord), prohibited);\n    }\n    \n    // conjunction-disjunction mix:\n    // we create the required and optional pieces with coord disabled, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional, factoring the\n    // number of optional terms into the coord calculation\n    \n    Scorer req = excl(req(required, requiredScoring, true), prohibited);\n    Scorer opt = opt(optional, minShouldMatch, true);\n\n    // TODO: clean this up: it's horrible\n    if (disableCoord) {\n      if (minShouldMatch > 0) {\n        return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt), 1F);\n      } else {\n        return new ReqOptSumScorer(req, opt);          \n      }\n    } else if (optional.size() == 1) {\n      if (minShouldMatch > 0) {\n        return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt), coord(requiredScoring.size()+1, maxCoord));\n      } else {\n        float coordReq = coord(requiredScoring.size(), maxCoord);\n        float coordBoth = coord(requiredScoring.size() + 1, maxCoord);\n        return new BooleanTopLevelScorers.ReqSingleOptScorer(req, opt, coordReq, coordBoth);\n      }\n    } else {\n      if (minShouldMatch > 0) {\n        return new BooleanTopLevelScorers.CoordinatingConjunctionScorer(this, coords, req, requiredScoring.size(), opt);\n      } else {\n        return new BooleanTopLevelScorers.ReqMultiOptScorer(req, opt, requiredScoring.size(), coords); \n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    // initially the user provided value,\n    // but if minNrShouldMatch == optional.size(),\n    // we will optimize and move these to required, making this 0\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    List<Scorer> required = new ArrayList<>();\n    // clauses that are required AND participate in scoring, subset of 'required'\n    List<Scorer> requiredScoring = new ArrayList<>();\n    List<Scorer> prohibited = new ArrayList<>();\n    List<Scorer> optional = new ArrayList<>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      Scorer subScorer = w.scorer(context, acceptDocs);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        required.add(subScorer);\n        if (c.isScoring()) {\n          requiredScoring.add(subScorer);\n        }\n      } else if (c.isProhibited()) {\n        prohibited.add(subScorer);\n      } else {\n        optional.add(subScorer);\n      }\n    }\n    \n    // scorer simplifications:\n    \n    if (optional.size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      required.addAll(optional);\n      requiredScoring.addAll(optional);\n      optional.clear();\n      minShouldMatch = 0;\n    }\n    \n    if (required.isEmpty() && optional.isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (optional.size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n      optional.clear();\n    }\n    \n    // three cases: conjunction, disjunction, or mix\n    \n    // pure conjunction\n    if (optional.isEmpty()) {\n      return excl(req(required, requiredScoring, disableCoord), prohibited);\n    }\n    \n    // pure disjunction\n    if (required.isEmpty()) {\n      return excl(opt(optional, minShouldMatch, disableCoord), prohibited);\n    }\n    \n    // conjunction-disjunction mix:\n    // we create the required and optional pieces with coord disabled, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional, factoring the\n    // number of optional terms into the coord calculation\n    \n    Scorer req = excl(req(required, requiredScoring, true), prohibited);\n    Scorer opt = opt(optional, minShouldMatch, true);\n\n    // TODO: clean this up: it's horrible\n    if (disableCoord) {\n      if (minShouldMatch > 0) {\n        return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt), 1F);\n      } else {\n        return new ReqOptSumScorer(req, opt);          \n      }\n    } else if (optional.size() == 1) {\n      if (minShouldMatch > 0) {\n        return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt), coord(requiredScoring.size()+1, maxCoord));\n      } else {\n        float coordReq = coord(requiredScoring.size(), maxCoord);\n        float coordBoth = coord(requiredScoring.size() + 1, maxCoord);\n        return new BooleanTopLevelScorers.ReqSingleOptScorer(req, opt, coordReq, coordBoth);\n      }\n    } else {\n      if (minShouldMatch > 0) {\n        return new BooleanTopLevelScorers.CoordinatingConjunctionScorer(this, coords, req, requiredScoring.size(), opt);\n      } else {\n        return new BooleanTopLevelScorers.ReqMultiOptScorer(req, opt, requiredScoring.size(), coords); \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    // initially the user provided value,\n    // but if minNrShouldMatch == optional.size(),\n    // we will optimize and move these to required, making this 0\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    List<Scorer> required = new ArrayList<>();\n    // clauses that are required AND participate in scoring, subset of 'required'\n    List<Scorer> requiredScoring = new ArrayList<>();\n    List<Scorer> prohibited = new ArrayList<>();\n    List<Scorer> optional = new ArrayList<>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      Scorer subScorer = w.scorer(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        required.add(subScorer);\n        if (c.isScoring()) {\n          requiredScoring.add(subScorer);\n        }\n      } else if (c.isProhibited()) {\n        prohibited.add(subScorer);\n      } else {\n        optional.add(subScorer);\n      }\n    }\n    \n    // scorer simplifications:\n    \n    if (optional.size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      required.addAll(optional);\n      requiredScoring.addAll(optional);\n      optional.clear();\n      minShouldMatch = 0;\n    }\n    \n    if (required.isEmpty() && optional.isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (optional.size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n      optional.clear();\n    }\n    \n    // three cases: conjunction, disjunction, or mix\n    \n    // pure conjunction\n    if (optional.isEmpty()) {\n      return excl(req(required, requiredScoring), prohibited);\n    }\n    \n    // pure disjunction\n    if (required.isEmpty()) {\n      return excl(opt(optional, minShouldMatch), prohibited);\n    }\n    \n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n    \n    Scorer req = excl(req(required, requiredScoring), prohibited);\n    Scorer opt = opt(optional, minShouldMatch);\n\n    if (minShouldMatch > 0) {\n      return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      return new ReqOptSumScorer(req, opt);          \n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    // initially the user provided value,\n    // but if minNrShouldMatch == optional.size(),\n    // we will optimize and move these to required, making this 0\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    List<Scorer> required = new ArrayList<>();\n    // clauses that are required AND participate in scoring, subset of 'required'\n    List<Scorer> requiredScoring = new ArrayList<>();\n    List<Scorer> prohibited = new ArrayList<>();\n    List<Scorer> optional = new ArrayList<>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      Scorer subScorer = w.scorer(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        required.add(subScorer);\n        if (c.isScoring()) {\n          requiredScoring.add(subScorer);\n        }\n      } else if (c.isProhibited()) {\n        prohibited.add(subScorer);\n      } else {\n        optional.add(subScorer);\n      }\n    }\n    \n    // scorer simplifications:\n    \n    if (optional.size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      required.addAll(optional);\n      requiredScoring.addAll(optional);\n      optional.clear();\n      minShouldMatch = 0;\n    }\n    \n    if (required.isEmpty() && optional.isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (optional.size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n      optional.clear();\n    }\n    \n    // three cases: conjunction, disjunction, or mix\n    \n    // pure conjunction\n    if (optional.isEmpty()) {\n      return excl(req(required, requiredScoring, disableCoord), prohibited);\n    }\n    \n    // pure disjunction\n    if (required.isEmpty()) {\n      return excl(opt(optional, minShouldMatch, disableCoord), prohibited);\n    }\n    \n    // conjunction-disjunction mix:\n    // we create the required and optional pieces with coord disabled, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional, factoring the\n    // number of optional terms into the coord calculation\n    \n    Scorer req = excl(req(required, requiredScoring, true), prohibited);\n    Scorer opt = opt(optional, minShouldMatch, true);\n\n    // TODO: clean this up: it's horrible\n    if (disableCoord) {\n      if (minShouldMatch > 0) {\n        return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt), 1F);\n      } else {\n        return new ReqOptSumScorer(req, opt);          \n      }\n    } else if (optional.size() == 1) {\n      if (minShouldMatch > 0) {\n        return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt), coord(requiredScoring.size()+1, maxCoord));\n      } else {\n        float coordReq = coord(requiredScoring.size(), maxCoord);\n        float coordBoth = coord(requiredScoring.size() + 1, maxCoord);\n        return new BooleanTopLevelScorers.ReqSingleOptScorer(req, opt, coordReq, coordBoth);\n      }\n    } else {\n      if (minShouldMatch > 0) {\n        return new BooleanTopLevelScorers.CoordinatingConjunctionScorer(this, coords, req, requiredScoring.size(), opt);\n      } else {\n        return new BooleanTopLevelScorers.ReqMultiOptScorer(req, opt, requiredScoring.size(), coords); \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    // initially the user provided value,\n    // but if minNrShouldMatch == optional.size(),\n    // we will optimize and move these to required, making this 0\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    List<Scorer> required = new ArrayList<>();\n    // clauses that are required AND participate in scoring, subset of 'required'\n    List<Scorer> requiredScoring = new ArrayList<>();\n    List<Scorer> prohibited = new ArrayList<>();\n    List<Scorer> optional = new ArrayList<>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      Scorer subScorer = w.scorer(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        required.add(subScorer);\n        if (c.isScoring()) {\n          requiredScoring.add(subScorer);\n        }\n      } else if (c.isProhibited()) {\n        prohibited.add(subScorer);\n      } else {\n        optional.add(subScorer);\n      }\n    }\n    \n    // scorer simplifications:\n    \n    if (optional.size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      required.addAll(optional);\n      requiredScoring.addAll(optional);\n      optional.clear();\n      minShouldMatch = 0;\n    }\n    \n    if (required.isEmpty() && optional.isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (optional.size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n      optional.clear();\n    }\n    \n    // three cases: conjunction, disjunction, or mix\n    \n    // pure conjunction\n    if (optional.isEmpty()) {\n      return excl(req(required, requiredScoring), prohibited);\n    }\n    \n    // pure disjunction\n    if (required.isEmpty()) {\n      return excl(opt(optional, minShouldMatch), prohibited);\n    }\n    \n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n    \n    Scorer req = excl(req(required, requiredScoring), prohibited);\n    Scorer opt = opt(optional, minShouldMatch);\n\n    if (minShouldMatch > 0) {\n      return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      return new ReqOptSumScorer(req, opt);          \n    }\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    // initially the user provided value,\n    // but if minNrShouldMatch == optional.size(),\n    // we will optimize and move these to required, making this 0\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    List<Scorer> required = new ArrayList<>();\n    // clauses that are required AND participate in scoring, subset of 'required'\n    List<Scorer> requiredScoring = new ArrayList<>();\n    List<Scorer> prohibited = new ArrayList<>();\n    List<Scorer> optional = new ArrayList<>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      Scorer subScorer = w.scorer(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        required.add(subScorer);\n        if (c.isScoring()) {\n          requiredScoring.add(subScorer);\n        }\n      } else if (c.isProhibited()) {\n        prohibited.add(subScorer);\n      } else {\n        optional.add(subScorer);\n      }\n    }\n    \n    // scorer simplifications:\n    \n    if (optional.size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      required.addAll(optional);\n      requiredScoring.addAll(optional);\n      optional.clear();\n      minShouldMatch = 0;\n    }\n    \n    if (required.isEmpty() && optional.isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (optional.size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n      optional.clear();\n    }\n    \n    // three cases: conjunction, disjunction, or mix\n    \n    // pure conjunction\n    if (optional.isEmpty()) {\n      return excl(req(required, requiredScoring, disableCoord), prohibited);\n    }\n    \n    // pure disjunction\n    if (required.isEmpty()) {\n      return excl(opt(optional, minShouldMatch, disableCoord), prohibited);\n    }\n    \n    // conjunction-disjunction mix:\n    // we create the required and optional pieces with coord disabled, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional, factoring the\n    // number of optional terms into the coord calculation\n    \n    Scorer req = excl(req(required, requiredScoring, true), prohibited);\n    Scorer opt = opt(optional, minShouldMatch, true);\n\n    // TODO: clean this up: it's horrible\n    if (disableCoord) {\n      if (minShouldMatch > 0) {\n        return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt), 1F);\n      } else {\n        return new ReqOptSumScorer(req, opt);          \n      }\n    } else if (optional.size() == 1) {\n      if (minShouldMatch > 0) {\n        return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt), coord(requiredScoring.size()+1, maxCoord));\n      } else {\n        float coordReq = coord(requiredScoring.size(), maxCoord);\n        float coordBoth = coord(requiredScoring.size() + 1, maxCoord);\n        return new BooleanTopLevelScorers.ReqSingleOptScorer(req, opt, coordReq, coordBoth);\n      }\n    } else {\n      if (minShouldMatch > 0) {\n        return new BooleanTopLevelScorers.CoordinatingConjunctionScorer(this, coords, req, requiredScoring.size(), opt);\n      } else {\n        return new BooleanTopLevelScorers.ReqMultiOptScorer(req, opt, requiredScoring.size(), coords); \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(false);\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    // initially the user provided value,\n    // but if minNrShouldMatch == optional.size(),\n    // we will optimize and move these to required, making this 0\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    List<Scorer> required = new ArrayList<>();\n    // clauses that are required AND participate in scoring, subset of 'required'\n    List<Scorer> requiredScoring = new ArrayList<>();\n    List<Scorer> prohibited = new ArrayList<>();\n    List<Scorer> optional = new ArrayList<>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      Scorer subScorer = w.scorer(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        required.add(subScorer);\n        if (c.isScoring()) {\n          requiredScoring.add(subScorer);\n        }\n      } else if (c.isProhibited()) {\n        prohibited.add(subScorer);\n      } else {\n        optional.add(subScorer);\n      }\n    }\n    \n    // scorer simplifications:\n    \n    if (optional.size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      required.addAll(optional);\n      requiredScoring.addAll(optional);\n      optional.clear();\n      minShouldMatch = 0;\n    }\n    \n    if (required.isEmpty() && optional.isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (optional.size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n      optional.clear();\n    }\n    \n    // three cases: conjunction, disjunction, or mix\n    \n    // pure conjunction\n    if (optional.isEmpty()) {\n      return excl(req(required, requiredScoring), prohibited);\n    }\n    \n    // pure disjunction\n    if (required.isEmpty()) {\n      return excl(opt(optional, minShouldMatch), prohibited);\n    }\n    \n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n    \n    Scorer req = excl(req(required, requiredScoring), prohibited);\n    Scorer opt = opt(optional, minShouldMatch);\n\n    if (minShouldMatch > 0) {\n      return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      return new ReqOptSumScorer(req, opt);          \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(false);\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    // initially the user provided value,\n    // but if minNrShouldMatch == optional.size(),\n    // we will optimize and move these to required, making this 0\n    int minShouldMatch = query.getMinimumNumberShouldMatch();\n\n    List<Scorer> required = new ArrayList<>();\n    // clauses that are required AND participate in scoring, subset of 'required'\n    List<Scorer> requiredScoring = new ArrayList<>();\n    List<Scorer> prohibited = new ArrayList<>();\n    List<Scorer> optional = new ArrayList<>();\n    Iterator<BooleanClause> cIter = query.iterator();\n    for (Weight w  : weights) {\n      BooleanClause c =  cIter.next();\n      Scorer subScorer = w.scorer(context);\n      if (subScorer == null) {\n        if (c.isRequired()) {\n          return null;\n        }\n      } else if (c.isRequired()) {\n        required.add(subScorer);\n        if (c.isScoring()) {\n          requiredScoring.add(subScorer);\n        }\n      } else if (c.isProhibited()) {\n        prohibited.add(subScorer);\n      } else {\n        optional.add(subScorer);\n      }\n    }\n    \n    // scorer simplifications:\n    \n    if (optional.size() == minShouldMatch) {\n      // any optional clauses are in fact required\n      required.addAll(optional);\n      requiredScoring.addAll(optional);\n      optional.clear();\n      minShouldMatch = 0;\n    }\n    \n    if (required.isEmpty() && optional.isEmpty()) {\n      // no required and optional clauses.\n      return null;\n    } else if (optional.size() < minShouldMatch) {\n      // either >1 req scorer, or there are 0 req scorers and at least 1\n      // optional scorer. Therefore if there are not enough optional scorers\n      // no documents will be matched by the query\n      return null;\n    }\n\n    // we don't need scores, so if we have required clauses, drop optional clauses completely\n    if (!needsScores && minShouldMatch == 0 && required.size() > 0) {\n      optional.clear();\n    }\n    \n    // three cases: conjunction, disjunction, or mix\n    \n    // pure conjunction\n    if (optional.isEmpty()) {\n      return excl(req(required, requiredScoring), prohibited);\n    }\n    \n    // pure disjunction\n    if (required.isEmpty()) {\n      return excl(opt(optional, minShouldMatch), prohibited);\n    }\n    \n    // conjunction-disjunction mix:\n    // we create the required and optional pieces, and then\n    // combine the two: if minNrShouldMatch > 0, then it's a conjunction: because the\n    // optional side must match. otherwise it's required + optional\n    \n    Scorer req = excl(req(required, requiredScoring), prohibited);\n    Scorer opt = opt(optional, minShouldMatch);\n\n    if (minShouldMatch > 0) {\n      return new ConjunctionScorer(this, Arrays.asList(req, opt), Arrays.asList(req, opt));\n    } else {\n      return new ReqOptSumScorer(req, opt);          \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(Long.MAX_VALUE);\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(Long.MAX_VALUE);\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(Long.MAX_VALUE);\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#scorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(Long.MAX_VALUE);\n  }\n\n","sourceOld":"  @Override\n  public Scorer scorer(LeafReaderContext context) throws IOException {\n    ScorerSupplier scorerSupplier = scorerSupplier(context);\n    if (scorerSupplier == null) {\n      return null;\n    }\n    return scorerSupplier.get(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["c8a0e442f7b61f811680273b25da95994a724466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"c8a0e442f7b61f811680273b25da95994a724466":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0f4464508ee83288c8c4585b533f9faaa93aa314","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","302d34f2c66e8d489ee13078305c330cbf67b226"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"c8a0e442f7b61f811680273b25da95994a724466":["dca67e06c96e95a8d9ef07418b6299bfd981523b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}