{"path":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      if (termArrays.size() == 1) {                // optimize one-term case\n        Term[] terms = (Term[])termArrays.get(0);\n      \n        BooleanScorer bos = new BooleanScorer(searcher.getSimilarity());\n        for (int i=0; i<terms.length; i++) {\n          TermDocs docs = reader.termDocs(terms[i]);\n          if (docs != null)\n            bos.add(new TermScorer(this, docs, searcher.getSimilarity(),\n                                   reader.norms(field)), false, false);\n        }\n      \n        return bos;\n      }\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, searcher.getSimilarity(),\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917a0c943aa5659b50fffad7167c838653bd809d","date":1042572030,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, searcher.getSimilarity(),\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      if (termArrays.size() == 1) {                // optimize one-term case\n        Term[] terms = (Term[])termArrays.get(0);\n      \n        BooleanScorer bos = new BooleanScorer(searcher.getSimilarity());\n        for (int i=0; i<terms.length; i++) {\n          TermDocs docs = reader.termDocs(terms[i]);\n          if (docs != null)\n            bos.add(new TermScorer(this, docs, searcher.getSimilarity(),\n                                   reader.norms(field)), false, false);\n        }\n      \n        return bos;\n      }\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, searcher.getSimilarity(),\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c","date":1076095160,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getSimilarity(searcher),\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, searcher.getSimilarity(),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, searcher.getSimilarity(),\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4988178cfbf5117763a956901f39d3efa3282e72","date":1095241130,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getSimilarity(searcher),\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery.PhrasePrefixWeight#scorer(IndexReader).mjava","sourceNew":null,"sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df8dadf22de84eeb1294e70792e292ecf8ded564":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4988178cfbf5117763a956901f39d3efa3282e72"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c":["917a0c943aa5659b50fffad7167c838653bd809d"],"917a0c943aa5659b50fffad7167c838653bd809d":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"4988178cfbf5117763a956901f39d3efa3282e72":["8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c"]},"commit2Childs":{"df8dadf22de84eeb1294e70792e292ecf8ded564":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["917a0c943aa5659b50fffad7167c838653bd809d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c":["4988178cfbf5117763a956901f39d3efa3282e72"],"917a0c943aa5659b50fffad7167c838653bd809d":["8bf3ec8f8b7d926e51ec6723d33679ea12e5d23c"],"4988178cfbf5117763a956901f39d3efa3282e72":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}