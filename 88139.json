{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testSingletonNoLimit().mjava","commits":[{"id":"61ac0dce4a88019c61f1217b42753d505b9d9c84","date":1399218479,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testSingletonNoLimit().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingletonNoLimit() {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(BasicAutomata.makeString(\"foobar\"), -1);\n    assertEquals(1, result.size());\n    IntsRef scratch = new IntsRef();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(result.contains(scratch));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testSingletonNoLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testSingletonNoLimit().mjava","sourceNew":"  public void testSingletonNoLimit() {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(BasicAutomata.makeStringLight(\"foobar\"), -1);\n    assertEquals(1, result.size());\n    IntsRef scratch = new IntsRef();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(result.contains(scratch));\n  }\n\n","sourceOld":"  public void testSingletonNoLimit() {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(BasicAutomata.makeString(\"foobar\"), -1);\n    assertEquals(1, result.size());\n    IntsRef scratch = new IntsRef();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(result.contains(scratch));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testSingletonNoLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testSingletonNoLimit().mjava","sourceNew":"  public void testSingletonNoLimit() {\n    Set<IntsRef> result = Operations.getFiniteStrings(Automata.makeString(\"foobar\"), -1);\n    assertEquals(1, result.size());\n    IntsRef scratch = new IntsRef();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(result.contains(scratch));\n  }\n\n","sourceOld":"  public void testSingletonNoLimit() {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(BasicAutomata.makeStringLight(\"foobar\"), -1);\n    assertEquals(1, result.size());\n    IntsRef scratch = new IntsRef();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(result.contains(scratch));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testSingletonNoLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestSpecialOperations#testSingletonNoLimit().mjava","sourceNew":"  public void testSingletonNoLimit() {\n    Set<IntsRef> result = Operations.getFiniteStrings(Automata.makeString(\"foobar\"), -1);\n    assertEquals(1, result.size());\n    IntsRef scratch = new IntsRef();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(result.contains(scratch));\n  }\n\n","sourceOld":"  public void testSingletonNoLimit() {\n    Set<IntsRef> result = SpecialOperations.getFiniteStrings(BasicAutomata.makeString(\"foobar\"), -1);\n    assertEquals(1, result.size());\n    IntsRef scratch = new IntsRef();\n    Util.toUTF32(\"foobar\".toCharArray(), 0, 6, scratch);\n    assertTrue(result.contains(scratch));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"61ac0dce4a88019c61f1217b42753d505b9d9c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"5c84485629d80d203608e8975a1139de9933cc38":["61ac0dce4a88019c61f1217b42753d505b9d9c84","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"61ac0dce4a88019c61f1217b42753d505b9d9c84":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61ac0dce4a88019c61f1217b42753d505b9d9c84"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}