{"path":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<File>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfully opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfully opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#getLatestFile(String,String).mjava","sourceNew":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfully opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","sourceOld":"  /* Open the latest version of a file... fileName if that exists, or\n   * the last fileName.* after being sorted lexicographically.\n   * Older versions of the file are deleted (and queued for deletion if\n   * that fails).\n   */\n  public static InputStream getLatestFile(String dirName, String fileName) throws FileNotFoundException \n  {\n    Collection<File> oldFiles=null;\n    final String prefix = fileName+'.';\n    File f = new File(dirName, fileName);\n    InputStream is = null;\n\n    // there can be a race between checking for a file and opening it...\n    // the user may have just put a new version in and deleted an old version.\n    // try multiple times in a row.\n    for (int retry=0; retry<10 && is==null; retry++) {\n      try {\n        if (!f.exists()) {\n          File dir = new File(dirName);\n          String[] names = dir.list(new FilenameFilter() {\n            @Override\n            public boolean accept(File dir, String name) {\n              return name.startsWith(prefix);\n            }\n          });\n          Arrays.sort(names);\n          f = new File(dir, names[names.length-1]);\n          oldFiles = new ArrayList<>();\n          for (int i=0; i<names.length-1; i++) {\n            oldFiles.add(new File(dir, names[i]));\n          }\n        }\n\n        is = new FileInputStream(f);\n      } catch (Exception e) {\n        // swallow exception for now\n      }\n    }\n\n    // allow exception to be thrown from the final try.\n    if (is == null) {\n      is = new FileInputStream(f);\n    }\n\n    // delete old files only after we have successfuly opened the newest\n    if (oldFiles != null) {\n      delete(oldFiles);\n    }\n\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}