{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testLargeWrites().mjava","commits":[{"id":"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3","date":1412358952,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testLargeWrites().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * This test that writes larger than the size of the buffer output\n   * will correctly increment the file pointer.\n   */\n  public void testLargeWrites() throws IOException {\n    Directory dir = getDirectory(createTempDir(\"largeWrites\"));\n    IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n    \n    byte[] largeBuf = new byte[2048];\n    for (int i=0; i<largeBuf.length; i++) {\n      largeBuf[i] = (byte) (Math.random() * 256);\n    }\n    \n    long currentPos = os.getFilePointer();\n    os.writeBytes(largeBuf, largeBuf.length);\n    \n    try {\n      assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n    } finally {\n      os.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["017bea7152e5f8c54b62fc8048a90e95117a626b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testLargeWrites().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * This test that writes larger than the size of the buffer output\n   * will correctly increment the file pointer.\n   */\n  public void testLargeWrites() throws IOException {\n    Directory dir = getDirectory(createTempDir(\"largeWrites\"));\n    IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n    \n    byte[] largeBuf = new byte[2048];\n    for (int i=0; i<largeBuf.length; i++) {\n      largeBuf[i] = (byte) (Math.random() * 256);\n    }\n    \n    long currentPos = os.getFilePointer();\n    os.writeBytes(largeBuf, largeBuf.length);\n    \n    try {\n      assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n    } finally {\n      os.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"017bea7152e5f8c54b62fc8048a90e95117a626b","date":1440186158,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testLargeWrites().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testLargeWrites().mjava","sourceNew":"  /** \n   * This test that writes larger than the size of the buffer output\n   * will correctly increment the file pointer.\n   */\n  public void testLargeWrites() throws IOException {\n    Directory dir = getDirectory(createTempDir(\"largeWrites\"));\n    IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n    \n    byte[] largeBuf = new byte[2048];\n    random().nextBytes(largeBuf);\n    \n    long currentPos = os.getFilePointer();\n    os.writeBytes(largeBuf, largeBuf.length);\n    \n    try {\n      assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n    } finally {\n      os.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * This test that writes larger than the size of the buffer output\n   * will correctly increment the file pointer.\n   */\n  public void testLargeWrites() throws IOException {\n    Directory dir = getDirectory(createTempDir(\"largeWrites\"));\n    IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n    \n    byte[] largeBuf = new byte[2048];\n    for (int i=0; i<largeBuf.length; i++) {\n      largeBuf[i] = (byte) (Math.random() * 256);\n    }\n    \n    long currentPos = os.getFilePointer();\n    os.writeBytes(largeBuf, largeBuf.length);\n    \n    try {\n      assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n    } finally {\n      os.close();\n    }\n    dir.close();\n  }\n\n","bugFix":["04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testLargeWrites().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testLargeWrites().mjava","sourceNew":"  /** \n   * This test that writes larger than the size of the buffer output\n   * will correctly increment the file pointer.\n   */\n  public void testLargeWrites() throws IOException {\n    try (Directory dir = getDirectory(createTempDir(\"largeWrites\"))) {\n      IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n\n      byte[] largeBuf = new byte[2048];\n      random().nextBytes(largeBuf);\n\n      long currentPos = os.getFilePointer();\n      os.writeBytes(largeBuf, largeBuf.length);\n\n      try {\n        assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n      } finally {\n        os.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * This test that writes larger than the size of the buffer output\n   * will correctly increment the file pointer.\n   */\n  public void testLargeWrites() throws IOException {\n    Directory dir = getDirectory(createTempDir(\"largeWrites\"));\n    IndexOutput os = dir.createOutput(\"testBufferStart.txt\", newIOContext(random()));\n    \n    byte[] largeBuf = new byte[2048];\n    random().nextBytes(largeBuf);\n    \n    long currentPos = os.getFilePointer();\n    os.writeBytes(largeBuf, largeBuf.length);\n    \n    try {\n      assertEquals(currentPos + largeBuf.length, os.getFilePointer());\n    } finally {\n      os.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"017bea7152e5f8c54b62fc8048a90e95117a626b":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["017bea7152e5f8c54b62fc8048a90e95117a626b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["017bea7152e5f8c54b62fc8048a90e95117a626b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3","9bb9a29a5e71a90295f175df8919802993142c9a"],"017bea7152e5f8c54b62fc8048a90e95117a626b":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}