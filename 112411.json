{"path":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#toHexString(String).mjava","commits":[{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#toHexString(String).mjava","pathOld":"/dev/null","sourceNew":"  // for debugging\n  public static String toHexString(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<s.length();i++) {\n      char ch = s.charAt(i);\n      if (i > 0) {\n        sb.append(' ');\n      }\n      if (ch < 128) {\n        sb.append(ch);\n      } else {\n        if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n          sb.append(\"H:\");\n        } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END) {\n          sb.append(\"L:\");\n        } else if (ch > UNI_SUR_LOW_END) {\n          if (ch == 0xffff) {\n            sb.append(\"F:\");\n          } else {\n            sb.append(\"E:\");\n          }\n        }\n        \n        sb.append(\"0x\" + Integer.toHexString(ch));\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#toHexString(String).mjava","pathOld":"/dev/null","sourceNew":"  // for debugging\n  public static String toHexString(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<s.length();i++) {\n      char ch = s.charAt(i);\n      if (i > 0) {\n        sb.append(' ');\n      }\n      if (ch < 128) {\n        sb.append(ch);\n      } else {\n        if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n          sb.append(\"H:\");\n        } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END) {\n          sb.append(\"L:\");\n        } else if (ch > UNI_SUR_LOW_END) {\n          if (ch == 0xffff) {\n            sb.append(\"F:\");\n          } else {\n            sb.append(\"E:\");\n          }\n        }\n        \n        sb.append(\"0x\" + Integer.toHexString(ch));\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#toHexString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#toHexString(String).mjava","sourceNew":"  // for debugging\n  public static String toHexString(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<s.length();i++) {\n      char ch = s.charAt(i);\n      if (i > 0) {\n        sb.append(' ');\n      }\n      if (ch < 128) {\n        sb.append(ch);\n      } else {\n        if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n          sb.append(\"H:\");\n        } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END) {\n          sb.append(\"L:\");\n        } else if (ch > UNI_SUR_LOW_END) {\n          if (ch == 0xffff) {\n            sb.append(\"F:\");\n          } else {\n            sb.append(\"E:\");\n          }\n        }\n        \n        sb.append(\"0x\" + Integer.toHexString(ch));\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  // for debugging\n  public static String toHexString(String s) {\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<s.length();i++) {\n      char ch = s.charAt(i);\n      if (i > 0) {\n        sb.append(' ');\n      }\n      if (ch < 128) {\n        sb.append(ch);\n      } else {\n        if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {\n          sb.append(\"H:\");\n        } else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END) {\n          sb.append(\"L:\");\n        } else if (ch > UNI_SUR_LOW_END) {\n          if (ch == 0xffff) {\n            sb.append(\"F:\");\n          } else {\n            sb.append(\"E:\");\n          }\n        }\n        \n        sb.append(\"0x\" + Integer.toHexString(ch));\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08932c793647a36953d1816b1060121f48820d3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["08932c793647a36953d1816b1060121f48820d3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"08932c793647a36953d1816b1060121f48820d3f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}