{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(weight, prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(weight, prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34960be55e437a6c96fe66046bf22d33346059f6","date":1363980156,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new MinShouldMatchSumScorer(weight, prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(weight, prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":null,"sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new MinShouldMatchSumScorer(weight, prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":null,"sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new MinShouldMatchSumScorer(weight, prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":null,"sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new MinShouldMatchSumScorer(weight, prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["34960be55e437a6c96fe66046bf22d33346059f6"],"34960be55e437a6c96fe66046bf22d33346059f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["34960be55e437a6c96fe66046bf22d33346059f6","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["34960be55e437a6c96fe66046bf22d33346059f6","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"]},"commit2Childs":{"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"34960be55e437a6c96fe66046bf22d33346059f6":["d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["34960be55e437a6c96fe66046bf22d33346059f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7605579001505896d48b07160075a5c8b8e128e":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}