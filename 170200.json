{"path":"backwards/src/test/org/apache/lucene/util/TestNumericUtils#testFloats().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/TestNumericUtils#testFloats().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloats() throws Exception {\n    float[] vals=new float[]{\n      Float.NEGATIVE_INFINITY, -2.3E25f, -1.0E15f, -1.0f, -1.0E-1f, -1.0E-2f, -0.0f, \n      +0.0f, 1.0E-2f, 1.0E-1f, 1.0f, 1.0E15f, 2.3E25f, Float.POSITIVE_INFINITY\n    };\n    int[] intVals=new int[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      intVals[i]=NumericUtils.floatToSortableInt(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Float.compare(vals[i], NumericUtils.sortableIntToFloat(intVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<intVals.length; i++) {\n      assertTrue( \"check sort order\", intVals[i-1] < intVals[i] );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#testFloats().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestNumericUtils#testFloats().mjava","sourceNew":"  public void testFloats() throws Exception {\n    float[] vals=new float[]{\n      Float.NEGATIVE_INFINITY, -2.3E25f, -1.0E15f, -1.0f, -1.0E-1f, -1.0E-2f, -0.0f, \n      +0.0f, 1.0E-2f, 1.0E-1f, 1.0f, 1.0E15f, 2.3E25f, Float.POSITIVE_INFINITY\n    };\n    int[] intVals=new int[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      intVals[i]=NumericUtils.floatToSortableInt(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Float.compare(vals[i], NumericUtils.sortableIntToFloat(intVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<intVals.length; i++) {\n      assertTrue( \"check sort order\", intVals[i-1] < intVals[i] );\n    }\n  }\n\n","sourceOld":"  public void testFloats() throws Exception {\n    float[] vals=new float[]{\n      Float.NEGATIVE_INFINITY, -2.3E25f, -1.0E15f, -1.0f, -1.0E-1f, -1.0E-2f, -0.0f, \n      +0.0f, 1.0E-2f, 1.0E-1f, 1.0f, 1.0E15f, 2.3E25f, Float.POSITIVE_INFINITY\n    };\n    int[] intVals=new int[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      intVals[i]=NumericUtils.floatToSortableInt(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Float.compare(vals[i], NumericUtils.sortableIntToFloat(intVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<intVals.length; i++) {\n      assertTrue( \"check sort order\", intVals[i-1] < intVals[i] );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}