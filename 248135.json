{"path":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#getSupportedEngines(ScriptEngineManager,boolean).mjava","commits":[{"id":"9e2656623e57ced6c16aae473bab02019c951802","date":1342126181,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#getSupportedEngines(ScriptEngineManager,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For error messages - returns null if there are any exceptions of any \n   * kind building the string (or of the list is empty for some unknown reason).\n   * @param ext - if true, list of extensions, otherwise a list of engine names\n   */\n  private static String getSupportedEngines(ScriptEngineManager mgr,\n                                            boolean ext) {\n    String result = null;\n    try {\n      List<ScriptEngineFactory> factories = mgr.getEngineFactories();\n      if (null == factories) return result;\n\n      Set<String> engines = new LinkedHashSet<String>(factories.size());\n      for (ScriptEngineFactory f : factories) {\n        if (ext) {\n          engines.addAll(f.getExtensions());\n        } else {\n          engines.addAll(f.getNames());\n        }\n      }\n      result = StringUtils.join(engines, \", \");\n    } catch (RuntimeException e) {\n      /* :NOOP: */\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#getSupportedEngines(ScriptEngineManager,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For error messages - returns null if there are any exceptions of any \n   * kind building the string (or of the list is empty for some unknown reason).\n   * @param ext - if true, list of extensions, otherwise a list of engine names\n   */\n  private static String getSupportedEngines(ScriptEngineManager mgr,\n                                            boolean ext) {\n    String result = null;\n    try {\n      List<ScriptEngineFactory> factories = mgr.getEngineFactories();\n      if (null == factories) return result;\n\n      Set<String> engines = new LinkedHashSet<String>(factories.size());\n      for (ScriptEngineFactory f : factories) {\n        if (ext) {\n          engines.addAll(f.getExtensions());\n        } else {\n          engines.addAll(f.getNames());\n        }\n      }\n      result = StringUtils.join(engines, \", \");\n    } catch (RuntimeException e) {\n      /* :NOOP: */\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#getSupportedEngines(ScriptEngineManager,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For error messages - returns null if there are any exceptions of any \n   * kind building the string (or of the list is empty for some unknown reason).\n   * @param ext - if true, list of extensions, otherwise a list of engine names\n   */\n  private static String getSupportedEngines(ScriptEngineManager mgr,\n                                            boolean ext) {\n    String result = null;\n    try {\n      List<ScriptEngineFactory> factories = mgr.getEngineFactories();\n      if (null == factories) return result;\n\n      Set<String> engines = new LinkedHashSet<String>(factories.size());\n      for (ScriptEngineFactory f : factories) {\n        if (ext) {\n          engines.addAll(f.getExtensions());\n        } else {\n          engines.addAll(f.getNames());\n        }\n      }\n      result = StringUtils.join(engines, \", \");\n    } catch (RuntimeException e) {\n      /* :NOOP: */\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#getSupportedEngines(ScriptEngineManager,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#getSupportedEngines(ScriptEngineManager,boolean).mjava","sourceNew":"  /**\n   * For error messages - returns null if there are any exceptions of any \n   * kind building the string (or of the list is empty for some unknown reason).\n   * @param ext - if true, list of extensions, otherwise a list of engine names\n   */\n  private static String getSupportedEngines(ScriptEngineManager mgr,\n                                            boolean ext) {\n    String result = null;\n    try {\n      List<ScriptEngineFactory> factories = mgr.getEngineFactories();\n      if (null == factories) return result;\n\n      Set<String> engines = new LinkedHashSet<>(factories.size());\n      for (ScriptEngineFactory f : factories) {\n        if (ext) {\n          engines.addAll(f.getExtensions());\n        } else {\n          engines.addAll(f.getNames());\n        }\n      }\n      result = StringUtils.join(engines, \", \");\n    } catch (RuntimeException e) {\n      /* :NOOP: */\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For error messages - returns null if there are any exceptions of any \n   * kind building the string (or of the list is empty for some unknown reason).\n   * @param ext - if true, list of extensions, otherwise a list of engine names\n   */\n  private static String getSupportedEngines(ScriptEngineManager mgr,\n                                            boolean ext) {\n    String result = null;\n    try {\n      List<ScriptEngineFactory> factories = mgr.getEngineFactories();\n      if (null == factories) return result;\n\n      Set<String> engines = new LinkedHashSet<String>(factories.size());\n      for (ScriptEngineFactory f : factories) {\n        if (ext) {\n          engines.addAll(f.getExtensions());\n        } else {\n          engines.addAll(f.getNames());\n        }\n      }\n      result = StringUtils.join(engines, \", \");\n    } catch (RuntimeException e) {\n      /* :NOOP: */\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#getSupportedEngines(ScriptEngineManager,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/StatelessScriptUpdateProcessorFactory#getSupportedEngines(ScriptEngineManager,boolean).mjava","sourceNew":"  /**\n   * For error messages - returns null if there are any exceptions of any \n   * kind building the string (or of the list is empty for some unknown reason).\n   * @param ext - if true, list of extensions, otherwise a list of engine names\n   */\n  private static String getSupportedEngines(ScriptEngineManager mgr,\n                                            boolean ext) {\n    String result = null;\n    try {\n      List<ScriptEngineFactory> factories = mgr.getEngineFactories();\n      if (null == factories) return result;\n\n      Set<String> engines = new LinkedHashSet<>(factories.size());\n      for (ScriptEngineFactory f : factories) {\n        if (ext) {\n          engines.addAll(f.getExtensions());\n        } else {\n          engines.addAll(f.getNames());\n        }\n      }\n      result = String.join(\", \", engines);\n    } catch (RuntimeException e) {\n      /* :NOOP: */\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * For error messages - returns null if there are any exceptions of any \n   * kind building the string (or of the list is empty for some unknown reason).\n   * @param ext - if true, list of extensions, otherwise a list of engine names\n   */\n  private static String getSupportedEngines(ScriptEngineManager mgr,\n                                            boolean ext) {\n    String result = null;\n    try {\n      List<ScriptEngineFactory> factories = mgr.getEngineFactories();\n      if (null == factories) return result;\n\n      Set<String> engines = new LinkedHashSet<>(factories.size());\n      for (ScriptEngineFactory f : factories) {\n        if (ext) {\n          engines.addAll(f.getExtensions());\n        } else {\n          engines.addAll(f.getNames());\n        }\n      }\n      result = StringUtils.join(engines, \", \");\n    } catch (RuntimeException e) {\n      /* :NOOP: */\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9e2656623e57ced6c16aae473bab02019c951802"],"9e2656623e57ced6c16aae473bab02019c951802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ac6494315d04f68950d2f00f5436b4861bcd467"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0ac6494315d04f68950d2f00f5436b4861bcd467"],"9e2656623e57ced6c16aae473bab02019c951802":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"0ac6494315d04f68950d2f00f5436b4861bcd467":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e2656623e57ced6c16aae473bab02019c951802","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}