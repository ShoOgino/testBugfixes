{"path":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentCommitInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator(null);\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentCommitInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      Fields fields = reader.fields();\n      for (String field : fields)  {\n        Terms terms = fields.terms(field);\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator(null);\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(reader.getLiveDocs(), null, PostingsEnum.FLAG_POSITIONS);\n\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator(null);\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null);\n\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator(null);\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(reader.getLiveDocs(), null, PostingsEnum.POSITIONS);\n\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator(null);\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(reader.getLiveDocs(), null, PostingsEnum.FLAG_POSITIONS);\n\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(reader.getLiveDocs(), null, PostingsEnum.POSITIONS);\n\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator(null);\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(reader.getLiveDocs(), null, PostingsEnum.POSITIONS);\n\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(reader.getLiveDocs(), null, PostingsEnum.POSITIONS);\n\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    Fields fields = reader.fields();\n    for (String field : fields)  {\n      Terms terms = fields.terms(field);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + field + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, false, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, false, newIOContext(random()), Collections.emptyMap());\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, false, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, false, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, false, newIOContext(random()), Collections.emptyMap());\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec68e7c41fed133827595747d853cad504e481e","date":1583501052,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentCommitInfo).mjava","sourceNew":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  private void printSegment(PrintWriter out, SegmentCommitInfo si)\n    throws Exception {\n    SegmentReader reader = new SegmentReader(si, Version.LATEST.major, false, newIOContext(random()));\n\n    for (int i = 0; i < reader.numDocs(); i++)\n      out.println(reader.document(i));\n\n    for (FieldInfo fieldInfo : reader.getFieldInfos()) {\n      if (fieldInfo.getIndexOptions() == IndexOptions.NONE) {\n        continue;\n      }\n      Terms terms = reader.terms(fieldInfo.name);\n      assertNotNull(terms);\n      TermsEnum tis = terms.iterator();\n      while(tis.next() != null) {\n\n        out.print(\"  term=\" + fieldInfo.name + \":\" + tis.term());\n        out.println(\"    DF=\" + tis.docFreq());\n\n        PostingsEnum positions = tis.postings(null, PostingsEnum.POSITIONS);\n\n        final Bits liveDocs = reader.getLiveDocs();\n        while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          if (liveDocs != null && liveDocs.get(positions.docID()) == false) {\n            continue;\n          }\n          out.print(\" doc=\" + positions.docID());\n          out.print(\" TF=\" + positions.freq());\n          out.print(\" pos=\");\n          out.print(positions.nextPosition());\n          for (int j = 1; j < positions.freq(); j++)\n            out.print(\",\" + positions.nextPosition());\n          out.println(\"\");\n        }\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["28288370235ed02234a64753cdbf0c6ec096304a"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"bec68e7c41fed133827595747d853cad504e481e":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"51f5280f31484820499077f41fcdfe92d527d9dc":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"28288370235ed02234a64753cdbf0c6ec096304a":["31741cf1390044e38a2ec3127cf302ba841bfd75","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec68e7c41fed133827595747d853cad504e481e"]},"commit2Childs":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"bec68e7c41fed133827595747d853cad504e481e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"28288370235ed02234a64753cdbf0c6ec096304a":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["bec68e7c41fed133827595747d853cad504e481e"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["51f5280f31484820499077f41fcdfe92d527d9dc"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}