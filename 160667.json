{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = TestUtil.randomSimpleString(random(), 1, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = TestUtil.randomSimpleString(random(), 1, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = TestUtil.randomSimpleString(random(), 1, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = TestUtil.randomSimpleString(random(), 1, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48cf7d27089ca96453966bc767c0ec53121efa43","date":1493221697,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","sourceNew":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = TestUtil.randomSimpleString(random(), 1, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = TestUtil.randomSimpleString(random(), 1, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":null,"bugIntro":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","sourceNew":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = TestUtil.randomSimpleString(random(), 1, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = TestUtil.randomSimpleString(random(), 1, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946","date":1499084472,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","sourceNew":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":["48cf7d27089ca96453966bc767c0ec53121efa43","816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","sourceNew":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","sourceNew":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9bfbea0278c393fb53c503162381e1c3b66929c","date":1573576925,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#testEnabled().mjava","sourceNew":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = TEST_MBEAN_SERVER.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","sourceOld":"  @Test\n  public void testEnabled() throws Exception {\n    String root1 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    PluginInfo pluginInfo1 = createReporterPluginInfo(root1, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo1, coreMetricManager.getTag());\n\n    String root2 = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n    assertFalse(root2.equals(root1));\n    PluginInfo pluginInfo2 = createReporterPluginInfo(root2, false);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo2, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(reporters.containsKey(pluginInfo1.name + \"@\" + coreMetricManager.getTag()));\n    assertTrue(reporters.containsKey(pluginInfo2.name + \"@\" + coreMetricManager.getTag()));\n\n    String scope = PREFIX + SolrMetricTestUtils.getRandomScope(random(), true);\n    SolrInfoBean.Category category = SolrMetricTestUtils.getRandomCategory(random(), true);\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(random(), true);\n    SolrMetricProducer producer = SolrMetricTestUtils.getProducerOf(metricManager, category, scope, metrics);\n    coreMetricManager.registerMetricProducer(scope, producer);\n    Set<ObjectInstance> objects = mBeanServer.queryMBeans(null, null);\n    assertEquals(metrics.size(), objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root1.equals(o.getObjectName().getDomain())).count());\n    assertEquals(0, objects.stream().\n        filter(o -> scope.equals(o.getObjectName().getKeyProperty(\"scope\")) &&\n            root2.equals(o.getObjectName().getDomain())).count());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","48cf7d27089ca96453966bc767c0ec53121efa43"],"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946":["48cf7d27089ca96453966bc767c0ec53121efa43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"48cf7d27089ca96453966bc767c0ec53121efa43":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9bfbea0278c393fb53c503162381e1c3b66929c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946":["30c8e5574b55d57947e989443dfde611646530ee","f90f26c648df8320685eb76fec8bb9972e1994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"30c8e5574b55d57947e989443dfde611646530ee":[],"48cf7d27089ca96453966bc767c0ec53121efa43":["e9017cf144952056066919f1ebc7897ff9bd71b1","c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["a9bfbea0278c393fb53c503162381e1c3b66929c"],"816521ebaad5add9cb96bb88c577394e2938c40b":["48cf7d27089ca96453966bc767c0ec53121efa43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}