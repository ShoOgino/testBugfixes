{"path":"sandbox/projects/appex/src/java/org/krysalis/centipede/ant/task/ClassAvailableTask#contains(File,String).mjava","commits":[{"id":"e3074d05d861bc1436ee03619fdee547f9c51d22","date":1020526983,"type":0,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"sandbox/projects/appex/src/java/org/krysalis/centipede/ant/task/ClassAvailableTask#contains(File,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Get an inputstream to a given resource in the given file which may\n     * either be a directory or a zip file.\n     *\n     * @param file the file (directory or jar) in which to search for the resource.\n     * @param resourceName the name of the resource for which a stream is required.\n     *\n     * @return a stream to the required resource or null if the resource cannot be\n     * found in the given file object\n     */\n    private boolean contains(File file, String resourceName) {\n        try {\n            if (!file.exists()) {\n                return false;\n            }\n\n            if (file.isDirectory()) {\n                File resource = new File(file, resourceName);\n\n                if (resource.exists()) {\n                    return true;\n                }\n            }\n            else {\n                // is the zip file in the cache\n                ZipFile zipFile = (ZipFile)zipFiles.get(file);\n                if (zipFile == null) {\n                    zipFile = new ZipFile(file);\n                    zipFiles.put(file, zipFile);\n                }\n                ZipEntry entry = zipFile.getEntry(resourceName);\n                if (entry != null) {\n                    return true;\n                }\n            }\n        }\n        catch (Exception e) {\n            log(\"Ignoring Exception \" + e.getClass().getName() + \": \" + e.getMessage() +\n                \" reading resource \" + resourceName + \" from \" + file, Project.MSG_VERBOSE);\n        }\n\n        return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f35ba86e9cc568fdc800d780c620749584b1d5bc","date":1051838861,"type":4,"author":"Kelvin Tan","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/projects/appex/src/java/org/krysalis/centipede/ant/task/ClassAvailableTask#contains(File,String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Get an inputstream to a given resource in the given file which may\n     * either be a directory or a zip file.\n     *\n     * @param file the file (directory or jar) in which to search for the resource.\n     * @param resourceName the name of the resource for which a stream is required.\n     *\n     * @return a stream to the required resource or null if the resource cannot be\n     * found in the given file object\n     */\n    private boolean contains(File file, String resourceName) {\n        try {\n            if (!file.exists()) {\n                return false;\n            }\n\n            if (file.isDirectory()) {\n                File resource = new File(file, resourceName);\n\n                if (resource.exists()) {\n                    return true;\n                }\n            }\n            else {\n                // is the zip file in the cache\n                ZipFile zipFile = (ZipFile)zipFiles.get(file);\n                if (zipFile == null) {\n                    zipFile = new ZipFile(file);\n                    zipFiles.put(file, zipFile);\n                }\n                ZipEntry entry = zipFile.getEntry(resourceName);\n                if (entry != null) {\n                    return true;\n                }\n            }\n        }\n        catch (Exception e) {\n            log(\"Ignoring Exception \" + e.getClass().getName() + \": \" + e.getMessage() +\n                \" reading resource \" + resourceName + \" from \" + file, Project.MSG_VERBOSE);\n        }\n\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f35ba86e9cc568fdc800d780c620749584b1d5bc":["e3074d05d861bc1436ee03619fdee547f9c51d22"],"e3074d05d861bc1436ee03619fdee547f9c51d22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f35ba86e9cc568fdc800d780c620749584b1d5bc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3074d05d861bc1436ee03619fdee547f9c51d22"],"f35ba86e9cc568fdc800d780c620749584b1d5bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3074d05d861bc1436ee03619fdee547f9c51d22":["f35ba86e9cc568fdc800d780c620749584b1d5bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}