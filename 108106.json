{"path":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setMaxWriteMBPerSec(Double,IOContext.Context).mjava","commits":[{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setMaxWriteMBPerSec(Double,IOContext.Context).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the maximum (approx) MB/sec allowed by all write IO performed by\n   * {@link IndexOutput} created with the given {@link IOContext.Context}. Pass\n   * <code>null</code> to have no limit.\n   * \n   * <p>\n   * <b>NOTE</b>: For already created {@link IndexOutput} instances there is no\n   * guarantee this new rate will apply to them; it will only be guaranteed to\n   * apply for new created {@link IndexOutput} instances.\n   * <p>\n   * <b>NOTE</b>: this is an optional operation and might not be respected by\n   * all Directory implementations. Currently only {@link FSDirectory buffered}\n   * Directory implementations use rate-limiting.\n   * \n   * @throws IllegalArgumentException\n   *           if context is <code>null</code>\n   * @throws AlreadyClosedException if the {@link Directory} is already closed\n   * @lucene.experimental\n   */\n  public void setMaxWriteMBPerSec(Double mbPerSec, IOContext.Context context) {\n    ensureOpen();\n    if (context == null) {\n      throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    final int ord = context.ordinal();\n    final RateLimiter limiter = contextRateLimiters[ord];\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        contextRateLimiters[ord] = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n      contextRateLimiters[ord] = limiter; // cross the mem barrier again\n    } else {\n      contextRateLimiters[ord] = new RateLimiter.SimpleRateLimiter(mbPerSec);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setMaxWriteMBPerSec(Double,IOContext.Context).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the maximum (approx) MB/sec allowed by all write IO performed by\n   * {@link IndexOutput} created with the given {@link IOContext.Context}. Pass\n   * <code>null</code> to have no limit.\n   * \n   * <p>\n   * <b>NOTE</b>: For already created {@link IndexOutput} instances there is no\n   * guarantee this new rate will apply to them; it will only be guaranteed to\n   * apply for new created {@link IndexOutput} instances.\n   * <p>\n   * <b>NOTE</b>: this is an optional operation and might not be respected by\n   * all Directory implementations. Currently only {@link FSDirectory buffered}\n   * Directory implementations use rate-limiting.\n   * \n   * @throws IllegalArgumentException\n   *           if context is <code>null</code>\n   * @throws AlreadyClosedException if the {@link Directory} is already closed\n   * @lucene.experimental\n   */\n  public void setMaxWriteMBPerSec(Double mbPerSec, IOContext.Context context) {\n    ensureOpen();\n    if (context == null) {\n      throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    final int ord = context.ordinal();\n    final RateLimiter limiter = contextRateLimiters[ord];\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        contextRateLimiters[ord] = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n      contextRateLimiters[ord] = limiter; // cross the mem barrier again\n    } else {\n      contextRateLimiters[ord] = new RateLimiter.SimpleRateLimiter(mbPerSec);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setMaxWriteMBPerSec(Double,IOContext.Context).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the maximum (approx) MB/sec allowed by all write IO performed by\n   * {@link IndexOutput} created with the given {@link IOContext.Context}. Pass\n   * <code>null</code> to have no limit.\n   * \n   * <p>\n   * <b>NOTE</b>: For already created {@link IndexOutput} instances there is no\n   * guarantee this new rate will apply to them; it will only be guaranteed to\n   * apply for new created {@link IndexOutput} instances.\n   * <p>\n   * <b>NOTE</b>: this is an optional operation and might not be respected by\n   * all Directory implementations. Currently only {@link FSDirectory buffered}\n   * Directory implementations use rate-limiting.\n   * \n   * @throws IllegalArgumentException\n   *           if context is <code>null</code>\n   * @throws AlreadyClosedException if the {@link Directory} is already closed\n   * @lucene.experimental\n   */\n  public void setMaxWriteMBPerSec(Double mbPerSec, IOContext.Context context) {\n    ensureOpen();\n    if (context == null) {\n      throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    final int ord = context.ordinal();\n    final RateLimiter limiter = contextRateLimiters[ord];\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        contextRateLimiters[ord] = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n      contextRateLimiters[ord] = limiter; // cross the mem barrier again\n    } else {\n      contextRateLimiters[ord] = new RateLimiter.SimpleRateLimiter(mbPerSec);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4583d4aac44f313f9af74ab6d81baab3f976232":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4583d4aac44f313f9af74ab6d81baab3f976232"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"]},"commit2Childs":{"e4583d4aac44f313f9af74ab6d81baab3f976232":["407687e67faf6e1f02a211ca078d8e3eed631027","5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4583d4aac44f313f9af74ab6d81baab3f976232","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}