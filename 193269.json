{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","commits":[{"id":"0ce8de354eb40085752030725cb2bee2b0ae536c","date":1469029371,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermContext.build(new MultiReader().getContext(), new Term(\"foo\", \"bar\"))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d7ed691d627802acc5be44a639b67b1360467b","date":1469032270,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermContext.build(new MultiReader().getContext(), new Term(\"foo\", \"bar\"))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermContext.build(new MultiReader().getContext(), new Term(\"foo\", \"bar\"))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","sourceNew":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermStates.build(new MultiReader().getContext(), new Term(\"foo\", \"bar\"), true)));\n  }\n\n","sourceOld":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermContext.build(new MultiReader().getContext(), new Term(\"foo\", \"bar\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","sourceNew":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermStates.build(new MultiReader().getContext(), new Term(\"foo\", \"bar\"), true)));\n  }\n\n","sourceOld":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermContext.build(new MultiReader().getContext(), new Term(\"foo\", \"bar\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429","date":1590107358,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermQuery#testEquals().mjava","sourceNew":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    final CompositeReaderContext context;\n    try (MultiReader multiReader = new MultiReader()) {\n      context = multiReader.getContext();\n    }\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermStates.build(context, new Term(\"foo\", \"bar\"), true)));\n  }\n\n","sourceOld":"  public void testEquals() throws IOException {\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\")));\n    QueryUtils.checkUnequal(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"baz\")));\n    QueryUtils.checkEqual(\n        new TermQuery(new Term(\"foo\", \"bar\")),\n        new TermQuery(new Term(\"foo\", \"bar\"), TermStates.build(new MultiReader().getContext(), new Term(\"foo\", \"bar\"), true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["35d7ed691d627802acc5be44a639b67b1360467b","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["35d7ed691d627802acc5be44a639b67b1360467b"],"0ce8de354eb40085752030725cb2bee2b0ae536c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"35d7ed691d627802acc5be44a639b67b1360467b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ce8de354eb40085752030725cb2bee2b0ae536c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35d7ed691d627802acc5be44a639b67b1360467b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0ce8de354eb40085752030725cb2bee2b0ae536c":["35d7ed691d627802acc5be44a639b67b1360467b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce8de354eb40085752030725cb2bee2b0ae536c","35d7ed691d627802acc5be44a639b67b1360467b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"35d7ed691d627802acc5be44a639b67b1360467b":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}