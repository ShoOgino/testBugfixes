{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","commits":[{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","sourceNew":null,"sourceOld":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","sourceNew":null,"sourceOld":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(Utils.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["102da6baafc0f534a59f31729343dbab9d3b9e9a","19498030e0adab22f604f935cae3c03dcf0952a6"],"19498030e0adab22f604f935cae3c03dcf0952a6":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"0c924d4069ef5a5bc479a493befe0121aada6896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["b693a83132c9e45afcd564fd65a25b60ed80388b","0c924d4069ef5a5bc479a493befe0121aada6896"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}