{"path":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/ContentEncodingModule#responsePhase3Handler(Response,RoRequest).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/ContentEncodingModule#responsePhase3Handler(Response,RoRequest).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Invoked by the HTTPClient.\n     *\n     * @param resp                 Description of the Parameter\n     * @param req                  Description of the Parameter\n     * @exception IOException      Description of the Exception\n     * @exception ModuleException  Description of the Exception\n     */\n    public void responsePhase3Handler(Response resp, RoRequest req)\n        throws IOException, ModuleException\n    {\n        String ce = resp.getHeader(\"Content-Encoding\");\n        if (ce == null || req.getMethod().equals(\"HEAD\") ||\n                resp.getStatusCode() == 206)\n        {\n            return;\n        }\n\n        Vector pce;\n        try\n        {\n            pce = Util.parseHeader(ce);\n        }\n        catch (ParseException pe)\n        {\n            throw new ModuleException(pe.toString());\n        }\n\n        if (pce.size() == 0)\n        {\n            return;\n        }\n\n        String encoding = ((HttpHeaderElement) pce.firstElement()).getName();\n        if (encoding.equalsIgnoreCase(\"gzip\") ||\n                encoding.equalsIgnoreCase(\"x-gzip\"))\n        {\n            Log.write(Log.MODS, \"CEM:   pushing gzip-input-stream\");\n\n            resp.inp_stream = new GZIPInputStream(resp.inp_stream);\n            pce.removeElementAt(pce.size() - 1);\n            resp.deleteHeader(\"Content-length\");\n        }\n        else if (encoding.equalsIgnoreCase(\"deflate\"))\n        {\n            Log.write(Log.MODS, \"CEM:   pushing inflater-input-stream\");\n\n            resp.inp_stream = new InflaterInputStream(resp.inp_stream);\n            pce.removeElementAt(pce.size() - 1);\n            resp.deleteHeader(\"Content-length\");\n        }\n        else if (encoding.equalsIgnoreCase(\"compress\") ||\n                encoding.equalsIgnoreCase(\"x-compress\"))\n        {\n            Log.write(Log.MODS, \"CEM:   pushing uncompress-input-stream\");\n\n            resp.inp_stream = new UncompressInputStream(resp.inp_stream);\n            pce.removeElementAt(pce.size() - 1);\n            resp.deleteHeader(\"Content-length\");\n        }\n        else if (encoding.equalsIgnoreCase(\"identity\"))\n        {\n            Log.write(Log.MODS, \"CEM:   ignoring 'identity' token\");\n            pce.removeElementAt(pce.size() - 1);\n        }\n        else\n        {\n            Log.write(Log.MODS, \"CEM:   Unknown content encoding '\" +\n                    encoding + \"'\");\n        }\n\n        if (pce.size() > 0)\n        {\n            resp.setHeader(\"Content-Encoding\", Util.assembleHeader(pce));\n        }\n        else\n        {\n            resp.deleteHeader(\"Content-Encoding\");\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/ContentEncodingModule#responsePhase3Handler(Response,RoRequest).mjava","sourceNew":null,"sourceOld":"    /**\n     * Invoked by the HTTPClient.\n     *\n     * @param resp                 Description of the Parameter\n     * @param req                  Description of the Parameter\n     * @exception IOException      Description of the Exception\n     * @exception ModuleException  Description of the Exception\n     */\n    public void responsePhase3Handler(Response resp, RoRequest req)\n        throws IOException, ModuleException\n    {\n        String ce = resp.getHeader(\"Content-Encoding\");\n        if (ce == null || req.getMethod().equals(\"HEAD\") ||\n                resp.getStatusCode() == 206)\n        {\n            return;\n        }\n\n        Vector pce;\n        try\n        {\n            pce = Util.parseHeader(ce);\n        }\n        catch (ParseException pe)\n        {\n            throw new ModuleException(pe.toString());\n        }\n\n        if (pce.size() == 0)\n        {\n            return;\n        }\n\n        String encoding = ((HttpHeaderElement) pce.firstElement()).getName();\n        if (encoding.equalsIgnoreCase(\"gzip\") ||\n                encoding.equalsIgnoreCase(\"x-gzip\"))\n        {\n            Log.write(Log.MODS, \"CEM:   pushing gzip-input-stream\");\n\n            resp.inp_stream = new GZIPInputStream(resp.inp_stream);\n            pce.removeElementAt(pce.size() - 1);\n            resp.deleteHeader(\"Content-length\");\n        }\n        else if (encoding.equalsIgnoreCase(\"deflate\"))\n        {\n            Log.write(Log.MODS, \"CEM:   pushing inflater-input-stream\");\n\n            resp.inp_stream = new InflaterInputStream(resp.inp_stream);\n            pce.removeElementAt(pce.size() - 1);\n            resp.deleteHeader(\"Content-length\");\n        }\n        else if (encoding.equalsIgnoreCase(\"compress\") ||\n                encoding.equalsIgnoreCase(\"x-compress\"))\n        {\n            Log.write(Log.MODS, \"CEM:   pushing uncompress-input-stream\");\n\n            resp.inp_stream = new UncompressInputStream(resp.inp_stream);\n            pce.removeElementAt(pce.size() - 1);\n            resp.deleteHeader(\"Content-length\");\n        }\n        else if (encoding.equalsIgnoreCase(\"identity\"))\n        {\n            Log.write(Log.MODS, \"CEM:   ignoring 'identity' token\");\n            pce.removeElementAt(pce.size() - 1);\n        }\n        else\n        {\n            Log.write(Log.MODS, \"CEM:   Unknown content encoding '\" +\n                    encoding + \"'\");\n        }\n\n        if (pce.size() > 0)\n        {\n            resp.setHeader(\"Content-Encoding\", Util.assembleHeader(pce));\n        }\n        else\n        {\n            resp.deleteHeader(\"Content-Encoding\");\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}