{"path":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","pathOld":"src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    //writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    //writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    //writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    //writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    //writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","date":1286712181,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Random,Similarity,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Random random, Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(random, new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  // TODO: randomize\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    Directory directory = new MockDirectoryWrapper(new RAMDirectory());\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n\n    // TODO randomize this\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    reader = IndexReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(reader));\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/PayloadHelper#setUp(Similarity,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets up a RAMDirectory, and adds documents (using English.intToEnglish()) with two fields: field and multiField\n   * and analyzes them using the PayloadAnalyzer\n   * @param similarity The Similarity class to use in the Searcher\n   * @param numDocs The num docs to add\n   * @return An IndexSearcher\n   * @throws IOException\n   */\n  public IndexSearcher setUp(Similarity similarity, int numDocs) throws IOException {\n    RAMDirectory directory = new RAMDirectory();\n    PayloadAnalyzer analyzer = new PayloadAnalyzer();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setSimilarity(similarity));\n    // writer.infoStream = System.out;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(new Field(FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(MULTI_FIELD, English.intToEnglish(i) + \"  \" + English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(NO_PAYLOAD_FIELD, English.intToEnglish(i), Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    //writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    searcher.setSimilarity(similarity);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["a05409176bd65129d67a785ee70e881e238a9aef"],"53a31399f2471493d67b19a95c028a74e0113b6a":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","53a31399f2471493d67b19a95c028a74e0113b6a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","53a31399f2471493d67b19a95c028a74e0113b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53a31399f2471493d67b19a95c028a74e0113b6a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}