{"path":"lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","sourceNew":"  // for assert\n  private boolean valid(Pair<A,B> pair) {\n    final boolean noOutput1 = pair.output1.equals(outputs1.getNoOutput());\n    final boolean noOutput2 = pair.output2.equals(outputs2.getNoOutput());\n\n    if (noOutput1 && pair.output1 != outputs1.getNoOutput()) {\n      System.out.println(\"invalid0\");\n      return false;\n    }\n\n    if (noOutput2 && pair.output2 != outputs2.getNoOutput()) {\n      System.out.println(\"invalid1\");\n      return false;\n    }\n\n    if (noOutput1 && noOutput2) {\n      if (pair != NO_OUTPUT) {\n        System.out.println(\"invalid2\");\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n","sourceOld":"  // for assert\n  private boolean valid(Pair<A,B> pair) {\n    final boolean noOutput1 = pair.output1.equals(outputs1.getNoOutput());\n    final boolean noOutput2 = pair.output2.equals(outputs2.getNoOutput());\n\n    if (noOutput1 && pair.output1 != outputs1.getNoOutput()) {\n      System.out.println(\"invalid0\");\n      return false;\n    }\n\n    if (noOutput2 && pair.output2 != outputs2.getNoOutput()) {\n      System.out.println(\"invalid1\");\n      return false;\n    }\n\n    if (noOutput1 && noOutput2) {\n      if (pair != NO_OUTPUT) {\n        System.out.println(\"invalid2\");\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80a4851212f9d622db935c1915734fedaa4f1dd","date":1331902480,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","sourceNew":"  // for assert\n  private boolean valid(Pair<A,B> pair) {\n    final boolean noOutput1 = pair.output1.equals(outputs1.getNoOutput());\n    final boolean noOutput2 = pair.output2.equals(outputs2.getNoOutput());\n\n    if (noOutput1 && pair.output1 != outputs1.getNoOutput()) {\n      return false;\n    }\n\n    if (noOutput2 && pair.output2 != outputs2.getNoOutput()) {\n      return false;\n    }\n\n    if (noOutput1 && noOutput2) {\n      if (pair != NO_OUTPUT) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n","sourceOld":"  // for assert\n  private boolean valid(Pair<A,B> pair) {\n    final boolean noOutput1 = pair.output1.equals(outputs1.getNoOutput());\n    final boolean noOutput2 = pair.output2.equals(outputs2.getNoOutput());\n\n    if (noOutput1 && pair.output1 != outputs1.getNoOutput()) {\n      System.out.println(\"invalid0\");\n      return false;\n    }\n\n    if (noOutput2 && pair.output2 != outputs2.getNoOutput()) {\n      System.out.println(\"invalid1\");\n      return false;\n    }\n\n    if (noOutput1 && noOutput2) {\n      if (pair != NO_OUTPUT) {\n        System.out.println(\"invalid2\");\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82ae1be1dc68d59626e4bb94d2029d309b20878","date":1400195857,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","sourceNew":"  // for assert\n  private boolean valid(Pair<A,B> pair) {\n    final boolean noOutput1 = pair.output1.equals(outputs1.getNoOutput());\n    final boolean noOutput2 = pair.output2.equals(outputs2.getNoOutput());\n\n    if (noOutput1 && pair.output1 != outputs1.getNoOutput()) {\n      System.out.println(\"no1\");\n      return false;\n    }\n\n    if (noOutput2 && pair.output2 != outputs2.getNoOutput()) {\n      System.out.println(\"no2\");\n      return false;\n    }\n\n    if (noOutput1 && noOutput2) {\n      if (pair != NO_OUTPUT) {\n        System.out.println(\"no3\");\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n","sourceOld":"  // for assert\n  private boolean valid(Pair<A,B> pair) {\n    final boolean noOutput1 = pair.output1.equals(outputs1.getNoOutput());\n    final boolean noOutput2 = pair.output2.equals(outputs2.getNoOutput());\n\n    if (noOutput1 && pair.output1 != outputs1.getNoOutput()) {\n      return false;\n    }\n\n    if (noOutput2 && pair.output2 != outputs2.getNoOutput()) {\n      return false;\n    }\n\n    if (noOutput1 && noOutput2) {\n      if (pair != NO_OUTPUT) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20","date":1400712483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/PairOutputs#valid(Pair[A,B]).mjava","sourceNew":"  // for assert\n  private boolean valid(Pair<A,B> pair) {\n    final boolean noOutput1 = pair.output1.equals(outputs1.getNoOutput());\n    final boolean noOutput2 = pair.output2.equals(outputs2.getNoOutput());\n\n    if (noOutput1 && pair.output1 != outputs1.getNoOutput()) {\n      return false;\n    }\n\n    if (noOutput2 && pair.output2 != outputs2.getNoOutput()) {\n      return false;\n    }\n\n    if (noOutput1 && noOutput2) {\n      if (pair != NO_OUTPUT) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n","sourceOld":"  // for assert\n  private boolean valid(Pair<A,B> pair) {\n    final boolean noOutput1 = pair.output1.equals(outputs1.getNoOutput());\n    final boolean noOutput2 = pair.output2.equals(outputs2.getNoOutput());\n\n    if (noOutput1 && pair.output1 != outputs1.getNoOutput()) {\n      System.out.println(\"no1\");\n      return false;\n    }\n\n    if (noOutput2 && pair.output2 != outputs2.getNoOutput()) {\n      System.out.println(\"no2\");\n      return false;\n    }\n\n    if (noOutput1 && noOutput2) {\n      if (pair != NO_OUTPUT) {\n        System.out.println(\"no3\");\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["e82ae1be1dc68d59626e4bb94d2029d309b20878"],"e80a4851212f9d622db935c1915734fedaa4f1dd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82ae1be1dc68d59626e4bb94d2029d309b20878":["e80a4851212f9d622db935c1915734fedaa4f1dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e80a4851212f9d622db935c1915734fedaa4f1dd"]},"commit2Childs":{"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":[],"e80a4851212f9d622db935c1915734fedaa4f1dd":["e82ae1be1dc68d59626e4bb94d2029d309b20878","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e80a4851212f9d622db935c1915734fedaa4f1dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e82ae1be1dc68d59626e4bb94d2029d309b20878":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}