{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSortMulti().mjava","commits":[{"id":"5d227b67bc440aadc8c5f7c554c1015a0558b183","date":1283170954,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSortMulti().mjava","pathOld":"/dev/null","sourceNew":"  // OutOfOrderMulti*Collector\n  public void testOutOfOrderDocsScoringSortMulti() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC, SortField.FIELD_SCORE) };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderMultiComparatorNonScoringCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorNonScoringCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSortMulti().mjava","pathOld":"/dev/null","sourceNew":"  // OutOfOrderMulti*Collector\n  public void testOutOfOrderDocsScoringSortMulti() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC, SortField.FIELD_SCORE) };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderMultiComparatorNonScoringCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorNonScoringCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSortMulti().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSortMulti().mjava","sourceNew":"  // OutOfOrderMulti*Collector\n  public void testOutOfOrderDocsScoringSortMulti() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC, SortField.FIELD_SCORE) };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderMultiComparatorNonScoringCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorNonScoringCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","sourceOld":"  // OutOfOrderMulti*Collector\n  public void testOutOfOrderDocsScoringSortMulti() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC, SortField.FIELD_SCORE) };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderMultiComparatorNonScoringCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorNonScoringCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderMultiComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5d227b67bc440aadc8c5f7c554c1015a0558b183"],"5d227b67bc440aadc8c5f7c554c1015a0558b183":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d227b67bc440aadc8c5f7c554c1015a0558b183"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d227b67bc440aadc8c5f7c554c1015a0558b183":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d227b67bc440aadc8c5f7c554c1015a0558b183","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}