{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getNonZkLeaderAssumption(SolrQueryRequest).mjava","commits":[{"id":"e2fe35ac47f8f51356d6c1724455d18f31c94fae","date":1337966698,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getNonZkLeaderAssumption(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a boolean indicating wether or not the caller should behave as \n   * if this is the \"leader\" even when ZooKeeper is not enabled.  \n   * (Even in non zk mode, tests may simulate updates to/from a leader)\n   */\n  public static boolean getNonZkLeaderAssumption(SolrQueryRequest req) {\n    DistribPhase phase = \n      DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    // if we have been told we are coming from a leader, then we are \n    // definitely not the leader.  Otherwise assume we are.\n    return DistribPhase.FROMLEADER != phase;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7602e63987582091a0e432f8d8f7619d2206fab7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7602e63987582091a0e432f8d8f7619d2206fab7","date":1361393626,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getNonZkLeaderAssumption(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor#getNonZkLeaderAssumption(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Returns a boolean indicating whether or not the caller should behave as\n   * if this is the \"leader\" even when ZooKeeper is not enabled.  \n   * (Even in non zk mode, tests may simulate updates to/from a leader)\n   */\n  public static boolean getNonZkLeaderAssumption(SolrQueryRequest req) {\n    DistribPhase phase = \n      DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    // if we have been told we are coming from a leader, then we are \n    // definitely not the leader.  Otherwise assume we are.\n    return DistribPhase.FROMLEADER != phase;\n  }\n\n","sourceOld":"  /**\n   * Returns a boolean indicating wether or not the caller should behave as \n   * if this is the \"leader\" even when ZooKeeper is not enabled.  \n   * (Even in non zk mode, tests may simulate updates to/from a leader)\n   */\n  public static boolean getNonZkLeaderAssumption(SolrQueryRequest req) {\n    DistribPhase phase = \n      DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n\n    // if we have been told we are coming from a leader, then we are \n    // definitely not the leader.  Otherwise assume we are.\n    return DistribPhase.FROMLEADER != phase;\n  }\n\n","bugFix":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7602e63987582091a0e432f8d8f7619d2206fab7":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7602e63987582091a0e432f8d8f7619d2206fab7"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe35ac47f8f51356d6c1724455d18f31c94fae"],"7602e63987582091a0e432f8d8f7619d2206fab7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2fe35ac47f8f51356d6c1724455d18f31c94fae":["7602e63987582091a0e432f8d8f7619d2206fab7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}