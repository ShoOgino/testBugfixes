{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","sourceNew":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffSet = (isSingleWord || !hasIllegalOffsets) ? savedStartOffset + iterator.current : savedStartOffset;\n    int endOffSet = (hasIllegalOffsets) ? savedEndOffset : savedStartOffset + iterator.end;\n\n    offsetAttribute.setOffset(startOffSet, endOffSet);\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","sourceOld":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffSet = (isSingleWord || !hasIllegalOffsets) ? savedStartOffset + iterator.current : savedStartOffset;\n    int endOffSet = (hasIllegalOffsets) ? savedEndOffset : savedStartOffset + iterator.end;\n\n    offsetAttribute.setOffset(startOffSet, endOffSet);\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43b8655231010bd8d9a1bea43acc6001df4b0dd","date":1327331998,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","sourceNew":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffset = savedStartOffset + iterator.current;\n    int endOffset = savedStartOffset + iterator.end;\n    \n    if (hasIllegalOffsets) {\n      // historically this filter did this regardless for 'isSingleWord', \n      // but we must do a sanity check:\n      if (isSingleWord && startOffset <= savedEndOffset) {\n        offsetAttribute.setOffset(startOffset, savedEndOffset);\n      } else {\n        offsetAttribute.setOffset(savedStartOffset, savedEndOffset);\n      }\n    } else {\n      offsetAttribute.setOffset(startOffset, endOffset);\n    }\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","sourceOld":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffSet = (isSingleWord || !hasIllegalOffsets) ? savedStartOffset + iterator.current : savedStartOffset;\n    int endOffSet = (hasIllegalOffsets) ? savedEndOffset : savedStartOffset + iterator.end;\n\n    offsetAttribute.setOffset(startOffSet, endOffSet);\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","sourceNew":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffset = savedStartOffset + iterator.current;\n    int endOffset = savedStartOffset + iterator.end;\n    \n    if (hasIllegalOffsets) {\n      // historically this filter did this regardless for 'isSingleWord', \n      // but we must do a sanity check:\n      if (isSingleWord && startOffset <= savedEndOffset) {\n        offsetAttribute.setOffset(startOffset, savedEndOffset);\n      } else {\n        offsetAttribute.setOffset(savedStartOffset, savedEndOffset);\n      }\n    } else {\n      offsetAttribute.setOffset(startOffset, endOffset);\n    }\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","sourceOld":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffSet = (isSingleWord || !hasIllegalOffsets) ? savedStartOffset + iterator.current : savedStartOffset;\n    int endOffSet = (hasIllegalOffsets) ? savedEndOffset : savedStartOffset + iterator.end;\n\n    offsetAttribute.setOffset(startOffSet, endOffSet);\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","sourceNew":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffset = savedStartOffset + iterator.current;\n    int endOffset = savedStartOffset + iterator.end;\n    \n    if (hasIllegalOffsets) {\n      // historically this filter did this regardless for 'isSingleWord', \n      // but we must do a sanity check:\n      if (isSingleWord && startOffset <= savedEndOffset) {\n        offsetAttribute.setOffset(startOffset, savedEndOffset);\n      } else {\n        offsetAttribute.setOffset(savedStartOffset, savedEndOffset);\n      }\n    } else {\n      offsetAttribute.setOffset(startOffset, endOffset);\n    }\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","sourceOld":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffSet = (isSingleWord || !hasIllegalOffsets) ? savedStartOffset + iterator.current : savedStartOffset;\n    int endOffSet = (hasIllegalOffsets) ? savedEndOffset : savedStartOffset + iterator.end;\n\n    offsetAttribute.setOffset(startOffSet, endOffSet);\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#generatePart(boolean).mjava","sourceNew":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffset = savedStartOffset + iterator.current;\n    int endOffset = savedStartOffset + iterator.end;\n    \n    if (hasIllegalOffsets) {\n      // historically this filter did this regardless for 'isSingleWord', \n      // but we must do a sanity check:\n      if (isSingleWord && startOffset <= savedEndOffset) {\n        offsetAttribute.setOffset(startOffset, savedEndOffset);\n      } else {\n        offsetAttribute.setOffset(savedStartOffset, savedEndOffset);\n      }\n    } else {\n      offsetAttribute.setOffset(startOffset, endOffset);\n    }\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","sourceOld":"  /**\n   * Generates a word/number part, updating the appropriate attributes\n   *\n   * @param isSingleWord {@code true} if the generation is occurring from a single word, {@code false} otherwise\n   */\n  private void generatePart(boolean isSingleWord) {\n    clearAttributes();\n    termAttribute.copyBuffer(savedBuffer, iterator.current, iterator.end - iterator.current);\n\n    int startOffset = savedStartOffset + iterator.current;\n    int endOffset = savedStartOffset + iterator.end;\n    \n    if (hasIllegalOffsets) {\n      // historically this filter did this regardless for 'isSingleWord', \n      // but we must do a sanity check:\n      if (isSingleWord && startOffset <= savedEndOffset) {\n        offsetAttribute.setOffset(startOffset, savedEndOffset);\n      } else {\n        offsetAttribute.setOffset(savedStartOffset, savedEndOffset);\n      }\n    } else {\n      offsetAttribute.setOffset(startOffset, endOffset);\n    }\n    posIncAttribute.setPositionIncrement(position(false));\n    typeAttribute.setType(savedType);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["0f080986da691a3bba7b757f43ab72cdc82b57ce","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}