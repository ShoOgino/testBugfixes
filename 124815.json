{"path":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","commits":[{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(rollbackSegmentInfos);\n\n    // Ask deleter to locate unreferenced files & remove\n    // them:\n    deleter.clearPendingFiles();\n    deleter.findDeletableFiles();\n    deleter.deleteFiles();\n\n    clearTransaction();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dbb18b6a222f2507f22fab7cc7eed06658d59772"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n    deleter.refresh();\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(rollbackSegmentInfos);\n\n    // Ask deleter to locate unreferenced files & remove\n    // them:\n    deleter.clearPendingFiles();\n    deleter.findDeletableFiles();\n    deleter.deleteFiles();\n\n    clearTransaction();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6456e4ba6cdce20f5615173eb208f063c8cb74b7","date":1174828735,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n    deleter.refresh();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"346d5897e4c4e77ed5dbd31f7730ff30973d5971","date":1198317988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n    stopMerges = false;\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n    lastMergeInfo = null;\n    stopMerges = false;\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n    stopMerges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n    docWriter.setFlushedDocCount(localFlushedDocCount);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n    stopMerges = false;\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n    lastMergeInfo = null;\n    stopMerges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dbb18b6a222f2507f22fab7cc7eed06658d59772","date":1204804366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n    docWriter.setFlushedDocCount(localFlushedDocCount);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n    stopMerges = false;\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n    docWriter.setFlushedDocCount(localFlushedDocCount);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n    stopMerges = false;\n  }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n    docWriter.setFlushedDocCount(localFlushedDocCount);\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n    docWriter.setFlushedDocCount(localFlushedDocCount);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    deleter.refresh();\n    finishMerges(false);\n    stopMerges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n    if (docWriter != null) {\n      docWriter.setFlushedDocCount(localFlushedDocCount);\n    }\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n    docWriter.setFlushedDocCount(localFlushedDocCount);\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8","date":1255049357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    if (docWriter != null) {\n      docWriter.setFlushedDocCount(localFlushedDocCount);\n    }\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    // Remove the incRef we did in startTransaction:\n    deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    // First restore autoCommit in case we hit an exception below:\n    autoCommit = localAutoCommit;\n    if (docWriter != null) {\n      docWriter.setFlushedDocCount(localFlushedDocCount);\n    }\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    if (!autoCommit)\n      // Remove the incRef we did in startTransaction:\n      deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    if (docWriter != null) {\n      docWriter.setFlushedDocCount(localFlushedDocCount);\n    }\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    // Remove the incRef we did in startTransaction:\n    deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    if (docWriter != null) {\n      docWriter.setFlushedDocCount(localFlushedDocCount);\n    }\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    // Remove the incRef we did in startTransaction:\n    deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["6456e4ba6cdce20f5615173eb208f063c8cb74b7"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["2586f96f60332eb97ecd2934b0763791462568b2"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["e82780afe6097066eb5befb86e9432f077667e3d"],"dbb18b6a222f2507f22fab7cc7eed06658d59772":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"6456e4ba6cdce20f5615173eb208f063c8cb74b7":["8b6187898fc4413ccd18229711786550a280383c"],"eeefd99c477417e5c7c574228461ebafe92469d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"8b6187898fc4413ccd18229711786550a280383c":["eeefd99c477417e5c7c574228461ebafe92469d4"],"2586f96f60332eb97ecd2934b0763791462568b2":["dbb18b6a222f2507f22fab7cc7eed06658d59772"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"]},"commit2Childs":{"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["e82780afe6097066eb5befb86e9432f077667e3d"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["dbb18b6a222f2507f22fab7cc7eed06658d59772"],"dbb18b6a222f2507f22fab7cc7eed06658d59772":["2586f96f60332eb97ecd2934b0763791462568b2"],"6456e4ba6cdce20f5615173eb208f063c8cb74b7":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"eeefd99c477417e5c7c574228461ebafe92469d4":["8b6187898fc4413ccd18229711786550a280383c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeefd99c477417e5c7c574228461ebafe92469d4"],"e82780afe6097066eb5befb86e9432f077667e3d":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"8b6187898fc4413ccd18229711786550a280383c":["6456e4ba6cdce20f5615173eb208f063c8cb74b7"],"2586f96f60332eb97ecd2934b0763791462568b2":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}