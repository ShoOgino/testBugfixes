{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#processBuffer(String,String).mjava","commits":[{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#processBuffer(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/HTMLStripCharFilterTest#processBuffer(String,String).mjava","sourceNew":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    // System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","sourceOld":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    // System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#processBuffer(String,String).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#processBuffer(String,String).mjava","sourceNew":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    // System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","sourceOld":"  private void processBuffer(String test, String assertMsg) throws IOException {\n    // System.out.println(\"-------------------processBuffer----------\");\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new BufferedReader(new StringReader(test))));//force the use of BufferedReader\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String (trimmed): \" + builder.toString().trim() + \"<EOS>\");\n    }\n    assertTrue(assertMsg + \"::: \" + builder.toString() + \" is not equal to \" + test, builder.toString().equals(test) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9b31138e7b06f84b96de212b2102103cb629ee68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b31138e7b06f84b96de212b2102103cb629ee68"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}