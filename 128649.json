{"path":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","commits":[{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","sourceNew":"  // hash code for a frozen node\n  private int hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(int).mjava","sourceNew":"  // hash code for a frozen node\n  private int hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private int hash(int node) throws IOException {\n    final int PRIME = 31;\n    final FST.BytesReader in = fst.getBytesReader(0);\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + scratchArc.target;\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5","date":1370275238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","sourceNew":"  // hash code for a frozen node\n  private long hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    long h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Long.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private int hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    int h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Integer.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","sourceNew":"  // hash code for a frozen node\n  private long hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    long h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      // System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Long.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private long hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    long h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      //System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Long.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","sourceNew":"  // hash code for a frozen node\n  private long hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    long h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      // System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label();\n      h = PRIME * h + (int) (scratchArc.target() ^(scratchArc.target() >>32));\n      h = PRIME * h + scratchArc.output().hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput().hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Long.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private long hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    long h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      // System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Long.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#hash(long).mjava","sourceNew":"  // hash code for a frozen node\n  private long hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    long h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      // System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label();\n      h = PRIME * h + (int) (scratchArc.target() ^(scratchArc.target() >>32));\n      h = PRIME * h + scratchArc.output().hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput().hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Long.MAX_VALUE;\n  }\n\n","sourceOld":"  // hash code for a frozen node\n  private long hash(long node) throws IOException {\n    final int PRIME = 31;\n    //System.out.println(\"hash frozen node=\" + node);\n    long h = 0;\n    fst.readFirstRealTargetArc(node, scratchArc, in);\n    while(true) {\n      // System.out.println(\"  label=\" + scratchArc.label + \" target=\" + scratchArc.target + \" h=\" + h + \" output=\" + fst.outputs.outputToString(scratchArc.output) + \" next?=\" + scratchArc.flag(4) + \" final?=\" + scratchArc.isFinal() + \" pos=\" + in.getPosition());\n      h = PRIME * h + scratchArc.label;\n      h = PRIME * h + (int) (scratchArc.target^(scratchArc.target>>32));\n      h = PRIME * h + scratchArc.output.hashCode();\n      h = PRIME * h + scratchArc.nextFinalOutput.hashCode();\n      if (scratchArc.isFinal()) {\n        h += 17;\n      }\n      if (scratchArc.isLast()) {\n        break;\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n    //System.out.println(\"  ret \" + (h&Integer.MAX_VALUE));\n    return h & Long.MAX_VALUE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["cf254a9a31b4dc0cc4d29c23ec1cd5c6934081b5","8917bfede3b4ca30f4305c1e391e9218959cd723"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","8917bfede3b4ca30f4305c1e391e9218959cd723"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}