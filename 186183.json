{"path":"solr/solrj/src/java/org/apache/noggit/JSONParser#next(int).mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/noggit/JSONParser#next(int).mjava","pathOld":"/dev/null","sourceNew":"  /*** alternate implelentation\n  // middle is the pointer to the middle of a buffer to start scanning for a non-string\n  // character ('\"' or \"/\").  start<=middle<end\n  private void readStringChars2a(CharArr arr, int middle) throws IOException {\n    int ch=0;\n    for(;;) {\n      // find the next non-string char\n      for (; middle<end; middle++) {\n        ch = buf[middle];\n        if (ch=='\"' || ch=='\\\\') break;\n      }\n\n      arr.write(buf,start,middle-start);\n      if (middle>=end) {\n        getMore();\n        middle=start;\n      } else {\n        start = middle+1;   // set buffer pointer to correct spot\n        if (ch=='\"') {\n          valstate=0;\n          return;\n        } else if (ch=='\\\\') {\n          arr.write(readEscapedChar());\n          if (start>=end) getMore();\n          middle=start;\n        }\n      }\n    }\n  }\n  ***/\n\n\n  // return the next event when parser is in a neutral state (no\n  // map separators or array element separators to read\n  private int next(int ch) throws IOException {\n    for(;;) {\n      switch (ch) {\n        case ' ':\n        case '\\t': break;\n        case '\\r':\n        case '\\n': break;  // try and keep track of linecounts?\n        case '\"' :\n          valstate = STRING;\n          return STRING;\n        case '{' :\n          push();\n          state= DID_OBJSTART;\n          return OBJECT_START;\n        case '[':\n          push();\n          state=DID_ARRSTART;\n          return ARRAY_START;\n        case '0' :\n          out.reset();\n          //special case '0'?  If next char isn't '.' val=0\n          ch=getChar();\n          if (ch=='.') {\n            start--; ch='0';\n            readNumber('0',false);\n            return valstate;\n          } else if (ch>'9' || ch<'0') {\n            out.unsafeWrite('0');\n            if (ch!=-1) start--;\n            lval = 0;\n            valstate=LONG;\n            return LONG;\n          } else {\n            throw err(\"Leading zeros not allowed\");\n          }\n        case '1' :\n        case '2' :\n        case '3' :\n        case '4' :\n        case '5' :\n        case '6' :\n        case '7' :\n        case '8' :\n        case '9' :\n          out.reset();\n          lval = readNumber(ch,false);\n          return valstate;\n        case '-' :\n          out.reset();\n          out.unsafeWrite('-');\n          ch = getChar();\n          if (ch<'0' || ch>'9') throw err(\"expected digit after '-'\");\n          lval = readNumber(ch,true);\n          return valstate;\n        case 't':\n          valstate=BOOLEAN;\n          // TODO: test performance of this non-branching inline version.\n          // if ((('r'-getChar())|('u'-getChar())|('e'-getChar())) != 0) err(\"\");\n          expect(JSONUtil.TRUE_CHARS);\n          bool=true;\n          return BOOLEAN;\n        case 'f':\n          valstate=BOOLEAN;\n          expect(JSONUtil.FALSE_CHARS);\n          bool=false;\n          return BOOLEAN;\n        case 'n':\n          valstate=NULL;\n          expect(JSONUtil.NULL_CHARS);\n          return NULL;\n        case -1:\n          if (getLevel()>0) throw err(\"Premature EOF\");\n          return EOF;\n        default: throw err(null);\n      }\n\n      ch = getChar();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8","date":1363620515,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/noggit/JSONParser#next(int).mjava","sourceNew":null,"sourceOld":"  /*** alternate implelentation\n  // middle is the pointer to the middle of a buffer to start scanning for a non-string\n  // character ('\"' or \"/\").  start<=middle<end\n  private void readStringChars2a(CharArr arr, int middle) throws IOException {\n    int ch=0;\n    for(;;) {\n      // find the next non-string char\n      for (; middle<end; middle++) {\n        ch = buf[middle];\n        if (ch=='\"' || ch=='\\\\') break;\n      }\n\n      arr.write(buf,start,middle-start);\n      if (middle>=end) {\n        getMore();\n        middle=start;\n      } else {\n        start = middle+1;   // set buffer pointer to correct spot\n        if (ch=='\"') {\n          valstate=0;\n          return;\n        } else if (ch=='\\\\') {\n          arr.write(readEscapedChar());\n          if (start>=end) getMore();\n          middle=start;\n        }\n      }\n    }\n  }\n  ***/\n\n\n  // return the next event when parser is in a neutral state (no\n  // map separators or array element separators to read\n  private int next(int ch) throws IOException {\n    for(;;) {\n      switch (ch) {\n        case ' ':\n        case '\\t': break;\n        case '\\r':\n        case '\\n': break;  // try and keep track of linecounts?\n        case '\"' :\n          valstate = STRING;\n          return STRING;\n        case '{' :\n          push();\n          state= DID_OBJSTART;\n          return OBJECT_START;\n        case '[':\n          push();\n          state=DID_ARRSTART;\n          return ARRAY_START;\n        case '0' :\n          out.reset();\n          //special case '0'?  If next char isn't '.' val=0\n          ch=getChar();\n          if (ch=='.') {\n            start--; ch='0';\n            readNumber('0',false);\n            return valstate;\n          } else if (ch>'9' || ch<'0') {\n            out.unsafeWrite('0');\n            if (ch!=-1) start--;\n            lval = 0;\n            valstate=LONG;\n            return LONG;\n          } else {\n            throw err(\"Leading zeros not allowed\");\n          }\n        case '1' :\n        case '2' :\n        case '3' :\n        case '4' :\n        case '5' :\n        case '6' :\n        case '7' :\n        case '8' :\n        case '9' :\n          out.reset();\n          lval = readNumber(ch,false);\n          return valstate;\n        case '-' :\n          out.reset();\n          out.unsafeWrite('-');\n          ch = getChar();\n          if (ch<'0' || ch>'9') throw err(\"expected digit after '-'\");\n          lval = readNumber(ch,true);\n          return valstate;\n        case 't':\n          valstate=BOOLEAN;\n          // TODO: test performance of this non-branching inline version.\n          // if ((('r'-getChar())|('u'-getChar())|('e'-getChar())) != 0) err(\"\");\n          expect(JSONUtil.TRUE_CHARS);\n          bool=true;\n          return BOOLEAN;\n        case 'f':\n          valstate=BOOLEAN;\n          expect(JSONUtil.FALSE_CHARS);\n          bool=false;\n          return BOOLEAN;\n        case 'n':\n          valstate=NULL;\n          expect(JSONUtil.NULL_CHARS);\n          return NULL;\n        case -1:\n          if (getLevel()>0) throw err(\"Premature EOF\");\n          return EOF;\n        default: throw err(null);\n      }\n\n      ch = getChar();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8"]},"commit2Childs":{"4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["4b8e1f25987b9ba1d8b8eda2fa49f64d904cc1c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}