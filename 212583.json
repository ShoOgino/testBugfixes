{"path":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","commits":[{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(Token,RawPostingList).mjava","sourceNew":"  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();;\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void newTerm(Token t, RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      final int startOffset = fieldState.offset + t.startOffset();\n      final int endOffset = fieldState.offset + t.endOffset();\n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95d6ec57ec470d62087ae6879fd4f1742574a78d","date":1251121810,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset;\n      int endOffset = fieldState.offset;\n      if (offsetAttribute != null) {\n        startOffset += offsetAttribute.startOffset();\n        endOffset += offsetAttribute.endOffset();\n      }\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();;\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bae882f7af4325abc78ed2bc4127c2b47e8fd23","date":1251122631,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();;\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset;\n      int endOffset = fieldState.offset;\n      if (offsetAttribute != null) {\n        startOffset += offsetAttribute.startOffset();\n        endOffset += offsetAttribute.endOffset();\n      }\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();;\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":"  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();;\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();;\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#newTerm(RawPostingList).mjava","sourceNew":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void newTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.newTerm start\");\n\n    TermVectorsTermsWriter.PostingList p = (TermVectorsTermsWriter.PostingList) p0;\n\n    p.freq = 1;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n      \n      termsHashPerField.writeVInt(1, startOffset);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      p.lastOffset = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position);\n      p.lastPosition = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bae882f7af4325abc78ed2bc4127c2b47e8fd23":["95d6ec57ec470d62087ae6879fd4f1742574a78d"],"95d6ec57ec470d62087ae6879fd4f1742574a78d":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["7bae882f7af4325abc78ed2bc4127c2b47e8fd23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"7bae882f7af4325abc78ed2bc4127c2b47e8fd23":["8a9e385641d717e641408d8fbbc62be8fc766357"],"95d6ec57ec470d62087ae6879fd4f1742574a78d":["7bae882f7af4325abc78ed2bc4127c2b47e8fd23"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["95d6ec57ec470d62087ae6879fd4f1742574a78d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"8a9e385641d717e641408d8fbbc62be8fc766357":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}