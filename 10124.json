{"path":"backwards/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}