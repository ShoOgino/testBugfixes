{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","commits":[{"id":"5d70b751e35173c43ca80385daa4642aedd91a55","date":1452882611,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"/dev/null","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bf38d05ea0037f06f6e05ed747948f19a746d3c","date":1453230855,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n      }\n    }\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bfa791a98ccf60d39ab77c21b92b710687fc3ac","date":1453238736,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5b786e8a2ab6d8bb552c5bac69728c7d2983266","date":1453255950,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"454707440cee820dfa096b7a8f7544bb3ad27db4","date":1453654392,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"207c4c6d956f2478acc8b16d31636c5efaf4125a","date":1453918907,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f as my_float_col from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e5fb39ae43490fb37cfa63ba6a6d1dccf76f04c","date":1453920486,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f as my_float_col from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f as my_float_col from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b599994b4366365d87091177768cd5e6f38ba959","date":1453921446,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f as my_float_col from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f as my_float_col from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39fd399a800c79eff2beaad702c9b6190d499fd","date":1453997311,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f as my_float_col from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f as my_float_col from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(con, databaseMetaData.getConnection());\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertFalse(statement.getMoreResults());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n    String connectionString = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    String sql = \"select id, a_i, a_s, a_f from \" + collection + \" order by a_i desc limit 2\";\n\n    try (Connection con = DriverManager.getConnection(connectionString)) {\n      assertEquals(collection, con.getCatalog());\n\n      DatabaseMetaData databaseMetaData = con.getMetaData();\n      assertNotNull(databaseMetaData);\n\n      assertEquals(connectionString, databaseMetaData.getURL());\n\n      assertNull(con.getWarnings());\n      con.clearWarnings();\n      assertNull(con.getWarnings());\n\n      try (Statement statement = con.createStatement()) {\n        assertEquals(con, statement.getConnection());\n\n        assertNull(statement.getWarnings());\n        statement.clearWarnings();\n        assertNull(statement.getWarnings());\n\n        try (ResultSet rs = statement.executeQuery(sql)) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n\n        assertTrue(statement.execute(sql));\n        assertEquals(-1, statement.getUpdateCount());\n\n        try (ResultSet rs = statement.getResultSet()) {\n          assertEquals(statement, rs.getStatement());\n\n          checkResultSetMetadata(rs);\n          checkResultSet(rs);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  @Test\n  public void testDriverMetadata() throws Exception {\n    String collection = COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  @Test\n  public void testDriverMetadata() throws Exception {\n    String collection = COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  @Test\n  public void testDriverMetadata() throws Exception {\n    String collection = COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  @Test\n  public void testDriverMetadata() throws Exception {\n    String collection = COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  private void testDriverMetadata() throws Exception {\n    String collection = DEFAULT_COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkServer.getZkAddress() + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  @Test\n  public void testDriverMetadata() throws Exception {\n    String collection = COLLECTIONORALIAS;\n\n    String connectionString1 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  @Test\n  public void testDriverMetadata() throws Exception {\n    String collection = COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#testDriverMetadata().mjava","sourceNew":"  @Test\n  public void testDriverMetadata() throws Exception {\n    String collection = COLLECTIONORALIAS;\n\n    String connectionString1 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","sourceOld":"  @Test\n  public void testDriverMetadata() throws Exception {\n    String collection = COLLECTION;\n\n    String connectionString1 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties1 = new Properties();\n\n    String sql = \"select id, a_i, a_s, a_f as my_float_col, testnull_i from \" + collection +\n        \" order by a_i desc\";\n\n    String connectionString2 = \"jdbc:solr://\" + zkHost + \"?collection=\" + collection +\n        \"&aggregationMode=map_reduce&numWorkers=2&username=&password=&testKey1=testValue&testKey2\";\n    Properties properties2 = new Properties();\n\n    String sql2 = sql + \" limit 2\";\n\n    //testJDBCMethods(collection, connectionString1, properties1, sql);\n    //testJDBCMethods(collection, connectionString2, properties2, sql);\n    testJDBCMethods(collection, connectionString1, properties1, sql2);\n    testJDBCMethods(collection, connectionString2, properties2, sql2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73450c0955930295d34703e7ddbfc6973b7a121a":["8d15e34266d75e4e8b95da046cd0afc812367b38","b940572a59da1b42b6c20ab5278155b12816807a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["454707440cee820dfa096b7a8f7544bb3ad27db4","8d15e34266d75e4e8b95da046cd0afc812367b38"],"b940572a59da1b42b6c20ab5278155b12816807a":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"b599994b4366365d87091177768cd5e6f38ba959":["0e5fb39ae43490fb37cfa63ba6a6d1dccf76f04c"],"207c4c6d956f2478acc8b16d31636c5efaf4125a":["454707440cee820dfa096b7a8f7544bb3ad27db4"],"b5b786e8a2ab6d8bb552c5bac69728c7d2983266":["4bfa791a98ccf60d39ab77c21b92b710687fc3ac"],"454707440cee820dfa096b7a8f7544bb3ad27db4":["b5b786e8a2ab6d8bb552c5bac69728c7d2983266"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["8d15e34266d75e4e8b95da046cd0afc812367b38","b940572a59da1b42b6c20ab5278155b12816807a"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["b599994b4366365d87091177768cd5e6f38ba959"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["8d15e34266d75e4e8b95da046cd0afc812367b38","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"0e5fb39ae43490fb37cfa63ba6a6d1dccf76f04c":["207c4c6d956f2478acc8b16d31636c5efaf4125a"],"9bf38d05ea0037f06f6e05ed747948f19a746d3c":["5d70b751e35173c43ca80385daa4642aedd91a55"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4bfa791a98ccf60d39ab77c21b92b710687fc3ac":["9bf38d05ea0037f06f6e05ed747948f19a746d3c"],"5d70b751e35173c43ca80385daa4642aedd91a55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["b599994b4366365d87091177768cd5e6f38ba959","c39fd399a800c79eff2beaad702c9b6190d499fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c969f15cd04d31e520319c619a445ae21f02d72"]},"commit2Childs":{"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"b599994b4366365d87091177768cd5e6f38ba959":["c39fd399a800c79eff2beaad702c9b6190d499fd","8d15e34266d75e4e8b95da046cd0afc812367b38"],"207c4c6d956f2478acc8b16d31636c5efaf4125a":["0e5fb39ae43490fb37cfa63ba6a6d1dccf76f04c"],"b5b786e8a2ab6d8bb552c5bac69728c7d2983266":["454707440cee820dfa096b7a8f7544bb3ad27db4"],"454707440cee820dfa096b7a8f7544bb3ad27db4":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","207c4c6d956f2478acc8b16d31636c5efaf4125a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d70b751e35173c43ca80385daa4642aedd91a55"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"0e5fb39ae43490fb37cfa63ba6a6d1dccf76f04c":["b599994b4366365d87091177768cd5e6f38ba959"],"9bf38d05ea0037f06f6e05ed747948f19a746d3c":["4bfa791a98ccf60d39ab77c21b92b710687fc3ac"],"4bfa791a98ccf60d39ab77c21b92b710687fc3ac":["b5b786e8a2ab6d8bb552c5bac69728c7d2983266"],"8c969f15cd04d31e520319c619a445ae21f02d72":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d70b751e35173c43ca80385daa4642aedd91a55":["9bf38d05ea0037f06f6e05ed747948f19a746d3c"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["73450c0955930295d34703e7ddbfc6973b7a121a","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}