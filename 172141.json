{"path":"lucene/core/src/java/org/apache/lucene/index/SortedDocValues#newRAMInstance().mjava","commits":[{"id":"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee","date":1353299109,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedDocValues#newRAMInstance().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues newRAMInstance() {\n    // nocommit optimize this\n    // nocommit, see also BinaryDocValues nocommits\n    final int maxDoc = size();\n    final int maxLength = maxLength();\n    final boolean fixedLength = isFixedLength();\n    final int valueCount = getValueCount();\n    // nocommit used packed ints and so on\n    final byte[][] values = new byte[valueCount][];\n    BytesRef scratch = new BytesRef();\n    for(int ord=0;ord<values.length;ord++) {\n      lookupOrd(ord, scratch);\n      values[ord] = new byte[scratch.length];\n      System.arraycopy(scratch.bytes, scratch.offset, values[ord], 0, scratch.length);\n    }\n\n    final int[] docToOrd = new int[maxDoc];\n    for(int docID=0;docID<maxDoc;docID++) {\n      docToOrd[docID] = getOrd(docID);\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return docToOrd[docID];\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        result.bytes = values[ord];\n        result.offset = 0;\n        result.length = result.bytes.length;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int size() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean isFixedLength() {\n        return fixedLength;\n      }\n\n      @Override\n      public int maxLength() {\n        return maxLength;\n      }\n\n      @Override\n      public SortedDocValues newRAMInstance() {\n        return this; // see the nocommit in BinaryDocValues\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2","date":1354573582,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedDocValues#newRAMInstance().mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedDocValues newRAMInstance() {\n    // nocommit optimize this\n    // nocommit, see also BinaryDocValues nocommits\n    final int maxDoc = size();\n    final int maxLength = maxLength();\n    final boolean fixedLength = isFixedLength();\n    final int valueCount = getValueCount();\n    // nocommit used packed ints and so on\n    final byte[][] values = new byte[valueCount][];\n    BytesRef scratch = new BytesRef();\n    for(int ord=0;ord<values.length;ord++) {\n      lookupOrd(ord, scratch);\n      values[ord] = new byte[scratch.length];\n      System.arraycopy(scratch.bytes, scratch.offset, values[ord], 0, scratch.length);\n    }\n\n    final int[] docToOrd = new int[maxDoc];\n    for(int docID=0;docID<maxDoc;docID++) {\n      docToOrd[docID] = getOrd(docID);\n    }\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return docToOrd[docID];\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        result.bytes = values[ord];\n        result.offset = 0;\n        result.length = result.bytes.length;\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n\n      @Override\n      public int size() {\n        return maxDoc;\n      }\n\n      @Override\n      public boolean isFixedLength() {\n        return fixedLength;\n      }\n\n      @Override\n      public int maxLength() {\n        return maxLength;\n      }\n\n      @Override\n      public SortedDocValues newRAMInstance() {\n        return this; // see the nocommit in BinaryDocValues\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":["767bfba15cdbe84dd2e3b841e0429a1b4ef8feee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"767bfba15cdbe84dd2e3b841e0429a1b4ef8feee":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["767bfba15cdbe84dd2e3b841e0429a1b4ef8feee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}