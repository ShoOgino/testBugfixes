{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","sourceOld":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","sourceOld":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","sourceOld":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","sourceOld":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","sourceOld":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexSearcher search = newSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = TermRangeQuery.newStringRange(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["3e492fb0f2bb0b4b47208286f9331ff55963c656","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["150488c1317972164a9a824be05b1ba2ba0fc68c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["c084e47df29de3330311d69dabf515ceaa989512"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","0e7c2454a6a8237bfd0e953f5b940838408c9055","d619839baa8ce5503e496b94a9e42ad6f079293f"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}