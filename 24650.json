{"path":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              DateTime dateTime = parser.parseDateTime(srcStringVal);\n              return dateTime.withZone(DateTimeZone.UTC).toDate();\n            } catch (IllegalArgumentException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              DateTime dateTime = parser.parseDateTime(srcStringVal);\n              return dateTime.withZone(DateTimeZone.UTC).toDate();\n            } catch (IllegalArgumentException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141","date":1533657076,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal));\n            } catch (DateTimeParseException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              DateTime dateTime = parser.parseDateTime(srcStringVal);\n              return dateTime.withZone(DateTimeZone.UTC).toDate();\n            } catch (IllegalArgumentException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859b2291aebaa8cffe0ab3f919fc27e980c23999","date":1534305849,"type":3,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          // trim single quotes around date if present\n          // see issue #5279  (Apache HttpClient)\n          int stringValLen = srcStringVal.length();\n          if (stringValLen > 1\n              && srcStringVal.startsWith(\"'\")\n              && srcStringVal.endsWith(\"'\")\n          ) {\n            srcStringVal = srcStringVal.substring(1, stringValLen - 1);\n          }\n\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal));\n            } catch (DateTimeParseException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal));\n            } catch (DateTimeParseException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d6383c8f942fbf6f463c167383e952d927aca0","date":1534307117,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          // trim single quotes around date if present\n          // see issue #5279  (Apache HttpClient)\n          int stringValLen = srcStringVal.length();\n          if (stringValLen > 1\n              && srcStringVal.startsWith(\"'\")\n              && srcStringVal.endsWith(\"'\")\n          ) {\n            srcStringVal = srcStringVal.substring(1, stringValLen - 1);\n          }\n\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal));\n            } catch (DateTimeParseException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal));\n            } catch (DateTimeParseException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4303580aad3a549d25741d17b837bbc0e25c0bec","date":1538567942,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      final ParsePosition parsePosition = new ParsePosition(0);\n\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          // trim single quotes around date if present\n          // see issue #5279  (Apache HttpClient)\n          int stringValLen = srcStringVal.length();\n          if (stringValLen > 1\n              && srcStringVal.startsWith(\"'\")\n              && srcStringVal.endsWith(\"'\")\n          ) {\n            srcStringVal = srcStringVal.substring(1, stringValLen - 1);\n          }\n\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal, parsePosition));\n            } catch (DateTimeParseException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          // trim single quotes around date if present\n          // see issue #5279  (Apache HttpClient)\n          int stringValLen = srcStringVal.length();\n          if (stringValLen > 1\n              && srcStringVal.startsWith(\"'\")\n              && srcStringVal.endsWith(\"'\")\n          ) {\n            srcStringVal = srcStringVal.substring(1, stringValLen - 1);\n          }\n\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal));\n            } catch (DateTimeParseException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      final ParsePosition parsePosition = new ParsePosition(0);\n\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          // trim single quotes around date if present\n          // see issue #5279  (Apache HttpClient)\n          int stringValLen = srcStringVal.length();\n          if (stringValLen > 1\n              && srcStringVal.startsWith(\"'\")\n              && srcStringVal.endsWith(\"'\")\n          ) {\n            srcStringVal = srcStringVal.substring(1, stringValLen - 1);\n          }\n\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal, parsePosition));\n            } catch (DateTimeParseException e) {\n              if (log.isDebugEnabled()) {\n                log.debug(\"value '{}' is not parseable with format '{}'\",\n                    new Object[]{srcStringVal, format.getKey()});\n              }\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req,\n                                            SolrQueryResponse rsp,\n                                            UpdateRequestProcessor next) {\n    return new AllValuesOrNoneFieldMutatingUpdateProcessor(getSelector(), next) {\n      final ParsePosition parsePosition = new ParsePosition(0);\n\n      @Override\n      protected Object mutateValue(Object srcVal) {\n        if (srcVal instanceof CharSequence) {\n          String srcStringVal = srcVal.toString();\n          // trim single quotes around date if present\n          // see issue #5279  (Apache HttpClient)\n          int stringValLen = srcStringVal.length();\n          if (stringValLen > 1\n              && srcStringVal.startsWith(\"'\")\n              && srcStringVal.endsWith(\"'\")\n          ) {\n            srcStringVal = srcStringVal.substring(1, stringValLen - 1);\n          }\n\n          for (Map.Entry<String,DateTimeFormatter> format : formats.entrySet()) {\n            DateTimeFormatter parser = format.getValue();\n            try {\n              return Date.from(parseInstant(parser, srcStringVal, parsePosition));\n            } catch (DateTimeParseException e) {\n              log.debug(\"value '{}' is not parseable with format '{}'\",\n                        new Object[] { srcStringVal, format.getKey() });\n            }\n          }\n          log.debug(\"value '{}' was not parsed by any configured format, thus was not mutated\", srcStringVal);\n          return SKIP_FIELD_VALUE_LIST_SINGLETON;\n        }\n        if (srcVal instanceof Date) {\n          return srcVal;\n        }\n        return SKIP_FIELD_VALUE_LIST_SINGLETON;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859b2291aebaa8cffe0ab3f919fc27e980c23999":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"740d649f013f07efbeb73ca854f106c60166e7c0":["4303580aad3a549d25741d17b837bbc0e25c0bec"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"4303580aad3a549d25741d17b837bbc0e25c0bec":["11d6383c8f942fbf6f463c167383e952d927aca0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11d6383c8f942fbf6f463c167383e952d927aca0":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141","859b2291aebaa8cffe0ab3f919fc27e980c23999"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"859b2291aebaa8cffe0ab3f919fc27e980c23999":["11d6383c8f942fbf6f463c167383e952d927aca0"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"4303580aad3a549d25741d17b837bbc0e25c0bec":["740d649f013f07efbeb73ca854f106c60166e7c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["859b2291aebaa8cffe0ab3f919fc27e980c23999","11d6383c8f942fbf6f463c167383e952d927aca0"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"11d6383c8f942fbf6f463c167383e952d927aca0":["4303580aad3a549d25741d17b837bbc0e25c0bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}