{"path":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromZooKeeper(SolrQueryRequest,SolrQueryResponse,SolrZkClient,Set[String]).mjava","commits":[{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromZooKeeper(SolrQueryRequest,SolrQueryResponse,SolrZkClient,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromZooKeeper(SolrQueryRequest,SolrQueryResponse,SolrZkClient).mjava","sourceNew":"  public static String getAdminFileFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp, SolrZkClient zkClient,\n                                                 Set<String> hiddenFiles)\n      throws KeeperException, InterruptedException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n\n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (isHiddenFile(req, rsp, fname, true, hiddenFiles)) {\n        return null;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      log.error(\"Can not find: \" + adminFile);\n      rsp.setException(new SolrException(SolrException.ErrorCode.NOT_FOUND, \"Can not find: \"\n          + adminFile));\n      return null;\n    }\n\n    return adminFile;\n  }\n\n","sourceOld":"  private String getAdminFileFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp, SolrZkClient zkClient)\n      throws KeeperException, InterruptedException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n\n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (isHiddenFile(req, rsp, fname, true)) {\n        return null;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      log.error(\"Can not find: \" + adminFile);\n      rsp.setException(new SolrException(ErrorCode.NOT_FOUND, \"Can not find: \"\n          + adminFile));\n      return null;\n    }\n\n    return adminFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromZooKeeper(SolrQueryRequest,SolrQueryResponse,SolrZkClient,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static String getAdminFileFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp, SolrZkClient zkClient,\n                                                 Set<String> hiddenFiles)\n      throws KeeperException, InterruptedException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n\n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (isHiddenFile(req, rsp, fname, true, hiddenFiles)) {\n        return null;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      log.error(\"Can not find: \" + adminFile);\n      rsp.setException(new SolrException(SolrException.ErrorCode.NOT_FOUND, \"Can not find: \"\n          + adminFile));\n      return null;\n    }\n\n    return adminFile;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17778d9c1f3a8a67383edebf24754bf30a5120f8","date":1415342366,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromZooKeeper(SolrQueryRequest,SolrQueryResponse,SolrZkClient,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromZooKeeper(SolrQueryRequest,SolrQueryResponse,SolrZkClient,Set[String]).mjava","sourceNew":"  public static String getAdminFileFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp, SolrZkClient zkClient,\n                                                 Set<String> hiddenFiles)\n      throws KeeperException, InterruptedException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getConfigSetZkPath();\n\n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (isHiddenFile(req, rsp, fname, true, hiddenFiles)) {\n        return null;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      log.error(\"Can not find: \" + adminFile);\n      rsp.setException(new SolrException(SolrException.ErrorCode.NOT_FOUND, \"Can not find: \"\n          + adminFile));\n      return null;\n    }\n\n    return adminFile;\n  }\n\n","sourceOld":"  public static String getAdminFileFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp, SolrZkClient zkClient,\n                                                 Set<String> hiddenFiles)\n      throws KeeperException, InterruptedException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getCollectionZkPath();\n\n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (isHiddenFile(req, rsp, fname, true, hiddenFiles)) {\n        return null;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      log.error(\"Can not find: \" + adminFile);\n      rsp.setException(new SolrException(SolrException.ErrorCode.NOT_FOUND, \"Can not find: \"\n          + adminFile));\n      return null;\n    }\n\n    return adminFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromZooKeeper(SolrQueryRequest,SolrQueryResponse,SolrZkClient,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromZooKeeper(SolrQueryRequest,SolrQueryResponse,SolrZkClient,Set[String]).mjava","sourceNew":"  public static String getAdminFileFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp, SolrZkClient zkClient,\n                                                 Set<String> hiddenFiles)\n      throws KeeperException, InterruptedException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getConfigSetZkPath();\n\n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (isHiddenFile(req, rsp, fname, true, hiddenFiles)) {\n        return null;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      log.error(\"Can not find: {}\", adminFile);\n      rsp.setException(new SolrException(SolrException.ErrorCode.NOT_FOUND, \"Can not find: \"\n          + adminFile));\n      return null;\n    }\n\n    return adminFile;\n  }\n\n","sourceOld":"  public static String getAdminFileFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp, SolrZkClient zkClient,\n                                                 Set<String> hiddenFiles)\n      throws KeeperException, InterruptedException {\n    String adminFile = null;\n    SolrCore core = req.getCore();\n\n    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core\n        .getResourceLoader();\n    String confPath = loader.getConfigSetZkPath();\n\n    String fname = req.getParams().get(\"file\", null);\n    if (fname == null) {\n      adminFile = confPath;\n    } else {\n      fname = fname.replace('\\\\', '/'); // normalize slashes\n      if (isHiddenFile(req, rsp, fname, true, hiddenFiles)) {\n        return null;\n      }\n      if (fname.startsWith(\"/\")) { // Only files relative to conf are valid\n        fname = fname.substring(1);\n      }\n      adminFile = confPath + \"/\" + fname;\n    }\n\n    // Make sure the file exists, is readable and is not a hidden file\n    if (!zkClient.exists(adminFile, true)) {\n      log.error(\"Can not find: \" + adminFile);\n      rsp.setException(new SolrException(SolrException.ErrorCode.NOT_FOUND, \"Can not find: \"\n          + adminFile));\n      return null;\n    }\n\n    return adminFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17778d9c1f3a8a67383edebf24754bf30a5120f8":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7455ee5c847b2ee7e44656e4218141f62dacb572":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7455ee5c847b2ee7e44656e4218141f62dacb572"],"575e66bd4b2349209027f6801184da7fc3cba13f":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"17778d9c1f3a8a67383edebf24754bf30a5120f8":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7455ee5c847b2ee7e44656e4218141f62dacb572","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["17778d9c1f3a8a67383edebf24754bf30a5120f8","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}