{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","commits":[{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,float,float).mjava","sourceNew":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(), \"boost\"));\n    }\n\n    subs.add(Explanation.match(this.k, \"k\"));\n    subs.add(Explanation.match(this.s, \"s\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen\"));\n    subs.add(Explanation.match((float) tf(stats, freq, docLen), \"tf\"));\n    subs.add(Explanation.match((float) ln(stats, freq, docLen), \"ln\"));\n    subs.add(Explanation.match((float) tfln(stats, freq, docLen), \"tfln\"));\n    subs.add(Explanation.match((float) idf(stats, freq, docLen), \"idf\"));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","sourceOld":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         float freq, float docLen) {\n    if (stats.getBoost() != 1.0f) {\n      subs.add(Explanation.match(stats.getBoost(), \"boost\"));\n    }\n\n    subs.add(Explanation.match(this.k, \"k\"));\n    subs.add(Explanation.match(this.s, \"s\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen\"));\n    subs.add(Explanation.match(tf(stats, freq, docLen), \"tf\"));\n    subs.add(Explanation.match(ln(stats, freq, docLen), \"ln\"));\n    subs.add(Explanation.match(tfln(stats, freq, docLen), \"tfln\"));\n    subs.add(Explanation.match(idf(stats, freq, docLen), \"idf\"));\n    subs.add(Explanation.match(gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ebae307ed33e9c07244cc9f74f0e644d8f2aa8a","date":1513155113,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","sourceNew":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(),\n          \"boost, query boost\"));\n    }\n\n    subs.add(Explanation.match(this.k,\n        \"k, hyperparam for the primitive weighting function\"));\n    subs.add(Explanation.match(this.s,\n        \"s, hyperparam for the growth function\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen, query length\"));\n    subs.add(tfExplain(stats, freq, docLen));\n    subs.add(lnExplain(stats, freq, docLen));\n    subs.add(tflnExplain(stats, freq, docLen));\n    subs.add(idfExplain(stats, freq, docLen));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","sourceOld":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(), \"boost\"));\n    }\n\n    subs.add(Explanation.match(this.k, \"k\"));\n    subs.add(Explanation.match(this.s, \"s\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen\"));\n    subs.add(Explanation.match((float) tf(stats, freq, docLen), \"tf\"));\n    subs.add(Explanation.match((float) ln(stats, freq, docLen), \"ln\"));\n    subs.add(Explanation.match((float) tfln(stats, freq, docLen), \"tfln\"));\n    subs.add(Explanation.match((float) idf(stats, freq, docLen), \"idf\"));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","sourceNew":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(),\n          \"boost, query boost\"));\n    }\n\n    subs.add(Explanation.match(this.k,\n        \"k, hyperparam for the primitive weighting function\"));\n    subs.add(Explanation.match(this.s,\n        \"s, hyperparam for the growth function\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen, query length\"));\n    subs.add(tfExplain(stats, freq, docLen));\n    subs.add(lnExplain(stats, freq, docLen));\n    subs.add(tflnExplain(stats, freq, docLen));\n    subs.add(idfExplain(stats, freq, docLen));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","sourceOld":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(), \"boost\"));\n    }\n\n    subs.add(Explanation.match(this.k, \"k\"));\n    subs.add(Explanation.match(this.s, \"s\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen\"));\n    subs.add(Explanation.match((float) tf(stats, freq, docLen), \"tf\"));\n    subs.add(Explanation.match((float) ln(stats, freq, docLen), \"ln\"));\n    subs.add(Explanation.match((float) tfln(stats, freq, docLen), \"tfln\"));\n    subs.add(Explanation.match((float) idf(stats, freq, docLen), \"idf\"));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","sourceNew":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(),\n          \"boost, query boost\"));\n    }\n\n    subs.add(Explanation.match(this.k,\n        \"k, hyperparam for the primitive weighting function\"));\n    subs.add(Explanation.match(this.s,\n        \"s, hyperparam for the growth function\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen, query length\"));\n    subs.add(tfExplain(stats, freq, docLen));\n    subs.add(lnExplain(stats, freq, docLen));\n    subs.add(tflnExplain(stats, freq, docLen));\n    subs.add(idfExplain(stats, freq, docLen));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, freq, docLen);\n  }\n\n","sourceOld":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(),\n          \"boost, query boost\"));\n    }\n\n    subs.add(Explanation.match(this.k,\n        \"k, hyperparam for the primitive weighting function\"));\n    subs.add(Explanation.match(this.s,\n        \"s, hyperparam for the growth function\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen, query length\"));\n    subs.add(tfExplain(stats, freq, docLen));\n    subs.add(lnExplain(stats, freq, docLen));\n    subs.add(tflnExplain(stats, freq, docLen));\n    subs.add(idfExplain(stats, freq, docLen));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(),\n          \"boost, query boost\"));\n    }\n\n    subs.add(Explanation.match(this.k,\n        \"k, hyperparam for the primitive weighting function\"));\n    subs.add(Explanation.match(this.s,\n        \"s, hyperparam for the growth function\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen, query length\"));\n    subs.add(tfExplain(stats, freq, docLen));\n    subs.add(lnExplain(stats, freq, docLen));\n    subs.add(tflnExplain(stats, freq, docLen));\n    subs.add(idfExplain(stats, freq, docLen));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["927e6deec13723e5fd6fb8f1e0457e8597dae15e","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ebae307ed33e9c07244cc9f74f0e644d8f2aa8a":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","0ebae307ed33e9c07244cc9f74f0e644d8f2aa8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["0ebae307ed33e9c07244cc9f74f0e644d8f2aa8a","927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"0ebae307ed33e9c07244cc9f74f0e644d8f2aa8a":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}