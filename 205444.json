{"path":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#totalTermFreq(String,BytesRef).mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#totalTermFreq(String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#totalTermFreq(String,BytesRef).mjava","sourceNew":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final long totalTermFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final long totalTermFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicReader#totalTermFreq(String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#totalTermFreq(String,BytesRef).mjava","sourceNew":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final long totalTermFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the term\n   * <code>t</code>.  This method returns 0 if the term or\n   * field does not exists.  This method does not take into\n   * account deleted documents that have not yet been merged\n   * away. */\n  public final long totalTermFreq(String field, BytesRef term) throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms == null) {\n      return 0;\n    }\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (termsEnum.seekExact(term, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}