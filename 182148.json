{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#waitForDeletion(String).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#waitForDeletion(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForDeletion(String collection) throws InterruptedException, KeeperException {\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS);\n    while (cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      LOG.info(\"Collection not yet deleted\");\n      try {\n        Thread.sleep(100);\n        if (t.hasTimedOut()) {\n          fail(\"Timed out waiting for collection \" + collection + \" to be deleted.\");\n        }\n        cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      } catch(SolrException e) {\n        return;\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#waitForDeletion(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForDeletion(String collection) throws InterruptedException, KeeperException {\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS);\n    while (cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      LOG.info(\"Collection not yet deleted\");\n      try {\n        Thread.sleep(100);\n        if (t.hasTimedOut()) {\n          fail(\"Timed out waiting for collection \" + collection + \" to be deleted.\");\n        }\n        cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      } catch(SolrException e) {\n        return;\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#waitForDeletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#waitForDeletion(String).mjava","sourceNew":"  private void waitForDeletion(String collection) throws InterruptedException, KeeperException {\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      LOG.info(\"Collection not yet deleted\");\n      try {\n        Thread.sleep(100);\n        if (t.hasTimedOut()) {\n          fail(\"Timed out waiting for collection \" + collection + \" to be deleted.\");\n        }\n        cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      } catch(SolrException e) {\n        return;\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void waitForDeletion(String collection) throws InterruptedException, KeeperException {\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS);\n    while (cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      LOG.info(\"Collection not yet deleted\");\n      try {\n        Thread.sleep(100);\n        if (t.hasTimedOut()) {\n          fail(\"Timed out waiting for collection \" + collection + \" to be deleted.\");\n        }\n        cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      } catch(SolrException e) {\n        return;\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#waitForDeletion(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplicaErrorHandling#waitForDeletion(String).mjava","sourceNew":"  private void waitForDeletion(String collection) throws InterruptedException, KeeperException {\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      log.info(\"Collection not yet deleted\");\n      try {\n        Thread.sleep(100);\n        if (t.hasTimedOut()) {\n          fail(\"Timed out waiting for collection \" + collection + \" to be deleted.\");\n        }\n        cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      } catch(SolrException e) {\n        return;\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void waitForDeletion(String collection) throws InterruptedException, KeeperException {\n    TimeOut t = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collection)) {\n      LOG.info(\"Collection not yet deleted\");\n      try {\n        Thread.sleep(100);\n        if (t.hasTimedOut()) {\n          fail(\"Timed out waiting for collection \" + collection + \" to be deleted.\");\n        }\n        cluster.getSolrClient().getZkStateReader().forceUpdateCollection(collection);\n      } catch(SolrException e) {\n        return;\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}