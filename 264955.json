{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","sourceNew":"    protected ServerBaseFeed createFeedFromRequest(HttpServletRequest request) throws ParseException, IOException, FeedHandlerException{\n        GDataServerRegistry registry = GDataServerRegistry.getRegistry();\n        String providedService = request.getParameter(PARAMETER_SERVICE);\n        if(!registry.isServiceRegistered(providedService)){\n            setError(GDataResponse.NOT_FOUND,\"no such service\");\n            throw new FeedHandlerException(\"ProvicdedService is not registered -- Name: \"+providedService);\n         }\n        ProvidedService provServiceInstance = registry.getProvidedService(providedService);  \n        if(providedService == null){\n            setError(GDataResponse.BAD_REQUEST,\"no such service\");\n            throw new FeedHandlerException(\"no such service registered -- \"+providedService);\n        }\n        try{\n            ServerBaseFeed retVal = new ServerBaseFeed(GDataEntityBuilder.buildFeed(request.getReader(),provServiceInstance));\n            retVal.setServiceConfig(provServiceInstance);\n        return retVal;\n        }catch (IOException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"Can not read from input stream - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"Can not read from input stream\");\n            throw e;\n        }catch (ParseException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"feed can not be parsed - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"incoming feed can not be parsed\");\n            throw e;\n        }\n        \n    }\n\n","sourceOld":"    protected ServerBaseFeed createFeedFromRequest(HttpServletRequest request) throws ParseException, IOException, FeedHandlerException{\n        GDataServerRegistry registry = GDataServerRegistry.getRegistry();\n        String providedService = request.getParameter(PARAMETER_SERVICE);\n        if(!registry.isServiceRegistered(providedService)){\n            setError(GDataResponse.NOT_FOUND,\"no such service\");\n            throw new FeedHandlerException(\"ProvicdedService is not registered -- Name: \"+providedService);\n         }\n        ProvidedService provServiceInstance = registry.getProvidedService(providedService);  \n        if(providedService == null){\n            setError(GDataResponse.BAD_REQUEST,\"no such service\");\n            throw new FeedHandlerException(\"no such service registered -- \"+providedService);\n        }\n        try{\n            ServerBaseFeed retVal = new ServerBaseFeed(GDataEntityBuilder.buildFeed(request.getReader(),provServiceInstance));\n            retVal.setServiceConfig(provServiceInstance);\n        return retVal;\n        }catch (IOException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"Can not read from input stream - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"Can not read from input stream\");\n            throw e;\n        }catch (ParseException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"feed can not be parsed - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"incoming feed can not be parsed\");\n            throw e;\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","sourceNew":null,"sourceOld":"    protected ServerBaseFeed createFeedFromRequest(HttpServletRequest request) throws ParseException, IOException, FeedHandlerException{\n        GDataServerRegistry registry = GDataServerRegistry.getRegistry();\n        String providedService = request.getParameter(PARAMETER_SERVICE);\n        if(!registry.isServiceRegistered(providedService)){\n            setError(GDataResponse.NOT_FOUND,\"no such service\");\n            throw new FeedHandlerException(\"ProvicdedService is not registered -- Name: \"+providedService);\n         }\n        ProvidedService provServiceInstance = registry.getProvidedService(providedService);  \n        if(providedService == null){\n            setError(GDataResponse.BAD_REQUEST,\"no such service\");\n            throw new FeedHandlerException(\"no such service registered -- \"+providedService);\n        }\n        try{\n            ServerBaseFeed retVal = new ServerBaseFeed(GDataEntityBuilder.buildFeed(request.getReader(),provServiceInstance));\n            retVal.setServiceConfig(provServiceInstance);\n        return retVal;\n        }catch (IOException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"Can not read from input stream - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"Can not read from input stream\");\n            throw e;\n        }catch (ParseException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"feed can not be parsed - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"incoming feed can not be parsed\");\n            throw e;\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}