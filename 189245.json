{"path":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#doDiskIo(File).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#doDiskIo(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs some disk IO by writing to a new file in the given directory\n   * and sync'ing file contents to disk.\n   *\n   * This increases the likelihood of catching catastrophic disk/controller\n   * failures sooner.\n   *\n   * @param dir directory to be checked.\n   * @throws DiskErrorException if we hit an error while trying to perform\n   *         disk IO against the file.\n   */\n  private static void doDiskIo(File dir) throws DiskErrorException {\n    try {\n      IOException ioe = null;\n\n      for (int i = 0; i < DISK_IO_MAX_ITERATIONS; ++i) {\n        final File file = getFileNameForDiskIoCheck(dir, i+1);\n        try {\n          diskIoCheckWithoutNativeIo(file);\n          return;\n        } catch (IOException e) {\n          // Let's retry a few times before we really give up and\n          // declare the disk as bad.\n          ioe = e;\n        }\n      }\n      throw ioe;  // Just rethrow the last exception to signal failure.\n    } catch(IOException e) {\n      throw new DiskErrorException(\"Error checking directory \" + dir, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/util/DiskChecker#doDiskIo(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs some disk IO by writing to a new file in the given directory\n   * and sync'ing file contents to disk.\n   *\n   * This increases the likelihood of catching catastrophic disk/controller\n   * failures sooner.\n   *\n   * @param dir directory to be checked.\n   * @throws DiskErrorException if we hit an error while trying to perform\n   *         disk IO against the file.\n   */\n  private static void doDiskIo(File dir) throws DiskErrorException {\n    try {\n      IOException ioe = null;\n\n      for (int i = 0; i < DISK_IO_MAX_ITERATIONS; ++i) {\n        final File file = getFileNameForDiskIoCheck(dir, i+1);\n        try {\n          diskIoCheckWithoutNativeIo(file);\n          return;\n        } catch (IOException e) {\n          // Let's retry a few times before we really give up and\n          // declare the disk as bad.\n          ioe = e;\n        }\n      }\n      throw ioe;  // Just rethrow the last exception to signal failure.\n    } catch(IOException e) {\n      throw new DiskErrorException(\"Error checking directory \" + dir, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}