{"path":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector1#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector1#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      return new LeafCollector() {\n        \n        Scorer scorer;\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        public void collect(int doc) throws IOException {\n          list.add(new ScoreDoc(doc+base, scorer.score()));\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector1#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector1#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      return new LeafCollector() {\n        \n        Scorer scorer;\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        public void collect(int doc) throws IOException {\n          list.add(new ScoreDoc(doc+base, scorer.score()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      return new LeafCollector() {\n        \n        Scorer scorer;\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        public void collect(int doc) throws IOException {\n          list.add(new ScoreDoc(doc+base, scorer.score()));\n        }\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector1#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector1#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      return new LeafCollector() {\n        \n        Scorable scorer;\n        \n        @Override\n        public void setScorer(Scorable scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        public void collect(int doc) throws IOException {\n          list.add(new ScoreDoc(doc+base, scorer.score()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      return new LeafCollector() {\n        \n        Scorer scorer;\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        public void collect(int doc) throws IOException {\n          list.add(new ScoreDoc(doc+base, scorer.score()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd81b9f1e22432a668756e938bfb0835c1abb11b","date":1546254331,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/RankQueryTestPlugin.TestCollector1#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRankQueryPlugin.TestCollector1#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      return new LeafCollector() {\n        \n        Scorable scorer;\n        \n        @Override\n        public void setScorer(Scorable scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        public void collect(int doc) throws IOException {\n          list.add(new ScoreDoc(doc+base, scorer.score()));\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int base = context.docBase;\n      return new LeafCollector() {\n        \n        Scorable scorer;\n        \n        @Override\n        public void setScorer(Scorable scorer) throws IOException {\n          this.scorer = scorer;\n        }\n        \n        public void collect(int doc) throws IOException {\n          list.add(new ScoreDoc(doc+base, scorer.score()));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd81b9f1e22432a668756e938bfb0835c1abb11b":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd81b9f1e22432a668756e938bfb0835c1abb11b"]},"commit2Childs":{"bd81b9f1e22432a668756e938bfb0835c1abb11b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["bd81b9f1e22432a668756e938bfb0835c1abb11b"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901e951cec2e6af4e503209a6721c8834db23279"],"901e951cec2e6af4e503209a6721c8834db23279":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}