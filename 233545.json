{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testComments().mjava","commits":[{"id":"57e3101a41ed818f22eb79567303e8523da9f00f","date":1438797043,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testComments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testComments() throws Exception {\n    assertJQ(req(\"q\",\"id:1 id:2 /* *:* */ id:3\")\n        ,\"/response/numFound==3\"\n    );\n\n    //\n    assertJQ(req(\"q\",\"id:1 /**.*/\")\n        ,\"/response/numFound==1\"  // if it matches more than one, it's being treated as a regex.\n    );\n\n\n    // don't match comment start in string\n    assertJQ(req(\"q\",\" \\\"/*\\\" id:1 id:2 \\\"*/\\\" id:3\")\n        ,\"/response/numFound==3\"\n    );\n\n    // don't match an end of comment within  a string\n    // assertJQ(req(\"q\",\"id:1 id:2 /* \\\"*/\\\" *:* */ id:3\")\n    //     ,\"/response/numFound==3\"\n    // );\n    // removed this functionality - there's more of a danger to thinking we're in a string.\n    //   can't do it */  ......... '\n\n    // nested comments\n    assertJQ(req(\"q\",\"id:1 /* id:2 /* */ /* /**/ id:3 */ id:10 */ id:11\")\n        ,\"/response/numFound==2\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c","date":1438964081,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testComments().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testComments().mjava","sourceNew":"  @Test\n  public void testComments() throws Exception {\n    assertJQ(req(\"q\",\"id:1 id:2 /* *:* */ id:3\")\n        ,\"/response/numFound==3\"\n    );\n\n    //\n    assertJQ(req(\"q\",\"id:1 /**.*/\")\n        ,\"/response/numFound==1\"  // if it matches more than one, it's being treated as a regex.\n    );\n\n\n    // don't match comment start in string\n    assertJQ(req(\"q\", \" \\\"/*\\\" id:1 id:2 \\\"*/\\\" id:3\")\n        , \"/response/numFound==3\"\n    );\n\n    // don't match an end of comment within  a string\n    // assertJQ(req(\"q\",\"id:1 id:2 /* \\\"*/\\\" *:* */ id:3\")\n    //     ,\"/response/numFound==3\"\n    // );\n    // removed this functionality - there's more of a danger to thinking we're in a string.\n    //   can't do it */  ......... '\n\n    // nested comments\n    assertJQ(req(\"q\",\"id:1 /* id:2 /* */ /* /**/ id:3 */ id:10 */ id:11\")\n        ,\"/response/numFound==2\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testComments() throws Exception {\n    assertJQ(req(\"q\",\"id:1 id:2 /* *:* */ id:3\")\n        ,\"/response/numFound==3\"\n    );\n\n    //\n    assertJQ(req(\"q\",\"id:1 /**.*/\")\n        ,\"/response/numFound==1\"  // if it matches more than one, it's being treated as a regex.\n    );\n\n\n    // don't match comment start in string\n    assertJQ(req(\"q\",\" \\\"/*\\\" id:1 id:2 \\\"*/\\\" id:3\")\n        ,\"/response/numFound==3\"\n    );\n\n    // don't match an end of comment within  a string\n    // assertJQ(req(\"q\",\"id:1 id:2 /* \\\"*/\\\" *:* */ id:3\")\n    //     ,\"/response/numFound==3\"\n    // );\n    // removed this functionality - there's more of a danger to thinking we're in a string.\n    //   can't do it */  ......... '\n\n    // nested comments\n    assertJQ(req(\"q\",\"id:1 /* id:2 /* */ /* /**/ id:3 */ id:10 */ id:11\")\n        ,\"/response/numFound==2\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d959d418bddfa46d8eea54f0d8b855165586838","date":1453938797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testComments().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testComments().mjava","sourceNew":"  @Test\n  public void testComments() throws Exception {\n    assertJQ(req(\"q\", \"id:1 id:2 /* *:* */ id:3\")\n        , \"/response/numFound==3\"\n    );\n\n    //\n    assertJQ(req(\"q\", \"id:1 /**.*/\")\n        , \"/response/numFound==1\"  // if it matches more than one, it's being treated as a regex.\n    );\n\n\n    // don't match comment start in string\n    assertJQ(req(\"q\", \" \\\"/*\\\" id:1 id:2 \\\"*/\\\" id:3\")\n        , \"/response/numFound==3\"\n    );\n\n    // don't match an end of comment within  a string\n    // assertJQ(req(\"q\",\"id:1 id:2 /* \\\"*/\\\" *:* */ id:3\")\n    //     ,\"/response/numFound==3\"\n    // );\n    // removed this functionality - there's more of a danger to thinking we're in a string.\n    //   can't do it */  ......... '\n\n    // nested comments\n    assertJQ(req(\"q\", \"id:1 /* id:2 /* */ /* /**/ id:3 */ id:10 */ id:11\")\n        , \"/response/numFound==2\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testComments() throws Exception {\n    assertJQ(req(\"q\",\"id:1 id:2 /* *:* */ id:3\")\n        ,\"/response/numFound==3\"\n    );\n\n    //\n    assertJQ(req(\"q\",\"id:1 /**.*/\")\n        ,\"/response/numFound==1\"  // if it matches more than one, it's being treated as a regex.\n    );\n\n\n    // don't match comment start in string\n    assertJQ(req(\"q\", \" \\\"/*\\\" id:1 id:2 \\\"*/\\\" id:3\")\n        , \"/response/numFound==3\"\n    );\n\n    // don't match an end of comment within  a string\n    // assertJQ(req(\"q\",\"id:1 id:2 /* \\\"*/\\\" *:* */ id:3\")\n    //     ,\"/response/numFound==3\"\n    // );\n    // removed this functionality - there's more of a danger to thinking we're in a string.\n    //   can't do it */  ......... '\n\n    // nested comments\n    assertJQ(req(\"q\",\"id:1 /* id:2 /* */ /* /**/ id:3 */ id:10 */ id:11\")\n        ,\"/response/numFound==2\"\n    );\n\n  }\n\n","bugFix":["57e3101a41ed818f22eb79567303e8523da9f00f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testComments().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testComments().mjava","sourceNew":"  @Test\n  public void testComments() throws Exception {\n    assertJQ(req(\"q\", \"id:1 id:2 /* *:* */ id:3\")\n        , \"/response/numFound==3\"\n    );\n\n    //\n    assertJQ(req(\"q\", \"id:1 /**.*/\")\n        , \"/response/numFound==1\"  // if it matches more than one, it's being treated as a regex.\n    );\n\n\n    // don't match comment start in string\n    assertJQ(req(\"q\", \" \\\"/*\\\" id:1 id:2 \\\"*/\\\" id:3\")\n        , \"/response/numFound==3\"\n    );\n\n    // don't match an end of comment within  a string\n    // assertJQ(req(\"q\",\"id:1 id:2 /* \\\"*/\\\" *:* */ id:3\")\n    //     ,\"/response/numFound==3\"\n    // );\n    // removed this functionality - there's more of a danger to thinking we're in a string.\n    //   can't do it */  ......... '\n\n    // nested comments\n    assertJQ(req(\"q\", \"id:1 /* id:2 /* */ /* /**/ id:3 */ id:10 */ id:11\")\n        , \"/response/numFound==2\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testComments() throws Exception {\n    assertJQ(req(\"q\",\"id:1 id:2 /* *:* */ id:3\")\n        ,\"/response/numFound==3\"\n    );\n\n    //\n    assertJQ(req(\"q\",\"id:1 /**.*/\")\n        ,\"/response/numFound==1\"  // if it matches more than one, it's being treated as a regex.\n    );\n\n\n    // don't match comment start in string\n    assertJQ(req(\"q\", \" \\\"/*\\\" id:1 id:2 \\\"*/\\\" id:3\")\n        , \"/response/numFound==3\"\n    );\n\n    // don't match an end of comment within  a string\n    // assertJQ(req(\"q\",\"id:1 id:2 /* \\\"*/\\\" *:* */ id:3\")\n    //     ,\"/response/numFound==3\"\n    // );\n    // removed this functionality - there's more of a danger to thinking we're in a string.\n    //   can't do it */  ......... '\n\n    // nested comments\n    assertJQ(req(\"q\",\"id:1 /* id:2 /* */ /* /**/ id:3 */ id:10 */ id:11\")\n        ,\"/response/numFound==2\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c":["57e3101a41ed818f22eb79567303e8523da9f00f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c","7d959d418bddfa46d8eea54f0d8b855165586838"],"57e3101a41ed818f22eb79567303e8523da9f00f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d959d418bddfa46d8eea54f0d8b855165586838":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d959d418bddfa46d8eea54f0d8b855165586838"]},"commit2Childs":{"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","7d959d418bddfa46d8eea54f0d8b855165586838"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57e3101a41ed818f22eb79567303e8523da9f00f"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"57e3101a41ed818f22eb79567303e8523da9f00f":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c"],"7d959d418bddfa46d8eea54f0d8b855165586838":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}