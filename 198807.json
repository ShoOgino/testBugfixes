{"path":"modules/facet/src/java/org/apache/lucene/util/Vint8#encode(int,byte[],int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/util/Vint8#encode(int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Encodes {@code number} into {@code dest}, starting at offset {@code start} from\n   * the beginning of the array. This method assumes {@code dest} is large enough to\n   * hold the required number of bytes.\n   * @param number The number to be encoded.\n   * @param dest The destination array.\n   * @param start The starting offset in the array.\n   * @return The number of bytes used in the array.\n   */\n  public static int encode(int number, byte[] dest, int start) {\n    if ((number & ~0x7F) == 0) {\n      dest[start] = (byte) number;\n      return 1;\n    } else if ((number & ~0x3FFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 1] = (byte) (number & 0x7F);\n      return 2;\n    } else if ((number & ~0x1FFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 2] = (byte) (number & 0x7F);\n      return 3;\n    } else if ((number & ~0xFFFFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 3] = (byte) (number & 0x7F);\n      return 4;\n    } else {\n      dest[start] = (byte) (0x80 | ((number & 0xF0000000) >> 28));\n      dest[start + 1] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 3] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 4] = (byte) (number & 0x7F);\n      return 5;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/Vint8#encode(int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Encodes {@code number} into {@code dest}, starting at offset {@code start} from\n   * the beginning of the array. This method assumes {@code dest} is large enough to\n   * hold the required number of bytes.\n   * @param number The number to be encoded.\n   * @param dest The destination array.\n   * @param start The starting offset in the array.\n   * @return The number of bytes used in the array.\n   */\n  public static int encode(int number, byte[] dest, int start) {\n    if ((number & ~0x7F) == 0) {\n      dest[start] = (byte) number;\n      return 1;\n    } else if ((number & ~0x3FFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 1] = (byte) (number & 0x7F);\n      return 2;\n    } else if ((number & ~0x1FFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 2] = (byte) (number & 0x7F);\n      return 3;\n    } else if ((number & ~0xFFFFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 3] = (byte) (number & 0x7F);\n      return 4;\n    } else {\n      dest[start] = (byte) (0x80 | ((number & 0xF0000000) >> 28));\n      dest[start + 1] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 3] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 4] = (byte) (number & 0x7F);\n      return 5;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/util/Vint8#encode(int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Encodes {@code number} into {@code dest}, starting at offset {@code start} from\n   * the beginning of the array. This method assumes {@code dest} is large enough to\n   * hold the required number of bytes.\n   * @param number The number to be encoded.\n   * @param dest The destination array.\n   * @param start The starting offset in the array.\n   * @return The number of bytes used in the array.\n   */\n  public static int encode(int number, byte[] dest, int start) {\n    if ((number & ~0x7F) == 0) {\n      dest[start] = (byte) number;\n      return 1;\n    } else if ((number & ~0x3FFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 1] = (byte) (number & 0x7F);\n      return 2;\n    } else if ((number & ~0x1FFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 2] = (byte) (number & 0x7F);\n      return 3;\n    } else if ((number & ~0xFFFFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 3] = (byte) (number & 0x7F);\n      return 4;\n    } else {\n      dest[start] = (byte) (0x80 | ((number & 0xF0000000) >> 28));\n      dest[start + 1] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 3] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 4] = (byte) (number & 0x7F);\n      return 5;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/Vint8#encode(int,byte[],int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/Vint8#encode(int,byte[],int).mjava","sourceNew":"  /** \n   * Encodes {@code number} into {@code dest}, starting at offset {@code start} from\n   * the beginning of the array. This method assumes {@code dest} is large enough to\n   * hold the required number of bytes.\n   * @param number The number to be encoded.\n   * @param dest The destination array.\n   * @param start The starting offset in the array.\n   * @return The number of bytes used in the array.\n   */\n  public static int encode(int number, byte[] dest, int start) {\n    if ((number & ~0x7F) == 0) {\n      dest[start] = (byte) number;\n      return 1;\n    } else if ((number & ~0x3FFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 1] = (byte) (number & 0x7F);\n      return 2;\n    } else if ((number & ~0x1FFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 2] = (byte) (number & 0x7F);\n      return 3;\n    } else if ((number & ~0xFFFFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 3] = (byte) (number & 0x7F);\n      return 4;\n    } else {\n      dest[start] = (byte) (0x80 | ((number & 0xF0000000) >> 28));\n      dest[start + 1] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 3] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 4] = (byte) (number & 0x7F);\n      return 5;\n    }\n  }\n\n","sourceOld":"  /** \n   * Encodes {@code number} into {@code dest}, starting at offset {@code start} from\n   * the beginning of the array. This method assumes {@code dest} is large enough to\n   * hold the required number of bytes.\n   * @param number The number to be encoded.\n   * @param dest The destination array.\n   * @param start The starting offset in the array.\n   * @return The number of bytes used in the array.\n   */\n  public static int encode(int number, byte[] dest, int start) {\n    if ((number & ~0x7F) == 0) {\n      dest[start] = (byte) number;\n      return 1;\n    } else if ((number & ~0x3FFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 1] = (byte) (number & 0x7F);\n      return 2;\n    } else if ((number & ~0x1FFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 2] = (byte) (number & 0x7F);\n      return 3;\n    } else if ((number & ~0xFFFFFFF) == 0) {\n      dest[start] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 1] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 3] = (byte) (number & 0x7F);\n      return 4;\n    } else {\n      dest[start] = (byte) (0x80 | ((number & 0xF0000000) >> 28));\n      dest[start + 1] = (byte) (0x80 | ((number & 0xFE00000) >> 21));\n      dest[start + 2] = (byte) (0x80 | ((number & 0x1FC000) >> 14));\n      dest[start + 3] = (byte) (0x80 | ((number & 0x3F80) >> 7));\n      dest[start + 4] = (byte) (number & 0x7F);\n      return 5;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}