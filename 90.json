{"path":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","commits":[{"id":"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","date":1411674127,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (10 seconds) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(10000));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, 10);\n      fail(\"This query should have led to an ExitingReaderException!\");\n    } catch (ExitingReaderException ex) {\n      // Do nothing, we expect this!\n    } finally {\n      reader.close();\n      exitableDirectoryReader.close();\n    }\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","date":1411744836,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (10 seconds) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(10000));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, 10);\n      fail(\"This query should have led to an ExitingReaderException!\");\n    } catch (ExitingReaderException ex) {\n      // Do nothing, we expect this!\n    } finally {\n      reader.close();\n      exitableDirectoryReader.close();\n    }\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431452b6326a9c17ba5bb1e1a6d89e23a8932e73","date":1417113370,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, 10);\n      fail(\"This query should have led to an ExitingReaderException!\");\n    } catch (ExitingReaderException ex) {\n      // Do nothing, we expect this!\n    } finally {\n      reader.close();\n      exitableDirectoryReader.close();\n    }\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (10 seconds) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(10000));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, 10);\n      fail(\"This query should have led to an ExitingReaderException!\");\n    } catch (ExitingReaderException ex) {\n      // Do nothing, we expect this!\n    } finally {\n      reader.close();\n      exitableDirectoryReader.close();\n    }\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(exitableDirectoryReader);\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n    exitableDirectoryReader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, 10);\n      fail(\"This query should have led to an ExitingReaderException!\");\n    } catch (ExitingReaderException ex) {\n      // Do nothing, we expect this!\n    } finally {\n      reader.close();\n      exitableDirectoryReader.close();\n    }\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    directory.close();\n  }\n\n","bugFix":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(exitableDirectoryReader);\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n    exitableDirectoryReader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(exitableDirectoryReader);\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n    exitableDirectoryReader.close();\n\n    directory.close();\n  }\n\n","bugFix":["05fe562aa248790944d43cdd478f512572835ba0","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ca51e0a8d47c27d0082d5ce5bd418a0bd9f45a4","date":1473979508,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  @Ignore(\"this test relies on wall clock time and sometimes false fails\")\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  @Ignore(\"this test relies on wall clock time and sometimes false fails\")\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  @Ignore(\"this test relies on wall clock time and sometimes false fails\")\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bd9fc2fe21ef7cc0b7400278061b50b8f91987","date":1542360740,"type":5,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterTermsIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  public void testExitableFilterTermsIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.forceMerge(1);\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (infinite) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, infiniteQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a really low timeout value (immediate) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, immediateQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, infiniteQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, disabledQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  @Ignore(\"this test relies on wall clock time and sometimes false fails\")\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bd9fc2fe21ef7cc0b7400278061b50b8f91987","date":1542360740,"type":6,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitablePointValuesIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestExitableDirectoryReader#testExitableFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests timing out of PointValues queries\n   *\n   * @throws Exception on error\n   */\n  public void testExitablePointValuesIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(new IntPoint(\"default\", 10));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new IntPoint(\"default\", 100));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new IntPoint(\"default\", 1000));\n    writer.addDocument(d3);\n\n    writer.forceMerge(1);\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = IntPoint.newRangeQuery(\"default\", 10, 20);\n\n    // Set a fairly high timeout value (infinite) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, infiniteQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a really low timeout value (immediate) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, immediateQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n\n    // Set maximum time out and expect the query to complete.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, infiniteQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, disabledQueryTimeout());\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests timing out of TermsEnum iterations\n   * @throws Exception on error\n   */\n  @Ignore(\"this test relies on wall clock time and sometimes false fails\")\n  public void testExitableFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"ones two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n\n    writer.commit();\n    writer.close();\n\n    DirectoryReader directoryReader;\n    DirectoryReader exitableDirectoryReader;\n    IndexReader reader;\n    IndexSearcher searcher;\n\n    Query query = new PrefixQuery(new Term(\"default\", \"o\"));\n\n    // Set a fairly high timeout value (1 second) and expect the query to complete in that time frame.\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1000));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n\n    // Set a really low timeout value (1 millisecond) and expect an Exception\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    IndexSearcher slowSearcher = new IndexSearcher(reader);\n    expectThrows(ExitingReaderException.class, () -> {\n      slowSearcher.search(query, 10);\n    });\n    reader.close();\n   \n    // Set maximum time out and expect the query to complete. \n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    // Set a negative time allowed and expect the query to complete (should disable timeouts)\n    // Not checking the validity of the result, all we are bothered about in this test is the timing out.\n    directoryReader = DirectoryReader.open(directory);\n    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));\n    reader = new TestReader(getOnlyLeafReader(exitableDirectoryReader));\n    searcher = new IndexSearcher(reader);\n    searcher.search(query, 10);\n    reader.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["05fe562aa248790944d43cdd478f512572835ba0"],"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","1ca51e0a8d47c27d0082d5ce5bd418a0bd9f45a4"],"1ca51e0a8d47c27d0082d5ce5bd418a0bd9f45a4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"63bd9fc2fe21ef7cc0b7400278061b50b8f91987":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"05fe562aa248790944d43cdd478f512572835ba0":["431452b6326a9c17ba5bb1e1a6d89e23a8932e73"],"431452b6326a9c17ba5bb1e1a6d89e23a8932e73":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63bd9fc2fe21ef7cc0b7400278061b50b8f91987"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1ca51e0a8d47c27d0082d5ce5bd418a0bd9f45a4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","431452b6326a9c17ba5bb1e1a6d89e23a8932e73"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","da951a24a6a87d5ba7e1820f8c28a1e2beea76c1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["63bd9fc2fe21ef7cc0b7400278061b50b8f91987","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1ca51e0a8d47c27d0082d5ce5bd418a0bd9f45a4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"05fe562aa248790944d43cdd478f512572835ba0":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"63bd9fc2fe21ef7cc0b7400278061b50b8f91987":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"431452b6326a9c17ba5bb1e1a6d89e23a8932e73":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}