{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","commits":[{"id":"9fb2c11bd0a5a7bef41cee10608d4429e976c528","date":1381463622,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = _TestUtil.randomUnicodeString(random(), 100);\n      int min = _TestUtil.nextInt(random(), 0, 100);\n      int max = _TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","sourceNew":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = _TestUtil.randomUnicodeString(random(), 100);\n      int min = _TestUtil.nextInt(random(), 0, 100);\n      int max = _TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = _TestUtil.randomUnicodeString(random(), 100);\n      int min = _TestUtil.nextInt(random(), 0, 100);\n      int max = _TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","sourceNew":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = _TestUtil.randomUnicodeString(random(), 100);\n      int min = _TestUtil.nextInt(random(), 0, 100);\n      int max = _TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d47c249ea6af39c2da32cebcf113b7ac5c12bad8","date":1398390859,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","sourceNew":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      if(min>max){\n        int temp = min;\n        min = max;\n        max = temp;\n      }\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","sourceNew":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      if(min>max){\n        int temp = min;\n        min = max;\n        max = temp;\n      }\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","sourceNew":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      if(min>max){\n        int temp = min;\n        min = max;\n        max = temp;\n      }\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      if(min>max){\n        int temp = min;\n        min = max;\n        max = temp;\n      }\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","sourceNew":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      if(min>max){\n        int temp = min;\n        min = max;\n        max = temp;\n      }\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      if(min>max){\n        int temp = min;\n        min = max;\n        max = temp;\n      }\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestCodepointCountFilter#testRandomStrings().mjava","sourceNew":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      if(min>max){\n        int temp = min;\n        min = max;\n        max = temp;\n      }\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomStrings() throws IOException {\n    for (int i = 0; i < 10000; i++) {\n      String text = TestUtil.randomUnicodeString(random(), 100);\n      int min = TestUtil.nextInt(random(), 0, 100);\n      int max = TestUtil.nextInt(random(), 0, 100);\n      int count = text.codePointCount(0, text.length());\n      if(min>max){\n        int temp = min;\n        min = max;\n        max = temp;\n      }\n      boolean expected = count >= min && count <= max;\n      TokenStream stream = new KeywordTokenizer();\n      ((Tokenizer)stream).setReader(new StringReader(text));\n      stream = new CodepointCountFilter(TEST_VERSION_CURRENT, stream, min, max);\n      stream.reset();\n      assertEquals(expected, stream.incrementToken());\n      stream.end();\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["6613659748fe4411a7dcf85266e55db1f95f7315","d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"d47c249ea6af39c2da32cebcf113b7ac5c12bad8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d47c249ea6af39c2da32cebcf113b7ac5c12bad8":["ff4227bb146f97aabae888091c19e48c88dbb0db","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}