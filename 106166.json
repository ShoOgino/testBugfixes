{"path":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","commits":[{"id":"4b08395062a9bd41ecfc189dffdd509f36960ddd","date":1249409677,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(\"trie\", new Integer(lower), new Integer(upper), true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery tq=NumericRangeQuery.newIntRange(\"trie\", new Integer(lower), new Integer(upper), true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiValuedNumericRangeQuery#testMultiValuedNRQ().mjava","sourceNew":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  /** Tests NumericRangeQuery on a multi-valued field (multiple numeric values per document).\n   * This test ensures, that a classical TermRangeQuery returns exactly the same document numbers as\n   * NumericRangeQuery (see SOLR-1322 for discussion) and the multiple precision terms per numeric value\n   * do not interfere with multiple numeric values.\n   */\n\n  public void testMultiValuedNRQ() throws Exception {\n    final Random rnd = newRandom();\n\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    DecimalFormat format = new DecimalFormat(\"00000000000\", new DecimalFormatSymbols(Locale.US));\n    \n    for (int l=0; l<5000; l++) {\n      Document doc = new Document();\n      for (int m=0, c=rnd.nextInt(10); m<=c; m++) {\n        int value = rnd.nextInt(Integer.MAX_VALUE);\n        doc.add(new Field(\"asc\", format.format(value), Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add(new NumericField(\"trie\", Field.Store.NO, true).setIntValue(value));\n      }\n      writer.addDocument(doc);\n    }  \n    writer.close();\n    \n    Searcher searcher=new IndexSearcher(directory, true);\n    for (int i=0; i<50; i++) {\n      int lower=rnd.nextInt(Integer.MAX_VALUE);\n      int upper=rnd.nextInt(Integer.MAX_VALUE);\n      if (lower>upper) {\n        int a=lower; lower=upper; upper=a;\n      }\n      TermRangeQuery cq=new TermRangeQuery(\"asc\", format.format(lower), format.format(upper), true, true);\n      NumericRangeQuery<Integer> tq=NumericRangeQuery.newIntRange(\"trie\", lower, upper, true, true);\n      TopDocs trTopDocs = searcher.search(cq, 1);\n      TopDocs nrTopDocs = searcher.search(tq, 1);\n      assertEquals(\"Returned count for NumericRangeQuery and TermRangeQuery must be equal\", trTopDocs.totalHits, nrTopDocs.totalHits );\n    }\n    searcher.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["4b08395062a9bd41ecfc189dffdd509f36960ddd"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b08395062a9bd41ecfc189dffdd509f36960ddd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b08395062a9bd41ecfc189dffdd509f36960ddd"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b08395062a9bd41ecfc189dffdd509f36960ddd":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}