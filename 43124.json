{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","commits":[{"id":"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d","date":1351706460,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","pathOld":"/dev/null","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // much bigger than the chunk size\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = atLeast(1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c27b8e55534153a7da0290343242bc42f147da0","date":1351736244,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // much bigger than the chunk size\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // much bigger than the chunk size\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = atLeast(1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c7ec1e90d9538924d7598ce6b485bba61d230e","date":1351874590,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    iw.close();\n    dir.close();\n    dir = newFSDirectory(_TestUtil.getTempDir(getClass().getSimpleName()));\n    iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // much bigger than the chunk size\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    iw.close();\n    dir.close();\n    dir = newFSDirectory(_TestUtil.getTempDir(getClass().getSimpleName()));\n    iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    iw.close();\n    dir.close();\n    dir = newFSDirectory(_TestUtil.getTempDir(getClass().getSimpleName()));\n    iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testBigDocuments().mjava","sourceNew":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    iw.close();\n    dir.close();\n    dir = newFSDirectory(_TestUtil.getTempDir(getClass().getSimpleName()));\n    iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","sourceOld":"  @Nightly\n  public void testBigDocuments() throws IOException {\n    // \"big\" as \"much bigger than the chunk size\"\n    // for this test we force a FS dir\n    iw.close();\n    dir.close();\n    dir = newFSDirectory(_TestUtil.getTempDir(getClass().getSimpleName()));\n    iw = new RandomIndexWriter(random(), dir, iwConf);\n\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper) dir).setThrottling(Throttling.NEVER);\n    }\n\n    final Document emptyDoc = new Document(); // emptyDoc\n    final Document bigDoc1 = new Document(); // lot of small fields\n    final Document bigDoc2 = new Document(); // 1 very big field\n\n    final Field idField = new StringField(\"id\", \"\", Store.NO);\n    emptyDoc.add(idField);\n    bigDoc1.add(idField);\n    bigDoc2.add(idField);\n\n    final FieldType onlyStored = new FieldType(StringField.TYPE_STORED);\n    onlyStored.setIndexed(false);\n\n    final Field smallField = new Field(\"fld\", randomByteArray(random().nextInt(10), 256), onlyStored);\n    final int numFields = RandomInts.randomIntBetween(random(), 500000, 1000000);\n    for (int i = 0; i < numFields; ++i) {\n      bigDoc1.add(smallField);\n    }\n\n    final Field bigField = new Field(\"fld\", randomByteArray(RandomInts.randomIntBetween(random(), 1000000, 5000000), 2), onlyStored);\n    bigDoc2.add(bigField);\n\n    final int numDocs = atLeast(5);\n    final Document[] docs = new Document[numDocs];\n    for (int i = 0; i < numDocs; ++i) {\n      docs[i] = RandomPicks.randomFrom(random(), Arrays.asList(emptyDoc, bigDoc1, bigDoc2));\n    }\n    for (int i = 0; i < numDocs; ++i) {\n      idField.setStringValue(\"\" + i);\n      iw.addDocument(docs[i]);\n      if (random().nextInt(numDocs) == 0) {\n        iw.commit();\n      }\n    }\n    iw.commit();\n    iw.forceMerge(1); // look at what happens when big docs are merged\n    final DirectoryReader rd = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(rd);\n    for (int i = 0; i < numDocs; ++i) {\n      final Query query = new TermQuery(new Term(\"id\", \"\" + i));\n      final TopDocs topDocs = searcher.search(query, 1);\n      assertEquals(\"\" + i, 1, topDocs.totalHits);\n      final StoredDocument doc = rd.document(topDocs.scoreDocs[0].doc);\n      assertNotNull(doc);\n      final StorableField[] fieldValues = doc.getFields(\"fld\");\n      assertEquals(docs[i].getFields(\"fld\").length, fieldValues.length);\n      if (fieldValues.length > 0) {\n        assertEquals(docs[i].getFields(\"fld\")[0].binaryValue(), fieldValues[0].binaryValue());\n      }\n    }\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c27b8e55534153a7da0290343242bc42f147da0":["fb04ae9ea4b411d2adefa88bcd40141cfe9a711d"],"56c7ec1e90d9538924d7598ce6b485bba61d230e":["1c27b8e55534153a7da0290343242bc42f147da0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["56c7ec1e90d9538924d7598ce6b485bba61d230e","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["56c7ec1e90d9538924d7598ce6b485bba61d230e"]},"commit2Childs":{"1c27b8e55534153a7da0290343242bc42f147da0":["56c7ec1e90d9538924d7598ce6b485bba61d230e"],"56c7ec1e90d9538924d7598ce6b485bba61d230e":["407687e67faf6e1f02a211ca078d8e3eed631027","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb04ae9ea4b411d2adefa88bcd40141cfe9a711d"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"fb04ae9ea4b411d2adefa88bcd40141cfe9a711d":["1c27b8e55534153a7da0290343242bc42f147da0"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}