{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":null,"sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}