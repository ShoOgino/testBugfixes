{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // nocommit -- why does this trip?\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3);\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97","date":1280158618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // TODO: understand why this assert sometimes (rarely)\n      // trips!\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3);\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // nocommit -- why does this trip?\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3);\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23401c4e907767f2be5a67dba2b4e1238b2c8ab1","date":1280172694,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // TODO: understand why this assert sometimes (rarely)\n      // trips!\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3);\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term));\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, new Term(fieldInfo.name, term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != internedFieldName) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, new Term(fieldInfo.name, term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != internedFieldName) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, new Term(fieldInfo.name, term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != internedFieldName) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, protoTerm.createTerm(term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != fieldInfo.name) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/Lucene3xFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#seekToNonBMP(SegmentTermEnum,BytesRef,int).mjava","sourceNew":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, new Term(fieldInfo.name, term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != internedFieldName) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","sourceOld":"    // Swap in S, in place of E:\n    private boolean seekToNonBMP(SegmentTermEnum te, BytesRef term, int pos) throws IOException {\n      final int savLength = term.length;\n\n      assert term.offset == 0;\n\n      // The 3 bytes starting at downTo make up 1\n      // unicode character:\n      assert isHighBMPChar(term.bytes, pos);\n\n      // NOTE: we cannot make this assert, because\n      // AutomatonQuery legitimately sends us malformed UTF8\n      // (eg the UTF8 bytes with just 0xee)\n      // assert term.length >= pos + 3: \"term.length=\" + term.length + \" pos+3=\" + (pos+3) + \" byte=\" + Integer.toHexString(term.bytes[pos]) + \" term=\" + term.toString();\n\n      // Save the bytes && length, since we need to\n      // restore this if seek \"back\" finds no matching\n      // terms\n      if (term.bytes.length < 4+pos) {\n        term.grow(4+pos);\n      }\n\n      scratch[0] = term.bytes[pos];\n      scratch[1] = term.bytes[pos+1];\n      scratch[2] = term.bytes[pos+2];\n\n      term.bytes[pos] = (byte) 0xf0;\n      term.bytes[pos+1] = (byte) 0x90;\n      term.bytes[pos+2] = (byte) 0x80;\n      term.bytes[pos+3] = (byte) 0x80;\n      term.length = 4+pos;\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      try seek term=\" + UnicodeUtil.toHexString(term.utf8ToString()));\n      }\n\n      // Seek \"back\":\n      getTermsDict().seekEnum(te, new Term(fieldInfo.name, term), true);\n\n      // Test if the term we seek'd to in fact found a\n      // surrogate pair at the same position as the E:\n      Term t2 = te.term();\n\n      // Cannot be null (or move to next field) because at\n      // \"worst\" it'd seek to the same term we are on now,\n      // unless we are being called from seek\n      if (t2 == null || t2.field() != internedFieldName) {\n        return false;\n      }\n\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"      got term=\" + UnicodeUtil.toHexString(t2.text()));\n      }\n\n      // Now test if prefix is identical and we found\n      // a non-BMP char at the same position:\n      BytesRef b2 = t2.bytes();\n      assert b2.offset == 0;\n\n      boolean matches;\n      if (b2.length >= term.length && isNonBMPChar(b2.bytes, pos)) {\n        matches = true;\n        for(int i=0;i<pos;i++) {\n          if (term.bytes[i] != b2.bytes[i]) {\n            matches = false;\n            break;\n          }\n        }              \n      } else {\n        matches = false;\n      }\n\n      // Restore term:\n      term.length = savLength;\n      term.bytes[pos] = scratch[0];\n      term.bytes[pos+1] = scratch[1];\n      term.bytes[pos+2] = scratch[2];\n\n      return matches;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23401c4e907767f2be5a67dba2b4e1238b2c8ab1"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"2553b00f699380c64959ccb27991289aae87be2e":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["163fe85a71d778fd2b7747f65ca27b54829e2e57"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"23401c4e907767f2be5a67dba2b4e1238b2c8ab1":["c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"7b91922b55d15444d554721b352861d028eb8278":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","7b91922b55d15444d554721b352861d028eb8278"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["23401c4e907767f2be5a67dba2b4e1238b2c8ab1"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"23401c4e907767f2be5a67dba2b4e1238b2c8ab1":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}