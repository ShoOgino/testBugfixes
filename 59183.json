{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","commits":[{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float functionValue = functionValues.floatVal(contextDoc);\n      int currentVal = Float.floatToRawIntBits(functionValue);\n\n      if(collapseKey != nullValue) {\n        if(cmap.containsKey(collapseKey)) {\n          long pointerValue = cmap.lget();\n          int testValue = (int)pointerValue;\n          if(comp.test(currentVal, testValue)) {\n            pointerValue = (pointerValue-testValue)+currentVal;\n            cmap.lset(pointerValue);\n            int pointer = (int)(pointerValue>>32);\n            if(needsScores){\n              //Combine the doc and score into a long\n              long docScore = (((long)globalDoc)<<32)+Float.floatToIntBits(score);\n              docScores.set(pointer, docScore);\n            } else {\n              docs.set(pointer, globalDoc);\n            }\n          }\n        } else {\n          ++index;\n          //Use the index as a pointer into the docScore and docs list.\n          long pointerValue = (((long)index)<<32)+currentVal;\n          cmap.put(collapseKey, pointerValue);\n          if(needsScores) {\n            //Combine the doc and score into a long\n            long docScore = (((long)globalDoc)<<32)+Float.floatToIntBits(score);\n            docScores.add(docScore);\n          } else {\n            docs.add(globalDoc);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b42ae09e9ac11a8b035eb691b3aa7ede98551622"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a9c4a5022409b649909f75244642a57739b3598","date":1422812185,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        if(cmap.containsKey(collapseKey)) {\n          int pointer = cmap.lget();\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float functionValue = functionValues.floatVal(contextDoc);\n      int currentVal = Float.floatToRawIntBits(functionValue);\n\n      if(collapseKey != nullValue) {\n        if(cmap.containsKey(collapseKey)) {\n          long pointerValue = cmap.lget();\n          int testValue = (int)pointerValue;\n          if(comp.test(currentVal, testValue)) {\n            pointerValue = (pointerValue-testValue)+currentVal;\n            cmap.lset(pointerValue);\n            int pointer = (int)(pointerValue>>32);\n            if(needsScores){\n              //Combine the doc and score into a long\n              long docScore = (((long)globalDoc)<<32)+Float.floatToIntBits(score);\n              docScores.set(pointer, docScore);\n            } else {\n              docs.set(pointer, globalDoc);\n            }\n          }\n        } else {\n          ++index;\n          //Use the index as a pointer into the docScore and docs list.\n          long pointerValue = (((long)index)<<32)+currentVal;\n          cmap.put(collapseKey, pointerValue);\n          if(needsScores) {\n            //Combine the doc and score into a long\n            long docScore = (((long)globalDoc)<<32)+Float.floatToIntBits(score);\n            docScores.add(docScore);\n          } else {\n            docs.add(globalDoc);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","date":1440409984,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        if(cmap.containsKey(collapseKey)) {\n          int pointer = cmap.lget();\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b42ae09e9ac11a8b035eb691b3aa7ede98551622","date":1473618566,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3","date":1556831715,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3575e61fd7df2bbcce8b977a23d3d67aa423ce62","date":1586507050,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores){\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          testValues.put(index, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores){\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          testValues[index] = currentVal;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a813b523bf76aa0a68013d636b6eb53cedb142a4","date":1601387389,"type":3,"author":"Guna Sekhar Dora Kovvuru","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.IntValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores){\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          testValues.put(index, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      // Check to see if we have documents boosted by the QueryElevationComponent\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores){\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          testValues.put(index, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a813b523bf76aa0a68013d636b6eb53cedb142a4":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","89424def13674ea17829b41c5883c54ecc31a132"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0a9c4a5022409b649909f75244642a57739b3598":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"b42ae09e9ac11a8b035eb691b3aa7ede98551622":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["0a9c4a5022409b649909f75244642a57739b3598"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a813b523bf76aa0a68013d636b6eb53cedb142a4"],"89424def13674ea17829b41c5883c54ecc31a132":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","b42ae09e9ac11a8b035eb691b3aa7ede98551622"]},"commit2Childs":{"a813b523bf76aa0a68013d636b6eb53cedb142a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["0a9c4a5022409b649909f75244642a57739b3598"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["a813b523bf76aa0a68013d636b6eb53cedb142a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"0a9c4a5022409b649909f75244642a57739b3598":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"b42ae09e9ac11a8b035eb691b3aa7ede98551622":["89424def13674ea17829b41c5883c54ecc31a132"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b42ae09e9ac11a8b035eb691b3aa7ede98551622","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}