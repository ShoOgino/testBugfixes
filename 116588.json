{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2601f536ce2e53d3af7f1ce7cc0c12454ae756","date":1335352949,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderdEntries = new int[size()];\n    for (int i = 0; i < orderdEntries.length; i++) {\n      orderdEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderdEntries[i];\n        orderdEntries[i] = orderdEntries[j];\n        orderdEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderdEntries[i], ord2 = orderdEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderdEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderdEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderdEntries;\n  }\n\n","bugFix":null,"bugIntro":["a4e3a7c47e11ff0c156c646c37d20af7249370d2","a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#sort(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#sort(Comparator[BytesRef]).mjava","sourceNew":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","sourceOld":"  private int[] sort(final Comparator<BytesRef> comp) {\n    final int[] orderedEntries = new int[size()];\n    for (int i = 0; i < orderedEntries.length; i++) {\n      orderedEntries[i] = i;\n    }\n    new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        final int o = orderedEntries[i];\n        orderedEntries[i] = orderedEntries[j];\n        orderedEntries[j] = o;\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        final int ord1 = orderedEntries[i], ord2 = orderedEntries[j];\n        return comp.compare(get(scratch1, ord1), get(scratch2, ord2));\n      }\n      \n      @Override\n      protected void setPivot(int i) {\n        final int ord = orderedEntries[i];\n        get(pivot, ord);\n      }\n      \n      @Override\n      protected int comparePivot(int j) {\n        final int ord = orderedEntries[j];\n        return comp.compare(pivot, get(scratch2, ord));\n      }\n      \n      private final BytesRef pivot = new BytesRef(), scratch1 = new BytesRef(),\n          scratch2 = new BytesRef();\n    }.quickSort(0, size() - 1);\n    return orderedEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["0a2601f536ce2e53d3af7f1ce7cc0c12454ae756"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0a2601f536ce2e53d3af7f1ce7cc0c12454ae756","ce73f585d17f53055185a19beb46db23d76e0ad9"],"0a2601f536ce2e53d3af7f1ce7cc0c12454ae756":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0a2601f536ce2e53d3af7f1ce7cc0c12454ae756"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a2601f536ce2e53d3af7f1ce7cc0c12454ae756":["ce73f585d17f53055185a19beb46db23d76e0ad9","d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}