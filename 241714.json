{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","sourceNew":"  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","sourceNew":"  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","sourceNew":"  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetExtrasTest#offsetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#offsetTest().mjava","sourceNew":"  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","sourceOld":"  @Test\n  public void offsetTest() throws Exception { \n\n    Collection<Double> lon;\n   \n    List<Double> all = new ArrayList<>();\n    lon = getDoubleList(\"off0\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 1.5,  2.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off1\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),2);\n    assertArrayEquals(new Double[]{ 3.0,  4.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"off2\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),3);\n    assertArrayEquals(new Double[]{ 5.0,  5.75, 6.0 }, lon.toArray(new Double[0]));\n    all.addAll(lon);\n    \n    lon = getDoubleList(\"offAll\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),7);\n    assertArrayEquals(all.toArray(new Double[0]), lon.toArray(new Double[0]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}