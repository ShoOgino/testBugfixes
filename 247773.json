{"path":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,List[AtomicReaderContext]).mjava","commits":[{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,List[AtomicReaderContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,AtomicReaderContext[]).mjava","sourceNew":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, List<AtomicReaderContext> leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.size();\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves.get(mid).docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves.get(mid + 1).docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, AtomicReaderContext[] leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.length;\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves[mid].docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves[mid + 1].docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcce0e518c0546269a896ca6124ba4313059185f","date":1340381078,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderUtil#subIndex(int,List[AtomicReaderContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,List[AtomicReaderContext]).mjava","sourceNew":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, List<AtomicReaderContext> leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.size();\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves.get(mid).docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves.get(mid + 1).docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, List<AtomicReaderContext> leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.size();\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves.get(mid).docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves.get(mid + 1).docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReaderUtil#subIndex(int,List[AtomicReaderContext]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ReaderUtil#subIndex(int,List[AtomicReaderContext]).mjava","sourceNew":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, List<AtomicReaderContext> leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.size();\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves.get(mid).docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves.get(mid + 1).docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","sourceOld":"  /**\n   * Returns index of the searcher/reader for document <code>n</code> in the\n   * array used to construct this searcher/reader.\n   */\n  public static int subIndex(int n, List<AtomicReaderContext> leaves) { // find\n    // searcher/reader for doc n:\n    int size = leaves.size();\n    int lo = 0; // search starts array\n    int hi = size - 1; // for first element less than n, return its index\n    while (hi >= lo) {\n      int mid = (lo + hi) >>> 1;\n      int midValue = leaves.get(mid).docBase;\n      if (n < midValue)\n        hi = mid - 1;\n      else if (n > midValue)\n        lo = mid + 1;\n      else { // found a match\n        while (mid + 1 < size && leaves.get(mid + 1).docBase == midValue) {\n          mid++; // scan to last match\n        }\n        return mid;\n      }\n    }\n    return hi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcce0e518c0546269a896ca6124ba4313059185f":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","bcce0e518c0546269a896ca6124ba4313059185f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcce0e518c0546269a896ca6124ba4313059185f"]},"commit2Childs":{"bcce0e518c0546269a896ca6124ba4313059185f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["bcce0e518c0546269a896ca6124ba4313059185f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}