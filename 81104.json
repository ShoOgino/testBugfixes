{"path":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aefe1d4a97c503490a5dc4d769c4f8663ecdfc08","date":1362179857,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSort(\"score aSc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight dEsC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday ASC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         DESC,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSort(\"score aSc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight dEsC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday ASC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         DESC,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSort(\"score aSc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight dEsC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday ASC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         DESC,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02453e8d9fe1bde22dc7676145ad809cb1dbfcad","date":1386084179,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = QueryParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSort(\"score aSc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = QueryParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = QueryParsing.parseSort(\"weight dEsC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = QueryParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = QueryParsing.parseSort(\"weight desc,bday ASC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         DESC,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = QueryParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    spec = QueryParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSort(\"score aSc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight dEsC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday ASC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         DESC,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = QueryParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSort(\"score aSc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = QueryParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = QueryParsing.parseSort(\"weight dEsC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = QueryParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = QueryParsing.parseSort(\"weight desc,bday ASC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         DESC,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = QueryParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    spec = QueryParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSort(\"score aSc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight dEsC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday ASC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         DESC,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSortSpec(\"score desc\", req).getSort();\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = QueryParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSortSpec(\"score aSc\", req).getSort();\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = QueryParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = QueryParsing.parseSortSpec(\"weight dEsC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = QueryParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = QueryParsing.parseSortSpec(\"weight desc,bday ASC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSortSpec(\"weight top,bday asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSortSpec(\"weight top,bday bottom\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSortSpec(\"weight         DESC,            bday         asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSortSpec(\"pow(weight, 2) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSortSpec(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSortSpec(\"pow(weight,                 2.0)         desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = QueryParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSortSpec(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSortSpec(\"\", req).getSort();\n    assertNull(sort);\n\n    spec = QueryParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSort(\"score desc\", req);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = QueryParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSort(\"score aSc\", req);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = QueryParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = QueryParsing.parseSort(\"weight dEsC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = QueryParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = QueryParsing.parseSort(\"weight desc,bday ASC\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         DESC,            bday         asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2.0)         desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = QueryParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", req);\n    assertNull(sort);\n\n    spec = QueryParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SortSpecParsingTest#testSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = SortSpecParsing.parseSortSpec(\"score desc\", req).getSort();\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = SortSpecParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = SortSpecParsing.parseSortSpec(\"score aSc\", req).getSort();\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = SortSpecParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = SortSpecParsing.parseSortSpec(\"weight dEsC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = SortSpecParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,bday ASC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = SortSpecParsing.parseSortSpec(\"weight top,bday asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = SortSpecParsing.parseSortSpec(\"weight top,bday bottom\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = SortSpecParsing.parseSortSpec(\"weight         DESC,            bday         asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = SortSpecParsing.parseSortSpec(\"pow(weight, 2) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = SortSpecParsing.parseSortSpec(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = SortSpecParsing.parseSortSpec(\"pow(weight,                 2.0)         desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = SortSpecParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = SortSpecParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = SortSpecParsing.parseSortSpec(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = SortSpecParsing.parseSortSpec(\"\", req).getSort();\n    assertNull(sort);\n\n    spec = SortSpecParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSort() throws Exception {\n    Sort sort;\n    SortSpec spec;\n    SolrQueryRequest req = req();\n\n    sort = QueryParsing.parseSortSpec(\"score desc\", req).getSort();\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    spec = QueryParsing.parseSortSpec(\"score desc\", req);\n    assertNotNull(\"spec\", spec);\n    assertNull(spec.getSort());\n    assertNotNull(spec.getSchemaFields());\n    assertEquals(0, spec.getSchemaFields().size());\n\n    // SOLR-4458 - using different case variations of asc and desc\n    sort = QueryParsing.parseSortSpec(\"score aSc\", req).getSort();\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    spec = QueryParsing.parseSortSpec(\"score aSc\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.SCORE);\n    assertTrue(flds[0].getReverse());\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNull(spec.getSchemaFields().get(0));\n\n    sort = QueryParsing.parseSortSpec(\"weight dEsC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n\n    spec = QueryParsing.parseSortSpec(\"weight dEsC\", req);\n    flds = spec.getSort().getSort();\n    assertEquals(1, flds.length);\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(1, spec.getSchemaFields().size());\n    assertNotNull(spec.getSchemaFields().get(0));\n    assertEquals(\"weight\", spec.getSchemaFields().get(0).getName());\n\n    sort = QueryParsing.parseSortSpec(\"weight desc,bday ASC\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSortSpec(\"weight top,bday asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSortSpec(\"weight top,bday bottom\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSortSpec(\"weight         DESC,            bday         asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.Type.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSortSpec(\"pow(weight, 2) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSortSpec(\"sum(product(r_f1,sum(d_f1,t_f1,1.0)),a_f1) asc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f1),sum(float(d_f1),float(t_f1),const(1.0))),float(a_f1))\");\n\n    sort = QueryParsing.parseSortSpec(\"pow(weight,                 2.0)         desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n                 \n\n    spec = QueryParsing.parseSortSpec(\"pow(weight, 2.0) desc, weight    desc,   bday    asc\", req);\n    flds = spec.getSort().getSort();\n    List<SchemaField> schemaFlds = spec.getSchemaFields();\n    assertEquals(3, flds.length);\n    assertEquals(3, schemaFlds.size());\n\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    assertNull(schemaFlds.get(0));\n\n    assertEquals(flds[1].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertNotNull(schemaFlds.get(1));\n    assertEquals(\"weight\", schemaFlds.get(1).getName());\n\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.Type.LONG);\n    assertNotNull(schemaFlds.get(2));\n    assertEquals(\"bday\", schemaFlds.get(2).getName());\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSortSpec(\"weight desc,\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //Test literals in functions\n    sort = QueryParsing.parseSortSpec(\"strdist(foo_s1, \\\"junk\\\", jw) desc\", req).getSort();\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.Type.REWRITEABLE);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s1),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSortSpec(\"\", req).getSort();\n    assertNull(sort);\n\n    spec = QueryParsing.parseSortSpec(\"\", req);\n    assertNotNull(spec);\n    assertNull(spec.getSort());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8dc56dbae186505066de8a78986cba31525ef0":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["08970e5b8411182a29412c177eff67ec1110095b"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["08970e5b8411182a29412c177eff67ec1110095b","02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aefe1d4a97c503490a5dc4d769c4f8663ecdfc08":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c8dc56dbae186505066de8a78986cba31525ef0"],"08970e5b8411182a29412c177eff67ec1110095b":["aefe1d4a97c503490a5dc4d769c4f8663ecdfc08"]},"commit2Childs":{"6c8dc56dbae186505066de8a78986cba31525ef0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["6c8dc56dbae186505066de8a78986cba31525ef0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c26f00b574427b55127e869b935845554afde1fa":["aefe1d4a97c503490a5dc4d769c4f8663ecdfc08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"aefe1d4a97c503490a5dc4d769c4f8663ecdfc08":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}