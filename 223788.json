{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","commits":[{"id":"21ced6876daf4979ade698bfe6a584d003ef67e9","date":1336223359,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testQuery() {\n    String startPoint = _TestUtil.randomUnicodeString(random());\n    String endPoint = _TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"478fa93e00d59b369cf1538f202ebf002bf805ea","date":1352137051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    // Copied from beforeClass, but scaled down to few docs:\n    // since otherwise this test can run for a very long\n    // time (1-2 hours or more; see Lucene-Solr-4.x-Linux Build #2204):\n    final Locale locale = LuceneTestCase.randomLocale(random());\n    Collator collator = Collator.getInstance(locale);\n    collator.setStrength(Collator.IDENTICAL);\n    collator.setDecomposition(Collator.NO_DECOMPOSITION);\n\n    int numDocs = 20 * RANDOM_MULTIPLIER;\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String value = _TestUtil.randomUnicodeString(random());\n      Field field = newStringField(\"field\", value, Field.Store.YES);\n      doc.add(field);\n      iw.addDocument(doc);\n    }\n    IndexReader reader = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    String startPoint = _TestUtil.randomUnicodeString(random());\n    String endPoint = _TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n    reader.close();\n    dir.close();\n    collator = null;\n    searcher = null;\n    reader = null;\n    dir = null;\n  }\n\n","sourceOld":"  public void testQuery() {\n    String startPoint = _TestUtil.randomUnicodeString(random());\n    String endPoint = _TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    // Copied from beforeClass, but scaled down to few docs:\n    // since otherwise this test can run for a very long\n    // time (1-2 hours or more; see Lucene-Solr-4.x-Linux Build #2204):\n    final Locale locale = LuceneTestCase.randomLocale(random());\n    Collator collator = Collator.getInstance(locale);\n    collator.setStrength(Collator.IDENTICAL);\n    collator.setDecomposition(Collator.NO_DECOMPOSITION);\n\n    int numDocs = 20 * RANDOM_MULTIPLIER;\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String value = TestUtil.randomUnicodeString(random());\n      Field field = newStringField(\"field\", value, Field.Store.YES);\n      doc.add(field);\n      iw.addDocument(doc);\n    }\n    IndexReader reader = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    String startPoint = TestUtil.randomUnicodeString(random());\n    String endPoint = TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n    reader.close();\n    dir.close();\n    collator = null;\n    searcher = null;\n    reader = null;\n    dir = null;\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    // Copied from beforeClass, but scaled down to few docs:\n    // since otherwise this test can run for a very long\n    // time (1-2 hours or more; see Lucene-Solr-4.x-Linux Build #2204):\n    final Locale locale = LuceneTestCase.randomLocale(random());\n    Collator collator = Collator.getInstance(locale);\n    collator.setStrength(Collator.IDENTICAL);\n    collator.setDecomposition(Collator.NO_DECOMPOSITION);\n\n    int numDocs = 20 * RANDOM_MULTIPLIER;\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String value = _TestUtil.randomUnicodeString(random());\n      Field field = newStringField(\"field\", value, Field.Store.YES);\n      doc.add(field);\n      iw.addDocument(doc);\n    }\n    IndexReader reader = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    String startPoint = _TestUtil.randomUnicodeString(random());\n    String endPoint = _TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n    reader.close();\n    dir.close();\n    collator = null;\n    searcher = null;\n    reader = null;\n    dir = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    // Copied from beforeClass, but scaled down to few docs:\n    // since otherwise this test can run for a very long\n    // time (1-2 hours or more; see Lucene-Solr-4.x-Linux Build #2204):\n    final Locale locale = LuceneTestCase.randomLocale(random());\n    Collator collator = Collator.getInstance(locale);\n    collator.setStrength(Collator.IDENTICAL);\n    collator.setDecomposition(Collator.NO_DECOMPOSITION);\n\n    int numDocs = 20 * RANDOM_MULTIPLIER;\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String value = TestUtil.randomUnicodeString(random());\n      Field field = newStringField(\"field\", value, Field.Store.YES);\n      doc.add(field);\n      iw.addDocument(doc);\n    }\n    IndexReader reader = iw.getReader();\n    iw.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    String startPoint = TestUtil.randomUnicodeString(random());\n    String endPoint = TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n    reader.close();\n    dir.close();\n    collator = null;\n    searcher = null;\n    reader = null;\n    dir = null;\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    // Copied from beforeClass, but scaled down to few docs:\n    // since otherwise this test can run for a very long\n    // time (1-2 hours or more; see Lucene-Solr-4.x-Linux Build #2204):\n    final Locale locale = LuceneTestCase.randomLocale(random());\n    Collator collator = Collator.getInstance(locale);\n    collator.setStrength(Collator.IDENTICAL);\n    collator.setDecomposition(Collator.NO_DECOMPOSITION);\n\n    int numDocs = 20 * RANDOM_MULTIPLIER;\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String value = TestUtil.randomUnicodeString(random());\n      Field field = newStringField(\"field\", value, Field.Store.YES);\n      doc.add(field);\n      iw.addDocument(doc);\n    }\n    IndexReader reader = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    String startPoint = TestUtil.randomUnicodeString(random());\n    String endPoint = TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n    reader.close();\n    dir.close();\n    collator = null;\n    searcher = null;\n    reader = null;\n    dir = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","sourceNew":"  public void testQuery() throws Exception {\n\n    // Copied from beforeClass, but scaled down to few docs:\n    // since otherwise this test can run for a very long\n    // time (1-2 hours or more; see Lucene-Solr-4.x-Linux Build #2204):\n    final Locale locale = LuceneTestCase.randomLocale(random());\n    Collator collator = Collator.getInstance(locale);\n    collator.setStrength(Collator.IDENTICAL);\n    collator.setDecomposition(Collator.NO_DECOMPOSITION);\n\n    int numDocs = 20 * RANDOM_MULTIPLIER;\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String value = TestUtil.randomUnicodeString(random());\n      Field field = newStringField(\"field\", value, Field.Store.YES);\n      doc.add(field);\n      iw.addDocument(doc);\n    }\n    IndexReader reader = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    String startPoint = TestUtil.randomUnicodeString(random());\n    String endPoint = TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n    reader.close();\n    dir.close();\n    collator = null;\n    searcher = null;\n    reader = null;\n    dir = null;\n  }\n\n","sourceOld":"  public void testQuery() throws Exception {\n\n    // Copied from beforeClass, but scaled down to few docs:\n    // since otherwise this test can run for a very long\n    // time (1-2 hours or more; see Lucene-Solr-4.x-Linux Build #2204):\n    final Locale locale = LuceneTestCase.randomLocale(random());\n    Collator collator = Collator.getInstance(locale);\n    collator.setStrength(Collator.IDENTICAL);\n    collator.setDecomposition(Collator.NO_DECOMPOSITION);\n\n    int numDocs = 20 * RANDOM_MULTIPLIER;\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String value = TestUtil.randomUnicodeString(random());\n      Field field = newStringField(\"field\", value, Field.Store.YES);\n      doc.add(field);\n      iw.addDocument(doc);\n    }\n    IndexReader reader = iw.getReader();\n    iw.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    String startPoint = TestUtil.randomUnicodeString(random());\n    String endPoint = TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n    reader.close();\n    dir.close();\n    collator = null;\n    searcher = null;\n    reader = null;\n    dir = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59cae262d4251e10e2a034b17c45776f6b4c7e68","date":1424712773,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#testQuery().mjava","sourceNew":null,"sourceOld":"  public void testQuery() throws Exception {\n\n    // Copied from beforeClass, but scaled down to few docs:\n    // since otherwise this test can run for a very long\n    // time (1-2 hours or more; see Lucene-Solr-4.x-Linux Build #2204):\n    final Locale locale = LuceneTestCase.randomLocale(random());\n    Collator collator = Collator.getInstance(locale);\n    collator.setStrength(Collator.IDENTICAL);\n    collator.setDecomposition(Collator.NO_DECOMPOSITION);\n\n    int numDocs = 20 * RANDOM_MULTIPLIER;\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String value = TestUtil.randomUnicodeString(random());\n      Field field = newStringField(\"field\", value, Field.Store.YES);\n      doc.add(field);\n      iw.addDocument(doc);\n    }\n    IndexReader reader = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n\n    String startPoint = TestUtil.randomUnicodeString(random());\n    String endPoint = TestUtil.randomUnicodeString(random());\n    Query query = new SlowCollatedTermRangeQuery(\"field\", startPoint, endPoint, true, true, collator);\n    QueryUtils.check(random(), query, searcher);\n    reader.close();\n    dir.close();\n    collator = null;\n    searcher = null;\n    reader = null;\n    dir = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59cae262d4251e10e2a034b17c45776f6b4c7e68":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["478fa93e00d59b369cf1538f202ebf002bf805ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"478fa93e00d59b369cf1538f202ebf002bf805ea":["21ced6876daf4979ade698bfe6a584d003ef67e9"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"21ced6876daf4979ade698bfe6a584d003ef67e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59cae262d4251e10e2a034b17c45776f6b4c7e68"]},"commit2Childs":{"59cae262d4251e10e2a034b17c45776f6b4c7e68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21ced6876daf4979ade698bfe6a584d003ef67e9"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["59cae262d4251e10e2a034b17c45776f6b4c7e68"],"478fa93e00d59b369cf1538f202ebf002bf805ea":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"21ced6876daf4979ade698bfe6a584d003ef67e9":["478fa93e00d59b369cf1538f202ebf002bf805ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}