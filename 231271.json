{"path":"src/java/org/apache/solr/search/SortedIntDocSet#intersectionSize(DocSet).mjava","commits":[{"id":"30391436869a41b74d4ba7098c40d955b686a10c","date":1242835871,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SortedIntDocSet#intersectionSize(DocSet).mjava","pathOld":"/dev/null","sourceNew":"  public int intersectionSize(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      int icount = 0;\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) icount++;\n      }\n      return icount;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return 0;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersectionSize(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int icount=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        icount++;\n        if (++i >= a.length) break;\n        doca=a[i];\n        if (++j >= b.length) break;\n        docb=b[j];\n      }\n    }\n    return icount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SortedIntDocSet#intersectionSize(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/SortedIntDocSet#intersectionSize(DocSet).mjava","sourceNew":"  public int intersectionSize(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      int icount = 0;\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) icount++;\n      }\n      return icount;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return 0;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersectionSize(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int icount=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        icount++;\n        if (++i >= a.length) break;\n        doca=a[i];\n        if (++j >= b.length) break;\n        docb=b[j];\n      }\n    }\n    return icount;\n  }\n\n","sourceOld":"  public int intersectionSize(DocSet other) {\n    if (!(other instanceof SortedIntDocSet)) {\n      // assume other implementations are better at random access than we are,\n      // true of BitDocSet and HashDocSet.\n      int icount = 0;\n      for (int i=0; i<docs.length; i++) {\n        if (other.exists(docs[i])) icount++;\n      }\n      return icount;\n    }\n\n    // make \"a\" the smaller set.\n    int[] otherDocs = ((SortedIntDocSet)other).docs;\n    final int[] a = docs.length < otherDocs.length ? docs : otherDocs;\n    final int[] b = docs.length < otherDocs.length ? otherDocs : docs;\n\n    if (a.length==0) return 0;\n\n    // if b is 8 times bigger than a, use the modified binary search.\n    if ((b.length>>3) >= a.length) {\n      return intersectionSize(a,b);\n    }\n\n    // if they are close in size, just do a linear walk of both.\n    int icount=0;\n    int i=0,j=0;\n    int doca=a[i],docb=b[j];\n    for(;;) {\n      // switch on the sign bit somehow?  Hopefull JVM is smart enough to just test once.\n\n      // Since set a is less dense then set b, doca is likely to be greater than docb so\n      // check that case first.  This resulted in a 13% speedup.\n      if (doca > docb) {\n        if (++j >= b.length) break;\n        docb=b[j];\n      } else if (doca < docb) {\n        if (++i >= a.length) break;\n        doca=a[i];\n      } else {\n        icount++;\n        if (++i >= a.length) break;\n        doca=a[i];\n        if (++j >= b.length) break;\n        docb=b[j];\n      }\n    }\n    return icount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"30391436869a41b74d4ba7098c40d955b686a10c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["30391436869a41b74d4ba7098c40d955b686a10c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["30391436869a41b74d4ba7098c40d955b686a10c"],"30391436869a41b74d4ba7098c40d955b686a10c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}