{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute(String).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute(String docName) {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().getDocumentByName(docName);\n    if (document == null)\n      return;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT\n                .format(new Date()));\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["00e13feee5c0e49640da959c282367763b8bdbde"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ae0b84776ced5de47caece796c75a4ec5185288","date":1228983938,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute(String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute(String docName) {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().getDocumentByName(docName);\n    if (document == null)\n      return;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute(String docName) {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().getDocumentByName(docName);\n    if (document == null)\n      return;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT\n                .format(new Date()));\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":["00e13feee5c0e49640da959c282367763b8bdbde","3f89819f2d2ba23f608c6d0ea155524f95a29aa4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db6dfac30d1553e9356900c2b76b768139483a62","date":1230619368,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute(String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute(String docName) {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().getDocumentByName(docName);\n    if (document == null)\n      return;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5ae0b84776ced5de47caece796c75a4ec5185288":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"db6dfac30d1553e9356900c2b76b768139483a62":["5ae0b84776ced5de47caece796c75a4ec5185288"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["5ae0b84776ced5de47caece796c75a4ec5185288"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ae0b84776ced5de47caece796c75a4ec5185288":["db6dfac30d1553e9356900c2b76b768139483a62"],"db6dfac30d1553e9356900c2b76b768139483a62":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db6dfac30d1553e9356900c2b76b768139483a62","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}