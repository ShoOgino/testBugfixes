{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","commits":[{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testAllLonEqual().mjava","sourceNew":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    boolean small = random().nextBoolean();\n    double theLon = randomLon(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = randomLat(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    boolean small = random().nextBoolean();\n    double theLon = randomLon(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = randomLat(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testAllLonEqual().mjava","sourceNew":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    boolean small = random().nextBoolean();\n    double theLon = randomLon(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = randomLat(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    boolean small = random().nextBoolean();\n    double theLon = randomLon(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = randomLat(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","sourceNew":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    double theLon = nextLongitude();\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = nextLatitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    boolean small = random().nextBoolean();\n    double theLon = randomLon(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = randomLat(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","sourceNew":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    double theLon = nextLongitude();\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = nextLatitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    boolean small = random().nextBoolean();\n    double theLon = randomLon(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = randomLat(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#testAllLonEqual().mjava","sourceNew":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(1000);\n    double theLon = nextLongitude();\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = nextLatitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":"  public void testAllLonEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    double theLon = nextLongitude();\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    //System.out.println(\"theLon=\" + theLon);\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lats[docID] = lats[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lats[docID] = nextLatitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + theLon);\n        }\n      }\n      lons[docID] = theLon;\n    }\n\n    verify(lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["f8cb57c50beb99a1245256e866350af8e5ea1f36","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}