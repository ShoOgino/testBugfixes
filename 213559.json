{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#ForUtil(DataInput).mjava","sourceNew":null,"sourceOld":"  /**\n   * Restore a {@link ForUtil} from a {@link DataInput}.\n   */\n  ForUtil(DataInput in) throws IOException {\n    int packedIntsVersion = in.readVInt();\n    PackedInts.checkVersion(packedIntsVersion);\n    encodedSizes = new int[33];\n    encoders = new PackedInts.Encoder[33];\n    decoders = new PackedInts.Decoder[33];\n    iterations = new int[33];\n\n    for (int bpv = 1; bpv <= 32; ++bpv) {\n      final int code = in.readVInt();\n      final int formatId = code >>> 5;\n      final int bitsPerValue = (code & 31) + 1;\n\n      final PackedInts.Format format = PackedInts.Format.byId(formatId);\n      assert format.isSupported(bitsPerValue);\n      encodedSizes[bpv] = encodedSize(format, packedIntsVersion, bitsPerValue);\n      encoders[bpv] = PackedInts.getEncoder(\n          format, packedIntsVersion, bitsPerValue);\n      decoders[bpv] = PackedInts.getDecoder(\n          format, packedIntsVersion, bitsPerValue);\n      iterations[bpv] = computeIterations(decoders[bpv]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}