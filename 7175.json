{"path":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","commits":[{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["77993852b2d2185c378b115f8842c0adaeb8f709"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77993852b2d2185c378b115f8842c0adaeb8f709","date":1392036304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","bugFix":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    System.out.println(\"CORE DESCRIPTOR: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3895dd0e6b6da5861b3d89ec45b3886c628b976b","date":1426878530,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"CORE DESCRIPTOR: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    System.out.println(\"CORE DESCRIPTOR: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"CORE DESCRIPTOR: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"CORE DESCRIPTOR: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3895dd0e6b6da5861b3d89ec45b3886c628b976b":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["77993852b2d2185c378b115f8842c0adaeb8f709","3895dd0e6b6da5861b3d89ec45b3886c628b976b"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bc766d645fa848f86c381c7f6acf2c881c99399":["77993852b2d2185c378b115f8842c0adaeb8f709"],"77993852b2d2185c378b115f8842c0adaeb8f709":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["3895dd0e6b6da5861b3d89ec45b3886c628b976b"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3895dd0e6b6da5861b3d89ec45b3886c628b976b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","439c63ae5d22132fca810a0029a854e97d2c1a3e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["3895dd0e6b6da5861b3d89ec45b3886c628b976b"],"77993852b2d2185c378b115f8842c0adaeb8f709":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bc766d645fa848f86c381c7f6acf2c881c99399"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["77993852b2d2185c378b115f8842c0adaeb8f709"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}