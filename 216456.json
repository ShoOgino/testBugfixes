{"path":"src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","commits":[{"id":"ad74a68eca82ce50fc02b618627a1d3cf9d74433","date":1227959428,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","pathOld":"/dev/null","sourceNew":"    public int binarySearchLookup(String key) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = lookup.length-1;\n\n      while (low <= high) {\n        int mid = (low + high) >> 1;\n        int cmp = lookup[mid].compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b194dd68c45dcab90573bcf23819361780012809"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b194dd68c45dcab90573bcf23819361780012809","date":1228347979,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","sourceNew":"    public int binarySearchLookup(String key) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = lookup.length-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup[mid].compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":"    public int binarySearchLookup(String key) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = lookup.length-1;\n\n      while (low <= high) {\n        int mid = (low + high) >> 1;\n        int cmp = lookup[mid].compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":["ad74a68eca82ce50fc02b618627a1d3cf9d74433"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache.StringIndex#binarySearchLookup(String).mjava","sourceNew":"    public int binarySearchLookup(String key) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = lookup.length-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup[mid].compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","sourceOld":"    public int binarySearchLookup(String key) {\n      // this special case is the reason that Arrays.binarySearch() isn't useful.\n      if (key == null)\n        return 0;\n\t  \n      int low = 1;\n      int high = lookup.length-1;\n\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        int cmp = lookup[mid].compareTo(key);\n\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else\n          return mid; // key found\n      }\n      return -(low + 1);  // key not found.\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b194dd68c45dcab90573bcf23819361780012809":["ad74a68eca82ce50fc02b618627a1d3cf9d74433"],"ad74a68eca82ce50fc02b618627a1d3cf9d74433":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b194dd68c45dcab90573bcf23819361780012809"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad74a68eca82ce50fc02b618627a1d3cf9d74433"],"b194dd68c45dcab90573bcf23819361780012809":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ad74a68eca82ce50fc02b618627a1d3cf9d74433":["b194dd68c45dcab90573bcf23819361780012809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}