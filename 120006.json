{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simQuery(QueryRequest).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simQuery(QueryRequest).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simQuery(QueryRequest).mjava","sourceNew":"  public QueryResponse simQuery(QueryRequest req) throws SolrException, InterruptedException, IOException {\n    ensureNotClosed();\n    String collection = req.getCollection();\n    if (collection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not set\");\n    }\n    ensureSystemCollection(collection);\n    if (!colShardReplicaMap.containsKey(collection)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection does not exist\");\n    }\n    String query = req.getParams().get(CommonParams.Q);\n    if (query == null || !query.equals(\"*:*\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only '*:*' query is supported\");\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    AtomicLong count = new AtomicLong();\n    for (Slice s : coll.getActiveSlicesArr()) {\n      Replica r = s.getLeader();\n      if (r == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, collection + \"/\" + s.getName() + \" has no leader\");\n      }\n      ReplicaInfo ri = getReplicaInfo(r);\n      Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\", 0L);\n      count.addAndGet(numDocs.longValue());\n      AtomicLong bufferedUpdates = (AtomicLong)sliceProperties.get(collection).get(s.getName()).get(BUFFERED_UPDATES);\n      if (bufferedUpdates != null) {\n        count.addAndGet(bufferedUpdates.get());\n      }\n    }\n    QueryResponse rsp = new QueryResponse();\n    NamedList<Object> values = new NamedList<>();\n    values.add(\"responseHeader\", new NamedList<>());\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.setNumFound(count.get());\n    values.add(\"response\", docs);\n    rsp.setResponse(values);\n    return rsp;\n  }\n\n","sourceOld":"  public QueryResponse simQuery(QueryRequest req) throws SolrException, InterruptedException, IOException {\n    ensureNotClosed();\n    String collection = req.getCollection();\n    if (collection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not set\");\n    }\n    ensureSystemCollection(collection);\n    if (!colShardReplicaMap.containsKey(collection)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection does not exist\");\n    }\n    String query = req.getParams().get(CommonParams.Q);\n    if (query == null || !query.equals(\"*:*\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only '*:*' query is supported\");\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    AtomicLong count = new AtomicLong();\n    for (Slice s : coll.getActiveSlicesArr()) {\n      Replica r = s.getLeader();\n      if (r == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, collection + \"/\" + s.getName() + \" has no leader\");\n      }\n      ReplicaInfo ri = getReplicaInfo(r);\n      Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\", 0L);\n      count.addAndGet(numDocs.longValue());\n      AtomicLong bufferedUpdates = (AtomicLong)sliceProperties.get(collection).get(s.getName()).get(BUFFERED_UPDATES);\n      if (bufferedUpdates != null) {\n        count.addAndGet(bufferedUpdates.get());\n      }\n    }\n    QueryResponse rsp = new QueryResponse();\n    NamedList<Object> values = new NamedList<>();\n    values.add(\"responseHeader\", new NamedList<>());\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.setNumFound(count.get());\n    values.add(\"response\", docs);\n    rsp.setResponse(values);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simQuery(QueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simQuery(QueryRequest).mjava","sourceNew":"  public QueryResponse simQuery(QueryRequest req) throws SolrException, InterruptedException, IOException {\n    ensureNotClosed();\n    String collection = req.getCollection();\n    if (collection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not set\");\n    }\n    ensureSystemCollection(collection);\n    if (!colShardReplicaMap.containsKey(collection)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection does not exist\");\n    }\n    String query = req.getParams().get(CommonParams.Q);\n    if (query == null || !query.equals(\"*:*\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only '*:*' query is supported\");\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    AtomicLong count = new AtomicLong();\n    for (Slice s : coll.getActiveSlicesArr()) {\n      Replica r = s.getLeader();\n      if (r == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, collection + \"/\" + s.getName() + \" has no leader\");\n      }\n      Replica ri = getReplicaInfo(r);\n      Number numDocs = (Number)ri.get(\"SEARCHER.searcher.numDocs\", 0L);\n      count.addAndGet(numDocs.longValue());\n      AtomicLong bufferedUpdates = (AtomicLong)sliceProperties.get(collection).get(s.getName()).get(BUFFERED_UPDATES);\n      if (bufferedUpdates != null) {\n        count.addAndGet(bufferedUpdates.get());\n      }\n    }\n    QueryResponse rsp = new QueryResponse();\n    NamedList<Object> values = new NamedList<>();\n    values.add(\"responseHeader\", new NamedList<>());\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.setNumFound(count.get());\n    values.add(\"response\", docs);\n    rsp.setResponse(values);\n    return rsp;\n  }\n\n","sourceOld":"  public QueryResponse simQuery(QueryRequest req) throws SolrException, InterruptedException, IOException {\n    ensureNotClosed();\n    String collection = req.getCollection();\n    if (collection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not set\");\n    }\n    ensureSystemCollection(collection);\n    if (!colShardReplicaMap.containsKey(collection)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection does not exist\");\n    }\n    String query = req.getParams().get(CommonParams.Q);\n    if (query == null || !query.equals(\"*:*\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only '*:*' query is supported\");\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    AtomicLong count = new AtomicLong();\n    for (Slice s : coll.getActiveSlicesArr()) {\n      Replica r = s.getLeader();\n      if (r == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, collection + \"/\" + s.getName() + \" has no leader\");\n      }\n      ReplicaInfo ri = getReplicaInfo(r);\n      Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\", 0L);\n      count.addAndGet(numDocs.longValue());\n      AtomicLong bufferedUpdates = (AtomicLong)sliceProperties.get(collection).get(s.getName()).get(BUFFERED_UPDATES);\n      if (bufferedUpdates != null) {\n        count.addAndGet(bufferedUpdates.get());\n      }\n    }\n    QueryResponse rsp = new QueryResponse();\n    NamedList<Object> values = new NamedList<>();\n    values.add(\"responseHeader\", new NamedList<>());\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.setNumFound(count.get());\n    values.add(\"response\", docs);\n    rsp.setResponse(values);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simQuery(QueryRequest).mjava","sourceNew":null,"sourceOld":"  public QueryResponse simQuery(QueryRequest req) throws SolrException, InterruptedException, IOException {\n    ensureNotClosed();\n    String collection = req.getCollection();\n    if (collection == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection not set\");\n    }\n    ensureSystemCollection(collection);\n    if (!colShardReplicaMap.containsKey(collection)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection does not exist\");\n    }\n    String query = req.getParams().get(CommonParams.Q);\n    if (query == null || !query.equals(\"*:*\")) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only '*:*' query is supported\");\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(collection);\n    AtomicLong count = new AtomicLong();\n    for (Slice s : coll.getActiveSlicesArr()) {\n      Replica r = s.getLeader();\n      if (r == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, collection + \"/\" + s.getName() + \" has no leader\");\n      }\n      Replica ri = getReplicaInfo(r);\n      Number numDocs = (Number)ri.get(\"SEARCHER.searcher.numDocs\", 0L);\n      count.addAndGet(numDocs.longValue());\n      AtomicLong bufferedUpdates = (AtomicLong)sliceProperties.get(collection).get(s.getName()).get(BUFFERED_UPDATES);\n      if (bufferedUpdates != null) {\n        count.addAndGet(bufferedUpdates.get());\n      }\n    }\n    QueryResponse rsp = new QueryResponse();\n    NamedList<Object> values = new NamedList<>();\n    values.add(\"responseHeader\", new NamedList<>());\n    SolrDocumentList docs = new SolrDocumentList();\n    docs.setNumFound(count.get());\n    values.add(\"response\", docs);\n    rsp.setResponse(values);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}