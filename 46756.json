{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","commits":[{"id":"5f8965baea012c1e38682d0220c6c4a98b9207b8","date":1363627518,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs = og.counts[slot];\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.min(numChildDocs, maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19f400d1b6b61e87efe596bd64726f080f9a29f0","date":1366027276,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","sourceNew":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs = og.counts[slot];\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.min(numChildDocs, maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs = og.counts[slot];\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.min(numChildDocs, maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11","date":1367321736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","sourceNew":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs = og.counts[slot];\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.min(numChildDocs, maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","bugFix":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","sourceNew":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.getLeafCollector(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","sourceNew":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.getLeafCollector(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","sourceNew":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      LeafCollector leafCollector = collector.getLeafCollector(og.readerContext);\n      leafCollector.setScorer(fakeScorer);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        leafCollector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.getLeafCollector(og.readerContext);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","sourceNew":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore);\n      }\n\n      LeafCollector leafCollector = collector.getLeafCollector(og.readerContext);\n      leafCollector.setScorer(fakeScorer);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        leafCollector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      LeafCollector leafCollector = collector.getLeafCollector(og.readerContext);\n      leafCollector.setScorer(fakeScorer);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        leafCollector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore);\n      }\n\n      LeafCollector leafCollector = collector.getLeafCollector(og.readerContext);\n      leafCollector.setScorer(fakeScorer);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        leafCollector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#accumulateGroups(int,int,int,int,Sort,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   *  Accumulates groups for the BlockJoinQuery specified by its slot.\n   *\n   * @param slot Search query's slot\n   * @param offset Parent docs offset\n   * @param maxDocsPerGroup Upper bound of documents per group number\n   * @param withinGroupOffset Offset within each group of child docs\n   * @param withinGroupSort Sort criteria within groups\n   * @param fillSortFields Specifies whether to add sort fields or not\n   * @return TopGroups for the query specified by slot\n   * @throws IOException if there is a low-level I/O error\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private TopGroups<Integer> accumulateGroups(int slot, int offset, int maxDocsPerGroup,\n                                              int withinGroupOffset, Sort withinGroupSort, boolean fillSortFields) throws IOException {\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    int totalGroupedHitCount = 0;\n    //System.out.println(\"slot=\" + slot);\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n      final int numChildDocs;\n      if (slot == -1 || slot >= og.counts.length) {\n        numChildDocs = 0;\n      } else {\n        numChildDocs = og.counts[slot];\n      }\n\n      // Number of documents in group should be bounded to prevent redundant memory allocation\n      final int numDocsInGroup = Math.max(1, Math.min(numChildDocs, maxDocsPerGroup));\n      //System.out.println(\"parent doc=\" + og.doc + \" numChildDocs=\" + numChildDocs + \" maxDocsPG=\" + maxDocsPerGroup);\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        //System.out.println(\"sort by score\");\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(numDocsInGroup);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, numDocsInGroup, fillSortFields, trackScores, trackMaxScore);\n      }\n\n      LeafCollector leafCollector = collector.getLeafCollector(og.readerContext);\n      leafCollector.setScorer(fakeScorer);\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        //System.out.println(\"docIDX=\" + docIDX + \" vs \" + og.docs[slot].length);\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        leafCollector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, numDocsInGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<>(og.score,\n                                                       topDocs.getMaxScore(),\n                                                       numChildDocs,\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<>(new TopGroups<>(sort.getSort(),\n                                                       withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                       0, totalGroupedHitCount, groups, maxScore),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f400d1b6b61e87efe596bd64726f080f9a29f0":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"5f8965baea012c1e38682d0220c6c4a98b9207b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["901e951cec2e6af4e503209a6721c8834db23279"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"ae73da626f97850c922c42736f808d0378e165f0":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"901e951cec2e6af4e503209a6721c8834db23279":["ae73da626f97850c922c42736f808d0378e165f0"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"]},"commit2Childs":{"19f400d1b6b61e87efe596bd64726f080f9a29f0":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"5f8965baea012c1e38682d0220c6c4a98b9207b8":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","901e951cec2e6af4e503209a6721c8834db23279"],"901e951cec2e6af4e503209a6721c8834db23279":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}