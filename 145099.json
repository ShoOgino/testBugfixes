{"path":"solr/core/src/java/org/apache/solr/handler/FilesStream#findReadableFiles(CrawlFile,List[CrawlFile]).mjava","commits":[{"id":"4e7e81cd6c3e108547bc12beb23ba00ae90448b9","date":1564060380,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/FilesStream#findReadableFiles(CrawlFile,List[CrawlFile]).mjava","pathOld":"/dev/null","sourceNew":"  private void findReadableFiles(CrawlFile seed, List<CrawlFile> foundFiles) {\n\n    final File entry = new File(seed.absolutePath);\n\n    // Skip over paths that don't exist or that are symbolic links\n    if ((!entry.exists()) || (!entry.canRead()) || Files.isSymbolicLink(entry.toPath())) {\n      return;\n    }\n\n    // We already know that the path in question exists, is readable, and is in our sandbox\n    if (entry.isFile()) {\n      foundFiles.add(seed);\n    } else if (entry.isDirectory()) {\n      final String[] directoryContents = entry.list();\n      Arrays.sort(directoryContents);\n      if (directoryContents != null) {\n        for (String item : directoryContents) {\n          final String itemDisplayPath = Paths.get(seed.displayPath, item).toString();\n          final String itemAbsolutePath = Paths.get(seed.absolutePath, item).toString();\n          findReadableFiles(new CrawlFile(itemDisplayPath, itemAbsolutePath), foundFiles);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa57c615885d274eb8087f89b6a9e1f84e655a74","date":1565267901,"type":5,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CatStream#findReadableFiles(CrawlFile,List[CrawlFile]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/FilesStream#findReadableFiles(CrawlFile,List[CrawlFile]).mjava","sourceNew":"  private void findReadableFiles(CrawlFile seed, List<CrawlFile> foundFiles) {\n\n    final File entry = new File(seed.absolutePath);\n\n    // Skip over paths that don't exist or that are symbolic links\n    if ((!entry.exists()) || (!entry.canRead()) || Files.isSymbolicLink(entry.toPath())) {\n      return;\n    }\n\n    // We already know that the path in question exists, is readable, and is in our sandbox\n    if (entry.isFile()) {\n      foundFiles.add(seed);\n    } else if (entry.isDirectory()) {\n      final String[] directoryContents = entry.list();\n      Arrays.sort(directoryContents);\n      if (directoryContents != null) {\n        for (String item : directoryContents) {\n          final String itemDisplayPath = Paths.get(seed.displayPath, item).toString();\n          final String itemAbsolutePath = Paths.get(seed.absolutePath, item).toString();\n          findReadableFiles(new CrawlFile(itemDisplayPath, itemAbsolutePath), foundFiles);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void findReadableFiles(CrawlFile seed, List<CrawlFile> foundFiles) {\n\n    final File entry = new File(seed.absolutePath);\n\n    // Skip over paths that don't exist or that are symbolic links\n    if ((!entry.exists()) || (!entry.canRead()) || Files.isSymbolicLink(entry.toPath())) {\n      return;\n    }\n\n    // We already know that the path in question exists, is readable, and is in our sandbox\n    if (entry.isFile()) {\n      foundFiles.add(seed);\n    } else if (entry.isDirectory()) {\n      final String[] directoryContents = entry.list();\n      Arrays.sort(directoryContents);\n      if (directoryContents != null) {\n        for (String item : directoryContents) {\n          final String itemDisplayPath = Paths.get(seed.displayPath, item).toString();\n          final String itemAbsolutePath = Paths.get(seed.absolutePath, item).toString();\n          findReadableFiles(new CrawlFile(itemDisplayPath, itemAbsolutePath), foundFiles);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa57c615885d274eb8087f89b6a9e1f84e655a74":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa57c615885d274eb8087f89b6a9e1f84e655a74"]},"commit2Childs":{"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["fa57c615885d274eb8087f89b6a9e1f84e655a74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"fa57c615885d274eb8087f89b6a9e1f84e655a74":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}