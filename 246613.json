{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","commits":[{"id":"8735477f53284dd67c6335828378cadf20cddabc","date":1365956061,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws SolrServerException, KeeperException, InterruptedException {\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f1ea787bab5bdb5e72685e55424898da05509b6","date":1370289750,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws SolrServerException, KeeperException, InterruptedException {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws SolrServerException, KeeperException, InterruptedException {\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96adbab674ae121f8b6b3e10474070b4bd97a219","date":1373614333,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    commit();\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    //assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws SolrServerException, KeeperException, InterruptedException {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18ec3f1b57e1e2ed18345979e3fe3ea6da16de80","date":1373827300,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    commit();\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    //assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws SolrServerException, KeeperException, InterruptedException {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Server.query(query);\n    } finally {\n      shard1_0Server.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Server.query(query);\n    } finally {\n      shard1_1Server.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response = shard1_0Server.query(query);\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2 = shard1_1Server.query(query);\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21d6ea084cd3d72cd738a74805c054e9c2bea79c","date":1400661702,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Server.query(query);\n    } finally {\n      shard1_0Server.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Server.query(query);\n    } finally {\n      shard1_1Server.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Server.query(query);\n    } finally {\n      shard1_0Server.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Server.query(query);\n    } finally {\n      shard1_1Server.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Server.query(query);\n    } finally {\n      shard1_0Server.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Server.query(query);\n    } finally {\n      shard1_1Server.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Server.query(query);\n    } finally {\n      shard1_0Server.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Server.query(query);\n    } finally {\n      shard1_1Server.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Server.query(query);\n    } finally {\n      shard1_0Server.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Server.query(query);\n    } finally {\n      shard1_1Server.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Server.query(query);\n    } finally {\n      shard1_0Server.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Server.query(query);\n    } finally {\n      shard1_1Server.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Client.query(query);\n    } finally {\n      shard1_0Client.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Client.query(query);\n    } finally {\n      shard1_1Client.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrServer shard1_0Server = new HttpSolrServer(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Server.query(query);\n    } finally {\n      shard1_0Server.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrServer shard1_1Server = new HttpSolrServer(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Server.query(query);\n    } finally {\n      shard1_1Server.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl());\n    QueryResponse response;\n    try {\n      response = shard1_0Client.query(query);\n    } finally {\n      shard1_0Client.shutdown();\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl());\n    QueryResponse response2;\n    try {\n      response2 = shard1_1Client.query(query);\n    } finally {\n      shard1_1Client.shutdown();\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (Slice.ACTIVE.equals(slice1_0.getState()) && Slice.ACTIVE.equals(slice1_1.getState()))\n        break;\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertEquals(\"shard1_0 is not active\", Slice.ACTIVE, slice1_0.getState());\n    assertEquals(\"shard1_1 is not active\", Slice.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = new HttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = new HttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_0\");\n      slice1_1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":["8735477f53284dd67c6335828378cadf20cddabc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_0\");\n      slice1_1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_0\");\n      slice1_1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, \"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_0\");\n      slice1_1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_0\");\n      slice1_1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_0\");\n      slice1_1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_0\");\n      slice1_1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["344b0840364d990b29b97467bfcc766ff8325d11","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8f1ea787bab5bdb5e72685e55424898da05509b6","18ec3f1b57e1e2ed18345979e3fe3ea6da16de80"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"18ec3f1b57e1e2ed18345979e3fe3ea6da16de80":["96adbab674ae121f8b6b3e10474070b4bd97a219"],"344b0840364d990b29b97467bfcc766ff8325d11":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["8735477f53284dd67c6335828378cadf20cddabc"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["344b0840364d990b29b97467bfcc766ff8325d11"],"bafca15d8e408346a67f4282ad1143b88023893b":["21d6ea084cd3d72cd738a74805c054e9c2bea79c"],"8735477f53284dd67c6335828378cadf20cddabc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7605579001505896d48b07160075a5c8b8e128e":["2d750082a4223c20902ef11ff6a9831d55738ea4","21d6ea084cd3d72cd738a74805c054e9c2bea79c"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"0c924d4069ef5a5bc479a493befe0121aada6896":["cc3b13b430571c2e169f98fe38e1e7666f88522d","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","344b0840364d990b29b97467bfcc766ff8325d11"],"21d6ea084cd3d72cd738a74805c054e9c2bea79c":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"96adbab674ae121f8b6b3e10474070b4bd97a219":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["2d750082a4223c20902ef11ff6a9831d55738ea4","21d6ea084cd3d72cd738a74805c054e9c2bea79c"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["18ec3f1b57e1e2ed18345979e3fe3ea6da16de80"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"18ec3f1b57e1e2ed18345979e3fe3ea6da16de80":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2d750082a4223c20902ef11ff6a9831d55738ea4"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["102da6baafc0f534a59f31729343dbab9d3b9e9a","0c924d4069ef5a5bc479a493befe0121aada6896"],"344b0840364d990b29b97467bfcc766ff8325d11":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["37a0f60745e53927c4c876cfe5b5a58170f0646c","96adbab674ae121f8b6b3e10474070b4bd97a219"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"8735477f53284dd67c6335828378cadf20cddabc":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"b7605579001505896d48b07160075a5c8b8e128e":[],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"21d6ea084cd3d72cd738a74805c054e9c2bea79c":["bafca15d8e408346a67f4282ad1143b88023893b","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"96adbab674ae121f8b6b3e10474070b4bd97a219":["18ec3f1b57e1e2ed18345979e3fe3ea6da16de80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8735477f53284dd67c6335828378cadf20cddabc"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["b7605579001505896d48b07160075a5c8b8e128e","21d6ea084cd3d72cd738a74805c054e9c2bea79c","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b7605579001505896d48b07160075a5c8b8e128e","0c924d4069ef5a5bc479a493befe0121aada6896","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","a656b32c3aa151037a8c52e9b134acc3cbf482bc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}