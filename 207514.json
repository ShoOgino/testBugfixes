{"path":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","commits":[{"id":"84242847a83fee6fb728f70226570c5251c39e31","date":1160951872,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"/dev/null","sourceNew":"  private static Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = new Random(BASE_SEED + 42) ; \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(dir, analyzer, true);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.TOKENIZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private static Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = new Random(BASE_SEED + 42) ; \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.TOKENIZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private static Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = new Random(BASE_SEED + 42) ; \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(dir, analyzer, true);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.TOKENIZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private static Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = new Random(BASE_SEED + 42) ; \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private static Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = new Random(BASE_SEED + 42) ; \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.TOKENIZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private static Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = new Random(BASE_SEED + 42) ; \n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      Analyzer analyzer = new SimpleAnalyzer(Version.LUCENE_CURRENT);\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      Analyzer analyzer = new SimpleAnalyzer(Version.LUCENE_CURRENT);\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n      \n      writer.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"cb1066f2afe9450585d0d10063ea4450085236f1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["cb1066f2afe9450585d0d10063ea4450085236f1"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["84242847a83fee6fb728f70226570c5251c39e31"],"84242847a83fee6fb728f70226570c5251c39e31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cb1066f2afe9450585d0d10063ea4450085236f1":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84242847a83fee6fb728f70226570c5251c39e31"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["cb1066f2afe9450585d0d10063ea4450085236f1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"84242847a83fee6fb728f70226570c5251c39e31":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}