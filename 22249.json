{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#putNullTest().mjava","commits":[{"id":"20ae920d0d26d4f23329f8ee5554b9a445435ab8","date":1254390223,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#putNullTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void putNullTest(){\n    String xml = \"<root>\\n\" +\n            \"  <i>\\n\" +\n            \"    <x>\\n\" +\n            \"      <a>A.1.1</a>\\n\" +\n            \"      <b>B.1.1</b>\\n\" +\n            \"    </x>\\n\" +\n            \"    <x>\\n\" +\n            \"      <b>B.1.2</b>\\n\" +\n            \"      <c>C.1.2</c>\\n\" +\n            \"    </x>\\n\" +\n            \"  </i>\\n\" +\n            \"  <i>\\n\" +\n            \"    <x>\\n\" +\n            \"      <a>A.2.1</a>\\n\" +\n            \"      <c>C.2.1</c>\\n\" +\n            \"    </x>\\n\" +\n            \"    <x>\\n\" +\n            \"      <b>B.2.2</b>\\n\" +\n            \"      <c>C.2.2</c>\\n\" +\n            \"    </x>\\n\" +\n            \"  </i>\\n\" +\n            \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/i\");\n    rr.addField(\"a\", \"/root/i/x/a\", true);\n    rr.addField(\"b\", \"/root/i/x/b\", true);\n    rr.addField(\"c\", \"/root/i/x/c\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Map<String, Object> map = l.get(0);\n    List<String> a = (List<String>) map.get(\"a\");\n    List<String> b = (List<String>) map.get(\"b\");\n    List<String> c = (List<String>) map.get(\"c\");\n\n    Assert.assertEquals(\"A.1.1\",a.get(0));\n    Assert.assertEquals(\"B.1.1\",b.get(0));\n    Assert.assertNull(c.get(0));\n\n    Assert.assertNull(a.get(1));\n    Assert.assertEquals(\"B.1.2\",b.get(1));\n    Assert.assertEquals(\"C.1.2\",c.get(1));\n\n    map = l.get(1);\n    a = (List<String>) map.get(\"a\");\n    b = (List<String>) map.get(\"b\");\n    c = (List<String>) map.get(\"c\");\n    Assert.assertEquals(\"A.2.1\",a.get(0));\n    Assert.assertNull(b.get(0));\n    Assert.assertEquals(\"C.2.1\",c.get(0));\n\n    Assert.assertNull(a.get(1));\n    Assert.assertEquals(\"B.2.2\",b.get(1));\n    Assert.assertEquals(\"C.2.2\",c.get(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#putNullTest().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#putNullTest().mjava","sourceNew":"  @Test\n  public void putNullTest(){\n    String xml = \"<root>\\n\" +\n            \"  <i>\\n\" +\n            \"    <x>\\n\" +\n            \"      <a>A.1.1</a>\\n\" +\n            \"      <b>B.1.1</b>\\n\" +\n            \"    </x>\\n\" +\n            \"    <x>\\n\" +\n            \"      <b>B.1.2</b>\\n\" +\n            \"      <c>C.1.2</c>\\n\" +\n            \"    </x>\\n\" +\n            \"  </i>\\n\" +\n            \"  <i>\\n\" +\n            \"    <x>\\n\" +\n            \"      <a>A.2.1</a>\\n\" +\n            \"      <c>C.2.1</c>\\n\" +\n            \"    </x>\\n\" +\n            \"    <x>\\n\" +\n            \"      <b>B.2.2</b>\\n\" +\n            \"      <c>C.2.2</c>\\n\" +\n            \"    </x>\\n\" +\n            \"  </i>\\n\" +\n            \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/i\");\n    rr.addField(\"a\", \"/root/i/x/a\", true);\n    rr.addField(\"b\", \"/root/i/x/b\", true);\n    rr.addField(\"c\", \"/root/i/x/c\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Map<String, Object> map = l.get(0);\n    List<String> a = (List<String>) map.get(\"a\");\n    List<String> b = (List<String>) map.get(\"b\");\n    List<String> c = (List<String>) map.get(\"c\");\n\n    Assert.assertEquals(\"A.1.1\",a.get(0));\n    Assert.assertEquals(\"B.1.1\",b.get(0));\n    Assert.assertNull(c.get(0));\n\n    Assert.assertNull(a.get(1));\n    Assert.assertEquals(\"B.1.2\",b.get(1));\n    Assert.assertEquals(\"C.1.2\",c.get(1));\n\n    map = l.get(1);\n    a = (List<String>) map.get(\"a\");\n    b = (List<String>) map.get(\"b\");\n    c = (List<String>) map.get(\"c\");\n    Assert.assertEquals(\"A.2.1\",a.get(0));\n    Assert.assertNull(b.get(0));\n    Assert.assertEquals(\"C.2.1\",c.get(0));\n\n    Assert.assertNull(a.get(1));\n    Assert.assertEquals(\"B.2.2\",b.get(1));\n    Assert.assertEquals(\"C.2.2\",c.get(1));\n  }\n\n","sourceOld":"  @Test\n  public void putNullTest(){\n    String xml = \"<root>\\n\" +\n            \"  <i>\\n\" +\n            \"    <x>\\n\" +\n            \"      <a>A.1.1</a>\\n\" +\n            \"      <b>B.1.1</b>\\n\" +\n            \"    </x>\\n\" +\n            \"    <x>\\n\" +\n            \"      <b>B.1.2</b>\\n\" +\n            \"      <c>C.1.2</c>\\n\" +\n            \"    </x>\\n\" +\n            \"  </i>\\n\" +\n            \"  <i>\\n\" +\n            \"    <x>\\n\" +\n            \"      <a>A.2.1</a>\\n\" +\n            \"      <c>C.2.1</c>\\n\" +\n            \"    </x>\\n\" +\n            \"    <x>\\n\" +\n            \"      <b>B.2.2</b>\\n\" +\n            \"      <c>C.2.2</c>\\n\" +\n            \"    </x>\\n\" +\n            \"  </i>\\n\" +\n            \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/i\");\n    rr.addField(\"a\", \"/root/i/x/a\", true);\n    rr.addField(\"b\", \"/root/i/x/b\", true);\n    rr.addField(\"c\", \"/root/i/x/c\", true);\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Map<String, Object> map = l.get(0);\n    List<String> a = (List<String>) map.get(\"a\");\n    List<String> b = (List<String>) map.get(\"b\");\n    List<String> c = (List<String>) map.get(\"c\");\n\n    Assert.assertEquals(\"A.1.1\",a.get(0));\n    Assert.assertEquals(\"B.1.1\",b.get(0));\n    Assert.assertNull(c.get(0));\n\n    Assert.assertNull(a.get(1));\n    Assert.assertEquals(\"B.1.2\",b.get(1));\n    Assert.assertEquals(\"C.1.2\",c.get(1));\n\n    map = l.get(1);\n    a = (List<String>) map.get(\"a\");\n    b = (List<String>) map.get(\"b\");\n    c = (List<String>) map.get(\"c\");\n    Assert.assertEquals(\"A.2.1\",a.get(0));\n    Assert.assertNull(b.get(0));\n    Assert.assertEquals(\"C.2.1\",c.get(0));\n\n    Assert.assertNull(a.get(1));\n    Assert.assertEquals(\"B.2.2\",b.get(1));\n    Assert.assertEquals(\"C.2.2\",c.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"20ae920d0d26d4f23329f8ee5554b9a445435ab8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["20ae920d0d26d4f23329f8ee5554b9a445435ab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["20ae920d0d26d4f23329f8ee5554b9a445435ab8"],"20ae920d0d26d4f23329f8ee5554b9a445435ab8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}