{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocsExistInAllReplicas(List[Replica],String,int,int,Set[Integer]).mjava","commits":[{"id":"773a737806859660d4756f710adc0ad53e05f9d5","date":1432140757,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocsExistInAllReplicas(List[Replica],String,int,int,Set[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n                                              String testCollectionName,\n                                              int firstDocId,\n                                              int lastDocId,\n                                              Set<Integer> deletedDocs)\n      throws Exception\n  {\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader);\n    List<HttpSolrClient> replicas = new ArrayList<HttpSolrClient>(notLeaders.size());\n    for (Replica r : notLeaders)\n      replicas.add(getHttpSolrClient(r));\n\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n\n        if (deletedDocs != null && deletedDocs.contains(d))\n          continue;\n\n        String docId = String.valueOf(d);\n        Long leaderVers = assertDocExists(leaderSolr, testCollectionName, docId, null);\n        for (HttpSolrClient replicaSolr : replicas)\n          assertDocExists(replicaSolr, testCollectionName, docId, leaderVers);\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocsExistInAllReplicas(Replica,List[Replica],String,int,int,Set[Integer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocsExistInAllReplicas(List[Replica],String,int,int,Set[Integer]).mjava","sourceNew":"  protected void assertDocsExistInAllReplicas(Replica leader, List<Replica> notLeaders,\n                                              String testCollectionName,\n                                              int firstDocId,\n                                              int lastDocId,\n                                              Set<Integer> deletedDocs)\n      throws Exception {\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader);\n    List<HttpSolrClient> replicas = new ArrayList<HttpSolrClient>(notLeaders.size());\n    for (Replica r : notLeaders)\n      replicas.add(getHttpSolrClient(r));\n\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n\n        if (deletedDocs != null && deletedDocs.contains(d))\n          continue;\n\n        String docId = String.valueOf(d);\n        Long leaderVers = assertDocExists(leaderSolr, testCollectionName, docId, null);\n        for (HttpSolrClient replicaSolr : replicas)\n          assertDocExists(replicaSolr, testCollectionName, docId, leaderVers);\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n                                              String testCollectionName,\n                                              int firstDocId,\n                                              int lastDocId,\n                                              Set<Integer> deletedDocs)\n      throws Exception\n  {\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader);\n    List<HttpSolrClient> replicas = new ArrayList<HttpSolrClient>(notLeaders.size());\n    for (Replica r : notLeaders)\n      replicas.add(getHttpSolrClient(r));\n\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n\n        if (deletedDocs != null && deletedDocs.contains(d))\n          continue;\n\n        String docId = String.valueOf(d);\n        Long leaderVers = assertDocExists(leaderSolr, testCollectionName, docId, null);\n        for (HttpSolrClient replicaSolr : replicas)\n          assertDocExists(replicaSolr, testCollectionName, docId, leaderVers);\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocsExistInAllReplicas(Replica,List[Replica],String,int,int,Set[Integer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocsExistInAllReplicas(List[Replica],String,int,int,Set[Integer]).mjava","sourceNew":"  protected void assertDocsExistInAllReplicas(Replica leader, List<Replica> notLeaders,\n                                              String testCollectionName,\n                                              int firstDocId,\n                                              int lastDocId,\n                                              Set<Integer> deletedDocs)\n      throws Exception {\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader);\n    List<HttpSolrClient> replicas = new ArrayList<HttpSolrClient>(notLeaders.size());\n    for (Replica r : notLeaders)\n      replicas.add(getHttpSolrClient(r));\n\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n\n        if (deletedDocs != null && deletedDocs.contains(d))\n          continue;\n\n        String docId = String.valueOf(d);\n        Long leaderVers = assertDocExists(leaderSolr, testCollectionName, docId, null);\n        for (HttpSolrClient replicaSolr : replicas)\n          assertDocExists(replicaSolr, testCollectionName, docId, leaderVers);\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n                                              String testCollectionName,\n                                              int firstDocId,\n                                              int lastDocId,\n                                              Set<Integer> deletedDocs)\n      throws Exception\n  {\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader);\n    List<HttpSolrClient> replicas = new ArrayList<HttpSolrClient>(notLeaders.size());\n    for (Replica r : notLeaders)\n      replicas.add(getHttpSolrClient(r));\n\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n\n        if (deletedDocs != null && deletedDocs.contains(d))\n          continue;\n\n        String docId = String.valueOf(d);\n        Long leaderVers = assertDocExists(leaderSolr, testCollectionName, docId, null);\n        for (HttpSolrClient replicaSolr : replicas)\n          assertDocExists(replicaSolr, testCollectionName, docId, leaderVers);\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#assertDocsExistInAllReplicas(List[Replica],String,int,int,Set[Integer]).mjava","sourceNew":null,"sourceOld":"  protected void assertDocsExistInAllReplicas(List<Replica> notLeaders,\n                                              String testCollectionName,\n                                              int firstDocId,\n                                              int lastDocId,\n                                              Set<Integer> deletedDocs)\n      throws Exception\n  {\n    Replica leader =\n        cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", 10000);\n    HttpSolrClient leaderSolr = getHttpSolrClient(leader);\n    List<HttpSolrClient> replicas = new ArrayList<HttpSolrClient>(notLeaders.size());\n    for (Replica r : notLeaders)\n      replicas.add(getHttpSolrClient(r));\n\n    try {\n      for (int d = firstDocId; d <= lastDocId; d++) {\n\n        if (deletedDocs != null && deletedDocs.contains(d))\n          continue;\n\n        String docId = String.valueOf(d);\n        Long leaderVers = assertDocExists(leaderSolr, testCollectionName, docId, null);\n        for (HttpSolrClient replicaSolr : replicas)\n          assertDocExists(replicaSolr, testCollectionName, docId, leaderVers);\n      }\n    } finally {\n      if (leaderSolr != null) {\n        leaderSolr.close();\n      }\n      for (HttpSolrClient replicaSolr : replicas) {\n        replicaSolr.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773a737806859660d4756f710adc0ad53e05f9d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["773a737806859660d4756f710adc0ad53e05f9d5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["773a737806859660d4756f710adc0ad53e05f9d5","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["773a737806859660d4756f710adc0ad53e05f9d5","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"773a737806859660d4756f710adc0ad53e05f9d5":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773a737806859660d4756f710adc0ad53e05f9d5"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}