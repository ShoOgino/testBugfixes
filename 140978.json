{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermStates).mjava","commits":[{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermStates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermContext).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermStates termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.simScorer = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.simScorer = similarity.scorer(boost, collectionStats, termStats);\n      }\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermContext termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.simScorer = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.simScorer = similarity.scorer(boost, collectionStats, termStats);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermStates).mjava","pathOld":"/dev/null","sourceNew":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermStates termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.simScorer = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.simScorer = similarity.scorer(boost, collectionStats, termStats);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,ScoreMode,float,TermStates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#TermWeight(IndexSearcher,boolean,float,TermStates).mjava","sourceNew":"    public TermWeight(IndexSearcher searcher, ScoreMode scoreMode,\n        float boost, TermStates termStates) throws IOException {\n      super(TermQuery.this);\n      if (scoreMode.needsScores() && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.scoreMode = scoreMode;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (scoreMode.needsScores()) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.simScorer = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.simScorer = similarity.scorer(boost, collectionStats, termStats);\n      }\n    }\n\n","sourceOld":"    public TermWeight(IndexSearcher searcher, boolean needsScores,\n        float boost, TermStates termStates) throws IOException {\n      super(TermQuery.this);\n      if (needsScores && termStates == null) {\n        throw new IllegalStateException(\"termStates are required when scores are needed\");\n      }\n      this.needsScores = needsScores;\n      this.termStates = termStates;\n      this.similarity = searcher.getSimilarity();\n\n      final CollectionStatistics collectionStats;\n      final TermStatistics termStats;\n      if (needsScores) {\n        collectionStats = searcher.collectionStatistics(term.field());\n        termStats = searcher.termStatistics(term, termStates);\n      } else {\n        // we do not need the actual stats, use fake stats with docFreq=maxDoc=ttf=1\n        collectionStats = new CollectionStatistics(term.field(), 1, 1, 1, 1);\n        termStats = new TermStatistics(term.bytes(), 1, 1);\n      }\n     \n      if (termStats == null) {\n        this.simScorer = null; // term doesn't exist in any segment, we won't use similarity at all\n      } else {\n        this.simScorer = similarity.scorer(boost, collectionStats, termStats);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["622a708571e534680618b3c5e0c28ac539a47776"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}