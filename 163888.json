{"path":"backwards/src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","pathOld":"/dev/null","sourceNew":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/SloppyPhraseScorer#flip(PhrasePositions,PhrasePositions).mjava","sourceNew":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","sourceOld":"    // flip pp2 and pp in the queue: pop until finding pp2, insert back all but pp2, insert pp back.\n    // assumes: pp!=pp2, pp2 in pq, pp not in pq.\n    // called only when there are repeating pps.\n    private PhrasePositions flip(PhrasePositions pp, PhrasePositions pp2) {\n      int n=0;\n      PhrasePositions pp3;\n      //pop until finding pp2\n      while ((pp3=pq.pop()) != pp2) {\n        tmpPos[n++] = pp3;\n      }\n      //insert back all but pp2\n      for (n--; n>=0; n--) {\n        pq.insertWithOverflow(tmpPos[n]);\n      }\n      //insert pp back\n      pq.add(pp);\n      return pp2;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}