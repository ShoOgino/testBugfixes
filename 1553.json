{"path":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd5c2a6d346a6df2ab9e4081a999fdcbdab28974","date":1314737184,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n    \n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost());\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost());\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":["bc00220e3dec859110781d5d19a6116501fb4a38"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 2, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad31de9d3b830bc174d4c41df9f80f4cac82576","date":1328107867,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    \n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    \n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader( req, p );\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input));\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(6.7f, f.getBoost(), 0.1);\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(3.45f, d.getDocumentBoost(), 0.001);\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"204f8269a4f7b5b254cc893f7ae9be8405854fcb","date":1545835182,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    assertEquals(\"SolrInputDocument(fields: [bool=true, f0=v0, array=[aaa, bbb]])\", add.solrDoc.toString());\n\n    // \n    add = p.addCommands.get(1);\n    assertEquals(\"SolrInputDocument(fields: [f1=[v1, v2], f2=null])\", add.solrDoc.toString());\n    assertEquals(false, add.overwrite);\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    SolrInputDocument d = add.solrDoc;\n    SolrInputField f = d.getField( \"boosted\" );\n    assertEquals(2, f.getValues().size());\n\n    // \n    add = p.addCommands.get(1);\n    d = add.solrDoc;\n    f = d.getField( \"f1\" );\n    assertEquals(2, f.getValues().size());\n    assertEquals(false, add.overwrite);\n\n    assertEquals(0, d.getField(\"f2\").getValueCount());\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    assertEquals(\"SolrInputDocument(fields: [bool=true, f0=v0, array=[aaa, bbb]])\", add.solrDoc.toString());\n\n    // \n    add = p.addCommands.get(1);\n    assertEquals(\"SolrInputDocument(fields: [f1=[v1, v2], f2=null])\", add.solrDoc.toString());\n    assertFalse(add.overwrite);\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertNull( delete.query );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertNull( delete.query );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertNull( delete.id );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertNull( delete.id );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    assertEquals(\"SolrInputDocument(fields: [bool=true, f0=v0, array=[aaa, bbb]])\", add.solrDoc.toString());\n\n    // \n    add = p.addCommands.get(1);\n    assertEquals(\"SolrInputDocument(fields: [f1=[v1, v2], f2=null])\", add.solrDoc.toString());\n    assertEquals(false, add.overwrite);\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    assertEquals(\"SolrInputDocument(fields: [bool=true, f0=v0, array=[aaa, bbb]])\", add.solrDoc.toString());\n\n    // \n    add = p.addCommands.get(1);\n    assertEquals(\"SolrInputDocument(fields: [f1=[v1, v2], f2=null])\", add.solrDoc.toString());\n    assertFalse(add.overwrite);\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertNull( delete.query );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertNull( delete.query );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertNull( delete.id );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertNull( delete.id );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    assertEquals(\"SolrInputDocument(fields: [bool=true, f0=v0, array=[aaa, bbb]])\", add.solrDoc.toString());\n\n    // \n    add = p.addCommands.get(1);\n    assertEquals(\"SolrInputDocument(fields: [f1=[v1, v2], f2=null])\", add.solrDoc.toString());\n    assertEquals(false, add.overwrite);\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testParsing().mjava","sourceNew":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    assertEquals(\"SolrInputDocument(fields: [bool=true, f0=v0, array=[aaa, bbb]])\", add.solrDoc.toString());\n\n    // \n    add = p.addCommands.get(1);\n    assertEquals(\"SolrInputDocument(fields: [f1=[v1, v2], f2=null])\", add.solrDoc.toString());\n    assertFalse(add.overwrite);\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertNull( delete.query );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertNull( delete.query );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertNull( delete.id );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertNull( delete.id );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","sourceOld":"  public void testParsing() throws Exception\n  {\n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    BufferingRequestProcessor p = new BufferingRequestProcessor(null);\n    JsonLoader loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(input), p);\n\n    assertEquals( 2, p.addCommands.size() );\n    \n    AddUpdateCommand add = p.addCommands.get(0);\n    assertEquals(\"SolrInputDocument(fields: [bool=true, f0=v0, array=[aaa, bbb]])\", add.solrDoc.toString());\n\n    // \n    add = p.addCommands.get(1);\n    assertEquals(\"SolrInputDocument(fields: [f1=[v1, v2], f2=null])\", add.solrDoc.toString());\n    assertEquals(false, add.overwrite);\n\n    // parse the commit commands\n    assertEquals( 2, p.commitCommands.size() );\n    CommitUpdateCommand commit = p.commitCommands.get( 0 );\n    assertFalse( commit.optimize );\n    assertTrue( commit.waitSearcher );\n    assertTrue( commit.openSearcher );\n\n    commit = p.commitCommands.get( 1 );\n    assertTrue( commit.optimize );\n    assertFalse( commit.waitSearcher );\n    assertFalse( commit.openSearcher );\n\n\n    // DELETE COMMANDS\n    assertEquals( 4, p.deleteCommands.size() );\n    DeleteUpdateCommand delete = p.deleteCommands.get( 0 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 1 );\n    assertEquals( delete.id, \"ID\" );\n    assertEquals( delete.query, null );\n    assertEquals( delete.commitWithin, 500);\n    \n    delete = p.deleteCommands.get( 2 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, -1);\n    \n    delete = p.deleteCommands.get( 3 );\n    assertEquals( delete.id, null );\n    assertEquals( delete.query, \"QUERY\" );\n    assertEquals( delete.commitWithin, 500);\n\n    // ROLLBACK COMMANDS\n    assertEquals( 1, p.rollbackCommands.size() );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"204f8269a4f7b5b254cc893f7ae9be8405854fcb":["acd9883560fd89e6448b2b447302fe543040cd4f"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["dd5c2a6d346a6df2ab9e4081a999fdcbdab28974"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","818d704eaaf0fba0561d0d2752832e1015053482"],"818d704eaaf0fba0561d0d2752832e1015053482":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"f8061ddd97f3352007d927dae445884a6f3d857b":["204f8269a4f7b5b254cc893f7ae9be8405854fcb","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","818d704eaaf0fba0561d0d2752832e1015053482"],"042e4d934397657ba04c82b46cc5665076bc5c58":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["818d704eaaf0fba0561d0d2752832e1015053482"],"dd5c2a6d346a6df2ab9e4081a999fdcbdab28974":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["204f8269a4f7b5b254cc893f7ae9be8405854fcb"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["204f8269a4f7b5b254cc893f7ae9be8405854fcb","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"acd9883560fd89e6448b2b447302fe543040cd4f":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"204f8269a4f7b5b254cc893f7ae9be8405854fcb":["f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"c26f00b574427b55127e869b935845554afde1fa":["dd5c2a6d346a6df2ab9e4081a999fdcbdab28974"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"818d704eaaf0fba0561d0d2752832e1015053482":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"042e4d934397657ba04c82b46cc5665076bc5c58":["acd9883560fd89e6448b2b447302fe543040cd4f"],"dd5c2a6d346a6df2ab9e4081a999fdcbdab28974":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["042e4d934397657ba04c82b46cc5665076bc5c58"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["204f8269a4f7b5b254cc893f7ae9be8405854fcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f8061ddd97f3352007d927dae445884a6f3d857b","0d22ac6a4146774c1bc8400160fc0b6150294e92","a258fbb26824fd104ed795e5d9033d2d040049ee","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}