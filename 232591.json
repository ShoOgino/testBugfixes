{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","commits":[{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase,Comparator[BytesRef]).mjava","sourceNew":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter)\n    throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    //segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase,Comparator[BytesRef]).mjava","sourceNew":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter)\n    throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    //segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase,Comparator[BytesRef]).mjava","sourceNew":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter)\n    throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    //segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter,\n      Comparator<BytesRef> termComp) throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    this.termComp = termComp;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter)\n    throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    //segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","sourceOld":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter)\n    throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    //segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter)\n    throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    //segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter)\n    throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    //segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(\n      TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter)\n    throws IOException\n  {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    fieldInfos = state.fieldInfos;\n    writeHeader(out);\n    currentField = null;\n    this.postingsWriter = postingsWriter;\n    //segment = state.segmentName;\n\n    //System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n    postingsWriter.start(out);                          // have consumer write its format/header\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      //segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeSafely(true, out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter#BlockTermsWriter(TermsIndexWriterBase,SegmentWriteState,PostingsWriterBase).mjava","sourceNew":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public BlockTermsWriter(TermsIndexWriterBase termsIndexWriter,\n      SegmentWriteState state, PostingsWriterBase postingsWriter)\n      throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, TERMS_EXTENSION);\n    this.termsIndexWriter = termsIndexWriter;\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    try {\n      fieldInfos = state.fieldInfos;\n      writeHeader(out);\n      currentField = null;\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentName;\n      \n      //System.out.println(\"BTW.init seg=\" + state.segmentName);\n      \n      postingsWriter.start(out); // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"efb7a19703a037c29e30440260d393500febc1f4":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["efb7a19703a037c29e30440260d393500febc1f4"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","efb7a19703a037c29e30440260d393500febc1f4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["efb7a19703a037c29e30440260d393500febc1f4","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","efb7a19703a037c29e30440260d393500febc1f4","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"efb7a19703a037c29e30440260d393500febc1f4":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["24230fe54121f9be9d85f2c2067536296785e421"],"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["60ba444201d2570214b6fcf1d15600dc1a01f548","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0150c6e116b24d66f02d63fcb0758f336e8791e2","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}