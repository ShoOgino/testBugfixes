{"path":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#collect(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      upto++;\n      other.collect(doc);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      upto++;\n      other.collect(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#collect(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      upto++;\n      other.collect(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingCollector.NoScoreCachingCollector#collect(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n\n      if (curDocs == null) {\n        // Cache was too large\n        other.collect(doc);\n        return;\n      }\n\n      // Allocate a bigger array or abort caching\n      if (upto == curDocs.length) {\n        base += upto;\n        \n        // Compute next array length - don't allocate too big arrays\n        int nextLength = 8*curDocs.length;\n        if (nextLength > MAX_ARRAY_SIZE) {\n          nextLength = MAX_ARRAY_SIZE;\n        }\n\n        if (base + nextLength > maxDocsToCache) {\n          // try to allocate a smaller array\n          nextLength = maxDocsToCache - base;\n          if (nextLength <= 0) {\n            // Too many docs to collect -- clear cache\n            curDocs = null;\n            cachedSegs.clear();\n            cachedDocs.clear();\n            other.collect(doc);\n            return;\n          }\n        }\n        \n        curDocs = new int[nextLength];\n        cachedDocs.add(curDocs);\n        upto = 0;\n      }\n      \n      curDocs[upto] = doc;\n      upto++;\n      other.collect(doc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}