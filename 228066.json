{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValued().mjava","commits":[{"id":"d0c238d519ed8e8343ab723bcc8f1846786e42a6","date":1409789996,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  // SOLR-6024\n  public void testFieldStatisticsDocValuesAndMultiValued() throws Exception {\n    SolrCore core = h.getCore();\n    \n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(\"cat_docValues\");\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n    \n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"cat_docValues\",new IRange(2,2),  new SVal('a','z',1, 30)));\n    Doc d1 = createDoc(types);\n    d1.getValues(\"id\").set(0, \"1\");\n    d1.getValues(\"cat_docValues\").set(0, \"test\");\n    d1.getValues(\"cat_docValues\").set(1, \"testtw\");\n    updateJ(toJSON(d1), null);\n    Doc d2 = createDoc(types);\n    d2.getValues(\"id\").set(0, \"2\");\n    d2.getValues(\"cat_docValues\").set(0, \"test\");\n    d2.getValues(\"cat_docValues\").set(1, \"testtt\");\n    updateJ(toJSON(d2), null);\n    \n    assertU(commit());\n    \n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"cat_docValues\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n    \n    assertQ(\"test min/max on docValues and multiValued\", req\n        , \"//lst[@name='cat_docValues']/str[@name='min'][.='test']\"\n        , \"//lst[@name='cat_docValues']/str[@name='max'][.='testtw']\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValued().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testFieldStatisticsDocValuesAndMultiValued().mjava","sourceNew":"  // SOLR-6024\n  public void testFieldStatisticsDocValuesAndMultiValued() throws Exception {\n    SolrCore core = h.getCore();\n    \n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(\"cat_docValues\");\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n    \n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"cat_docValues\",new IRange(2,2),  new SVal('a','z',1, 30)));\n    Doc d1 = createDoc(types);\n    d1.getValues(\"id\").set(0, \"1\");\n    d1.getValues(\"cat_docValues\").set(0, \"test\");\n    d1.getValues(\"cat_docValues\").set(1, \"testtw\");\n    updateJ(toJSON(d1), null);\n    Doc d2 = createDoc(types);\n    d2.getValues(\"id\").set(0, \"2\");\n    d2.getValues(\"cat_docValues\").set(0, \"test\");\n    d2.getValues(\"cat_docValues\").set(1, \"testtt\");\n    updateJ(toJSON(d2), null);\n    \n    assertU(commit());\n    \n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"cat_docValues\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n    \n    assertQ(\"test min/max on docValues and multiValued\", req\n        , \"//lst[@name='cat_docValues']/str[@name='min'][.='test']\"\n        , \"//lst[@name='cat_docValues']/str[@name='max'][.='testtw']\");\n    \n    assertQ(\"cardinality\", \n            req(\"q\",\"*:*\", \"stats\", \"true\", \"stats.field\", \"{!cardinality=true}cat_docValues\")\n            , \"//lst[@name='cat_docValues']/long[@name='cardinality'][.='3']\");\n    \n  }\n\n","sourceOld":"  // SOLR-6024\n  public void testFieldStatisticsDocValuesAndMultiValued() throws Exception {\n    SolrCore core = h.getCore();\n    \n    // precondition for the test\n    SchemaField catDocValues = core.getLatestSchema().getField(\"cat_docValues\");\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer multivalued\", catDocValues.multiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues fieldtype no longer single valued\", !catDocValues.getType().isMultiValued());\n    assertTrue(\"schema no longer satisfies test requirements: cat_docValues no longer has docValues\", catDocValues.hasDocValues());\n    \n    List<FldType> types = new ArrayList<>();\n    types.add(new FldType(\"id\", ONE_ONE, new SVal('A', 'Z', 4, 4)));\n    types.add(new FldType(\"cat_docValues\",new IRange(2,2),  new SVal('a','z',1, 30)));\n    Doc d1 = createDoc(types);\n    d1.getValues(\"id\").set(0, \"1\");\n    d1.getValues(\"cat_docValues\").set(0, \"test\");\n    d1.getValues(\"cat_docValues\").set(1, \"testtw\");\n    updateJ(toJSON(d1), null);\n    Doc d2 = createDoc(types);\n    d2.getValues(\"id\").set(0, \"2\");\n    d2.getValues(\"cat_docValues\").set(0, \"test\");\n    d2.getValues(\"cat_docValues\").set(1, \"testtt\");\n    updateJ(toJSON(d2), null);\n    \n    assertU(commit());\n    \n    Map<String, String> args = new HashMap<>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"cat_docValues\");\n    args.put(\"indent\", \"true\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n    \n    assertQ(\"test min/max on docValues and multiValued\", req\n        , \"//lst[@name='cat_docValues']/str[@name='min'][.='test']\"\n        , \"//lst[@name='cat_docValues']/str[@name='max'][.='testtw']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["d0c238d519ed8e8343ab723bcc8f1846786e42a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"d0c238d519ed8e8343ab723bcc8f1846786e42a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0c238d519ed8e8343ab723bcc8f1846786e42a6"],"d0c238d519ed8e8343ab723bcc8f1846786e42a6":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}