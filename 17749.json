{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","commits":[{"id":"c3fc0aa9a0ea3688c5b0fc6109449a008563be32","date":1355170793,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtil.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n    req.process(server);\n    \n    SolrCore core = cores.getCore(\"newcore\");\n    File logDir;\n    try {\n      logDir = core.getUpdateHandler().getUpdateLog().getLogDir();\n    } finally {\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a935963e274c8459eec49737e4ed20c6a0a50ada","date":1355242665,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n    req.process(server);\n    \n    SolrCore core = cores.getCore(\"newcore\");\n    File logDir;\n    try {\n      logDir = core.getUpdateHandler().getUpdateLog().getLogDir();\n    } finally {\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtil.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n    req.process(server);\n    \n    SolrCore core = cores.getCore(\"newcore\");\n    File logDir;\n    try {\n      logDir = core.getUpdateHandler().getUpdateLog().getLogDir();\n    } finally {\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n    req.process(server);\n    \n    SolrCore core = cores.getCore(\"newcore\");\n    File logDir;\n    try {\n      logDir = core.getUpdateHandler().getUpdateLog().getLogDir();\n    } finally {\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = core.getUpdateHandler().getUpdateLog().getLogDir();\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n    req.process(server);\n    \n    SolrCore core = cores.getCore(\"newcore\");\n    File logDir;\n    try {\n      logDir = core.getUpdateHandler().getUpdateLog().getLogDir();\n    } finally {\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = core.getUpdateHandler().getUpdateLog().getLogDir();\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = core.getUpdateHandler().getUpdateLog().getLogDir();\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = createTestDirectory();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    \n    File tmp = new File(TEMP_DIR, \"solrtest-\" + getTestClass().getSimpleName() + \"-\" + System.currentTimeMillis());\n    tmp.mkdirs();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = createTestDirectory();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = createTestDirectory();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n\n    SolrCore coreProveIt = cores.getCore(\"collection1\");\n    SolrCore core = cores.getCore(\"newcore\");\n\n    assertTrue(core.getCoreDescriptor().isTransient());\n    assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n    assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n    assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n    File logDir;\n    try {\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    } finally {\n      coreProveIt.close();\n      core.close();\n    }\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = createTestDirectory();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = createTempDir();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\");\n    \n    File newCoreInstanceDir = createTempDir(\"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = createTempDir();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":["7116474e2e390259937401cf928323e0cbc75e60","c3fc0aa9a0ea3688c5b0fc6109449a008563be32","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\");\n    \n    File newCoreInstanceDir = createTempDir(\"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File tmp = createTestDirectory();\n\n    log.info(\"Creating cores underneath {}\", tmp);\n    \n    File dataDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"data\");\n    \n    File newCoreInstanceDir = new File(tmp, this.getTestName()\n        + System.currentTimeMillis() + \"-\" + \"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\").toFile();\n    \n    File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\");\n    \n    File newCoreInstanceDir = createTempDir(\"instance\");\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrClient client = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\").toFile();\n    \n    File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(client);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    client.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrServer server = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\").toFile();\n    \n    File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(server);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    server.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrClient client = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\").toFile();\n    \n    File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n    req.setConfigSet(\"shared\");\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(client);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    client.shutdown();\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrClient client = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\").toFile();\n    \n    File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(client);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    client.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    try (SolrClient client = getSolrAdmin()) {\n\n      File dataDir = createTempDir(\"data\").toFile();\n\n      File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n\n      File instanceDir = new File(cores.getSolrHome());\n      FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n          \"newcore\"));\n\n      CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n      req.setCoreName(\"newcore\");\n      req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n      req.setDataDir(dataDir.getAbsolutePath());\n      req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n      req.setConfigSet(\"shared\");\n\n      // These should be the inverse of defaults.\n      req.setIsLoadOnStartup(false);\n      req.setIsTransient(true);\n      req.process(client);\n\n      // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n      // above.\n      File logDir;\n      try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n           SolrCore core = cores.getCore(\"newcore\")) {\n\n        assertTrue(core.getCoreDescriptor().isTransient());\n        assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n        assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n        assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n        logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n      }\n\n      assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    SolrClient client = getSolrAdmin();\n    \n    File dataDir = createTempDir(\"data\").toFile();\n    \n    File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n    \n    File instanceDir = new File(cores.getSolrHome());\n    FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n        \"newcore\"));\n\n    CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n    req.setCoreName(\"newcore\");\n    req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n    req.setDataDir(dataDir.getAbsolutePath());\n    req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n    req.setConfigSet(\"shared\");\n\n    // These should be the inverse of defaults.\n    req.setIsLoadOnStartup(false);\n    req.setIsTransient(true);\n    req.process(client);\n\n    // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n    // above.\n    File logDir;\n    try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n         SolrCore core = cores.getCore(\"newcore\")) {\n\n      assertTrue(core.getCoreDescriptor().isTransient());\n      assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n      assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n      assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n      logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n    }\n\n    assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n    client.shutdown();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestCoreAdmin#testCustomUlogDir().mjava","sourceNew":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    try (SolrClient client = getSolrAdmin()) {\n\n      File dataDir = createTempDir(\"data\").toFile();\n\n      File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n      cores.getAllowPaths().add(dataDir.toPath()); // Allow the test dir\n      cores.getAllowPaths().add(newCoreInstanceDir.toPath()); // Allow the test dir\n\n      File instanceDir = new File(cores.getSolrHome());\n      FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n          \"newcore\"));\n\n      CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n      req.setCoreName(\"newcore\");\n      req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n      req.setDataDir(dataDir.getAbsolutePath());\n      req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n      req.setConfigSet(\"shared\");\n\n      // These should be the inverse of defaults.\n      req.setIsLoadOnStartup(false);\n      req.setIsTransient(true);\n      req.process(client);\n\n      // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n      // above.\n      File logDir;\n      try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n           SolrCore core = cores.getCore(\"newcore\")) {\n\n        assertTrue(core.getCoreDescriptor().isTransient());\n        assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n        assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n        assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n        logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n      }\n\n      assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testCustomUlogDir() throws Exception {\n    \n    try (SolrClient client = getSolrAdmin()) {\n\n      File dataDir = createTempDir(\"data\").toFile();\n\n      File newCoreInstanceDir = createTempDir(\"instance\").toFile();\n\n      File instanceDir = new File(cores.getSolrHome());\n      FileUtils.copyDirectory(instanceDir, new File(newCoreInstanceDir,\n          \"newcore\"));\n\n      CoreAdminRequest.Create req = new CoreAdminRequest.Create();\n      req.setCoreName(\"newcore\");\n      req.setInstanceDir(newCoreInstanceDir.getAbsolutePath() + File.separator + \"newcore\");\n      req.setDataDir(dataDir.getAbsolutePath());\n      req.setUlogDir(new File(dataDir, \"ulog\").getAbsolutePath());\n      req.setConfigSet(\"shared\");\n\n      // These should be the inverse of defaults.\n      req.setIsLoadOnStartup(false);\n      req.setIsTransient(true);\n      req.process(client);\n\n      // Show that the newly-created core has values for load on startup and transient different than defaults due to the\n      // above.\n      File logDir;\n      try (SolrCore coreProveIt = cores.getCore(\"collection1\");\n           SolrCore core = cores.getCore(\"newcore\")) {\n\n        assertTrue(core.getCoreDescriptor().isTransient());\n        assertFalse(coreProveIt.getCoreDescriptor().isTransient());\n\n        assertFalse(core.getCoreDescriptor().isLoadOnStartup());\n        assertTrue(coreProveIt.getCoreDescriptor().isLoadOnStartup());\n\n        logDir = new File(core.getUpdateHandler().getUpdateLog().getLogDir());\n      }\n\n      assertEquals(new File(dataDir, \"ulog\" + File.separator + \"tlog\").getAbsolutePath(), logDir.getAbsolutePath());\n\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a935963e274c8459eec49737e4ed20c6a0a50ada"],"7116474e2e390259937401cf928323e0cbc75e60":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["e332392bbbdd01cb69ad6a89051f483cda38e15e","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["9818efa55563ddfecdecafbdd43f4bee9f252e7d","7116474e2e390259937401cf928323e0cbc75e60"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a935963e274c8459eec49737e4ed20c6a0a50ada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["2d4e985daefcb892b529223b478c47985fc3c483"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"c3fc0aa9a0ea3688c5b0fc6109449a008563be32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d4e985daefcb892b529223b478c47985fc3c483":["7116474e2e390259937401cf928323e0cbc75e60"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"a935963e274c8459eec49737e4ed20c6a0a50ada":["c3fc0aa9a0ea3688c5b0fc6109449a008563be32"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2d4e985daefcb892b529223b478c47985fc3c483"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["7116474e2e390259937401cf928323e0cbc75e60"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c3fc0aa9a0ea3688c5b0fc6109449a008563be32"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"c3fc0aa9a0ea3688c5b0fc6109449a008563be32":["a935963e274c8459eec49737e4ed20c6a0a50ada"],"2d4e985daefcb892b529223b478c47985fc3c483":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a935963e274c8459eec49737e4ed20c6a0a50ada":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}