{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#countTerms(MultiTermQuery).mjava","commits":[{"id":"2a4965b25e439626b575c2281b39ad875f89d891","date":1321132400,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#countTerms(MultiTermQuery).mjava","pathOld":"/dev/null","sourceNew":"  private int countTerms(MultiTermQuery q) throws Exception {\n    final Terms terms = MultiFields.getTerms(reader, q.getField());\n    if (terms == null)\n      return 0;\n    final TermsEnum termEnum = q.getTermsEnum(terms);\n    assertNotNull(termEnum);\n    int count = 0;\n    BytesRef cur, last = null;\n    while ((cur = termEnum.next()) != null) {\n      count++;\n      if (last != null) {\n        assertTrue(last.compareTo(cur) < 0);\n      }\n      last = new BytesRef(cur);\n    } \n    assertNull(termEnum.next());\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73abbfaed4ad10b621aae7ed584c9c806bcee2de","date":1321150376,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#countTerms(MultiTermQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#countTerms(MultiTermQuery).mjava","sourceNew":"  private int countTerms(MultiTermQuery q) throws Exception {\n    final Terms terms = MultiFields.getTerms(reader, q.getField());\n    if (terms == null)\n      return 0;\n    final TermsEnum termEnum = q.getTermsEnum(terms);\n    assertNotNull(termEnum);\n    int count = 0;\n    BytesRef cur, last = null;\n    while ((cur = termEnum.next()) != null) {\n      count++;\n      if (last != null) {\n        assertTrue(last.compareTo(cur) < 0);\n      }\n      last = new BytesRef(cur);\n    } \n    // LUCENE-3314: the results after next() already returned null are undefined,\n    // assertNull(termEnum.next());\n    return count;\n  }\n\n","sourceOld":"  private int countTerms(MultiTermQuery q) throws Exception {\n    final Terms terms = MultiFields.getTerms(reader, q.getField());\n    if (terms == null)\n      return 0;\n    final TermsEnum termEnum = q.getTermsEnum(terms);\n    assertNotNull(termEnum);\n    int count = 0;\n    BytesRef cur, last = null;\n    while ((cur = termEnum.next()) != null) {\n      count++;\n      if (last != null) {\n        assertTrue(last.compareTo(cur) < 0);\n      }\n      last = new BytesRef(cur);\n    } \n    assertNull(termEnum.next());\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#countTerms(MultiTermQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#countTerms(MultiTermQuery).mjava","sourceNew":"  private int countTerms(MultiTermQuery q) throws Exception {\n    final Terms terms = MultiFields.getTerms(reader, q.getField());\n    if (terms == null)\n      return 0;\n    final TermsEnum termEnum = q.getTermsEnum(terms);\n    assertNotNull(termEnum);\n    int count = 0;\n    BytesRef cur, last = null;\n    while ((cur = termEnum.next()) != null) {\n      count++;\n      if (last != null) {\n        assertTrue(last.compareTo(cur) < 0);\n      }\n      last = BytesRef.deepCopyOf(cur);\n    } \n    // LUCENE-3314: the results after next() already returned null are undefined,\n    // assertNull(termEnum.next());\n    return count;\n  }\n\n","sourceOld":"  private int countTerms(MultiTermQuery q) throws Exception {\n    final Terms terms = MultiFields.getTerms(reader, q.getField());\n    if (terms == null)\n      return 0;\n    final TermsEnum termEnum = q.getTermsEnum(terms);\n    assertNotNull(termEnum);\n    int count = 0;\n    BytesRef cur, last = null;\n    while ((cur = termEnum.next()) != null) {\n      count++;\n      if (last != null) {\n        assertTrue(last.compareTo(cur) < 0);\n      }\n      last = new BytesRef(cur);\n    } \n    // LUCENE-3314: the results after next() already returned null are undefined,\n    // assertNull(termEnum.next());\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#countTerms(MultiTermQuery).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#countTerms(MultiTermQuery).mjava","sourceNew":"  private int countTerms(MultiTermQuery q) throws Exception {\n    final Terms terms = MultiFields.getTerms(reader, q.getField());\n    if (terms == null)\n      return 0;\n    final TermsEnum termEnum = q.getTermsEnum(terms);\n    assertNotNull(termEnum);\n    int count = 0;\n    BytesRef cur, last = null;\n    while ((cur = termEnum.next()) != null) {\n      count++;\n      if (last != null) {\n        assertTrue(last.compareTo(cur) < 0);\n      }\n      last = BytesRef.deepCopyOf(cur);\n    } \n    // LUCENE-3314: the results after next() already returned null are undefined,\n    // assertNull(termEnum.next());\n    return count;\n  }\n\n","sourceOld":"  private int countTerms(MultiTermQuery q) throws Exception {\n    final Terms terms = MultiFields.getTerms(reader, q.getField());\n    if (terms == null)\n      return 0;\n    final TermsEnum termEnum = q.getTermsEnum(terms);\n    assertNotNull(termEnum);\n    int count = 0;\n    BytesRef cur, last = null;\n    while ((cur = termEnum.next()) != null) {\n      count++;\n      if (last != null) {\n        assertTrue(last.compareTo(cur) < 0);\n      }\n      last = BytesRef.deepCopyOf(cur);\n    } \n    // LUCENE-3314: the results after next() already returned null are undefined,\n    // assertNull(termEnum.next());\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a4965b25e439626b575c2281b39ad875f89d891":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73abbfaed4ad10b621aae7ed584c9c806bcee2de":["2a4965b25e439626b575c2281b39ad875f89d891"],"e6e919043fa85ee891123768dd655a98edbbf63c":["73abbfaed4ad10b621aae7ed584c9c806bcee2de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a4965b25e439626b575c2281b39ad875f89d891"],"2a4965b25e439626b575c2281b39ad875f89d891":["73abbfaed4ad10b621aae7ed584c9c806bcee2de"],"73abbfaed4ad10b621aae7ed584c9c806bcee2de":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}