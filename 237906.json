{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + docID + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + docID + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed947d41796fd2096684c439e8a9b69aac940cf","date":1321538339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          docID += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          docID += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + docID + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(docID)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + docID + \" freq=\" + freq);\n          return docID;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n          freq = 1;\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while(true) {\n        if (VERBOSE) System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          if (VERBOSE) {\n            System.out.println(\"    END\");\n          }\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += in.readVInt();\n        } else {\n          final int code = in.readVInt();\n          accum += code >>> 1;\n          if (VERBOSE) System.out.println(\"  docID=\" + accum + \" code=\" + code);\n          if ((code & 1) != 0) {\n            freq = 1;\n          } else {\n            freq = in.readVInt();\n            assert freq > 0;\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            for(int posUpto=0;posUpto<freq;posUpto++) {\n              if (!storePayloads) {\n                in.readVInt();\n              } else {\n                final int posCode = in.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLen = in.readVInt();\n                }\n                in.skipBytes(payloadLen);\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          if (VERBOSE) System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["7b91922b55d15444d554721b352861d028eb8278"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["1ed947d41796fd2096684c439e8a9b69aac940cf","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}