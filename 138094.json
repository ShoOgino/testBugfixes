{"path":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","sourceNew":null,"sourceOld":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b31138e7b06f84b96de212b2102103cb629ee68","date":1272962032,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#readBang(boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readBang(boolean).mjava","sourceNew":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","sourceOld":"  /*** valid comments according to HTML specs\n   <!-- Hello -->\n   <!-- Hello -- -- Hello-->\n   <!---->\n   <!------ Hello -->\n   <!>\n   <!------> Hello -->\n\n   #comments inside of an entity decl:\n   <!ENTITY amp     CDATA \"&#38;\"   -- ampersand, U+0026 ISOnum -->\n\n   Turns out, IE & mozilla don't parse comments correctly.\n   Since this is meant to be a practical stripper, I'll just\n   try and duplicate what the browsers do.\n\n   <!-- (stuff_including_markup)* -->\n   <!FOO (stuff, not including markup) >\n   <! (stuff, not including markup)* >\n\n\n  ***/\n\n  private int readBang(boolean inScript) throws IOException {\n    // at this point, \"<!\" has been read\n    int ret = readComment(inScript);\n    if (ret==MATCH) return MATCH;\n\n    if ((numRead - lastMark) < safeReadAheadLimit || peek() == '>' ) {\n\n      int ch = next();\n      if (ch=='>') return MATCH;\n\n      // if it starts with <! and isn't a comment,\n      // simply read until \">\"\n      //since we did readComment already, it may be the case that we are already deep into the read ahead buffer\n      //so, we may need to abort sooner\n      while ((numRead - lastMark) < safeReadAheadLimit) {\n        ch = next();\n        if (ch=='>') {\n          return MATCH;\n        }\n        else if (ch<0) {\n          return MISMATCH;\n        }\n      }\n    }\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b31138e7b06f84b96de212b2102103cb629ee68":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b31138e7b06f84b96de212b2102103cb629ee68"]},"commit2Childs":{"9b31138e7b06f84b96de212b2102103cb629ee68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["9b31138e7b06f84b96de212b2102103cb629ee68"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}