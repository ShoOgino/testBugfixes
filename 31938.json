{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualShingle(Analyzer,String,String[]).mjava","commits":[{"id":"d3adb86d40c10078a2d59c16020be3796dd18a8c","date":1264738067,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualShingle(Analyzer,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertEqualShingle\n    (Analyzer analyzer, String text, String[] expected) throws Exception {\n    TokenStream stream = analyzer.tokenStream(\"bogus\", new StringReader(text));\n    stream.reset();\n    TermAttribute termAtt = stream.addAttribute(TermAttribute.class);\n    int termNum = 0;\n    while (stream.incrementToken()) {\n      assertTrue(\"Extra output term(s), starting with '\"\n                 + new String(termAtt.termBuffer(), 0, termAtt.termLength()) + \"'\",\n                 termNum < expected.length);\n      assertEquals(\"Mismatch in output term # \" + termNum + \" - \", \n                   expected[termNum],\n                   new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      ++termNum;\n    }\n    assertEquals(\"Too few output terms\", expected.length, termNum);\n    stream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualShingle(Analyzer,String,String[]).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#assertEqualShingle(Analyzer,String,String[]).mjava","sourceNew":"  private void assertEqualShingle\n    (Analyzer analyzer, String text, String[] expected) throws Exception {\n    TokenStream stream = analyzer.tokenStream(\"bogus\", new StringReader(text));\n    stream.reset();\n    TermAttribute termAtt = stream.addAttribute(TermAttribute.class);\n    int termNum = 0;\n    while (stream.incrementToken()) {\n      assertTrue(\"Extra output term(s), starting with '\"\n                 + new String(termAtt.termBuffer(), 0, termAtt.termLength()) + \"'\",\n                 termNum < expected.length);\n      assertEquals(\"Mismatch in output term # \" + termNum + \" - \", \n                   expected[termNum],\n                   new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      ++termNum;\n    }\n    assertEquals(\"Too few output terms\", expected.length, termNum);\n    stream.close();\n  }\n\n","sourceOld":"  private void assertEqualShingle\n    (Analyzer analyzer, String text, String[] expected) throws Exception {\n    TokenStream stream = analyzer.tokenStream(\"bogus\", new StringReader(text));\n    stream.reset();\n    TermAttribute termAtt = stream.addAttribute(TermAttribute.class);\n    int termNum = 0;\n    while (stream.incrementToken()) {\n      assertTrue(\"Extra output term(s), starting with '\"\n                 + new String(termAtt.termBuffer(), 0, termAtt.termLength()) + \"'\",\n                 termNum < expected.length);\n      assertEquals(\"Mismatch in output term # \" + termNum + \" - \", \n                   expected[termNum],\n                   new String(termAtt.termBuffer(), 0, termAtt.termLength()));\n      ++termNum;\n    }\n    assertEquals(\"Too few output terms\", expected.length, termNum);\n    stream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3adb86d40c10078a2d59c16020be3796dd18a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d3adb86d40c10078a2d59c16020be3796dd18a8c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3adb86d40c10078a2d59c16020be3796dd18a8c"],"d3adb86d40c10078a2d59c16020be3796dd18a8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}