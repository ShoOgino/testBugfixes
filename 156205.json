{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToSortableBytes(long,byte[],int).mjava","commits":[{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToSortableBytes(long,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Encodes an long {@code value} such that unsigned byte order comparison\n   * is consistent with {@link Long#compare(long, long)}\n   * @see #sortableBytesToLong(byte[], int)\n   */\n  public static void longToSortableBytes(long value, byte[] result, int offset) {\n    // Flip the sign bit so negative longs sort before positive longs:\n    value ^= 0x8000000000000000L;\n    result[offset] =   (byte) (value >> 56);\n    result[offset+1] = (byte) (value >> 48);\n    result[offset+2] = (byte) (value >> 40);\n    result[offset+3] = (byte) (value >> 32);\n    result[offset+4] = (byte) (value >> 24);\n    result[offset+5] = (byte) (value >> 16);\n    result[offset+6] = (byte) (value >> 8);\n    result[offset+7] = (byte) value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#longToSortableBytes(long,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Encodes an long {@code value} such that unsigned byte order comparison\n   * is consistent with {@link Long#compare(long, long)}\n   * @see #sortableBytesToLong(byte[], int)\n   */\n  public static void longToSortableBytes(long value, byte[] result, int offset) {\n    // Flip the sign bit so negative longs sort before positive longs:\n    value ^= 0x8000000000000000L;\n    result[offset] =   (byte) (value >> 56);\n    result[offset+1] = (byte) (value >> 48);\n    result[offset+2] = (byte) (value >> 40);\n    result[offset+3] = (byte) (value >> 32);\n    result[offset+4] = (byte) (value >> 24);\n    result[offset+5] = (byte) (value >> 16);\n    result[offset+6] = (byte) (value >> 8);\n    result[offset+7] = (byte) value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}