{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","sourceNew":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","sourceNew":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","sourceNew":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterForceMerge#testPartialMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOptimize#testOptimizeMaxNumSegments().mjava","sourceNew":"  public void testPartialMerge() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.forceMerge(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeMaxNumSegments() throws IOException {\n\n    MockDirectoryWrapper dir = newDirectory();\n\n    final Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", StringField.TYPE_UNSTORED));\n    final int incrMin = TEST_NIGHTLY ? 15 : 40;\n    for(int numDocs=10;numDocs<500;numDocs += _TestUtil.nextInt(random, incrMin, 5*incrMin)) {\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(5);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(2).setMergePolicy(\n            ldmp));\n      for(int j=0;j<numDocs;j++)\n        writer.addDocument(doc);\n      writer.close();\n\n      SegmentInfos sis = new SegmentInfos();\n      sis.read(dir);\n      final int segCount = sis.size();\n\n      ldmp = new LogDocMergePolicy();\n      ldmp.setMergeFactor(5);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(ldmp));\n      writer.optimize(3);\n      writer.close();\n\n      sis = new SegmentInfos();\n      sis.read(dir);\n      final int optSegCount = sis.size();\n\n      if (segCount < 3)\n        assertEquals(segCount, optSegCount);\n      else\n        assertEquals(3, optSegCount);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","cca56866c19997e28ef073622656669c15210540"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cca56866c19997e28ef073622656669c15210540"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cca56866c19997e28ef073622656669c15210540"],"cca56866c19997e28ef073622656669c15210540":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","cca56866c19997e28ef073622656669c15210540"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cca56866c19997e28ef073622656669c15210540":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}