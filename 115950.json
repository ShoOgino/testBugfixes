{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS, DocCollection::isFullyActive);\n    cluster.createCollection(\"delayed\", 1, 1, \"config\", new HashMap<>());\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27b43f9a8cc600a073ced9342cb6882853856049","date":1463221077,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","sourceNew":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS, DocCollection::isFullyActive);\n    cluster.createCollection(\"delayed\", 1, 1, \"config\", new HashMap<>());\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","date":1532119025,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","sourceNew":"  @Test\n  // commented 20-July-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","sourceNew":"  @Test\n  // commented 20-July-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":"  @Test\n  // commented 20-July-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testCanWaitForNonexistantCollection().mjava","sourceNew":"  @Test\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                                              (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n      .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","sourceOld":"  @Test\n  // commented 20-July-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testCanWaitForNonexistantCollection() throws Exception {\n\n    Future<Boolean> future = waitInBackground(\"delayed\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));\n\n    CollectionAdminRequest.createCollection(\"delayed\", \"config\", 1, 1)\n        .processAndWait(cluster.getSolrClient(), MAX_WAIT_TIMEOUT);\n\n    assertTrue(\"waitForState was not triggered by collection creation\", future.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b366e7dd3172289251a86be96031af4002cd19c":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27b43f9a8cc600a073ced9342cb6882853856049"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d470c8182e92b264680e34081b75e70a9f2b3c89","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27b43f9a8cc600a073ced9342cb6882853856049":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d470c8182e92b264680e34081b75e70a9f2b3c89","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["7b366e7dd3172289251a86be96031af4002cd19c"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"27b43f9a8cc600a073ced9342cb6882853856049":["0ad30c6a479e764150a3316e57263319775f1df2"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["27b43f9a8cc600a073ced9342cb6882853856049"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}