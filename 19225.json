{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","commits":[{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"      private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"      private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","pathOld":"/dev/null","sourceNew":"      private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#updateSlice(ClusterState,String,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","sourceNew":"      private ClusterState updateSlice(ClusterState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new ClusterState(state.getLiveNodes(), newStates);\n      }\n\n","sourceOld":"      private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#updateSlice(CloudState,String,Slice).mjava","sourceNew":null,"sourceOld":"      private CloudState updateSlice(CloudState state, String collection, Slice slice) {\n        \n        final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n        newStates.putAll(state.getCollectionStates());\n        \n        if (!newStates.containsKey(collection)) {\n          newStates.put(collection, new LinkedHashMap<String,Slice>());\n        }\n        \n        final Map<String, Slice> slices = newStates.get(collection);\n        if (!slices.containsKey(slice.getName())) {\n          slices.put(slice.getName(), slice);\n        } else {\n          final Map<String,ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n          final Slice existingSlice = slices.get(slice.getName());\n          shards.putAll(existingSlice.getShards());\n          //XXX preserve existing leader\n          for(Entry<String, ZkNodeProps> edit: slice.getShards().entrySet()) {\n            if(existingSlice.getShards().get(edit.getKey())!=null && existingSlice.getShards().get(edit.getKey()).containsKey(ZkStateReader.LEADER_PROP)) {\n              HashMap<String, String> newProps = new HashMap<String,String>();\n              newProps.putAll(edit.getValue().getProperties());\n              newProps.put(ZkStateReader.LEADER_PROP, existingSlice.getShards().get(edit.getKey()).get(ZkStateReader.LEADER_PROP));\n              shards.put(edit.getKey(), new ZkNodeProps(newProps));\n            } else {\n              shards.put(edit.getKey(), edit.getValue());\n            }\n          }\n          final Slice updatedSlice = new Slice(slice.getName(), shards);\n          slices.put(slice.getName(), updatedSlice);\n        }\n        return new CloudState(state.getLiveNodes(), newStates);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d0492616b11aace806d95ec9df44f57a60160bf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0492616b11aace806d95ec9df44f57a60160bf7","3f767f8c99eaedb984df754fe61f21c5de260f94"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0492616b11aace806d95ec9df44f57a60160bf7"],"d0492616b11aace806d95ec9df44f57a60160bf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d0492616b11aace806d95ec9df44f57a60160bf7"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["d0492616b11aace806d95ec9df44f57a60160bf7","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd92b8bcc88e969302510acf77bd6970da3994c4","d0492616b11aace806d95ec9df44f57a60160bf7","8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"d0492616b11aace806d95ec9df44f57a60160bf7":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","8fd5be977c105554c6a7b68afcdbc511439723ab"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}