{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = IndexReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newField(\"field\", \"go\", TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a6fb8d96326bf19e9a1f5516073e9dc7415fa5e","date":1342830506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newDirectory();\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84","date":1345973500,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      mergePolicy.setNoCFSRatio(1); // This test expects all of its segments to be in CFS\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      LogMergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ad5831ce5311e0afb145f4ffafb431feb9ac224","date":1383743871,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n      assertTrue(files.contains(\"_0.cfs\"));\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add9d1cdaebd937819e13a62f00d9bf55bfe0833","date":1383844470,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<String>(Arrays.asList(dir.listAll()));\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        // RAMDir won't have a write.lock, but fs dirs will:\n        files.remove(\"write.lock\");\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = Arrays.asList(dir.listAll());\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0040a9679726b169a607713c6d05bbf45210a2fe","date":1383871688,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<String>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<String>(Arrays.asList(dir.listAll()));\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        // RAMDir won't have a write.lock, but fs dirs will:\n        files.remove(\"write.lock\");\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<String>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.shutdown();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.shutdown();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(mergePolicy).setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.shutdown();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.shutdown();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      Directory dir = newMockDirectory(); // relies on windows semantics\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertEquals(files.toString(), files.size(), 4);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertTrue(files.contains(\"segments.gen\"));\n        assertEquals(files.toString(), files.size(), 5);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41307b73b6c5ab4779490d54afb6393c80ba5a3b","date":1412433761,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertEquals(files.toString(), files.size(), 4);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertEquals(files.toString(), files.size(), 4);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertEquals(files.toString(), files.size(), 4);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertEquals(files.toString(), files.size(), 4);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22989c36ff05c657df26dd3377b37c9ad35859bc","date":1424477375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(files.contains(\"segments_1\"));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n        assertEquals(files.toString(), files.size(), 4);\n      } else {\n        // this is an NRT reopen - no segments files yet\n\n        assertEquals(files.toString(), files.size(), 3);\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      assumeFalse(\"test directly deletes files\", TestUtil.hasVirusChecker(path));\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open?\n      FSDirectory dir = new NIOFSDirectory(indexPath);\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(files.contains(\"segments_1\"));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open?\n      FSDirectory dir = new NIOFSDirectory(indexPath);\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      assumeFalse(\"test directly deletes files\", TestUtil.hasVirusChecker(path));\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open?\n      FSDirectory dir = new NIOFSDirectory(indexPath);\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open?\n      FSDirectory dir = new NIOFSDirectory(indexPath);\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(files.contains(\"segments_1\"));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open?\n      FSDirectory dir = new NIOFSDirectory(indexPath);\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(files.contains(\"segments_1\"));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open?\n      FSDirectory dir = new NIOFSDirectory(indexPath);\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      MockDirectoryWrapper dir = newMockDirectory(); // relies on windows semantics\n      dir.setEnableVirusScanner(false); // but ensures files are actually deleted\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      List<String> files = new ArrayList<>(Arrays.asList(dir.listAll()));\n\n      // RAMDir won't have a write.lock, but fs dirs will:\n      files.remove(\"write.lock\");\n\n      assertTrue(files.contains(\"_0.cfs\"));\n      assertTrue(files.contains(\"_0.cfe\"));\n      assertTrue(files.contains(\"_0.si\"));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(files.contains(\"segments_1\"));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(files.contains(\"segments_1\"));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n      files = Arrays.asList(dir.listAll());\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(files.contains(\"_0.cfs\"));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      files = Arrays.asList(dir.listAll());\n      // r still holds this file open\n      assertTrue(files.contains(\"_0.cfs\"));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      } else {\n        // now writer can remove it\n        w.deleteUnusedFiles();\n        files = Arrays.asList(dir.listAll());\n        assertFalse(files.contains(\"_0.cfs\"));\n      }\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600462e41be5285d30e60fad2f104c67510b3860","date":1454846650,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open?\n      FSDirectory dir = new NIOFSDirectory(indexPath);\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open?\n      FSDirectory dir = new NIOFSDirectory(indexPath);\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"336a0bd816238e31c31e191e1b046e974f7ae5fe","date":1482358070,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    assumeWorkingMMapOnWindows();\n    \n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    assumeWorkingMMapOnWindows();\n    \n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    assumeWorkingMMapOnWindows();\n\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n\n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    assumeWorkingMMapOnWindows();\n    \n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    assumeWorkingMMapOnWindows();\n    \n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    assumeWorkingMMapOnWindows();\n\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n\n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteUnusedFiles().mjava","sourceNew":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    assumeWorkingMMapOnWindows();\n\n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n\n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDeleteUnusedFiles() throws Exception {\n    assumeFalse(\"test relies on exact filenames\", Codec.getDefault() instanceof SimpleTextCodec);\n    assumeWorkingMMapOnWindows();\n    \n    for(int iter=0;iter<2;iter++) {\n      // relies on windows semantics\n      Path path = createTempDir();\n      FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n      Path indexPath = new FilterPath(path, fs);\n\n      // NOTE: on Unix, we cannot use MMapDir, because WindowsFS doesn't see/think it keeps file handles open.  Yet, on Windows, we MUST use\n      // MMapDir because the windows OS will in fact prevent file deletion for us, and fails otherwise:\n      FSDirectory dir;\n      if (Constants.WINDOWS) {\n        dir = new MMapDirectory(indexPath);\n      } else {\n        dir = new NIOFSDirectory(indexPath);\n      }\n\n      MergePolicy mergePolicy = newLogMergePolicy(true);\n      \n      // This test expects all of its segments to be in CFS\n      mergePolicy.setNoCFSRatio(1.0);\n      mergePolicy.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n      IndexWriter w = new IndexWriter(\n          dir,\n          newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMergePolicy(mergePolicy)\n            .setUseCompoundFile(true)\n      );\n      Document doc = new Document();\n      doc.add(newTextField(\"field\", \"go\", Field.Store.NO));\n      w.addDocument(doc);\n      DirectoryReader r;\n      if (iter == 0) {\n        // use NRT\n        r = w.getReader();\n      } else {\n        // don't use NRT\n        w.commit();\n        r = DirectoryReader.open(dir);\n      }\n\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfe\")));\n      assertTrue(Files.exists(indexPath.resolve(\"_0.si\")));\n      if (iter == 1) {\n        // we run a full commit so there should be a segments file etc.\n        assertTrue(Files.exists(indexPath.resolve(\"segments_1\")));\n      } else {\n        // this is an NRT reopen - no segments files yet\n        assertFalse(Files.exists(indexPath.resolve(\"segments_1\")));\n      }\n      w.addDocument(doc);\n      w.forceMerge(1);\n      if (iter == 1) {\n        w.commit();\n      }\n      IndexReader r2 = DirectoryReader.openIfChanged(r);\n      assertNotNull(r2);\n      assertTrue(r != r2);\n\n      // NOTE: here we rely on \"Windows\" behavior, ie, even\n      // though IW wanted to delete _0.cfs since it was\n      // merged away, because we have a reader open\n      // against this file, it should still be here:\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      // forceMerge created this\n      //assertTrue(files.contains(\"_2.cfs\"));\n      w.deleteUnusedFiles();\n\n      // r still holds this file open\n      assertTrue(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      //assertTrue(files.contains(\"_2.cfs\"));\n\n      r.close();\n      if (iter == 0) {\n        // on closing NRT reader, it calls writer.deleteUnusedFiles\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      } else {\n        // now FSDir can remove it\n        dir.deletePendingFiles();\n        assertFalse(Files.exists(indexPath.resolve(\"_0.cfs\")));\n      }\n\n      w.close();\n      r2.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41307b73b6c5ab4779490d54afb6393c80ba5a3b":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["22989c36ff05c657df26dd3377b37c9ad35859bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4ad5831ce5311e0afb145f4ffafb431feb9ac224":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","1a6fb8d96326bf19e9a1f5516073e9dc7415fa5e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","600462e41be5285d30e60fad2f104c67510b3860"],"600462e41be5285d30e60fad2f104c67510b3860":["5a207d19eac354d649c3f0e2cce070017c78125e"],"9bb9a29a5e71a90295f175df8919802993142c9a":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","41307b73b6c5ab4779490d54afb6393c80ba5a3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","1a6fb8d96326bf19e9a1f5516073e9dc7415fa5e"],"336a0bd816238e31c31e191e1b046e974f7ae5fe":["600462e41be5285d30e60fad2f104c67510b3860"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0040a9679726b169a607713c6d05bbf45210a2fe"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["22989c36ff05c657df26dd3377b37c9ad35859bc","b470f36a9372c97283360b1304eacbde22df6c0d"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["336a0bd816238e31c31e191e1b046e974f7ae5fe"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"0040a9679726b169a607713c6d05bbf45210a2fe":["add9d1cdaebd937819e13a62f00d9bf55bfe0833"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["600462e41be5285d30e60fad2f104c67510b3860","336a0bd816238e31c31e191e1b046e974f7ae5fe"],"add9d1cdaebd937819e13a62f00d9bf55bfe0833":["4ad5831ce5311e0afb145f4ffafb431feb9ac224"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84":["1a6fb8d96326bf19e9a1f5516073e9dc7415fa5e"],"b470f36a9372c97283360b1304eacbde22df6c0d":["22989c36ff05c657df26dd3377b37c9ad35859bc","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["9bb9a29a5e71a90295f175df8919802993142c9a"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"1a6fb8d96326bf19e9a1f5516073e9dc7415fa5e":["04f07771a2a7dd3a395700665ed839c3dae2def2"]},"commit2Childs":{"41307b73b6c5ab4779490d54afb6393c80ba5a3b":["9bb9a29a5e71a90295f175df8919802993142c9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["600462e41be5285d30e60fad2f104c67510b3860"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"4ad5831ce5311e0afb145f4ffafb431feb9ac224":["add9d1cdaebd937819e13a62f00d9bf55bfe0833"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","1a6fb8d96326bf19e9a1f5516073e9dc7415fa5e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"600462e41be5285d30e60fad2f104c67510b3860":["dd75f58072bba84066e89d61bd7028de1bd5b632","336a0bd816238e31c31e191e1b046e974f7ae5fe","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"9bb9a29a5e71a90295f175df8919802993142c9a":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"336a0bd816238e31c31e191e1b046e974f7ae5fe":["fe39f1a106531207c028defebbc9eb5bb489ac50","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["dd75f58072bba84066e89d61bd7028de1bd5b632"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"0040a9679726b169a607713c6d05bbf45210a2fe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"add9d1cdaebd937819e13a62f00d9bf55bfe0833":["0040a9679726b169a607713c6d05bbf45210a2fe"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["41307b73b6c5ab4779490d54afb6393c80ba5a3b","9bb9a29a5e71a90295f175df8919802993142c9a"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["4ad5831ce5311e0afb145f4ffafb431feb9ac224"],"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84":["05a14b2611ead08655a2b2bdc61632eb31316e57","088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["5a207d19eac354d649c3f0e2cce070017c78125e","6bfe104fc023fadc9e709f8d17403d2cc61133fe","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"1a6fb8d96326bf19e9a1f5516073e9dc7415fa5e":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","05a14b2611ead08655a2b2bdc61632eb31316e57","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}