{"path":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"/dev/null","sourceNew":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":null,"sourceOld":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","sourceOld":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"/dev/null","sourceNew":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a3ee7c72e7539c6ad4b8494808b7d64c210febf","date":1269122965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","sourceOld":"  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cfda7a34b343b7182961859ca4184ac223d5181","date":1287362130,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8cfda7a34b343b7182961859ca4184ac223d5181":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["8cfda7a34b343b7182961859ca4184ac223d5181","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf","8cfda7a34b343b7182961859ca4184ac223d5181"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["8cfda7a34b343b7182961859ca4184ac223d5181","8cfda7a34b343b7182961859ca4184ac223d5181"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf","8cfda7a34b343b7182961859ca4184ac223d5181"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"8cfda7a34b343b7182961859ca4184ac223d5181":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["8cfda7a34b343b7182961859ca4184ac223d5181","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}