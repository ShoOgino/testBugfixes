{"path":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = FSDirectory.open(indexDir);\n    MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, IOContext.DEFAULT));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, IOContext.DEFAULT));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir, true);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectory().mjava","sourceNew":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","sourceOld":"  public void testRAMDirectory () throws IOException {\n    \n    Directory dir = newFSDirectory(indexDir);\n    MockDirectoryWrapper ramDir = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n    \n    // close the underlaying directory\n    dir.close();\n    \n    // Check size\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    // open reader to test document count\n    IndexReader reader = IndexReader.open(ramDir);\n    assertEquals(docsToAdd, reader.numDocs());\n    \n    // open search zo check if all doc's are there\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // search for all documents\n    for (int i = 0; i < docsToAdd; i++) {\n      Document doc = searcher.doc(i);\n      assertTrue(doc.getField(\"content\") != null);\n    }\n\n    // cleanup\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["53a31399f2471493d67b19a95c028a74e0113b6a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a05409176bd65129d67a785ee70e881e238a9aef","53a31399f2471493d67b19a95c028a74e0113b6a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ddc4c914be86e34b54f70023f45a60fa7f04e929","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a05409176bd65129d67a785ee70e881e238a9aef"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a05409176bd65129d67a785ee70e881e238a9aef":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ddc4c914be86e34b54f70023f45a60fa7f04e929","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["790e1fde4caa765b3faaad3fbcd25c6973450336","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["790e1fde4caa765b3faaad3fbcd25c6973450336","b6f9be74ca7baaef11857ad002cad40419979516"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","29ef99d61cda9641b6250bf9567329a6e65f901d","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a05409176bd65129d67a785ee70e881e238a9aef":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}