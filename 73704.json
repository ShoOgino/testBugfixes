{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","commits":[{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final String[] vals = new String[]{ String.valueOf(Integer.MIN_VALUE), \n                                        \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n                                        String.valueOf(Integer.MAX_VALUE), String.valueOf(Long.MAX_VALUE)};\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSort(r.replace(\"*\",\"number\"), vals);\n      // TODO: test some randomly generated (then sorted) arrays (with dups and/or missing values)\n\n      doTestIntPointFunctionQuery(r.replace(\"*\",\"number\"), \"long\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final String[] vals = new String[]{ String.valueOf(Integer.MIN_VALUE), \n                                        \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n                                        String.valueOf(Integer.MAX_VALUE), String.valueOf(Long.MAX_VALUE)};\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSort(r.replace(\"*\",\"number\"), vals);\n      // TODO: test some randomly generated (then sorted) arrays (with dups and/or missing values)\n\n      doTestIntPointFunctionQuery(r.replace(\"*\",\"number\"), \"long\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","date":1496877670,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final String[] vals = new String[]{ String.valueOf(Integer.MIN_VALUE), \n                                        \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n                                        String.valueOf(Integer.MAX_VALUE), String.valueOf(Long.MAX_VALUE)};\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSort(r.replace(\"*\",\"number\"), vals);\n      // TODO: test some randomly generated (then sorted) arrays (with dups and/or missing values)\n\n      doTestIntPointFunctionQuery(r.replace(\"*\",\"number\"), \"long\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final String[] vals = new String[]{ String.valueOf(Integer.MIN_VALUE), \n                                        \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n                                        String.valueOf(Integer.MAX_VALUE), String.valueOf(Long.MAX_VALUE)};\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSort(r.replace(\"*\",\"number\"), vals);\n      // TODO: test some randomly generated (then sorted) arrays (with dups and/or missing values)\n\n      doTestIntPointFunctionQuery(r.replace(\"*\",\"number\"), \"long\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final String[] vals = new String[]{ String.valueOf(Integer.MIN_VALUE), \n                                        \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n                                        String.valueOf(Integer.MAX_VALUE), String.valueOf(Long.MAX_VALUE)};\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSort(r.replace(\"*\",\"number\"), vals);\n      // TODO: test some randomly generated (then sorted) arrays (with dups and/or missing values)\n\n      doTestIntPointFunctionQuery(r.replace(\"*\",\"number\"), \"long\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final String[] vals = new String[]{ String.valueOf(Integer.MIN_VALUE), \n                                        \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n                                        String.valueOf(Integer.MAX_VALUE), String.valueOf(Long.MAX_VALUE)};\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSort(r.replace(\"*\",\"number\"), vals);\n      // TODO: test some randomly generated (then sorted) arrays (with dups and/or missing values)\n\n      doTestIntPointFunctionQuery(r.replace(\"*\",\"number\"), \"long\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldSortError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(r.replace(\"*\",\"number\"), \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", \"4234\");\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\");\n      doTestPointFieldSortError(field, \"multivalued\", \"4234\", \"66666666\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\");\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", \"4234\", \"66666666\");\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestIntPointFunctionQuery(field, \"long\");\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n    \n    // no docvalues\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    // multivalued, no docvalues\n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_ns_mv\", \n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_sml\")) {\n                                  \n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    // multivalued, w/ docValues\n    for (String r : Arrays.asList(\"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n\n      // NOTE: only testing one value per doc here, but TestMinMaxOnMultiValuedField\n      // covers this in more depth\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n\n      // value source (w/o field(...,min|max)) usuage should still error...\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testLongPointFieldSortAndFunction().mjava","sourceNew":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n    \n    // no docvalues\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    // multivalued, no docvalues\n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_ns_mv\", \n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_sml\")) {\n                                  \n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    // multivalued, w/ docValues\n    for (String r : Arrays.asList(\"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n\n      // NOTE: only testing one value per doc here, but TestMinMaxOnMultiValuedField\n      // covers this in more depth\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n\n      // value source (w/o field(...,min|max)) usuage should still error...\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","sourceOld":"  @Test\n  public void testLongPointFieldSortAndFunction() throws Exception {\n    final SortedSet<String> regexToTest = dynFieldRegexesForType(LongPointField.class);\n    final List<Long> vals = Arrays.asList((long)Integer.MIN_VALUE, \n                                          1L, 2L, 3L, 4L, 5L, 6L, 7L, \n                                          (long)Integer.MAX_VALUE, Long.MAX_VALUE);\n    final List<Long> randomLongs = getRandomLongs(10, false);\n    final List<Long> randomLongsMissing = getRandomLongs(10, true);\n    \n    for (String r : Arrays.asList(\"*_p_l\", \"*_p_l_dv\", \"*_p_l_dv_ns\", \"*_p_l_ni_dv\",\n                                  \"*_p_l_ni_dv_ns\", \"*_p_l_ni_ns_dv\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongs);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_smf\", \"*_p_l_dv_smf\", \"*_p_l_ni_dv_smf\",\n                                  \"*_p_l_sml\", \"*_p_l_dv_sml\", \"*_p_l_ni_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSort(field, vals);\n      doTestPointFieldSort(field, randomLongsMissing);\n      doTestLongPointFunctionQuery(field);\n    }\n\n    for (String r : Arrays.asList(\"*_p_l_ni\", \"*_p_l_ni_ns\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"w/o docValues\", toStringArray(getRandomLongs(1, false)));\n    }\n    \n    for (String r : Arrays.asList(\"*_p_l_mv\", \"*_p_l_ni_mv\", \"*_p_l_ni_mv_dv\", \"*_p_l_ni_dv_ns_mv\",\n                                  \"*_p_l_ni_ns_mv\", \"*_p_l_dv_ns_mv\", \"*_p_l_mv_dv\",\n                                  \"*_p_l_mv_smf\", \"*_p_l_mv_dv_smf\", \"*_p_l_ni_mv_dv_smf\",\n                                  \"*_p_l_mv_sml\", \"*_p_l_mv_dv_sml\", \"*_p_l_ni_mv_dv_sml\")) {\n      assertTrue(r, regexToTest.remove(r));\n      String field = r.replace(\"*\", \"number\");\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      int numValues = 2 * RANDOM_MULTIPLIER;\n      doTestPointFieldSortError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(1, false)));\n      doTestPointFieldFunctionQueryError(field, \"multivalued\", toStringArray(getRandomLongs(numValues, false)));\n    }\n    \n    assertEquals(\"Missing types in the test\", Collections.<String>emptySet(), regexToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["17e844d4f9ba6804f10747d7e51e83a9a8868c94","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["79900e89f08cc17c4bcf49789dd61a2236ee7840","b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"28288370235ed02234a64753cdbf0c6ec096304a":["79900e89f08cc17c4bcf49789dd61a2236ee7840","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["b94236357aaa22b76c10629851fe4e376e0cea82","aaf90fc29510e72665ac7934f34c3d1c25efad64","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"28288370235ed02234a64753cdbf0c6ec096304a":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","79900e89f08cc17c4bcf49789dd61a2236ee7840"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["17e844d4f9ba6804f10747d7e51e83a9a8868c94","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}