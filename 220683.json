{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#indexDocs(String,boolean).mjava","commits":[{"id":"076d58da25128e8a4c511abf07c5d86c4ebddcbf","date":1523546428,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#indexDocs(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#indexDocs(String).mjava","sourceNew":"  private int indexDocs(String collectionName, boolean useUUID) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return 0;\n    }\n\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", ((useUUID == true) ? java.util.UUID.randomUUID().toString() : i));\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n    client.add(collectionName, docs); //batch\n    client.commit(collectionName);\n\n    log.info(\"Indexed {} docs to collection: {}\", numDocs, collectionName);\n\n    return numDocs;\n  }\n\n","sourceOld":"  private void indexDocs(String collectionName) throws Exception {\n    Random random = new Random(docsSeed);// use a constant seed for the whole test run so that we can easily re-index.\n    int numDocs = random.nextInt(100);\n    if (numDocs == 0) {\n      log.info(\"Indexing ZERO test docs\");\n      return;\n    }\n    List<SolrInputDocument> docs = new ArrayList<>(numDocs);\n    for (int i=0; i<numDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      doc.addField(\"shard_s\", \"shard\" + (1 + random.nextInt(NUM_SHARDS))); // for implicit router\n      docs.add(doc);\n    }\n    CloudSolrClient client = cluster.getSolrClient();\n    client.add(collectionName, docs);// batch\n    client.commit(collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"076d58da25128e8a4c511abf07c5d86c4ebddcbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["076d58da25128e8a4c511abf07c5d86c4ebddcbf"]},"commit2Childs":{"076d58da25128e8a4c511abf07c5d86c4ebddcbf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["076d58da25128e8a4c511abf07c5d86c4ebddcbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}