{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#testOperationsFromFile().mjava","commits":[{"id":"4e1fc6bbd33946af05bcccef3ff80feed7b21aa0","date":1528277979,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#testOperationsFromFile().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOperationsFromFile() throws IOException {\n    setupStrategy();\n    final Iterator<SpatialTestData> indexedSpatialData = getSampleData( \"states-poly.txt\");\n    final List<Shape> indexedShapes = new ArrayList<>();\n    while(indexedSpatialData.hasNext()) {\n      indexedShapes.add(indexedSpatialData.next().shape);\n    }\n    final Iterator<SpatialTestData> querySpatialData = getSampleData( \"states-bbox.txt\");\n    final List<Shape> queryShapes = new ArrayList<>();\n    while(querySpatialData.hasNext()) {\n      queryShapes.add(querySpatialData.next().shape);\n      queryShapes.add(randomQueryShape());\n    }\n    testOperation(SpatialOperation.Intersects, indexedShapes, queryShapes, random().nextBoolean());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#testOperationsFromFile().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOperationsFromFile() throws IOException {\n    setupStrategy();\n    final Iterator<SpatialTestData> indexedSpatialData = getSampleData( \"states-poly.txt\");\n    final List<Shape> indexedShapes = new ArrayList<>();\n    while(indexedSpatialData.hasNext()) {\n      indexedShapes.add(indexedSpatialData.next().shape);\n    }\n    final Iterator<SpatialTestData> querySpatialData = getSampleData( \"states-bbox.txt\");\n    final List<Shape> queryShapes = new ArrayList<>();\n    while(querySpatialData.hasNext()) {\n      queryShapes.add(querySpatialData.next().shape);\n      queryShapes.add(randomQueryShape());\n    }\n    testOperation(SpatialOperation.Intersects, indexedShapes, queryShapes, random().nextBoolean());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#testOperationsFromFile().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOperationsFromFile() throws IOException {\n    setupStrategy();\n    final Iterator<SpatialTestData> indexedSpatialData = getSampleData( \"states-poly.txt\");\n    final List<Shape> indexedShapes = new ArrayList<>();\n    while(indexedSpatialData.hasNext()) {\n      indexedShapes.add(indexedSpatialData.next().shape);\n    }\n    final Iterator<SpatialTestData> querySpatialData = getSampleData( \"states-bbox.txt\");\n    final List<Shape> queryShapes = new ArrayList<>();\n    while(querySpatialData.hasNext()) {\n      queryShapes.add(querySpatialData.next().shape);\n      queryShapes.add(randomQueryShape());\n    }\n    testOperation(SpatialOperation.Intersects, indexedShapes, queryShapes, random().nextBoolean());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#testOperationsFromFile().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#testOperationsFromFile().mjava","sourceNew":"  @Test\n  public void testOperationsFromFile() throws IOException {\n    setupStrategy();\n    final Iterator<SpatialTestData> indexedSpatialData = getSampleData( \"states-poly.txt\");\n    final List<Shape> indexedShapes = new ArrayList<>();\n    while(indexedSpatialData.hasNext()) {\n      indexedShapes.add(indexedSpatialData.next().shape);\n    }\n    final Iterator<SpatialTestData> querySpatialData = getSampleData( \"states-bbox.txt\");\n    final List<Shape> queryShapes = new ArrayList<>();\n    while(querySpatialData.hasNext()) {\n      queryShapes.add(querySpatialData.next().shape);\n      if (TEST_NIGHTLY) {\n        queryShapes.add(randomQueryShape());\n      }\n    }\n    queryShapes.add(randomQueryShape());\n    testOperation(SpatialOperation.Intersects, indexedShapes, queryShapes, random().nextBoolean());\n  }\n\n","sourceOld":"  @Test\n  public void testOperationsFromFile() throws IOException {\n    setupStrategy();\n    final Iterator<SpatialTestData> indexedSpatialData = getSampleData( \"states-poly.txt\");\n    final List<Shape> indexedShapes = new ArrayList<>();\n    while(indexedSpatialData.hasNext()) {\n      indexedShapes.add(indexedSpatialData.next().shape);\n    }\n    final Iterator<SpatialTestData> querySpatialData = getSampleData( \"states-bbox.txt\");\n    final List<Shape> queryShapes = new ArrayList<>();\n    while(querySpatialData.hasNext()) {\n      queryShapes.add(querySpatialData.next().shape);\n      queryShapes.add(randomQueryShape());\n    }\n    testOperation(SpatialOperation.Intersects, indexedShapes, queryShapes, random().nextBoolean());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["4e1fc6bbd33946af05bcccef3ff80feed7b21aa0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e1fc6bbd33946af05bcccef3ff80feed7b21aa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"],"4e1fc6bbd33946af05bcccef3ff80feed7b21aa0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e1fc6bbd33946af05bcccef3ff80feed7b21aa0"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","4e1fc6bbd33946af05bcccef3ff80feed7b21aa0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"4e1fc6bbd33946af05bcccef3ff80feed7b21aa0":["57c6c784f777a2cc8fa014507ea129526822714d","b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}