{"path":"src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","commits":[{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isLoggable(Level.INFO);\n    LogUpdateProcessor.log.severe(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b09fb4031a627e6d8152b2dea8b1a9c1180a82d","date":1184778260,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isLoggable(Level.INFO);\n    // LogUpdateProcessor.log.severe(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isLoggable(Level.INFO);\n    LogUpdateProcessor.log.severe(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isLoggable(Level.INFO);\n    // LogUpdateProcessor.log.severe(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    boolean doLog = LogUpdateProcessor.log.isInfoEnabled();\n    // LogUpdateProcessor.log.error(\"Will Log=\" + doLog);\n    if( doLog ) {\n      // only create the log processor if we will use it\n      return new LogUpdateProcessor(req, rsp, this, next);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0b09fb4031a627e6d8152b2dea8b1a9c1180a82d":["6589002090bd74db749eef5befe2f447c0e3dd49"],"6589002090bd74db749eef5befe2f447c0e3dd49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["0b09fb4031a627e6d8152b2dea8b1a9c1180a82d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6589002090bd74db749eef5befe2f447c0e3dd49"],"0b09fb4031a627e6d8152b2dea8b1a9c1180a82d":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"6589002090bd74db749eef5befe2f447c0e3dd49":["0b09fb4031a627e6d8152b2dea8b1a9c1180a82d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}