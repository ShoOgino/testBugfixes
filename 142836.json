{"path":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermDocs() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      if (segTermDocs.next() == true)\n      {\n        int docId = segTermDocs.doc();\n        assertTrue(docId == 0);\n        int freq = segTermDocs.freq();\n        assertTrue(freq == 3);  \n      }\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","sourceNew":"  public void testTermDocs() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      if (segTermDocs.next() == true)\n      {\n        int docId = segTermDocs.doc();\n        assertTrue(docId == 0);\n        int freq = segTermDocs.freq();\n        assertTrue(freq == 3);  \n      }\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }  \n\n","sourceOld":"  public void testTermDocs() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      if (segTermDocs.next() == true)\n      {\n        int docId = segTermDocs.doc();\n        assertTrue(docId == 0);\n        int freq = segTermDocs.freq();\n        assertTrue(freq == 3);  \n      }\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","sourceNew":"  public void testTermDocs() throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n    assertTrue(reader != null);\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs() {\n    try {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n      assertTrue(segTermDocs != null);\n      segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n      if (segTermDocs.next() == true)\n      {\n        int docId = segTermDocs.doc();\n        assertTrue(docId == 0);\n        int freq = segTermDocs.freq();\n        assertTrue(freq == 3);  \n      }\n      reader.close();\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","sourceNew":"  public void testTermDocs() throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","sourceOld":"  public void testTermDocs() throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n    assertTrue(reader != null);\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa","date":1195161267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","sourceNew":"  public void testTermDocs() throws IOException {\n    testTermDocs(1);\n  }\n\n","sourceOld":"  public void testTermDocs() throws IOException {\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    SegmentTermDocs segTermDocs = new SegmentTermDocs(reader);\n    assertTrue(segTermDocs != null);\n    segTermDocs.seek(new Term(DocHelper.TEXT_FIELD_2_KEY, \"field\"));\n    if (segTermDocs.next() == true)\n    {\n      int docId = segTermDocs.doc();\n      assertTrue(docId == 0);\n      int freq = segTermDocs.freq();\n      assertTrue(freq == 3);  \n    }\n    reader.close();\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentTermDocs#testTermDocs().mjava","sourceNew":"  public void testTermDocs() throws IOException {\n    testTermDocs(1);\n  }\n\n","sourceOld":"  public void testTermDocs() throws IOException {\n    testTermDocs(1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1229e4509cad6bf268c0fe18199b63a72216c66b":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}