{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","commits":[{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        // update\n        zkClient.setData(path, data, -1, true);\n      } else {\n        // create\n        zkClient.create(path, data, CreateMode.PERSISTENT, true);\n      }\n      lastState = state;\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        // update\n        zkClient.setData(path, data, -1, true);\n      } else {\n        // create\n        zkClient.create(path, data, CreateMode.PERSISTENT, true);\n      }\n      lastState = state;\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (clusterDataProvider.hasData(path)) {\n        // update\n        clusterDataProvider.setData(path, data, -1);\n      } else {\n        // create\n        clusterDataProvider.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (IOException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        // update\n        zkClient.setData(path, data, -1, true);\n      } else {\n        // create\n        zkClient.create(path, data, CreateMode.PERSISTENT, true);\n      }\n      lastState = state;\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        // update\n        zkClient.setData(path, data, -1, true);\n      } else {\n        // create\n        zkClient.create(path, data, CreateMode.PERSISTENT, true);\n      }\n      lastState = state;\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (clusterDataProvider.hasData(path)) {\n        // update\n        clusterDataProvider.setData(path, data, -1);\n      } else {\n        // create\n        clusterDataProvider.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (IOException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        // update\n        zkClient.setData(path, data, -1, true);\n      } else {\n        // create\n        zkClient.create(path, data, CreateMode.PERSISTENT, true);\n      }\n      lastState = state;\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        // update\n        zkClient.setData(path, data, -1, true);\n      } else {\n        // create\n        zkClient.create(path, data, CreateMode.PERSISTENT, true);\n      }\n      lastState = state;\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (InterruptedException | BadVersionException | AlreadyExistsException | IOException | KeeperException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (zkClient.exists(path, true)) {\n        // update\n        zkClient.setData(path, data, -1, true);\n      } else {\n        // create\n        zkClient.create(path, data, CreateMode.PERSISTENT, true);\n      }\n      lastState = state;\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (InterruptedException | BadVersionException | AlreadyExistsException | IOException | KeeperException e) {\n      log.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (InterruptedException | BadVersionException | AlreadyExistsException | IOException | KeeperException e) {\n      LOG.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (AlreadyExistsException e) {\n      \n    } catch (InterruptedException | BadVersionException | IOException | KeeperException e) {\n      log.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (InterruptedException | BadVersionException | AlreadyExistsException | IOException | KeeperException e) {\n      log.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = deepCopyState();\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (AlreadyExistsException e) {\n      \n    } catch (InterruptedException | BadVersionException | IOException | KeeperException e) {\n      log.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void saveState() {\n    Map<String,Object> state = Utils.getDeepCopy(getState(), 10, false, true);\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (AlreadyExistsException e) {\n      \n    } catch (InterruptedException | BadVersionException | IOException | KeeperException e) {\n      log.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","sourceNew":"  @Override\n  public void saveState() {\n    Map<String,Object> state = deepCopyState();\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (AlreadyExistsException e) {\n      \n    } catch (InterruptedException | BadVersionException | IOException | KeeperException e) {\n      log.warn(\"Exception updating trigger state '{}'\", path, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void saveState() {\n    Map<String,Object> state = deepCopyState();\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (AlreadyExistsException e) {\n      \n    } catch (InterruptedException | BadVersionException | IOException | KeeperException e) {\n      log.warn(\"Exception updating trigger state '\" + path + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#saveState().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void saveState() {\n    Map<String,Object> state = deepCopyState();\n    if (lastState != null && lastState.equals(state)) {\n      // skip saving if identical\n      return;\n    }\n    byte[] data = Utils.toJSON(state);\n    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + \"/\" + getName();\n    try {\n      if (stateManager.hasData(path)) {\n        // update\n        stateManager.setData(path, data, -1);\n      } else {\n        // create\n        stateManager.createData(path, data, CreateMode.PERSISTENT);\n      }\n      lastState = state;\n    } catch (AlreadyExistsException e) {\n      \n    } catch (InterruptedException | BadVersionException | IOException | KeeperException e) {\n      log.warn(\"Exception updating trigger state '{}'\", path, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"914270355efc1f9583010cb165bb031a1e698f84":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","464244264804e3f981bf1fb4b732516d8d62dbc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e35f2dde06b35aa9904949a3a93fabd090371077":["914270355efc1f9583010cb165bb031a1e698f84"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["914270355efc1f9583010cb165bb031a1e698f84"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"914270355efc1f9583010cb165bb031a1e698f84":["e35f2dde06b35aa9904949a3a93fabd090371077"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}