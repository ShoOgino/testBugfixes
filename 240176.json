{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#next().mjava","commits":[{"id":"8598a11db0eb9efa116ba7656c437f5bed7de0f7","date":1272964265,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#next().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterIterator#next().mjava","sourceNew":"  /**\n   * Advance to the next subword in the string.\n   *\n   * @return index of the next subword, or {@link #DONE} if all subwords have been returned\n   */\n  int next() {\n    current = end;\n    if (current == DONE) {\n      return DONE;\n    }\n    \n    if (skipPossessive) {\n      current += 2;\n      skipPossessive = false;\n    }\n\n    int lastType = 0;\n    \n    while (current < endBounds && (isSubwordDelim(lastType = charType(text[current])))) {\n      current++;\n    }\n\n    if (current >= endBounds) {\n      return end = DONE;\n    }\n    \n    for (end = current + 1; end < endBounds; end++) {\n      int type = charType(text[end]);\n      if (isBreak(lastType, type)) {\n        break;\n      }\n      lastType = type;\n    }\n    \n    if (end < endBounds - 1 && endsWithPossessive(end + 2)) {\n      skipPossessive = true;\n    }\n    \n    return end;\n  }\n\n","sourceOld":"  /**\n   * Advance to the next subword in the string.\n   *\n   * @return index of the next subword, or {@link #DONE} if all subwords have been returned\n   */\n  int next() {\n    current = end;\n    if (current == DONE) {\n      return DONE;\n    }\n    \n    if (skipPossessive) {\n      current += 2;\n      skipPossessive = false;\n    }\n\n    int lastType = 0;\n    \n    while (current < endBounds && (isSubwordDelim(lastType = charType(text[current])))) {\n      current++;\n    }\n\n    if (current >= endBounds) {\n      return end = DONE;\n    }\n    \n    for (end = current + 1; end < endBounds; end++) {\n      int type = charType(text[end]);\n      if (isBreak(lastType, type)) {\n        break;\n      }\n      lastType = type;\n    }\n    \n    if (end < endBounds - 1 && endsWithPossessive(end + 2)) {\n      skipPossessive = true;\n    }\n    \n    return end;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#next().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator#next().mjava","sourceNew":"  /**\n   * Advance to the next subword in the string.\n   *\n   * @return index of the next subword, or {@link #DONE} if all subwords have been returned\n   */\n  int next() {\n    current = end;\n    if (current == DONE) {\n      return DONE;\n    }\n    \n    if (skipPossessive) {\n      current += 2;\n      skipPossessive = false;\n    }\n\n    int lastType = 0;\n    \n    while (current < endBounds && (isSubwordDelim(lastType = charType(text[current])))) {\n      current++;\n    }\n\n    if (current >= endBounds) {\n      return end = DONE;\n    }\n    \n    for (end = current + 1; end < endBounds; end++) {\n      int type = charType(text[end]);\n      if (isBreak(lastType, type)) {\n        break;\n      }\n      lastType = type;\n    }\n    \n    if (end < endBounds - 1 && endsWithPossessive(end + 2)) {\n      skipPossessive = true;\n    }\n    \n    return end;\n  }\n\n","sourceOld":"  /**\n   * Advance to the next subword in the string.\n   *\n   * @return index of the next subword, or {@link #DONE} if all subwords have been returned\n   */\n  int next() {\n    current = end;\n    if (current == DONE) {\n      return DONE;\n    }\n    \n    if (skipPossessive) {\n      current += 2;\n      skipPossessive = false;\n    }\n\n    int lastType = 0;\n    \n    while (current < endBounds && (isSubwordDelim(lastType = charType(text[current])))) {\n      current++;\n    }\n\n    if (current >= endBounds) {\n      return end = DONE;\n    }\n    \n    for (end = current + 1; end < endBounds; end++) {\n      int type = charType(text[end]);\n      if (isBreak(lastType, type)) {\n        break;\n      }\n      lastType = type;\n    }\n    \n    if (end < endBounds - 1 && endsWithPossessive(end + 2)) {\n      skipPossessive = true;\n    }\n    \n    return end;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8598a11db0eb9efa116ba7656c437f5bed7de0f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["8598a11db0eb9efa116ba7656c437f5bed7de0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"8598a11db0eb9efa116ba7656c437f5bed7de0f7":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8598a11db0eb9efa116ba7656c437f5bed7de0f7"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}