{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getBaseUrlForNodeName(String).mjava","commits":[{"id":"042891089d57d0e6af18ea6cec15f9e9a7da7d25","date":1355271969,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getBaseUrlForNodeName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName -- \n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset),\n                                            \"UTF-8\");\n      return \"http://\" + hostAndPort + \"/\" + path;\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["227c5621583c5b934878e3c051aae9c4649ae700"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"227c5621583c5b934878e3c051aae9c4649ae700","date":1356045968,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName -- \n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset),\n                                            \"UTF-8\");\n      return \"http://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName -- \n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset),\n                                            \"UTF-8\");\n      return \"http://\" + hostAndPort + \"/\" + path;\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getBaseUrlForNodeName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName -- \n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset),\n                                            \"UTF-8\");\n      return \"http://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getBaseUrlForNodeName(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#getBaseUrlForNodeName(String).mjava","sourceNew":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName --\n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset), \"UTF-8\");\n      String urlScheme = (String) getClusterProps().get(\"urlScheme\");\n      if(urlScheme == null) {\n        urlScheme = \"http\";\n      }\n      return urlScheme + \"://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the baseURL corrisponding to a given node's nodeName -- \n   * NOTE: does not (currently) imply that the nodeName (or resulting \n   * baseURL) exists in the cluster.\n   * @lucene.experimental\n   */\n  public String getBaseUrlForNodeName(final String nodeName) {\n    final int _offset = nodeName.indexOf(\"_\");\n    if (_offset < 0) {\n      throw new IllegalArgumentException(\"nodeName does not contain expected '_' seperator: \" + nodeName);\n    }\n    final String hostAndPort = nodeName.substring(0,_offset);\n    try {\n      final String path = URLDecoder.decode(nodeName.substring(1+_offset),\n                                            \"UTF-8\");\n      return \"http://\" + hostAndPort + (path.isEmpty() ? \"\" : (\"/\" + path));\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException(\"JVM Does not seem to support UTF-8\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","227c5621583c5b934878e3c051aae9c4649ae700"],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"227c5621583c5b934878e3c051aae9c4649ae700":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["227c5621583c5b934878e3c051aae9c4649ae700"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["227c5621583c5b934878e3c051aae9c4649ae700"],"227c5621583c5b934878e3c051aae9c4649ae700":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}