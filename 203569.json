{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#reset().mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#reset().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void reset() throws IOException {\n      queueEnd = start = end = -1;\n      this.queue.clear();\n      for (IntervalIterator it : subIterators) {\n        it.nextInterval();\n        queue.add(it);\n        updateRightExtreme(it);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a11f5eaf4fe6bafe41b09a57c4598f8309943377","date":1524738462,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#reset().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#reset().mjava","sourceNew":"    @Override\n    protected void reset() throws IOException {\n      queueEnd = start = end = -1;\n      this.queue.clear();\n      for (IntervalIterator it : subIterators) {\n        if (it.nextInterval() == NO_MORE_INTERVALS) {\n          break;\n        }\n        queue.add(it);\n        updateRightExtreme(it);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void reset() throws IOException {\n      queueEnd = start = end = -1;\n      this.queue.clear();\n      for (IntervalIterator it : subIterators) {\n        it.nextInterval();\n        queue.add(it);\n        updateRightExtreme(it);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3480728ed564c17162fff1200a8d15c1a5f24cd","date":1527693339,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#reset().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#reset().mjava","sourceNew":"    @Override\n    protected void reset() throws IOException {\n      queueEnd = start = end = -1;\n      this.queue.clear();\n      loop: for (IntervalIterator it : subIterators) {\n        if (it.nextInterval() == NO_MORE_INTERVALS) {\n          break;\n        }\n        if (allowOverlaps == false) {\n          while (hasOverlaps(it)) {\n            if (it.nextInterval() == NO_MORE_INTERVALS) {\n              break loop;\n            }\n          }\n        }\n        queue.add(it);\n        updateRightExtreme(it);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void reset() throws IOException {\n      queueEnd = start = end = -1;\n      this.queue.clear();\n      for (IntervalIterator it : subIterators) {\n        if (it.nextInterval() == NO_MORE_INTERVALS) {\n          break;\n        }\n        queue.add(it);\n        updateRightExtreme(it);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/UnorderedIntervalsSource.UnorderedIntervalIterator#reset().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#reset().mjava","sourceNew":"    @Override\n    protected void reset() throws IOException {\n      queueEnd = start = end = -1;\n      this.queue.clear();\n      loop: for (IntervalIterator it : subIterators) {\n        if (it.nextInterval() == NO_MORE_INTERVALS) {\n          break;\n        }\n        if (allowOverlaps == false) {\n          while (hasOverlaps(it)) {\n            if (it.nextInterval() == NO_MORE_INTERVALS) {\n              break loop;\n            }\n          }\n        }\n        queue.add(it);\n        updateRightExtreme(it);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void reset() throws IOException {\n      queueEnd = start = end = -1;\n      this.queue.clear();\n      loop: for (IntervalIterator it : subIterators) {\n        if (it.nextInterval() == NO_MORE_INTERVALS) {\n          break;\n        }\n        if (allowOverlaps == false) {\n          while (hasOverlaps(it)) {\n            if (it.nextInterval() == NO_MORE_INTERVALS) {\n              break loop;\n            }\n          }\n        }\n        queue.add(it);\n        updateRightExtreme(it);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a11f5eaf4fe6bafe41b09a57c4598f8309943377":["361b1afc99f68598c73d37074aec089c9c951586"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["a11f5eaf4fe6bafe41b09a57c4598f8309943377"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"]},"commit2Childs":{"a11f5eaf4fe6bafe41b09a57c4598f8309943377":["c3480728ed564c17162fff1200a8d15c1a5f24cd"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"361b1afc99f68598c73d37074aec089c9c951586":["a11f5eaf4fe6bafe41b09a57c4598f8309943377"],"c3480728ed564c17162fff1200a8d15c1a5f24cd":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}