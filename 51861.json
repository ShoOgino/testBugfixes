{"path":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","sourceNew":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","sourceOld":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c25e111e7f6a7353d2b9b46643b7f7507c6584","date":1286049515,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","sourceNew":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace(ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","sourceOld":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d7a70709df2f3ba961939504c75098e92da8b99","date":1286120517,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","sourceNew":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass<? extends SnowballProgram> stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\").asSubclass(SnowballProgram.class);\n        SnowballProgram stemmer = stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace(ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","sourceOld":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace(ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","bugFix":["b62da6a75575f59a016a076b4753dc6e20c74b44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","sourceNew":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass<? extends SnowballProgram> stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\").asSubclass(SnowballProgram.class);\n        SnowballProgram stemmer = stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace(ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","sourceOld":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\");\n        SnowballProgram stemmer = (SnowballProgram) stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace((char) ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/TestApp#main(String[]).mjava","sourceNew":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass<? extends SnowballProgram> stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\").asSubclass(SnowballProgram.class);\n        SnowballProgram stemmer = stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace(ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","sourceOld":"    public static void main(String [] args) throws Throwable {\n\tif (args.length < 2) {\n            usage();\n            return;\n        }\n\n\tClass<? extends SnowballProgram> stemClass = Class.forName(\"org.tartarus.snowball.ext.\" +\n\t\t\t\t\targs[0] + \"Stemmer\").asSubclass(SnowballProgram.class);\n        SnowballProgram stemmer = stemClass.newInstance();\n\tMethod stemMethod = stemClass.getMethod(\"stem\", new Class[0]);\n\n\tReader reader;\n\treader = new InputStreamReader(new FileInputStream(args[1]));\n\treader = new BufferedReader(reader);\n\n\tStringBuffer input = new StringBuffer();\n\n        OutputStream outstream;\n\n\tif (args.length > 2) {\n            if (args.length == 4 && args[2].equals(\"-o\")) {\n                outstream = new FileOutputStream(args[3]);\n            } else {\n                usage();\n                return;\n            }\n\t} else {\n\t    outstream = System.out;\n\t}\n\tWriter output = new OutputStreamWriter(outstream);\n\toutput = new BufferedWriter(output);\n\n\tint repeat = 1;\n\tif (args.length > 4) {\n\t    repeat = Integer.parseInt(args[4]);\n\t}\n\n\tObject [] emptyArgs = new Object[0];\n\tint character;\n\twhile ((character = reader.read()) != -1) {\n\t    char ch = (char) character;\n\t    if (Character.isWhitespace(ch)) {\n\t\tif (input.length() > 0) {\n\t\t    stemmer.setCurrent(input.toString());\n\t\t    for (int i = repeat; i != 0; i--) {\n\t\t\tstemMethod.invoke(stemmer, emptyArgs);\n\t\t    }\n\t\t    output.write(stemmer.getCurrent());\n\t\t    output.write('\\n');\n\t\t    input.delete(0, input.length());\n\t\t}\n\t    } else {\n\t\tinput.append(Character.toLowerCase(ch));\n\t    }\n\t}\n\toutput.flush();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4d7a70709df2f3ba961939504c75098e92da8b99"],"4d7a70709df2f3ba961939504c75098e92da8b99":["a1c25e111e7f6a7353d2b9b46643b7f7507c6584"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4d7a70709df2f3ba961939504c75098e92da8b99"],"a1c25e111e7f6a7353d2b9b46643b7f7507c6584":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d7a70709df2f3ba961939504c75098e92da8b99":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a1c25e111e7f6a7353d2b9b46643b7f7507c6584"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a1c25e111e7f6a7353d2b9b46643b7f7507c6584":["4d7a70709df2f3ba961939504c75098e92da8b99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}