{"path":"lucene/src/java/org/apache/lucene/util/fst/Builder#freezeTail(int).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#freezeTail(int).mjava","pathOld":"/dev/null","sourceNew":"  private void freezeTail(int prefixLenPlus1) throws IOException {\n    if (freezeTail != null) {\n      // Custom plugin:\n      freezeTail.freeze(frontier, prefixLenPlus1, lastInput);\n    } else {\n      //System.out.println(\"  compileTail \" + prefixLenPlus1);\n      final int downTo = Math.max(1, prefixLenPlus1);\n      for(int idx=lastInput.length; idx >= downTo; idx--) {\n\n        boolean doPrune = false;\n        boolean doCompile = false;\n\n        final UnCompiledNode<T> node = frontier[idx];\n        final UnCompiledNode<T> parent = frontier[idx-1];\n\n        if (node.inputCount < minSuffixCount1) {\n          doPrune = true;\n          doCompile = true;\n        } else if (idx > prefixLenPlus1) {\n          // prune if parent's inputCount is less than suffixMinCount2\n          if (parent.inputCount < minSuffixCount2 || (minSuffixCount2 == 1 && parent.inputCount == 1 && idx > 1)) {\n            // my parent, about to be compiled, doesn't make the cut, so\n            // I'm definitely pruned \n\n            // if minSuffixCount2 is 1, we keep only up\n            // until the 'distinguished edge', ie we keep only the\n            // 'divergent' part of the FST. if my parent, about to be\n            // compiled, has inputCount 1 then we are already past the\n            // distinguished edge.  NOTE: this only works if\n            // the FST outputs are not \"compressible\" (simple\n            // ords ARE compressible).\n            doPrune = true;\n          } else {\n            // my parent, about to be compiled, does make the cut, so\n            // I'm definitely not pruned \n            doPrune = false;\n          }\n          doCompile = true;\n        } else {\n          // if pruning is disabled (count is 0) we can always\n          // compile current node\n          doCompile = minSuffixCount2 == 0;\n        }\n\n        //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n        if (node.inputCount < minSuffixCount2 || (minSuffixCount2 == 1 && node.inputCount == 1 && idx > 1)) {\n          // drop all arcs\n          for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n            @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n            target.clear();\n          }\n          node.numArcs = 0;\n        }\n\n        if (doPrune) {\n          // this node doesn't make it -- deref it\n          node.clear();\n          parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n        } else {\n\n          if (minSuffixCount2 != 0) {\n            compileAllTargets(node, lastInput.length-idx);\n          }\n          final T nextFinalOutput = node.output;\n\n          // We \"fake\" the node as being final if it has no\n          // outgoing arcs; in theory we could leave it\n          // as non-final (the FST can represent this), but\n          // FSTEnum, Util, etc., have trouble w/ non-final\n          // dead-end states:\n          final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n          if (doCompile) {\n            // this node makes it and we now compile it.  first,\n            // compile any targets that were previously\n            // undecided:\n            parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                               compileNode(node, 1+lastInput.length-idx),\n                               nextFinalOutput,\n                               isFinal);\n          } else {\n            // replaceLast just to install\n            // nextFinalOutput/isFinal onto the arc\n            parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                               node,\n                               nextFinalOutput,\n                               isFinal);\n            // this node will stay in play for now, since we are\n            // undecided on whether to prune it.  later, it\n            // will be either compiled or pruned, so we must\n            // allocate a new node:\n            frontier[idx] = new UnCompiledNode<T>(this, idx);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#freezeTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#freezeTail(int).mjava","sourceNew":"  private void freezeTail(int prefixLenPlus1) throws IOException {\n    if (freezeTail != null) {\n      // Custom plugin:\n      freezeTail.freeze(frontier, prefixLenPlus1, lastInput);\n    } else {\n      //System.out.println(\"  compileTail \" + prefixLenPlus1);\n      final int downTo = Math.max(1, prefixLenPlus1);\n      for(int idx=lastInput.length; idx >= downTo; idx--) {\n\n        boolean doPrune = false;\n        boolean doCompile = false;\n\n        final UnCompiledNode<T> node = frontier[idx];\n        final UnCompiledNode<T> parent = frontier[idx-1];\n\n        if (node.inputCount < minSuffixCount1) {\n          doPrune = true;\n          doCompile = true;\n        } else if (idx > prefixLenPlus1) {\n          // prune if parent's inputCount is less than suffixMinCount2\n          if (parent.inputCount < minSuffixCount2 || (minSuffixCount2 == 1 && parent.inputCount == 1 && idx > 1)) {\n            // my parent, about to be compiled, doesn't make the cut, so\n            // I'm definitely pruned \n\n            // if minSuffixCount2 is 1, we keep only up\n            // until the 'distinguished edge', ie we keep only the\n            // 'divergent' part of the FST. if my parent, about to be\n            // compiled, has inputCount 1 then we are already past the\n            // distinguished edge.  NOTE: this only works if\n            // the FST outputs are not \"compressible\" (simple\n            // ords ARE compressible).\n            doPrune = true;\n          } else {\n            // my parent, about to be compiled, does make the cut, so\n            // I'm definitely not pruned \n            doPrune = false;\n          }\n          doCompile = true;\n        } else {\n          // if pruning is disabled (count is 0) we can always\n          // compile current node\n          doCompile = minSuffixCount2 == 0;\n        }\n\n        //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n        if (node.inputCount < minSuffixCount2 || (minSuffixCount2 == 1 && node.inputCount == 1 && idx > 1)) {\n          // drop all arcs\n          for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n            @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n            target.clear();\n          }\n          node.numArcs = 0;\n        }\n\n        if (doPrune) {\n          // this node doesn't make it -- deref it\n          node.clear();\n          parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n        } else {\n\n          if (minSuffixCount2 != 0) {\n            compileAllTargets(node, lastInput.length-idx);\n          }\n          final T nextFinalOutput = node.output;\n\n          // We \"fake\" the node as being final if it has no\n          // outgoing arcs; in theory we could leave it\n          // as non-final (the FST can represent this), but\n          // FSTEnum, Util, etc., have trouble w/ non-final\n          // dead-end states:\n          final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n          if (doCompile) {\n            // this node makes it and we now compile it.  first,\n            // compile any targets that were previously\n            // undecided:\n            parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                               compileNode(node, 1+lastInput.length-idx),\n                               nextFinalOutput,\n                               isFinal);\n          } else {\n            // replaceLast just to install\n            // nextFinalOutput/isFinal onto the arc\n            parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                               node,\n                               nextFinalOutput,\n                               isFinal);\n            // this node will stay in play for now, since we are\n            // undecided on whether to prune it.  later, it\n            // will be either compiled or pruned, so we must\n            // allocate a new node:\n            frontier[idx] = new UnCompiledNode<T>(this, idx);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void freezeTail(int prefixLenPlus1) throws IOException {\n    if (freezeTail != null) {\n      // Custom plugin:\n      freezeTail.freeze(frontier, prefixLenPlus1, lastInput);\n    } else {\n      //System.out.println(\"  compileTail \" + prefixLenPlus1);\n      final int downTo = Math.max(1, prefixLenPlus1);\n      for(int idx=lastInput.length; idx >= downTo; idx--) {\n\n        boolean doPrune = false;\n        boolean doCompile = false;\n\n        final UnCompiledNode<T> node = frontier[idx];\n        final UnCompiledNode<T> parent = frontier[idx-1];\n\n        if (node.inputCount < minSuffixCount1) {\n          doPrune = true;\n          doCompile = true;\n        } else if (idx > prefixLenPlus1) {\n          // prune if parent's inputCount is less than suffixMinCount2\n          if (parent.inputCount < minSuffixCount2 || (minSuffixCount2 == 1 && parent.inputCount == 1 && idx > 1)) {\n            // my parent, about to be compiled, doesn't make the cut, so\n            // I'm definitely pruned \n\n            // if minSuffixCount2 is 1, we keep only up\n            // until the 'distinguished edge', ie we keep only the\n            // 'divergent' part of the FST. if my parent, about to be\n            // compiled, has inputCount 1 then we are already past the\n            // distinguished edge.  NOTE: this only works if\n            // the FST outputs are not \"compressible\" (simple\n            // ords ARE compressible).\n            doPrune = true;\n          } else {\n            // my parent, about to be compiled, does make the cut, so\n            // I'm definitely not pruned \n            doPrune = false;\n          }\n          doCompile = true;\n        } else {\n          // if pruning is disabled (count is 0) we can always\n          // compile current node\n          doCompile = minSuffixCount2 == 0;\n        }\n\n        //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n        if (node.inputCount < minSuffixCount2 || (minSuffixCount2 == 1 && node.inputCount == 1 && idx > 1)) {\n          // drop all arcs\n          for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n            @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n            target.clear();\n          }\n          node.numArcs = 0;\n        }\n\n        if (doPrune) {\n          // this node doesn't make it -- deref it\n          node.clear();\n          parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n        } else {\n\n          if (minSuffixCount2 != 0) {\n            compileAllTargets(node, lastInput.length-idx);\n          }\n          final T nextFinalOutput = node.output;\n\n          // We \"fake\" the node as being final if it has no\n          // outgoing arcs; in theory we could leave it\n          // as non-final (the FST can represent this), but\n          // FSTEnum, Util, etc., have trouble w/ non-final\n          // dead-end states:\n          final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n          if (doCompile) {\n            // this node makes it and we now compile it.  first,\n            // compile any targets that were previously\n            // undecided:\n            parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                               compileNode(node, 1+lastInput.length-idx),\n                               nextFinalOutput,\n                               isFinal);\n          } else {\n            // replaceLast just to install\n            // nextFinalOutput/isFinal onto the arc\n            parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                               node,\n                               nextFinalOutput,\n                               isFinal);\n            // this node will stay in play for now, since we are\n            // undecided on whether to prune it.  later, it\n            // will be either compiled or pruned, so we must\n            // allocate a new node:\n            frontier[idx] = new UnCompiledNode<T>(this, idx);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}