{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#validateTags(Map[String,Map[String,Object]]).mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#validateTags(Map[String,Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private void validateTags(Map<String, Map<String, Object>> nodeVsTags) {\n    List<String> errors = new ArrayList<>();\n    for (Rule rule : rules) {\n      for (Map.Entry<String, Map<String, Object>> e : nodeVsTags.entrySet()) {\n        if (e.getValue().get(rule.tag.name) == null) {\n          errors.add(formatString(\"The value for tag {0} is not available for node {}\"));\n        }\n      }\n    }\n    if (!errors.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, StrUtils.join(errors, ','));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c0b841c948ce5518a9cf59174409a161b73d08e","date":1444114692,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#validateTags(Map[String,Map[String,Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#validateTags(Map[String,Map[String,Object]]).mjava","sourceNew":"  private void validateTags(Map<String, Map<String, Object>> nodeVsTags) {\n    List<String> errors = new ArrayList<>();\n    for (Rule rule : rules) {\n      for (Map.Entry<String, Map<String, Object>> e : nodeVsTags.entrySet()) {\n        if (e.getValue().get(rule.tag.name) == null) {\n          errors.add(formatString(\"The value for tag {0} is not available for node {1}\", rule.tag.name, e.getKey()));\n        }\n      }\n    }\n    if (!errors.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, StrUtils.join(errors, ','));\n    }\n  }\n\n","sourceOld":"  private void validateTags(Map<String, Map<String, Object>> nodeVsTags) {\n    List<String> errors = new ArrayList<>();\n    for (Rule rule : rules) {\n      for (Map.Entry<String, Map<String, Object>> e : nodeVsTags.entrySet()) {\n        if (e.getValue().get(rule.tag.name) == null) {\n          errors.add(formatString(\"The value for tag {0} is not available for node {}\"));\n        }\n      }\n    }\n    if (!errors.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, StrUtils.join(errors, ','));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf98283bf93e06ee092a158798e6a9d53bb4c747","date":1483715447,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#validateTags(Map[String,Map[String,Object]]).mjava","sourceNew":null,"sourceOld":"  private void validateTags(Map<String, Map<String, Object>> nodeVsTags) {\n    List<String> errors = new ArrayList<>();\n    for (Rule rule : rules) {\n      for (Map.Entry<String, Map<String, Object>> e : nodeVsTags.entrySet()) {\n        if (e.getValue().get(rule.tag.name) == null) {\n          errors.add(formatString(\"The value for tag {0} is not available for node {1}\", rule.tag.name, e.getKey()));\n        }\n      }\n    }\n    if (!errors.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, StrUtils.join(errors, ','));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ReplicaAssigner#validateTags(Map[String,Map[String,Object]]).mjava","sourceNew":null,"sourceOld":"  private void validateTags(Map<String, Map<String, Object>> nodeVsTags) {\n    List<String> errors = new ArrayList<>();\n    for (Rule rule : rules) {\n      for (Map.Entry<String, Map<String, Object>> e : nodeVsTags.entrySet()) {\n        if (e.getValue().get(rule.tag.name) == null) {\n          errors.add(formatString(\"The value for tag {0} is not available for node {1}\", rule.tag.name, e.getKey()));\n        }\n      }\n    }\n    if (!errors.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, StrUtils.join(errors, ','));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c0b841c948ce5518a9cf59174409a161b73d08e":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bf98283bf93e06ee092a158798e6a9d53bb4c747":["7c0b841c948ce5518a9cf59174409a161b73d08e"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf98283bf93e06ee092a158798e6a9d53bb4c747"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["7c0b841c948ce5518a9cf59174409a161b73d08e","bf98283bf93e06ee092a158798e6a9d53bb4c747"]},"commit2Childs":{"7c0b841c948ce5518a9cf59174409a161b73d08e":["bf98283bf93e06ee092a158798e6a9d53bb4c747","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"bf98283bf93e06ee092a158798e6a9d53bb4c747":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["7c0b841c948ce5518a9cf59174409a161b73d08e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}