{"path":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      assert context.isAtomic : \"top-level context without leaves must be atomic\";\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      assert context.isAtomic : \"top-level context without leaves must be atomic\";\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      assert context.isAtomic : \"top-level context without leaves must be atomic\";\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext[#-extends-IndexReader]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext).mjava","sourceNew":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext<? extends IndexReader> context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","sourceOld":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      assert context.isAtomic : \"top-level context without leaves must be atomic\";\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext[#-extends-IndexReader]).mjava","sourceNew":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","sourceOld":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext<? extends IndexReader> context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(IndexReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext).mjava","sourceNew":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(IndexReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","sourceOld":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(IndexReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#leaves(ReaderContext).mjava","sourceNew":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(IndexReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","sourceOld":"  /**\n   * Returns the context's leaves or the context itself as the only element of\n   * the returned array. If the context's #leaves() method returns\n   * <code>null</code> the given context must be an instance of\n   * {@link AtomicReaderContext}\n   */\n  public static AtomicReaderContext[] leaves(ReaderContext context) {\n    assert context != null && context.isTopLevel : \"context must be non-null & top-level\";\n    final AtomicReaderContext[] leaves = context.leaves();\n    if (leaves == null) {\n      assert context.isAtomic : \"top-level context without leaves must be atomic\";\n      return new AtomicReaderContext[] { (AtomicReaderContext) context };\n    }\n    return leaves;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}