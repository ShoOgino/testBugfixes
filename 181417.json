{"path":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(boolean,Class[#]).mjava","commits":[{"id":"d19aa12f12779ee822b14c5f0479847274d077ff","date":1424529172,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(boolean,Class[#]).mjava","pathOld":"/dev/null","sourceNew":"  private static Collector collector(boolean needsScores, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return needsScores;\n      }\n      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(boolean,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(boolean needsScores, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return needsScores;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(ScoreMode,Class[#]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#collector(boolean,Class[#]).mjava","sourceNew":"  private static Collector collector(ScoreMode scoreMode, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return scoreMode;\n      }\n      \n    };\n  }\n\n","sourceOld":"  private static Collector collector(boolean needsScores, Class<?> expectedScorer) {\n    return new Collector() {\n\n      @Override\n      public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n        return new LeafCollector() {\n\n          @Override\n          public void setScorer(Scorer scorer) throws IOException {\n            assertEquals(expectedScorer, scorer.getClass());\n          }\n\n          @Override\n          public void collect(int doc) throws IOException {}\n          \n        };\n      }\n\n      @Override\n      public boolean needsScores() {\n        return needsScores;\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d19aa12f12779ee822b14c5f0479847274d077ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["d19aa12f12779ee822b14c5f0479847274d077ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d19aa12f12779ee822b14c5f0479847274d077ff","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d19aa12f12779ee822b14c5f0479847274d077ff":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19aa12f12779ee822b14c5f0479847274d077ff"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}