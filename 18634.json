{"path":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","commits":[{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testRuntimeLib().mjava","sourceNew":"  @Test\n  public void testPackageAPI() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-package:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler', package : global}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-package : 'global'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRuntimeLib() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-runtimelib:{name : 'foo', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-runtimelib/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"runtimeLib/foo/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-runtimelib : 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","sourceNew":"  @Test\n  public void testPackageAPI() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha256 : 'wrong-sha256'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha256 hash :\"));\n      }\n\n      try {\n        payload = \"{add-package:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler', package : global}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha256 : '20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-package : 'global'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n      URL baseUrl = cluster.getRandomJetty(random()).getBaseUrl();\n      try(HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()){\n        SimpleSolrResponse rsp = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/____v2/node/blob\", new ModifiableSolrParams()).process(client);\n        List l = (List) rsp.nl.get(\"blob\");\n        assertTrue(l.contains(\"e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc\"));\n        assertTrue(l.contains(\"20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3\"));\n      }\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPackageAPI() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha512 : 'wrong-sha512'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha512 hash :\"));\n      }\n\n      try {\n        payload = \"{add-package:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler', package : global}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha512 : '60ec88c2a2e9b409f7afc309273383810a0d07a078b482434eda9674f7e25b8adafa8a67c9913c996cbfb78a7f6ad2b9db26dbd4fe0ca4068f248d5db563f922'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-package : 'global'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cb89907619e6c5c18cc44ba2fc0521ff10c845c","date":1568938472,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13781\")\n  @Test\n  public void testPackageAPI() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha256 : 'wrong-sha256'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha256 hash :\"));\n      }\n\n      try {\n        payload = \"{add-package:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler', package : global}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha256 : '20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-package : 'global'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n      URL baseUrl = cluster.getRandomJetty(random()).getBaseUrl();\n      try(HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()){\n        SimpleSolrResponse rsp = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/____v2/node/blob\", new ModifiableSolrParams()).process(client);\n        List l = (List) rsp.nl.get(\"blob\");\n        assertTrue(l.contains(\"e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc\"));\n        assertTrue(l.contains(\"20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3\"));\n      }\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPackageAPI() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha256 : 'wrong-sha256'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha256 hash :\"));\n      }\n\n      try {\n        payload = \"{add-package:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler', package : global}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha256 : '20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-package : 'global'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n      URL baseUrl = cluster.getRandomJetty(random()).getBaseUrl();\n      try(HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()){\n        SimpleSolrResponse rsp = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/____v2/node/blob\", new ModifiableSolrParams()).process(client);\n        List l = (List) rsp.nl.get(\"blob\");\n        assertTrue(l.contains(\"e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc\"));\n        assertTrue(l.contains(\"20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3\"));\n      }\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","sourceNew":null,"sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13781\")\n  @Test\n  public void testPackageAPI() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha256 : 'wrong-sha256'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha256 hash :\"));\n      }\n\n      try {\n        payload = \"{add-package:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler', package : global}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha256 : '20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-package : 'global'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n      URL baseUrl = cluster.getRandomJetty(random()).getBaseUrl();\n      try(HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()){\n        SimpleSolrResponse rsp = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/____v2/node/blob\", new ModifiableSolrParams()).process(client);\n        List l = (List) rsp.nl.get(\"blob\");\n        assertTrue(l.contains(\"e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc\"));\n        assertTrue(l.contains(\"20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3\"));\n      }\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPackageAPI().mjava","sourceNew":null,"sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13781\")\n  @Test\n  public void testPackageAPI() throws Exception {\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      String payload = null;\n      try {\n        payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n            \"sha256 : 'wrong-sha256'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"expected sha256 hash :\"));\n      }\n\n      try {\n        payload = \"{add-package:{name : 'foo', url: 'http://localhost:\" + port + \"/jar0.jar', \" +\n            \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"Expected error\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"Actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"no such resource available: foo\"));\n      }\n\n      payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'bar', class : 'org.apache.solr.core.RuntimeLibReqHandler', package : global}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      Map<String, Object> map = new ClusterProperties(cluster.getZkClient()).getClusterProperties();\n\n\n      V2Request request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", null));\n\n\n      assertEquals(\"org.apache.solr.core.RuntimeLibReqHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"bar\", \"class\")));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar3.jar', \" +\n          \"sha256 : '20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      request = new V2Request.Builder(\"/node/ext/bar\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, Utils.makeMap(\n          \"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n          \"loader\", MemClassLoader.class.getName(),\n          \"version\", \"3\")\n      );\n\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'bar'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      request = new V2Request.Builder(\"/node/ext\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build();\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(SolrRequestHandler.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-package : 'global'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertResponseValues(10, cluster.getSolrClient(), request, ImmutableMap.of(RuntimeLib.TYPE,\n          (Predicate<Object>) o -> o instanceof List && ((List) o).isEmpty()));\n\n\n      URL baseUrl = cluster.getRandomJetty(random()).getBaseUrl();\n      try(HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()){\n        SimpleSolrResponse rsp = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/____v2/node/blob\", new ModifiableSolrParams()).process(client);\n        List l = (List) rsp.nl.get(\"blob\");\n        assertTrue(l.contains(\"e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc\"));\n        assertTrue(l.contains(\"20e0bfaec71b2e93c4da9f2ed3745dda04dc3fc915b66cc0275863982e73b2a3\"));\n      }\n    } finally {\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cb89907619e6c5c18cc44ba2fc0521ff10c845c":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"c44cc06c26e456fe9c215072b79fce30babe3975":["3cb89907619e6c5c18cc44ba2fc0521ff10c845c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["3cb89907619e6c5c18cc44ba2fc0521ff10c845c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["3cb89907619e6c5c18cc44ba2fc0521ff10c845c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"3cb89907619e6c5c18cc44ba2fc0521ff10c845c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}