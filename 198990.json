{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.ContextCompletionWeight#setInnerWeight(IntsRef,int).mjava","commits":[{"id":"d3e870f9bab17325ebf91f7500d2c05596634741","date":1438287049,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.ContextCompletionWeight#setInnerWeight(IntsRef,int).mjava","pathOld":"/dev/null","sourceNew":"    private void setInnerWeight(IntsRef ref, int offset) {\n      IntsRefBuilder refBuilder = new IntsRefBuilder();\n      for (int i = offset; i < ref.length; i++) {\n        if (ref.ints[ref.offset + i] == ContextSuggestField.CONTEXT_SEPARATOR) {\n          if (i > 0) {\n            refBuilder.copyInts(ref.ints, ref.offset, i);\n            currentContext = Util.toBytesRef(refBuilder.get(), scratch).utf8ToString();\n          } else {\n            currentContext = null;\n          }\n          ref.offset = ++i;\n          assert ref.offset < ref.length : \"input should not end with the context separator\";\n          if (ref.ints[i] == CompletionAnalyzer.SEP_LABEL) {\n            ref.offset++;\n            assert ref.offset < ref.length : \"input should not end with a context separator followed by SEP_LABEL\";\n          }\n          ref.length = ref.length - ref.offset;\n          refBuilder.copyInts(ref.ints, ref.offset, ref.length);\n          innerWeight.setNextMatch(refBuilder.get());\n          return;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","date":1528168051,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.ContextCompletionWeight#setInnerWeight(IntsRef,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.ContextCompletionWeight#setInnerWeight(IntsRef,int).mjava","sourceNew":"    private void setInnerWeight(IntsRef ref, int offset) {\n      IntsRefBuilder refBuilder = new IntsRefBuilder();\n      for (int i = offset; i < ref.length; i++) {\n        if (ref.ints[ref.offset + i] == ContextSuggestField.CONTEXT_SEPARATOR) {\n          if (i > 0) {\n            refBuilder.copyInts(ref.ints, ref.offset, i);\n            currentContext = Util.toBytesRef(refBuilder.get(), scratch).utf8ToString();\n          } else {\n            currentContext = null;\n          }\n          ref.offset = ++i;\n          assert ref.offset < ref.length : \"input should not end with the context separator\";\n          if (ref.ints[i] == ConcatenateGraphFilter.SEP_LABEL) {\n            ref.offset++;\n            assert ref.offset < ref.length : \"input should not end with a context separator followed by SEP_LABEL\";\n          }\n          ref.length = ref.length - ref.offset;\n          refBuilder.copyInts(ref.ints, ref.offset, ref.length);\n          innerWeight.setNextMatch(refBuilder.get());\n          return;\n        }\n      }\n    }\n\n","sourceOld":"    private void setInnerWeight(IntsRef ref, int offset) {\n      IntsRefBuilder refBuilder = new IntsRefBuilder();\n      for (int i = offset; i < ref.length; i++) {\n        if (ref.ints[ref.offset + i] == ContextSuggestField.CONTEXT_SEPARATOR) {\n          if (i > 0) {\n            refBuilder.copyInts(ref.ints, ref.offset, i);\n            currentContext = Util.toBytesRef(refBuilder.get(), scratch).utf8ToString();\n          } else {\n            currentContext = null;\n          }\n          ref.offset = ++i;\n          assert ref.offset < ref.length : \"input should not end with the context separator\";\n          if (ref.ints[i] == CompletionAnalyzer.SEP_LABEL) {\n            ref.offset++;\n            assert ref.offset < ref.length : \"input should not end with a context separator followed by SEP_LABEL\";\n          }\n          ref.length = ref.length - ref.offset;\n          refBuilder.copyInts(ref.ints, ref.offset, ref.length);\n          innerWeight.setNextMatch(refBuilder.get());\n          return;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.ContextCompletionWeight#setInnerWeight(IntsRef,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.ContextCompletionWeight#setInnerWeight(IntsRef,int).mjava","sourceNew":"    private void setInnerWeight(IntsRef ref, int offset) {\n      IntsRefBuilder refBuilder = new IntsRefBuilder();\n      for (int i = offset; i < ref.length; i++) {\n        if (ref.ints[ref.offset + i] == ContextSuggestField.CONTEXT_SEPARATOR) {\n          if (i > 0) {\n            refBuilder.copyInts(ref.ints, ref.offset, i);\n            currentContext = Util.toBytesRef(refBuilder.get(), scratch).utf8ToString();\n          } else {\n            currentContext = null;\n          }\n          ref.offset = ++i;\n          assert ref.offset < ref.length : \"input should not end with the context separator\";\n          if (ref.ints[i] == ConcatenateGraphFilter.SEP_LABEL) {\n            ref.offset++;\n            assert ref.offset < ref.length : \"input should not end with a context separator followed by SEP_LABEL\";\n          }\n          ref.length = ref.length - ref.offset;\n          refBuilder.copyInts(ref.ints, ref.offset, ref.length);\n          innerWeight.setNextMatch(refBuilder.get());\n          return;\n        }\n      }\n    }\n\n","sourceOld":"    private void setInnerWeight(IntsRef ref, int offset) {\n      IntsRefBuilder refBuilder = new IntsRefBuilder();\n      for (int i = offset; i < ref.length; i++) {\n        if (ref.ints[ref.offset + i] == ContextSuggestField.CONTEXT_SEPARATOR) {\n          if (i > 0) {\n            refBuilder.copyInts(ref.ints, ref.offset, i);\n            currentContext = Util.toBytesRef(refBuilder.get(), scratch).utf8ToString();\n          } else {\n            currentContext = null;\n          }\n          ref.offset = ++i;\n          assert ref.offset < ref.length : \"input should not end with the context separator\";\n          if (ref.ints[i] == CompletionAnalyzer.SEP_LABEL) {\n            ref.offset++;\n            assert ref.offset < ref.length : \"input should not end with a context separator followed by SEP_LABEL\";\n          }\n          ref.length = ref.length - ref.offset;\n          refBuilder.copyInts(ref.ints, ref.offset, ref.length);\n          innerWeight.setNextMatch(refBuilder.get());\n          return;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.ContextCompletionWeight#setInnerWeight(IntsRef,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/ContextQuery.ContextCompletionWeight#setInnerWeight(IntsRef,int).mjava","sourceNew":"    private void setInnerWeight(IntsRef ref, int offset) {\n      IntsRefBuilder refBuilder = new IntsRefBuilder();\n      for (int i = offset; i < ref.length; i++) {\n        if (ref.ints[ref.offset + i] == ContextSuggestField.CONTEXT_SEPARATOR) {\n          if (i > 0) {\n            refBuilder.copyInts(ref.ints, ref.offset, i);\n            currentContext = Util.toBytesRef(refBuilder.get(), scratch).utf8ToString();\n          } else {\n            currentContext = null;\n          }\n          ref.offset = ++i;\n          assert ref.offset < ref.length : \"input should not end with the context separator\";\n          if (ref.ints[i] == ConcatenateGraphFilter.SEP_LABEL) {\n            ref.offset++;\n            assert ref.offset < ref.length : \"input should not end with a context separator followed by SEP_LABEL\";\n          }\n          ref.length = ref.length - ref.offset;\n          refBuilder.copyInts(ref.ints, ref.offset, ref.length);\n          innerWeight.setNextMatch(refBuilder.get());\n          return;\n        }\n      }\n    }\n\n","sourceOld":"    private void setInnerWeight(IntsRef ref, int offset) {\n      IntsRefBuilder refBuilder = new IntsRefBuilder();\n      for (int i = offset; i < ref.length; i++) {\n        if (ref.ints[ref.offset + i] == ContextSuggestField.CONTEXT_SEPARATOR) {\n          if (i > 0) {\n            refBuilder.copyInts(ref.ints, ref.offset, i);\n            currentContext = Util.toBytesRef(refBuilder.get(), scratch).utf8ToString();\n          } else {\n            currentContext = null;\n          }\n          ref.offset = ++i;\n          assert ref.offset < ref.length : \"input should not end with the context separator\";\n          if (ref.ints[i] == CompletionAnalyzer.SEP_LABEL) {\n            ref.offset++;\n            assert ref.offset < ref.length : \"input should not end with a context separator followed by SEP_LABEL\";\n          }\n          ref.length = ref.length - ref.offset;\n          refBuilder.copyInts(ref.ints, ref.offset, ref.length);\n          innerWeight.setNextMatch(refBuilder.get());\n          return;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["d3e870f9bab17325ebf91f7500d2c05596634741","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"d3e870f9bab17325ebf91f7500d2c05596634741":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["d3e870f9bab17325ebf91f7500d2c05596634741"],"f592209545c71895260367152601e9200399776d":["d3e870f9bab17325ebf91f7500d2c05596634741","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3e870f9bab17325ebf91f7500d2c05596634741"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"d3e870f9bab17325ebf91f7500d2c05596634741":["b70042a8a492f7054d480ccdd2be9796510d4327","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","f592209545c71895260367152601e9200399776d"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}