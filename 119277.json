{"path":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","commits":[{"id":"9d7f2f39556d99cecd24f152bdece2b6432458c3","date":1077651298,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","pathOld":"/dev/null","sourceNew":"\t// runs a variety of sorts useful for multisearchers\n\tprivate void runMultiSorts (Searcher multi) throws Exception {\n\t\tsort.setSort (SortField.FIELD_DOC);\n\t\tassertMatchesPattern (multi, queryA, sort, \"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}\");\n\n\t\tsort.setSort (new SortField (\"int\", SortField.INT));\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[ABE]{3}C\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"C[AB]{2}EJGFHDI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"BAFE[IC]{2}JHDG\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertMatches (full, queryA, sort, \"IDHFGJEABC\");\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertMatches (full, queryA, sort, \"GDHJICEFAB\");\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba534479820dee396d07f520ba2a55400a1b6e7d","date":1085439102,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","sourceNew":"\t// runs a variety of sorts useful for multisearchers\n\tprivate void runMultiSorts (Searcher multi) throws Exception {\n\t\tsort.setSort (SortField.FIELD_DOC);\n\t\tassertMatchesPattern (multi, queryA, sort, \"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}\");\n\n\t\tsort.setSort (new SortField (\"int\", SortField.INT));\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[ABE]{3}C\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"C[AB]{2}EJGFHDI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"BAFE[IC]{2}JHDG\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"string\", Locale.US) });\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"string\", Locale.US, true) });\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertMatches (multi, queryA, sort, \"IDHFGJEABC\");\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertMatches (multi, queryA, sort, \"GDHJICEFAB\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (multi, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (multi, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (multi, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryF, sort, \"IJZ\");\n\t}\n\n","sourceOld":"\t// runs a variety of sorts useful for multisearchers\n\tprivate void runMultiSorts (Searcher multi) throws Exception {\n\t\tsort.setSort (SortField.FIELD_DOC);\n\t\tassertMatchesPattern (multi, queryA, sort, \"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}\");\n\n\t\tsort.setSort (new SortField (\"int\", SortField.INT));\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[ABE]{3}C\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"C[AB]{2}EJGFHDI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"BAFE[IC]{2}JHDG\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertMatches (full, queryA, sort, \"IDHFGJEABC\");\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertMatches (full, queryA, sort, \"GDHJICEFAB\");\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5457736ee10c96b4fcd88997461006c8585ac24","date":1131568124,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n\tprivate void runMultiSorts (Searcher multi) throws Exception {\n\t\tsort.setSort (SortField.FIELD_DOC);\n\t\tassertMatchesPattern (multi, queryA, sort, \"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}\");\n\n\t\tsort.setSort (new SortField (\"int\", SortField.INT));\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[ABE]{3}C\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"C[AB]{2}EJGFHDI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"BAFE[IC]{2}JHDG\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"string\", Locale.US) });\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"string\", Locale.US, true) });\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertMatches (multi, queryA, sort, \"IDHFGJEABC\");\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertMatches (multi, queryA, sort, \"GDHJICEFAB\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (multi, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (multi, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (multi, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryF, sort, \"IJZ\");\n\t}\n\n","sourceOld":"\t// runs a variety of sorts useful for multisearchers\n\tprivate void runMultiSorts (Searcher multi) throws Exception {\n\t\tsort.setSort (SortField.FIELD_DOC);\n\t\tassertMatchesPattern (multi, queryA, sort, \"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}\");\n\n\t\tsort.setSort (new SortField (\"int\", SortField.INT));\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[ABE]{3}C\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"C[AB]{2}EJGFHDI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"BAFE[IC]{2}JHDG\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"string\", Locale.US) });\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"string\", Locale.US, true) });\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertMatches (multi, queryA, sort, \"IDHFGJEABC\");\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertMatches (multi, queryA, sort, \"GDHJICEFAB\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (multi, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (multi, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (multi, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryF, sort, \"IJZ\");\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","sourceNew":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts (Searcher multi) throws Exception {\n    sort.setSort (SortField.FIELD_DOC);\n    assertMatchesPattern (multi, queryA, sort, \"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT));\n    assertMatchesPattern (multi, queryA, sort, \"IDHFGJ[ABE]{3}C\");\n\n    sort.setSort (new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n    assertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n    sort.setSort (\"int\");\n    assertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n    sort.setSort (new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n    assertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n    sort.setSort (\"float\");\n    assertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n    sort.setSort (\"string\");\n    assertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort (\"int\", true);\n    assertMatchesPattern (multi, queryA, sort, \"C[AB]{2}EJGFHDI\");\n\n    sort.setSort (\"float\", true);\n    assertMatchesPattern (multi, queryA, sort, \"BAFE[IC]{2}JHDG\");\n\n    sort.setSort (\"string\", true);\n    assertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort (new SortField[] { new SortField (\"string\", Locale.US) });\n    assertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort (new SortField[] { new SortField (\"string\", Locale.US, true) });\n    assertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort (new String[] {\"int\",\"float\"});\n    assertMatches (multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort (new String[] {\"float\",\"string\"});\n    assertMatches (multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort (\"int\");\n    assertMatches (multi, queryF, sort, \"IZJ\");\n\n    sort.setSort (\"int\", true);\n    assertMatches (multi, queryF, sort, \"JZI\");\n\n    sort.setSort (\"float\");\n    assertMatches (multi, queryF, sort, \"ZJI\");\n\n    sort.setSort (\"string\");\n    assertMatches (multi, queryF, sort, \"ZJI\");\n\n    sort.setSort (\"string\", true);\n    assertMatches (multi, queryF, sort, \"IJZ\");\n  }\n\n","sourceOld":"  // runs a variety of sorts useful for multisearchers\n\tprivate void runMultiSorts (Searcher multi) throws Exception {\n\t\tsort.setSort (SortField.FIELD_DOC);\n\t\tassertMatchesPattern (multi, queryA, sort, \"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}\");\n\n\t\tsort.setSort (new SortField (\"int\", SortField.INT));\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[ABE]{3}C\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n\t\tsort.setSort (new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"C[AB]{2}EJGFHDI\");\n\n\t\tsort.setSort (\"float\", true);\n\t\tassertMatchesPattern (multi, queryA, sort, \"BAFE[IC]{2}JHDG\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"string\", Locale.US) });\n\t\tassertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n\t\tsort.setSort (new SortField[] { new SortField (\"string\", Locale.US, true) });\n\t\tassertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertMatches (multi, queryA, sort, \"IDHFGJEABC\");\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertMatches (multi, queryA, sort, \"GDHJICEFAB\");\n\n\t\tsort.setSort (\"int\");\n\t\tassertMatches (multi, queryF, sort, \"IZJ\");\n\n\t\tsort.setSort (\"int\", true);\n\t\tassertMatches (multi, queryF, sort, \"JZI\");\n\n\t\tsort.setSort (\"float\");\n\t\tassertMatches (multi, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\");\n\t\tassertMatches (multi, queryF, sort, \"ZJI\");\n\n\t\tsort.setSort (\"string\", true);\n\t\tassertMatches (multi, queryF, sort, \"IJZ\");\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestSort#runMultiSorts(Searcher).mjava","sourceNew":null,"sourceOld":"  // runs a variety of sorts useful for multisearchers\n  private void runMultiSorts (Searcher multi) throws Exception {\n    sort.setSort (SortField.FIELD_DOC);\n    assertMatchesPattern (multi, queryA, sort, \"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}\");\n\n    sort.setSort (new SortField (\"int\", SortField.INT));\n    assertMatchesPattern (multi, queryA, sort, \"IDHFGJ[ABE]{3}C\");\n\n    sort.setSort (new SortField[] {new SortField (\"int\", SortField.INT), SortField.FIELD_DOC});\n    assertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n    sort.setSort (\"int\");\n    assertMatchesPattern (multi, queryA, sort, \"IDHFGJ[AB]{2}EC\");\n\n    sort.setSort (new SortField[] {new SortField (\"float\", SortField.FLOAT), SortField.FIELD_DOC});\n    assertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n    sort.setSort (\"float\");\n    assertMatchesPattern (multi, queryA, sort, \"GDHJ[CI]{2}EFAB\");\n\n    sort.setSort (\"string\");\n    assertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort (\"int\", true);\n    assertMatchesPattern (multi, queryA, sort, \"C[AB]{2}EJGFHDI\");\n\n    sort.setSort (\"float\", true);\n    assertMatchesPattern (multi, queryA, sort, \"BAFE[IC]{2}JHDG\");\n\n    sort.setSort (\"string\", true);\n    assertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort (new SortField[] { new SortField (\"string\", Locale.US) });\n    assertMatches (multi, queryA, sort, \"DJAIHGFEBC\");\n\n    sort.setSort (new SortField[] { new SortField (\"string\", Locale.US, true) });\n    assertMatches (multi, queryA, sort, \"CBEFGHIAJD\");\n\n    sort.setSort (new String[] {\"int\",\"float\"});\n    assertMatches (multi, queryA, sort, \"IDHFGJEABC\");\n\n    sort.setSort (new String[] {\"float\",\"string\"});\n    assertMatches (multi, queryA, sort, \"GDHJICEFAB\");\n\n    sort.setSort (\"int\");\n    assertMatches (multi, queryF, sort, \"IZJ\");\n\n    sort.setSort (\"int\", true);\n    assertMatches (multi, queryF, sort, \"JZI\");\n\n    sort.setSort (\"float\");\n    assertMatches (multi, queryF, sort, \"ZJI\");\n\n    sort.setSort (\"string\");\n    assertMatches (multi, queryF, sort, \"ZJI\");\n\n    sort.setSort (\"string\", true);\n    assertMatches (multi, queryF, sort, \"IJZ\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f5457736ee10c96b4fcd88997461006c8585ac24":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"9d7f2f39556d99cecd24f152bdece2b6432458c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63bc3238545c6012bd44f5d294077997f236bc4e":["f5457736ee10c96b4fcd88997461006c8585ac24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["9d7f2f39556d99cecd24f152bdece2b6432458c3"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d7f2f39556d99cecd24f152bdece2b6432458c3"],"f5457736ee10c96b4fcd88997461006c8585ac24":["63bc3238545c6012bd44f5d294077997f236bc4e"],"9d7f2f39556d99cecd24f152bdece2b6432458c3":["ba534479820dee396d07f520ba2a55400a1b6e7d"],"63bc3238545c6012bd44f5d294077997f236bc4e":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"ba534479820dee396d07f520ba2a55400a1b6e7d":["f5457736ee10c96b4fcd88997461006c8585ac24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}