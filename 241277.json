{"path":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer());\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer());\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer());\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiSearcherRanking#checkQuery(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * checks if a query yields the same result when executed on\n   * a single IndexSearcher containing all documents and on a\n   * MultiSearcher aggregating sub-searchers\n   * @param queryStr  the query to check.\n   * @throws IOException\n   * @throws ParseException\n   */\n  private void checkQuery(String queryStr) throws IOException, ParseException {\n    // check result hit ranking\n    if(VERBOSE) System.out.println(\"Query: \" + queryStr);\n      QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer());\n    Query query = queryParser.parse(queryStr);\n    ScoreDoc[] multiSearcherHits = multiSearcher.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleSearcherHits = singleSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(multiSearcherHits.length, singleSearcherHits.length);\n    for (int i = 0; i < multiSearcherHits.length; i++) {\n      Document docMulti = multiSearcher.doc(multiSearcherHits[i].doc);\n      Document docSingle = singleSearcher.doc(singleSearcherHits[i].doc);\n      if(VERBOSE) System.out.println(\"Multi:  \" + docMulti.get(FIELD_NAME) + \" score=\"\n          + multiSearcherHits[i].score);\n      if(VERBOSE) System.out.println(\"Single: \" + docSingle.get(FIELD_NAME) + \" score=\"\n          + singleSearcherHits[i].score);\n      assertEquals(multiSearcherHits[i].score, singleSearcherHits[i].score,\n          0.001f);\n      assertEquals(docMulti.get(FIELD_NAME), docSingle.get(FIELD_NAME));\n    }\n    if(VERBOSE) System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d572389229127c297dd1fa5ce4758e1cec41e799","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["d572389229127c297dd1fa5ce4758e1cec41e799","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}