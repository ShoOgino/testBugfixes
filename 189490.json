{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","commits":[{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#putDynamicDescriptor(String,CoreDescriptor).mjava","sourceNew":"  protected void addCoreDescriptor(CoreDescriptor p) {\n    synchronized (modifyLock) {\n      if (p.isTransient()) {\n        if (container.getTransientCacheHandler() != null) {\n          container.getTransientCacheHandler().addTransientDescriptor(p.getName(), p);\n        }\n      } else {\n        residentDesciptors.put(p.getName(), p);\n      }\n    }\n  }\n\n","sourceOld":"  protected void putDynamicDescriptor(String rawName, CoreDescriptor cd) {\n    synchronized (modifyLock) {\n      if (cd.isTransient()) {\n        if (container.getTransientCacheHandler() != null) {\n          container.getTransientCacheHandler().addTransientDescriptor(rawName, cd);\n        } else {\n          log.error(\"Tried to add transient core to transient handler, but no transient core handler has been found. \"\n              + \" Descriptor: \" + cd.toString());\n        }\n      } else {\n        lazyDescriptors.put(rawName, cd);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  protected void addCoreDescriptor(CoreDescriptor p) {\n    synchronized (modifyLock) {\n      if (p.isTransient()) {\n        if (container.getTransientCacheHandler() != null) {\n          container.getTransientCacheHandler().addTransientDescriptor(p.getName(), p);\n        }\n      } else {\n        residentDesciptors.put(p.getName(), p);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","sourceNew":"  protected void addCoreDescriptor(CoreDescriptor p) {\n    synchronized (modifyLock) {\n      if (p.isTransient()) {\n        if (getTransientCacheHandler() != null) {\n          getTransientCacheHandler().addTransientDescriptor(p.getName(), p);\n        } else {\n          log.warn(\"We encountered a core marked as transient, but there is no transient handler defined. This core will be inaccessible\");\n        }\n      } else {\n        residentDesciptors.put(p.getName(), p);\n      }\n    }\n  }\n\n","sourceOld":"  protected void addCoreDescriptor(CoreDescriptor p) {\n    synchronized (modifyLock) {\n      if (p.isTransient()) {\n        if (container.getTransientCacheHandler() != null) {\n          container.getTransientCacheHandler().addTransientDescriptor(p.getName(), p);\n        }\n      } else {\n        residentDesciptors.put(p.getName(), p);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","sourceNew":"  protected void addCoreDescriptor(CoreDescriptor p) {\n    synchronized (modifyLock) {\n      if (p.isTransient()) {\n        if (getTransientCacheHandler() != null) {\n          getTransientCacheHandler().addTransientDescriptor(p.getName(), p);\n        } else {\n          log.warn(\"We encountered a core marked as transient, but there is no transient handler defined. This core will be inaccessible\");\n        }\n      } else {\n        residentDesciptors.put(p.getName(), p);\n      }\n    }\n  }\n\n","sourceOld":"  protected void addCoreDescriptor(CoreDescriptor p) {\n    synchronized (modifyLock) {\n      if (p.isTransient()) {\n        if (container.getTransientCacheHandler() != null) {\n          container.getTransientCacheHandler().addTransientDescriptor(p.getName(), p);\n        }\n      } else {\n        residentDesciptors.put(p.getName(), p);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreDescriptor(CoreDescriptor).mjava","sourceNew":"  protected void addCoreDescriptor(CoreDescriptor p) {\n    synchronized (modifyLock) {\n      if (p.isTransient()) {\n        if (getTransientCacheHandler() != null) {\n          getTransientCacheHandler().addTransientDescriptor(p.getName(), p);\n        } else {\n          log.warn(\"We encountered a core marked as transient, but there is no transient handler defined. This core will be inaccessible\");\n        }\n      } else {\n        residentDesciptors.put(p.getName(), p);\n      }\n    }\n  }\n\n","sourceOld":"  protected void addCoreDescriptor(CoreDescriptor p) {\n    synchronized (modifyLock) {\n      if (p.isTransient()) {\n        if (container.getTransientCacheHandler() != null) {\n          container.getTransientCacheHandler().addTransientDescriptor(p.getName(), p);\n        }\n      } else {\n        residentDesciptors.put(p.getName(), p);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"30c8e5574b55d57947e989443dfde611646530ee":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","28288370235ed02234a64753cdbf0c6ec096304a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["30c8e5574b55d57947e989443dfde611646530ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}