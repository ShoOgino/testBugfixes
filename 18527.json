{"path":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","commits":[{"id":"7c5e33ebba9142b231cb81ff06dcccccbfcd8414","date":1505832411,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","pathOld":"/dev/null","sourceNew":"  public void testScorerGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.MUST);\n    b.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.FILTER);\n    Query q = b.build();\n    IndexSearcher s = new IndexSearcher(r);\n    final boolean[] setScorerCalled = new boolean[1];\n    s.search(q, new SimpleCollector() {\n        @Override\n        public void setScorer(Scorer s) throws IOException {\n          Collection<Scorer.ChildScorer> childScorers = s.getChildren();\n          setScorerCalled[0] = true;\n          assertEquals(2, childScorers.size());\n          Set<String> terms = new HashSet<>();\n          for (Scorer.ChildScorer childScorer : childScorers) {\n            Query query = childScorer.child.getWeight().getQuery();\n            assertTrue(query instanceof TermQuery);\n            Term term = ((TermQuery) query).getTerm();\n            assertEquals(\"field\", term.field());\n            terms.add(term.text());\n          }\n          assertEquals(2, terms.size());\n          assertTrue(terms.contains(\"a\"));\n          assertTrue(terms.contains(\"b\"));\n        }\n\n        @Override\n        public void collect(int doc) {\n        }\n\n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n    assertTrue(setScorerCalled[0]);\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","pathOld":"/dev/null","sourceNew":"  public void testScorerGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.MUST);\n    b.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.FILTER);\n    Query q = b.build();\n    IndexSearcher s = new IndexSearcher(r);\n    final boolean[] setScorerCalled = new boolean[1];\n    s.search(q, new SimpleCollector() {\n        @Override\n        public void setScorer(Scorer s) throws IOException {\n          Collection<Scorer.ChildScorer> childScorers = s.getChildren();\n          setScorerCalled[0] = true;\n          assertEquals(2, childScorers.size());\n          Set<String> terms = new HashSet<>();\n          for (Scorer.ChildScorer childScorer : childScorers) {\n            Query query = childScorer.child.getWeight().getQuery();\n            assertTrue(query instanceof TermQuery);\n            Term term = ((TermQuery) query).getTerm();\n            assertEquals(\"field\", term.field());\n            terms.add(term.text());\n          }\n          assertEquals(2, terms.size());\n          assertTrue(terms.contains(\"a\"));\n          assertTrue(terms.contains(\"b\"));\n        }\n\n        @Override\n        public void collect(int doc) {\n        }\n\n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n    assertTrue(setScorerCalled[0]);\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","sourceNew":"  public void testScorerGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.MUST);\n    b.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.FILTER);\n    Query q = b.build();\n    IndexSearcher s = new IndexSearcher(r);\n    final boolean[] setScorerCalled = new boolean[1];\n    s.search(q, new SimpleCollector() {\n        @Override\n        public void setScorer(Scorer s) throws IOException {\n          Collection<Scorer.ChildScorer> childScorers = s.getChildren();\n          setScorerCalled[0] = true;\n          assertEquals(2, childScorers.size());\n          Set<String> terms = new HashSet<>();\n          for (Scorer.ChildScorer childScorer : childScorers) {\n            Query query = childScorer.child.getWeight().getQuery();\n            assertTrue(query instanceof TermQuery);\n            Term term = ((TermQuery) query).getTerm();\n            assertEquals(\"field\", term.field());\n            terms.add(term.text());\n          }\n          assertEquals(2, terms.size());\n          assertTrue(terms.contains(\"a\"));\n          assertTrue(terms.contains(\"b\"));\n        }\n\n        @Override\n        public void collect(int doc) {\n        }\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE;\n        }\n      });\n    assertTrue(setScorerCalled[0]);\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testScorerGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.MUST);\n    b.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.FILTER);\n    Query q = b.build();\n    IndexSearcher s = new IndexSearcher(r);\n    final boolean[] setScorerCalled = new boolean[1];\n    s.search(q, new SimpleCollector() {\n        @Override\n        public void setScorer(Scorer s) throws IOException {\n          Collection<Scorer.ChildScorer> childScorers = s.getChildren();\n          setScorerCalled[0] = true;\n          assertEquals(2, childScorers.size());\n          Set<String> terms = new HashSet<>();\n          for (Scorer.ChildScorer childScorer : childScorers) {\n            Query query = childScorer.child.getWeight().getQuery();\n            assertTrue(query instanceof TermQuery);\n            Term term = ((TermQuery) query).getTerm();\n            assertEquals(\"field\", term.field());\n            terms.add(term.text());\n          }\n          assertEquals(2, terms.size());\n          assertTrue(terms.contains(\"a\"));\n          assertTrue(terms.contains(\"b\"));\n        }\n\n        @Override\n        public void collect(int doc) {\n        }\n\n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n    assertTrue(setScorerCalled[0]);\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","sourceNew":"  public void testScorerGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.MUST);\n    b.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.FILTER);\n    Query q = b.build();\n    IndexSearcher s = new IndexSearcher(r);\n    final boolean[] setScorerCalled = new boolean[1];\n    s.search(q, new SimpleCollector() {\n        @Override\n        public void setScorer(Scorer s) throws IOException {\n          Collection<Scorer.ChildScorer> childScorers = s.getChildren();\n          setScorerCalled[0] = true;\n          assertEquals(2, childScorers.size());\n          Set<String> terms = new HashSet<>();\n          for (Scorer.ChildScorer childScorer : childScorers) {\n            Query query = childScorer.child.getWeight().getQuery();\n            assertTrue(query instanceof TermQuery);\n            Term term = ((TermQuery) query).getTerm();\n            assertEquals(\"field\", term.field());\n            terms.add(term.text());\n          }\n          assertEquals(2, terms.size());\n          assertTrue(terms.contains(\"a\"));\n          assertTrue(terms.contains(\"b\"));\n        }\n\n        @Override\n        public void collect(int doc) {\n        }\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE;\n        }\n      });\n    assertTrue(setScorerCalled[0]);\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testScorerGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.MUST);\n    b.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.FILTER);\n    Query q = b.build();\n    IndexSearcher s = new IndexSearcher(r);\n    final boolean[] setScorerCalled = new boolean[1];\n    s.search(q, new SimpleCollector() {\n        @Override\n        public void setScorer(Scorer s) throws IOException {\n          Collection<Scorer.ChildScorer> childScorers = s.getChildren();\n          setScorerCalled[0] = true;\n          assertEquals(2, childScorers.size());\n          Set<String> terms = new HashSet<>();\n          for (Scorer.ChildScorer childScorer : childScorers) {\n            Query query = childScorer.child.getWeight().getQuery();\n            assertTrue(query instanceof TermQuery);\n            Term term = ((TermQuery) query).getTerm();\n            assertEquals(\"field\", term.field());\n            terms.add(term.text());\n          }\n          assertEquals(2, terms.size());\n          assertTrue(terms.contains(\"a\"));\n          assertTrue(terms.contains(\"b\"));\n        }\n\n        @Override\n        public void collect(int doc) {\n        }\n\n        @Override\n        public boolean needsScores() {\n          return true;\n        }\n      });\n    assertTrue(setScorerCalled[0]);\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConjunctions#testScorerGetChildren().mjava","sourceNew":"  public void testScorerGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.MUST);\n    b.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.FILTER);\n    Query q = b.build();\n    IndexSearcher s = new IndexSearcher(r);\n    final boolean[] setScorerCalled = new boolean[1];\n    s.search(q, new SimpleCollector() {\n        @Override\n        public void setScorer(Scorable s) throws IOException {\n          Collection<Scorer.ChildScorable> childScorers = s.getChildren();\n          setScorerCalled[0] = true;\n          assertEquals(2, childScorers.size());\n          Set<String> terms = new HashSet<>();\n          for (Scorer.ChildScorable childScorer : childScorers) {\n            Query query = ((Scorer)childScorer.child).getWeight().getQuery();\n            assertTrue(query instanceof TermQuery);\n            Term term = ((TermQuery) query).getTerm();\n            assertEquals(\"field\", term.field());\n            terms.add(term.text());\n          }\n          assertEquals(2, terms.size());\n          assertTrue(terms.contains(\"a\"));\n          assertTrue(terms.contains(\"b\"));\n        }\n\n        @Override\n        public void collect(int doc) {\n        }\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE;\n        }\n      });\n    assertTrue(setScorerCalled[0]);\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testScorerGetChildren() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = DirectoryReader.open(w);\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(new TermQuery(new Term(\"field\", \"a\")), BooleanClause.Occur.MUST);\n    b.add(new TermQuery(new Term(\"field\", \"b\")), BooleanClause.Occur.FILTER);\n    Query q = b.build();\n    IndexSearcher s = new IndexSearcher(r);\n    final boolean[] setScorerCalled = new boolean[1];\n    s.search(q, new SimpleCollector() {\n        @Override\n        public void setScorer(Scorer s) throws IOException {\n          Collection<Scorer.ChildScorer> childScorers = s.getChildren();\n          setScorerCalled[0] = true;\n          assertEquals(2, childScorers.size());\n          Set<String> terms = new HashSet<>();\n          for (Scorer.ChildScorer childScorer : childScorers) {\n            Query query = childScorer.child.getWeight().getQuery();\n            assertTrue(query instanceof TermQuery);\n            Term term = ((TermQuery) query).getTerm();\n            assertEquals(\"field\", term.field());\n            terms.add(term.text());\n          }\n          assertEquals(2, terms.size());\n          assertTrue(terms.contains(\"a\"));\n          assertTrue(terms.contains(\"b\"));\n        }\n\n        @Override\n        public void collect(int doc) {\n        }\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE;\n        }\n      });\n    assertTrue(setScorerCalled[0]);\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c5e33ebba9142b231cb81ff06dcccccbfcd8414"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["417142ff08fda9cf0b72d5133e63097a166c6458"],"7c5e33ebba9142b231cb81ff06dcccccbfcd8414":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7c5e33ebba9142b231cb81ff06dcccccbfcd8414"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7c5e33ebba9142b231cb81ff06dcccccbfcd8414","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","7c5e33ebba9142b231cb81ff06dcccccbfcd8414"],"7c5e33ebba9142b231cb81ff06dcccccbfcd8414":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}