{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testAddAndDeleteReplica().mjava","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(cloudClient.getZkStateReader().getClusterState().getCollection(collectionName));\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(cloudClient.getZkStateReader().getClusterState().getCollection(collectionName));\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(collectionName, cloudClient.getZkStateReader().getClusterState());\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected to see replica \" + newReplicaName + \" on node \" + node, collectionName, (n, c) -> {\n      Replica r = c.getSlice(\"shard1\").getReplica(newReplicaName);\n      return r != null && r.getNodeName().equals(node);\n    });\n    \n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplicaName)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplicaName + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplicaName) == null);\n\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(cloudClient.getZkStateReader().getClusterState().getCollection(collectionName));\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected to see replica \" + newReplicaName + \" on node \" + node, collectionName, (n, c) -> {\n      Replica r = c.getSlice(\"shard1\").getReplica(newReplicaName);\n      return r != null && r.getNodeName().equals(node);\n    });\n    \n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplicaName)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplicaName + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplicaName) == null);\n\n  }\n\n","sourceOld":"  private void testAddAndDeleteReplica() throws Exception {\n    String collectionName = \"solrj_replicatests\";\n    createCollection(collectionName, cloudClient, 1, 2);\n\n    cloudClient.setDefaultCollection(collectionName);\n\n    String newReplicaName = Assign.assignNode(cloudClient.getZkStateReader().getClusterState().getCollection(collectionName));\n    ArrayList<String> nodeList = new ArrayList<>(cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setNode(nodeList.get(0));\n    CollectionAdminResponse response = addReplica.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    Replica newReplica = null;\n\n    while (! timeout.hasTimedOut() && newReplica == null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNotNull(newReplica);\n\n    assertEquals(\"Replica should be created on the right node\",\n        cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP)\n    );\n    \n    // Test DELETEREPLICA\n    CollectionAdminRequest.DeleteReplica deleteReplicaRequest = new CollectionAdminRequest.DeleteReplica()\n            .setCollectionName(collectionName)\n            .setShardName(\"shard1\")\n            .setReplica(newReplicaName);\n    response = deleteReplicaRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n\n    while (! timeout.hasTimedOut() && newReplica != null) {\n      Slice slice = cloudClient.getZkStateReader().getClusterState().getSlice(collectionName, \"shard1\");\n      newReplica = slice.getReplica(newReplicaName);\n    }\n\n    assertNull(newReplica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e021e73178a0be1b0ff15a0894796c23f0556144","date":1493262514,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected to see replica \" + newReplicaName + \" on node \" + node, collectionName, (n, c) -> {\n      Replica r = c.getSlice(\"shard1\").getReplica(newReplicaName);\n      return r != null && r.getNodeName().equals(node);\n    });\n\n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplicaName)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplicaName + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplicaName) == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected to see replica \" + newReplicaName + \" on node \" + node, collectionName, (n, c) -> {\n      Replica r = c.getSlice(\"shard1\").getReplica(newReplicaName);\n      return r != null && r.getNodeName().equals(node);\n    });\n    \n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplicaName)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplicaName + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplicaName) == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected to see replica \" + newReplicaName + \" on node \" + node, collectionName, (n, c) -> {\n      Replica r = c.getSlice(\"shard1\").getReplica(newReplicaName);\n      return r != null && r.getNodeName().equals(node);\n    });\n\n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplicaName)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplicaName + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplicaName) == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected to see replica \" + newReplicaName + \" on node \" + node, collectionName, (n, c) -> {\n      Replica r = c.getSlice(\"shard1\").getReplica(newReplicaName);\n      return r != null && r.getNodeName().equals(node);\n    });\n    \n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplicaName)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplicaName + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplicaName) == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f100e4a037a938ee4b027674f1ca80fc208badf","date":1500526196,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    assertTrue(newReplica.getNodeName().equals(node));\n\n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplica.getName())\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplica.getName() + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplica.getName()) == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected to see replica \" + newReplicaName + \" on node \" + node, collectionName, (n, c) -> {\n      Replica r = c.getSlice(\"shard1\").getReplica(newReplicaName);\n      return r != null && r.getNodeName().equals(node);\n    });\n\n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplicaName)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplicaName + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplicaName) == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    assertTrue(newReplica.getNodeName().equals(node));\n\n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplica.getName())\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplica.getName() + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplica.getName()) == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    String newReplicaName = Assign.assignNode(getCollectionState(collectionName));\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForState(\"Expected to see replica \" + newReplicaName + \" on node \" + node, collectionName, (n, c) -> {\n      Replica r = c.getSlice(\"shard1\").getReplica(newReplicaName);\n      return r != null && r.getNodeName().equals(node);\n    });\n\n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplicaName)\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplicaName + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplicaName) == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testAddAndDeleteReplica().mjava","sourceNew":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 3);\n    \n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    assertTrue(newReplica.getNodeName().equals(node));\n\n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplica.getName())\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplica.getName() + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplica.getName()) == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddAndDeleteReplica() throws Exception {\n\n    final String collectionName = \"solrj_replicatests\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n    final String node = nodeList.get(0);\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(node)\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    assertTrue(newReplica.getNodeName().equals(node));\n\n    // Test DELETEREPLICA\n    response = CollectionAdminRequest.deleteReplica(collectionName, \"shard1\", newReplica.getName())\n        .process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n\n    waitForState(\"Expected replica \" + newReplica.getName() + \" to vanish from cluster state\", collectionName,\n        (n, c) -> c.getSlice(\"shard1\").getReplica(newReplica.getName()) == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["e021e73178a0be1b0ff15a0894796c23f0556144"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["922ddd897402a6df25c766ea8300443be5e82b3d","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","9f100e4a037a938ee4b027674f1ca80fc208badf"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["922ddd897402a6df25c766ea8300443be5e82b3d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["636a04bc82e662bf141a55f1d10f52e1c76c727b","e021e73178a0be1b0ff15a0894796c23f0556144"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"e021e73178a0be1b0ff15a0894796c23f0556144":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"922ddd897402a6df25c766ea8300443be5e82b3d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","936cdd5882761db3b844afd6f84ab81cbb011a75"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["f03e4bed5023ec3ef93a771b8888cae991cf448d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1","e021e73178a0be1b0ff15a0894796c23f0556144"],"e021e73178a0be1b0ff15a0894796c23f0556144":["9f100e4a037a938ee4b027674f1ca80fc208badf","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}