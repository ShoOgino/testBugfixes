{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","sourceNew":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    Automaton a = BasicAutomata.makeString(\"a\");\n    Automaton concat = BasicOperations.concatenate(a, BasicAutomata.makeEmpty());\n    assertTrue(BasicOperations.isEmpty(concat));\n  }\n\n","sourceOld":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    Automaton a = BasicAutomata.makeString(\"a\");\n    Automaton concat = BasicOperations.concatenate(a, BasicAutomata.makeEmpty());\n    assertTrue(BasicOperations.isEmpty(concat));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","sourceNew":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    LightAutomaton a = BasicAutomata.makeStringLight(\"a\");\n    LightAutomaton concat = BasicOperations.concatenateLight(a, BasicAutomata.makeEmptyLight());\n    assertTrue(concat.isEmpty());\n  }\n\n","sourceOld":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    Automaton a = BasicAutomata.makeString(\"a\");\n    Automaton concat = BasicOperations.concatenate(a, BasicAutomata.makeEmpty());\n    assertTrue(BasicOperations.isEmpty(concat));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","sourceNew":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    LightAutomaton a = BasicAutomata.makeStringLight(\"a\");\n    LightAutomaton concat = BasicOperations.concatenateLight(a, BasicAutomata.makeEmptyLight());\n    assertTrue(BasicOperations.isEmpty(concat));\n  }\n\n","sourceOld":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    LightAutomaton a = BasicAutomata.makeStringLight(\"a\");\n    LightAutomaton concat = BasicOperations.concatenateLight(a, BasicAutomata.makeEmptyLight());\n    assertTrue(concat.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testEmptyLanguageConcatenate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","sourceNew":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    Automaton a = Automata.makeString(\"a\");\n    Automaton concat = Operations.concatenate(a, Automata.makeEmpty());\n    assertTrue(Operations.isEmpty(concat));\n  }\n\n","sourceOld":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    LightAutomaton a = BasicAutomata.makeStringLight(\"a\");\n    LightAutomaton concat = BasicOperations.concatenateLight(a, BasicAutomata.makeEmptyLight());\n    assertTrue(BasicOperations.isEmpty(concat));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestOperations#testEmptyLanguageConcatenate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testEmptyLanguageConcatenate().mjava","sourceNew":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    Automaton a = Automata.makeString(\"a\");\n    Automaton concat = Operations.concatenate(a, Automata.makeEmpty());\n    assertTrue(Operations.isEmpty(concat));\n  }\n\n","sourceOld":"  /** Test concatenation with empty language returns empty */\n  public void testEmptyLanguageConcatenate() {\n    Automaton a = BasicAutomata.makeString(\"a\");\n    Automaton concat = BasicOperations.concatenate(a, BasicAutomata.makeEmpty());\n    assertTrue(BasicOperations.isEmpty(concat));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}