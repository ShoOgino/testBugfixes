{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsExcludeFilterQuery().mjava","commits":[{"id":"c20e2f66487155554bc2d8bc489e0ff1686ba915","date":1394942287,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsExcludeFilterQuery().mjava","pathOld":"/dev/null","sourceNew":"  //SOLR-3177\n  public void testStatsExcludeFilterQuery() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!ex=id}id\");\n    args.put(\"fq\", \"{!tag=id}id:[2 TO 3]\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test exluding filter query\", req\n            , \"//lst[@name='id']/double[@name='min'][.='1.0']\"\n            , \"//lst[@name='id']/double[@name='max'][.='4.0']\");\n\n    args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!key=id2}id\");\n    args.put(\"fq\", \"{!tag=id}id:[2 TO 3]\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test rename field\", req\n            , \"//lst[@name='id2']/double[@name='min'][.='2.0']\"\n            , \"//lst[@name='id2']/double[@name='max'][.='3.0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsExcludeFilterQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsExcludeFilterQuery().mjava","sourceNew":"  //SOLR-3177\n  public void testStatsExcludeFilterQuery() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!ex=id}id_i\");\n    args.put(\"fq\", \"{!tag=id}id_i:[2 TO 3]\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test exluding filter query\", req\n            , \"//lst[@name='id_i']/double[@name='min'][.='1.0']\"\n            , \"//lst[@name='id_i']/double[@name='max'][.='4.0']\");\n\n    args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!key=id2}id_i\");\n    args.put(\"fq\", \"{!tag=id}id_i:[2 TO 3]\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test rename field\", req\n            , \"//lst[@name='id2']/double[@name='min'][.='2.0']\"\n            , \"//lst[@name='id2']/double[@name='max'][.='3.0']\");\n  }\n\n","sourceOld":"  //SOLR-3177\n  public void testStatsExcludeFilterQuery() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!ex=id}id\");\n    args.put(\"fq\", \"{!tag=id}id:[2 TO 3]\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test exluding filter query\", req\n            , \"//lst[@name='id']/double[@name='min'][.='1.0']\"\n            , \"//lst[@name='id']/double[@name='max'][.='4.0']\");\n\n    args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!key=id2}id\");\n    args.put(\"fq\", \"{!tag=id}id:[2 TO 3]\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test rename field\", req\n            , \"//lst[@name='id2']/double[@name='min'][.='2.0']\"\n            , \"//lst[@name='id2']/double[@name='max'][.='3.0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsExcludeFilterQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsExcludeFilterQuery().mjava","sourceNew":"  //SOLR-3177\n  public void testStatsExcludeFilterQuery() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!ex=id}id_i\");\n    args.put(\"fq\", \"{!tag=id}id_i:[2 TO 3]\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test exluding filter query\", req\n            , \"//lst[@name='id_i']/double[@name='min'][.='1.0']\"\n            , \"//lst[@name='id_i']/double[@name='max'][.='4.0']\");\n\n    args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!key=id2}id_i\");\n    args.put(\"fq\", \"{!tag=id}id_i:[2 TO 3]\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test rename field\", req\n            , \"//lst[@name='id2']/double[@name='min'][.='2.0']\"\n            , \"//lst[@name='id2']/double[@name='max'][.='3.0']\");\n  }\n\n","sourceOld":"  //SOLR-3177\n  public void testStatsExcludeFilterQuery() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!ex=id}id\");\n    args.put(\"fq\", \"{!tag=id}id:[2 TO 3]\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test exluding filter query\", req\n            , \"//lst[@name='id']/double[@name='min'][.='1.0']\"\n            , \"//lst[@name='id']/double[@name='max'][.='4.0']\");\n\n    args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!key=id2}id\");\n    args.put(\"fq\", \"{!tag=id}id:[2 TO 3]\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test rename field\", req\n            , \"//lst[@name='id2']/double[@name='min'][.='2.0']\"\n            , \"//lst[@name='id2']/double[@name='max'][.='3.0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsExcludeFilterQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsExcludeFilterQuery().mjava","sourceNew":"  //SOLR-3177\n  public void testStatsExcludeFilterQuery() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!ex=id}id_i\");\n    args.put(\"fq\", \"{!tag=id}id_i:[2 TO 3]\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test exluding filter query\", req\n            , \"//lst[@name='id_i']/double[@name='min'][.='1.0']\"\n            , \"//lst[@name='id_i']/double[@name='max'][.='4.0']\");\n\n    args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!key=id2}id_i\");\n    args.put(\"fq\", \"{!tag=id}id_i:[2 TO 3]\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test rename field\", req\n            , \"//lst[@name='id2']/double[@name='min'][.='2.0']\"\n            , \"//lst[@name='id2']/double[@name='max'][.='3.0']\");\n  }\n\n","sourceOld":"  //SOLR-3177\n  public void testStatsExcludeFilterQuery() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"1\"));\n    assertU(adoc(\"id\", \"2\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!ex=id}id\");\n    args.put(\"fq\", \"{!tag=id}id:[2 TO 3]\");\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test exluding filter query\", req\n            , \"//lst[@name='id']/double[@name='min'][.='1.0']\"\n            , \"//lst[@name='id']/double[@name='max'][.='4.0']\");\n\n    args = new HashMap<String, String>();\n    args.put(CommonParams.Q, \"*:*\");\n    args.put(StatsParams.STATS, \"true\");\n    args.put(StatsParams.STATS_FIELD, \"{!key=id2}id\");\n    args.put(\"fq\", \"{!tag=id}id:[2 TO 3]\");\n    req = new LocalSolrQueryRequest(core, new MapSolrParams(args));\n\n    assertQ(\"test rename field\", req\n            , \"//lst[@name='id2']/double[@name='min'][.='2.0']\"\n            , \"//lst[@name='id2']/double[@name='max'][.='3.0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["c20e2f66487155554bc2d8bc489e0ff1686ba915"],"c20e2f66487155554bc2d8bc489e0ff1686ba915":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["c20e2f66487155554bc2d8bc489e0ff1686ba915","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["c20e2f66487155554bc2d8bc489e0ff1686ba915","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c20e2f66487155554bc2d8bc489e0ff1686ba915"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c20e2f66487155554bc2d8bc489e0ff1686ba915":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}