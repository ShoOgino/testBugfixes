{"path":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Delete a document by term and return the doc id\n   * \n   * @return\n   * \n   * public static int deleteDocument(Term term, IndexWriter writer) throws\n   * IOException { IndexReader reader = writer.getReader(); TermDocs td =\n   * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();\n   * //} //writer.deleteDocuments(term); td.close(); return doc; }\n   */\n  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy());\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  /**\n   * Delete a document by term and return the doc id\n   * \n   * @return\n   * \n   * public static int deleteDocument(Term term, IndexWriter writer) throws\n   * IOException { IndexReader reader = writer.getReader(); TermDocs td =\n   * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();\n   * //} //writer.deleteDocuments(term); td.close(); return doc; }\n   */\n  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Delete a document by term and return the doc id\n   * \n   * @return\n   * \n   * public static int deleteDocument(Term term, IndexWriter writer) throws\n   * IOException { IndexReader reader = writer.getReader(); TermDocs td =\n   * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();\n   * //} //writer.deleteDocuments(term); td.close(); return doc; }\n   */\n  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy());\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  /**\n   * Delete a document by term and return the doc id\n   * \n   * @return\n   * \n   * public static int deleteDocument(Term term, IndexWriter writer) throws\n   * IOException { IndexReader reader = writer.getReader(); TermDocs td =\n   * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();\n   * //} //writer.deleteDocuments(term); td.close(); return doc; }\n   */\n  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Delete a document by term and return the doc id\n   * \n   * @return\n   * \n   * public static int deleteDocument(Term term, IndexWriter writer) throws\n   * IOException { IndexReader reader = writer.getReader(); TermDocs td =\n   * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();\n   * //} //writer.deleteDocuments(term); td.close(); return doc; }\n   */\n  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  /**\n   * Delete a document by term and return the doc id\n   * \n   * @return\n   * \n   * public static int deleteDocument(Term term, IndexWriter writer) throws\n   * IOException { IndexReader reader = writer.getReader(); TermDocs td =\n   * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();\n   * //} //writer.deleteDocuments(term); td.close(); return doc; }\n   */\n  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Delete a document by term and return the doc id\n   * \n   * @return\n   * \n   * public static int deleteDocument(Term term, IndexWriter writer) throws\n   * IOException { IndexReader reader = writer.getReader(); TermDocs td =\n   * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();\n   * //} //writer.deleteDocuments(term); td.close(); return doc; }\n   */\n  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Delete a document by term and return the doc id\n   * \n   * @return\n   * \n   * public static int deleteDocument(Term term, IndexWriter writer) throws\n   * IOException { IndexReader reader = writer.getReader(); TermDocs td =\n   * reader.termDocs(term); int doc = -1; //if (td.next()) { // doc = td.doc();\n   * //} //writer.deleteDocuments(term); td.close(); return doc; }\n   */\n  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        IndexWriter.MaxFieldLength.LIMITED);\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#createIndex(Directory,String,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir1, String indexName,\n      boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, indexName, 4));\n      if (multiSegment && (i % 10) == 0) {\n      }\n    }\n    if (!multiSegment) {\n      w.optimize();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}