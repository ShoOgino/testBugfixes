{"path":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","commits":[{"id":"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","date":1446751515,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"/dev/null","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = ((SolrDispatchFilter) notLeader0.getDispatchFilter().getFilter()).getCores().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().updateClusterState();\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().updateClusterState();\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().updateClusterState();\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().updateClusterState();\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = ((SolrDispatchFilter) notLeader0.getDispatchFilter().getFilter()).getCores().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().updateClusterState();\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().updateClusterState();\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().updateClusterState();\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().updateClusterState();\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      try {\n        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n        req.setCollectionName(testCollectionName);\n        req.process(cloudClient);\n      } catch (Exception e) {\n        // don't fail the test\n        log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getSlice(testCollectionName, SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getSlice(testCollectionName, SHARD1),\n          clusterState.getSlice(testCollectionName, SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getSlice(testCollectionName, SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getSlice(testCollectionName, SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n// 12-Jun-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n// 12-Jun-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n// 12-Jun-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLIRNoLeader().mjava","sourceNew":null,"sourceOld":"  /***\n   * Tests that FORCELEADER can get an active leader after leader puts all replicas in LIR and itself goes down,\n   * hence resulting in a leaderless shard.\n   */\n  @Test\n  @Slow\n  //TODO remove in SOLR-11812\n// 12-Jun-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLIRNoLeader() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_test_collection\";\n    createOldLirCollection(testCollectionName, 3);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      putNonLeadersIntoLIR(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"197bbedf08450ade98a11f4a0001448059666bec":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["84f20f331d8001864545c7021812d8c6509c7593"],"344b0840364d990b29b97467bfcc766ff8325d11":["28288370235ed02234a64753cdbf0c6ec096304a"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"84f20f331d8001864545c7021812d8c6509c7593":["344b0840364d990b29b97467bfcc766ff8325d11"],"3217321f3e1d7922898c6c633d17acfa840d6875":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","ac97ea104d893f16aab430d9904473bc1f233f3c"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"28288370235ed02234a64753cdbf0c6ec096304a":["3217321f3e1d7922898c6c633d17acfa840d6875","197bbedf08450ade98a11f4a0001448059666bec"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","3217321f3e1d7922898c6c633d17acfa840d6875"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","344b0840364d990b29b97467bfcc766ff8325d11"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["e9017cf144952056066919f1ebc7897ff9bd71b1","197bbedf08450ade98a11f4a0001448059666bec"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"344b0840364d990b29b97467bfcc766ff8325d11":["84f20f331d8001864545c7021812d8c6509c7593","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"84f20f331d8001864545c7021812d8c6509c7593":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"3217321f3e1d7922898c6c633d17acfa840d6875":["28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["197bbedf08450ade98a11f4a0001448059666bec","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["344b0840364d990b29b97467bfcc766ff8325d11"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"1088b72b3b4cc45316b7595bd09023c859cd2327":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}