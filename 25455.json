{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if (storePayloads) {\n          if ((code & 1) != 0) {\n            // new payload length\n            payloadLength = proxIn.readVInt();\n            assert payloadLength >= 0;\n          }\n          assert payloadLength != -1;\n          proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        }\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (storePayloads) {\n\n        if (payloadPending && payloadLength > 0) {\n          // payload wasn't retrieved for last position\n          proxIn.seek(proxIn.getFilePointer()+payloadLength);\n        }\n\n        final int code = proxIn.readVInt();\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        assert payloadLength != -1;\n          \n        payloadPending = true;\n        position += code >>> 1;\n      } else {\n        position += proxIn.readVInt();\n      }\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader.SegmentDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if (storePayloads) {\n          if ((code & 1) != 0) {\n            // new payload length\n            payloadLength = proxIn.readVInt();\n            assert payloadLength >= 0;\n          }\n          assert payloadLength != -1;\n          proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        }\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (storePayloads) {\n\n        if (payloadPending && payloadLength > 0) {\n          // payload wasn't retrieved for last position\n          proxIn.seek(proxIn.getFilePointer()+payloadLength);\n        }\n\n        final int code = proxIn.readVInt();\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        assert payloadLength != -1;\n          \n        payloadPending = true;\n        position += code >>> 1;\n      } else {\n        position += proxIn.readVInt();\n      }\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","sourceOld":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if (storePayloads) {\n          if ((code & 1) != 0) {\n            // new payload length\n            payloadLength = proxIn.readVInt();\n            assert payloadLength >= 0;\n          }\n          assert payloadLength != -1;\n          proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        }\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (storePayloads) {\n\n        if (payloadPending && payloadLength > 0) {\n          // payload wasn't retrieved for last position\n          proxIn.seek(proxIn.getFilePointer()+payloadLength);\n        }\n\n        final int code = proxIn.readVInt();\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        assert payloadLength != -1;\n          \n        payloadPending = true;\n        position += code >>> 1;\n      } else {\n        position += proxIn.readVInt();\n      }\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl.SegmentDocsAndPositionsEnum#nextPosition().mjava","sourceNew":null,"sourceOld":"    public int nextPosition() throws IOException {\n\n      if (lazyProxPointer != -1) {\n        proxIn.seek(lazyProxPointer);\n        lazyProxPointer = -1;\n      }\n      \n      if (payloadPending && payloadLength > 0) {\n        // payload of last position as never retrieved -- skip it\n        proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        payloadPending = false;\n      }\n\n      // scan over any docs that were iterated without their positions\n      while(posPendingCount > freq) {\n\n        final int code = proxIn.readVInt();\n\n        if (storePayloads) {\n          if ((code & 1) != 0) {\n            // new payload length\n            payloadLength = proxIn.readVInt();\n            assert payloadLength >= 0;\n          }\n          assert payloadLength != -1;\n          proxIn.seek(proxIn.getFilePointer() + payloadLength);\n        }\n\n        posPendingCount--;\n        position = 0;\n        payloadPending = false;\n      }\n\n      // read next position\n      if (storePayloads) {\n\n        if (payloadPending && payloadLength > 0) {\n          // payload wasn't retrieved for last position\n          proxIn.seek(proxIn.getFilePointer()+payloadLength);\n        }\n\n        final int code = proxIn.readVInt();\n        if ((code & 1) != 0) {\n          // new payload length\n          payloadLength = proxIn.readVInt();\n          assert payloadLength >= 0;\n        }\n        assert payloadLength != -1;\n          \n        payloadPending = true;\n        position += code >>> 1;\n      } else {\n        position += proxIn.readVInt();\n      }\n\n      posPendingCount--;\n\n      assert posPendingCount >= 0: \"nextPosition() was called too many times (more than freq() times) posPendingCount=\" + posPendingCount;\n\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}