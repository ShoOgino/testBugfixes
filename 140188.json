{"path":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /**\n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /**\n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /**\n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   * @see CheckHits#checkMatches(Query, IndexSearcher)\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /**\n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","sourceNew":"  /**\n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   * @see CheckHits#checkMatches(Query, IndexSearcher)\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /**\n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["0e7bc21595222ae4f75509300fbb7726691f387f"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["0e7bc21595222ae4f75509300fbb7726691f387f","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43345f1452f9510f8aaadae6156fe0c834e7d957"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7bc21595222ae4f75509300fbb7726691f387f":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}