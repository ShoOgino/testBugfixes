{"path":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(String,String,String,String).mjava","commits":[{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method uploads the Solr configuration files to the desired location in Zookeeper.\n   *\n   * @param backupLoc  The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param sourceConfigName The name of the config to be copied\n   * @param targetConfigName  The name of the config to be created.\n   * @throws IOException in case of I/O errors.\n   */\n  public void uploadConfigDir(String backupLoc, String backupId, String sourceConfigName, String targetConfigName)\n      throws IOException {\n    URI source = repository.createURI(backupLoc, backupId, ZK_STATE_DIR, CONFIG_STATE_DIR, sourceConfigName);\n    String zkPath = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + targetConfigName;\n    uploadToZk(zkStateReader.getZkClient(), source, zkPath);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3193c66df8e8324d4bce9f66df967af9e8c602","date":1472772499,"type":5,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(URI,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(String,String,String,String).mjava","sourceNew":"  /**\n   * This method uploads the Solr configuration files to the desired location in Zookeeper.\n   *\n   * @param backupLoc  The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param sourceConfigName The name of the config to be copied\n   * @param targetConfigName  The name of the config to be created.\n   * @throws IOException in case of I/O errors.\n   */\n  public void uploadConfigDir(URI backupLoc, String backupId, String sourceConfigName, String targetConfigName)\n      throws IOException {\n    URI source = repository.resolve(backupLoc, backupId, ZK_STATE_DIR, CONFIG_STATE_DIR, sourceConfigName);\n    String zkPath = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + targetConfigName;\n    uploadToZk(zkStateReader.getZkClient(), source, zkPath);\n  }\n\n","sourceOld":"  /**\n   * This method uploads the Solr configuration files to the desired location in Zookeeper.\n   *\n   * @param backupLoc  The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param sourceConfigName The name of the config to be copied\n   * @param targetConfigName  The name of the config to be created.\n   * @throws IOException in case of I/O errors.\n   */\n  public void uploadConfigDir(String backupLoc, String backupId, String sourceConfigName, String targetConfigName)\n      throws IOException {\n    URI source = repository.createURI(backupLoc, backupId, ZK_STATE_DIR, CONFIG_STATE_DIR, sourceConfigName);\n    String zkPath = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + targetConfigName;\n    uploadToZk(zkStateReader.getZkClient(), source, zkPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da02fc41cfc83eaee66abb7c926f2c909bda6d26","date":1472818509,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(URI,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(String,String,String,String).mjava","sourceNew":"  /**\n   * This method uploads the Solr configuration files to the desired location in Zookeeper.\n   *\n   * @param backupLoc  The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param sourceConfigName The name of the config to be copied\n   * @param targetConfigName  The name of the config to be created.\n   * @throws IOException in case of I/O errors.\n   */\n  public void uploadConfigDir(URI backupLoc, String backupId, String sourceConfigName, String targetConfigName)\n      throws IOException {\n    URI source = repository.resolve(backupLoc, backupId, ZK_STATE_DIR, CONFIG_STATE_DIR, sourceConfigName);\n    String zkPath = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + targetConfigName;\n    uploadToZk(zkStateReader.getZkClient(), source, zkPath);\n  }\n\n","sourceOld":"  /**\n   * This method uploads the Solr configuration files to the desired location in Zookeeper.\n   *\n   * @param backupLoc  The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param sourceConfigName The name of the config to be copied\n   * @param targetConfigName  The name of the config to be created.\n   * @throws IOException in case of I/O errors.\n   */\n  public void uploadConfigDir(String backupLoc, String backupId, String sourceConfigName, String targetConfigName)\n      throws IOException {\n    URI source = repository.createURI(backupLoc, backupId, ZK_STATE_DIR, CONFIG_STATE_DIR, sourceConfigName);\n    String zkPath = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + targetConfigName;\n    uploadToZk(zkStateReader.getZkClient(), source, zkPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(URI,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(String,String,String,String).mjava","sourceNew":"  /**\n   * This method uploads the Solr configuration files to the desired location in Zookeeper.\n   *\n   * @param backupLoc  The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param sourceConfigName The name of the config to be copied\n   * @param targetConfigName  The name of the config to be created.\n   * @throws IOException in case of I/O errors.\n   */\n  public void uploadConfigDir(URI backupLoc, String backupId, String sourceConfigName, String targetConfigName)\n      throws IOException {\n    URI source = repository.resolve(backupLoc, backupId, ZK_STATE_DIR, CONFIG_STATE_DIR, sourceConfigName);\n    String zkPath = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + targetConfigName;\n    uploadToZk(zkStateReader.getZkClient(), source, zkPath);\n  }\n\n","sourceOld":"  /**\n   * This method uploads the Solr configuration files to the desired location in Zookeeper.\n   *\n   * @param backupLoc  The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param sourceConfigName The name of the config to be copied\n   * @param targetConfigName  The name of the config to be created.\n   * @throws IOException in case of I/O errors.\n   */\n  public void uploadConfigDir(String backupLoc, String backupId, String sourceConfigName, String targetConfigName)\n      throws IOException {\n    URI source = repository.createURI(backupLoc, backupId, ZK_STATE_DIR, CONFIG_STATE_DIR, sourceConfigName);\n    String zkPath = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + targetConfigName;\n    uploadToZk(zkStateReader.getZkClient(), source, zkPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/backup/BackupManager#uploadConfigDir(String,String,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method uploads the Solr configuration files to the desired location in Zookeeper.\n   *\n   * @param backupLoc  The base path used to store the backup data.\n   * @param backupId  The unique name for the backup.\n   * @param sourceConfigName The name of the config to be copied\n   * @param targetConfigName  The name of the config to be created.\n   * @throws IOException in case of I/O errors.\n   */\n  public void uploadConfigDir(String backupLoc, String backupId, String sourceConfigName, String targetConfigName)\n      throws IOException {\n    URI source = repository.createURI(backupLoc, backupId, ZK_STATE_DIR, CONFIG_STATE_DIR, sourceConfigName);\n    String zkPath = ZkConfigManager.CONFIGS_ZKNODE + \"/\" + targetConfigName;\n    uploadToZk(zkStateReader.getZkClient(), source, zkPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["4c623a7f72be34d6c45bee682028c50327d9e4b7","af3193c66df8e8324d4bce9f66df967af9e8c602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"bc8f206328a706450934717bec7ccc22ad166fc0":["4c623a7f72be34d6c45bee682028c50327d9e4b7","da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["da02fc41cfc83eaee66abb7c926f2c909bda6d26","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","af3193c66df8e8324d4bce9f66df967af9e8c602","bc8f206328a706450934717bec7ccc22ad166fc0"],"da02fc41cfc83eaee66abb7c926f2c909bda6d26":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af3193c66df8e8324d4bce9f66df967af9e8c602":["da02fc41cfc83eaee66abb7c926f2c909bda6d26"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}