{"path":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","commits":[{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection,SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        for (byte [] bytes : payload) {\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        Iterator it = payload.iterator();\n        while (it.hasNext()) {\n          byte[] bytes = (byte[]) it.next();\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloads(Collection[byte[]],SpanQuery).mjava","sourceNew":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        for (byte [] bytes : payload) {\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  private void getPayloads(Collection<byte []> payloads, SpanQuery query)\n      throws IOException {\n    Spans spans = query.getSpans(reader);\n\n    while (spans.next() == true) {\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        for (byte [] bytes : payload) {\n          payloads.add(bytes);\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}