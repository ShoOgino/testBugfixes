{"path":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","date":1294448351,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10","date":1296174880,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","bugFix":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<Object>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<Object>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        extractFacetInfo( _facetInfo );\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/QueryResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","sourceOld":"  @Override\n  public void setResponse( NamedList<Object> res )\n  {\n    super.setResponse( res );\n    \n    // Look for known things\n    for( int i=0; i<res.size(); i++ ) {\n      String n = res.getName( i );\n      if( \"responseHeader\".equals( n ) ) {\n        _header = (NamedList<Object>) res.getVal( i );\n      }\n      else if( \"response\".equals( n ) ) {\n        _results = (SolrDocumentList) res.getVal( i );\n      }\n      else if( \"sort_values\".equals( n ) ) {\n        _sortvalues = (NamedList<ArrayList>) res.getVal( i );\n      }\n      else if( \"facet_counts\".equals( n ) ) {\n        _facetInfo = (NamedList<Object>) res.getVal( i );\n        // extractFacetInfo inspects _results, so defer calling it\n        // in case it hasn't been populated yet.\n      }\n      else if( \"debug\".equals( n ) ) {\n        _debugInfo = (NamedList<Object>) res.getVal( i );\n        extractDebugInfo( _debugInfo );\n      }\n      else if( \"highlighting\".equals( n ) ) {\n        _highlightingInfo = (NamedList<Object>) res.getVal( i );\n        extractHighlightingInfo( _highlightingInfo );\n      }\n      else if ( \"spellcheck\".equals( n ) )  {\n        _spellInfo = (NamedList<NamedList<Object>>) res.getVal( i );\n        extractSpellCheckInfo( _spellInfo );\n      }\n      else if ( \"stats\".equals( n ) )  {\n        _statsInfo = (NamedList<Object>) res.getVal( i );\n        extractStatsInfo( _statsInfo );\n      }\n      else if ( \"terms\".equals( n ) ) {\n        _termsInfo = (NamedList<NamedList<Number>>) res.getVal( i );\n        extractTermsInfo( _termsInfo );\n      }\n    }\n    if(_facetInfo != null) extractFacetInfo( _facetInfo );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["868da859b43505d9d2a023bfeae6dd0c795f5295","d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"d3edc5f84c7c34cfe2e585b3fdc900e21c6d4d10":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}