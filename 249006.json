{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   *\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    sortFields();\n    for (Map.Entry<String,Info> info : sortedFields) {\n      info.getValue().sortTerms();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   *\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    sortFields();\n    for (Map.Entry<String,Info> info : sortedFields) {\n      info.getValue().sortTerms();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dddb2c2ed096135b31cff8907f24ca2f5db46562","date":1413882711,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","sourceNew":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   *\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    sortFields();\n    for (Map.Entry<String,Info> info : sortedFields) {\n      info.getValue().sortTerms();\n    }\n    calculateNormValues();\n  }\n\n","sourceOld":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   *\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    sortFields();\n    for (Map.Entry<String,Info> info : sortedFields) {\n      info.getValue().sortTerms();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","sourceNew":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   *\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    sortFields();\n    for (Map.Entry<String,Info> info : sortedFields) {\n      info.getValue().sortTerms();\n    }\n    calculateNormValues();\n  }\n\n","sourceOld":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   *\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    sortFields();\n    for (Map.Entry<String,Info> info : sortedFields) {\n      info.getValue().sortTerms();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f657d9837900f4519ca1cbd5e98d86d4bba4dab","date":1417790596,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","sourceNew":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   * <p>\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    for (Info info : fields.values()) {\n      info.sortTerms();\n      info.getNormDocValues();//lazily computed\n    }\n  }\n\n","sourceOld":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   *\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    sortFields();\n    for (Map.Entry<String,Info> info : sortedFields) {\n      info.getValue().sortTerms();\n    }\n    calculateNormValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"253a79e1af11467dd01315b1919025d288aa0ccb","date":1458032260,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#freeze().mjava","sourceNew":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   * <p>\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    for (Info info : fields.values()) {\n      info.freeze();\n    }\n  }\n\n","sourceOld":"  /**\n   * Prepares the MemoryIndex for querying in a non-lazy way.\n   * <p>\n   * After calling this you can query the MemoryIndex from multiple threads, but you\n   * cannot subsequently add new data.\n   */\n  public void freeze() {\n    this.frozen = true;\n    for (Info info : fields.values()) {\n      info.sortTerms();\n      info.getNormDocValues();//lazily computed\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dddb2c2ed096135b31cff8907f24ca2f5db46562"],"dddb2c2ed096135b31cff8907f24ca2f5db46562":["761333d77c7f29123c00c93b107b743f32f012e6"],"253a79e1af11467dd01315b1919025d288aa0ccb":["0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["dddb2c2ed096135b31cff8907f24ca2f5db46562"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["253a79e1af11467dd01315b1919025d288aa0ccb"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"dddb2c2ed096135b31cff8907f24ca2f5db46562":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","0f657d9837900f4519ca1cbd5e98d86d4bba4dab"],"253a79e1af11467dd01315b1919025d288aa0ccb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"761333d77c7f29123c00c93b107b743f32f012e6":["dddb2c2ed096135b31cff8907f24ca2f5db46562","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"0f657d9837900f4519ca1cbd5e98d86d4bba4dab":["253a79e1af11467dd01315b1919025d288aa0ccb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}