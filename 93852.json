{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDescribe().mjava","commits":[{"id":"ea18ed1e4681b4ce672ca80f943642f049c2b140","date":1495492929,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDescribe().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDescribe() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=col(a, price_f),  tuple(stats=describe(b)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map stats = (Map)tuple.get(\"stats\");\n    Number min = (Number)stats.get(\"min\");\n    Number max = (Number)stats.get(\"max\");\n    Number mean = (Number)stats.get(\"mean\");\n    Number stdev = (Number)stats.get(\"stdev\");\n    Number popVar = (Number)stats.get(\"popVar\");\n    Number skewness = (Number)stats.get(\"skewness\");\n    Number kurtosis = (Number)stats.get(\"kurtosis\");\n    Number var = (Number)stats.get(\"var\");\n    Number geometricMean = (Number)stats.get(\"geometricMean\");\n    Number N = (Number)stats.get(\"N\");\n    assertEquals(min.doubleValue(), 100.0D, 0.0);\n    assertEquals(max.doubleValue(), 600.0D, 0.0);\n    assertEquals(N.doubleValue(), 7.0D, 0.0);\n    assertEquals(mean.doubleValue(), 271.42D, 0.5);\n    assertEquals(popVar.doubleValue(), 27755.10, 0.5);\n    assertEquals(kurtosis.doubleValue(), .70D, 0.5);\n    assertEquals(skewness.doubleValue(), 1.07D, 0.5);\n    assertEquals(var.doubleValue(), 32380.95D, 0.5);\n    assertEquals(geometricMean .doubleValue(), 224.56D, 0.5);\n    assertEquals(stdev .doubleValue(), 179.94D, 0.5);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDescribe().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDescribe() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=col(a, price_f),  tuple(stats=describe(b)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map stats = (Map)tuple.get(\"stats\");\n    Number min = (Number)stats.get(\"min\");\n    Number max = (Number)stats.get(\"max\");\n    Number mean = (Number)stats.get(\"mean\");\n    Number stdev = (Number)stats.get(\"stdev\");\n    Number popVar = (Number)stats.get(\"popVar\");\n    Number skewness = (Number)stats.get(\"skewness\");\n    Number kurtosis = (Number)stats.get(\"kurtosis\");\n    Number var = (Number)stats.get(\"var\");\n    Number geometricMean = (Number)stats.get(\"geometricMean\");\n    Number N = (Number)stats.get(\"N\");\n    assertEquals(min.doubleValue(), 100.0D, 0.0);\n    assertEquals(max.doubleValue(), 600.0D, 0.0);\n    assertEquals(N.doubleValue(), 7.0D, 0.0);\n    assertEquals(mean.doubleValue(), 271.42D, 0.5);\n    assertEquals(popVar.doubleValue(), 27755.10, 0.5);\n    assertEquals(kurtosis.doubleValue(), .70D, 0.5);\n    assertEquals(skewness.doubleValue(), 1.07D, 0.5);\n    assertEquals(var.doubleValue(), 32380.95D, 0.5);\n    assertEquals(geometricMean .doubleValue(), 224.56D, 0.5);\n    assertEquals(stdev .doubleValue(), 179.94D, 0.5);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDescribe().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDescribe().mjava","sourceNew":"  @Test\n  public void testDescribe() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=col(a, price_f),  tuple(stats=describe(b)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map stats = (Map)tuple.get(\"stats\");\n    Number min = (Number)stats.get(\"min\");\n    Number max = (Number)stats.get(\"max\");\n    Number mean = (Number)stats.get(\"mean\");\n    Number stdev = (Number)stats.get(\"stdev\");\n    Number popVar = (Number)stats.get(\"popVar\");\n    Number skewness = (Number)stats.get(\"skewness\");\n    Number kurtosis = (Number)stats.get(\"kurtosis\");\n    Number var = (Number)stats.get(\"var\");\n    Number geometricMean = (Number)stats.get(\"geometricMean\");\n    Number N = (Number)stats.get(\"N\");\n    assertEquals(min.doubleValue(), 100.0D, 0.0);\n    assertEquals(max.doubleValue(), 600.0D, 0.0);\n    assertEquals(N.doubleValue(), 7.0D, 0.0);\n    assertEquals(mean.doubleValue(), 271.42D, 0.5);\n    assertEquals(popVar.doubleValue(), 27755.10, 0.5);\n    assertEquals(kurtosis.doubleValue(), .70D, 0.5);\n    assertEquals(skewness.doubleValue(), 1.07D, 0.5);\n    assertEquals(var.doubleValue(), 32380.95D, 0.5);\n    assertEquals(geometricMean.doubleValue(), 224.56D, 0.5);\n    assertEquals(stdev.doubleValue(), 179.94D, 0.5);\n  }\n\n","sourceOld":"  @Test\n  public void testDescribe() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=col(a, price_f),  tuple(stats=describe(b)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map stats = (Map)tuple.get(\"stats\");\n    Number min = (Number)stats.get(\"min\");\n    Number max = (Number)stats.get(\"max\");\n    Number mean = (Number)stats.get(\"mean\");\n    Number stdev = (Number)stats.get(\"stdev\");\n    Number popVar = (Number)stats.get(\"popVar\");\n    Number skewness = (Number)stats.get(\"skewness\");\n    Number kurtosis = (Number)stats.get(\"kurtosis\");\n    Number var = (Number)stats.get(\"var\");\n    Number geometricMean = (Number)stats.get(\"geometricMean\");\n    Number N = (Number)stats.get(\"N\");\n    assertEquals(min.doubleValue(), 100.0D, 0.0);\n    assertEquals(max.doubleValue(), 600.0D, 0.0);\n    assertEquals(N.doubleValue(), 7.0D, 0.0);\n    assertEquals(mean.doubleValue(), 271.42D, 0.5);\n    assertEquals(popVar.doubleValue(), 27755.10, 0.5);\n    assertEquals(kurtosis.doubleValue(), .70D, 0.5);\n    assertEquals(skewness.doubleValue(), 1.07D, 0.5);\n    assertEquals(var.doubleValue(), 32380.95D, 0.5);\n    assertEquals(geometricMean .doubleValue(), 224.56D, 0.5);\n    assertEquals(stdev .doubleValue(), 179.94D, 0.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea18ed1e4681b4ce672ca80f943642f049c2b140"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea18ed1e4681b4ce672ca80f943642f049c2b140":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["ea18ed1e4681b4ce672ca80f943642f049c2b140"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","ea18ed1e4681b4ce672ca80f943642f049c2b140"],"ea18ed1e4681b4ce672ca80f943642f049c2b140":["e9017cf144952056066919f1ebc7897ff9bd71b1","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}