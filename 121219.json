{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryListPayloadStreamTest#testStream().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryListPayloadStreamTest#testStream().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/CategoryListPayloadStreamTest#testStream().mjava","sourceNew":"  /**\n   * Verifies that a CategoryListPayloadStream can properly encode values into\n   * a byte stream for later constructing a Payload.\n   */\n  @Test\n  public void testStream() throws Exception {\n\n    CategoryListPayloadStream clps = new CategoryListPayloadStream(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(\n            new NOnesIntEncoder(3))));\n\n    clps.appendIntToStream(1);\n    clps.appendIntToStream(10);\n    clps.appendIntToStream(100);\n    clps.appendIntToStream(1000);\n    clps.appendIntToStream(10000);\n    clps.appendIntToStream(100000);\n    clps.appendIntToStream(1000000);\n    clps.appendIntToStream(10000000);\n    clps.appendIntToStream(100000000);\n    clps.appendIntToStream(1000000000);\n    clps.appendIntToStream(Integer.MAX_VALUE);\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(clps\n        .convertStreamToByteArray());\n    IntDecoder decoder = new DGapIntDecoder(new NOnesIntDecoder(3));\n    decoder.reInit(bais);\n    assertEquals(\"Wrong value in byte stream\", 1, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", Integer.MAX_VALUE, decoder.decode());\n    assertEquals(\"End of stream not reached\", IntDecoder.EOS, decoder.decode());\n\n    clps.reset();\n    decoder.reInit(bais);\n    assertEquals(\"End of stream not reached\", IntDecoder.EOS, decoder.decode());\n  }\n\n","sourceOld":"  /**\n   * Verifies that a CategoryListPayloadStream can properly encode values into\n   * a byte stream for later constructing a Payload.\n   */\n  @Test\n  public void testStream() throws Exception {\n\n    CategoryListPayloadStream clps = new CategoryListPayloadStream(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(\n            new NOnesIntEncoder(3))));\n\n    clps.appendIntToStream(1);\n    clps.appendIntToStream(10);\n    clps.appendIntToStream(100);\n    clps.appendIntToStream(1000);\n    clps.appendIntToStream(10000);\n    clps.appendIntToStream(100000);\n    clps.appendIntToStream(1000000);\n    clps.appendIntToStream(10000000);\n    clps.appendIntToStream(100000000);\n    clps.appendIntToStream(1000000000);\n    clps.appendIntToStream(Integer.MAX_VALUE);\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(clps\n        .convertStreamToByteArray());\n    IntDecoder decoder = new DGapIntDecoder(new NOnesIntDecoder(3));\n    decoder.reInit(bais);\n    assertEquals(\"Wrong value in byte stream\", 1, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", Integer.MAX_VALUE, decoder.decode());\n    assertEquals(\"End of stream not reached\", IntDecoder.EOS, decoder.decode());\n\n    clps.reset();\n    decoder.reInit(bais);\n    assertEquals(\"End of stream not reached\", IntDecoder.EOS, decoder.decode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryListPayloadStreamTest#testStream().mjava","sourceNew":null,"sourceOld":"  /**\n   * Verifies that a CategoryListPayloadStream can properly encode values into\n   * a byte stream for later constructing a Payload.\n   */\n  @Test\n  public void testStream() throws Exception {\n\n    CategoryListPayloadStream clps = new CategoryListPayloadStream(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(\n            new NOnesIntEncoder(3))));\n\n    clps.appendIntToStream(1);\n    clps.appendIntToStream(10);\n    clps.appendIntToStream(100);\n    clps.appendIntToStream(1000);\n    clps.appendIntToStream(10000);\n    clps.appendIntToStream(100000);\n    clps.appendIntToStream(1000000);\n    clps.appendIntToStream(10000000);\n    clps.appendIntToStream(100000000);\n    clps.appendIntToStream(1000000000);\n    clps.appendIntToStream(Integer.MAX_VALUE);\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(clps\n        .convertStreamToByteArray());\n    IntDecoder decoder = new DGapIntDecoder(new NOnesIntDecoder(3));\n    decoder.reInit(bais);\n    assertEquals(\"Wrong value in byte stream\", 1, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", Integer.MAX_VALUE, decoder.decode());\n    assertEquals(\"End of stream not reached\", IntDecoder.EOS, decoder.decode());\n\n    clps.reset();\n    decoder.reInit(bais);\n    assertEquals(\"End of stream not reached\", IntDecoder.EOS, decoder.decode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/CategoryListPayloadStreamTest#testStream().mjava","sourceNew":null,"sourceOld":"  /**\n   * Verifies that a CategoryListPayloadStream can properly encode values into\n   * a byte stream for later constructing a Payload.\n   */\n  @Test\n  public void testStream() throws Exception {\n\n    CategoryListPayloadStream clps = new CategoryListPayloadStream(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(\n            new NOnesIntEncoder(3))));\n\n    clps.appendIntToStream(1);\n    clps.appendIntToStream(10);\n    clps.appendIntToStream(100);\n    clps.appendIntToStream(1000);\n    clps.appendIntToStream(10000);\n    clps.appendIntToStream(100000);\n    clps.appendIntToStream(1000000);\n    clps.appendIntToStream(10000000);\n    clps.appendIntToStream(100000000);\n    clps.appendIntToStream(1000000000);\n    clps.appendIntToStream(Integer.MAX_VALUE);\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(clps\n        .convertStreamToByteArray());\n    IntDecoder decoder = new DGapIntDecoder(new NOnesIntDecoder(3));\n    decoder.reInit(bais);\n    assertEquals(\"Wrong value in byte stream\", 1, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 10000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 100000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", 1000000000, decoder.decode());\n    assertEquals(\"Wrong value in byte stream\", Integer.MAX_VALUE, decoder.decode());\n    assertEquals(\"End of stream not reached\", IntDecoder.EOS, decoder.decode());\n\n    clps.reset();\n    decoder.reInit(bais);\n    assertEquals(\"End of stream not reached\", IntDecoder.EOS, decoder.decode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}