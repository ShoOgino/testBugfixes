{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","commits":[{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","sourceNew":"  private void verify(boolean small, double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(small, lats, lons);\n    verifyRandomDistances(small, lats, lons);\n    verifyRandomPolygons(small, lats, lons);\n  }\n\n","sourceOld":"  private void verify(boolean small, double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(small, lats, lons);\n    verifyRandomDistances(small, lats, lons);\n    verifyRandomPolygons(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","sourceNew":"  private void verify(boolean small, double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(small, lats, lons);\n    verifyRandomDistances(small, lats, lons);\n    verifyRandomPolygons(small, lats, lons);\n  }\n\n","sourceOld":"  private void verify(boolean small, double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(small, lats, lons);\n    verifyRandomDistances(small, lats, lons);\n    verifyRandomPolygons(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","sourceNew":"  private void verify(double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(lats, lons);\n    verifyRandomDistances(lats, lons);\n    verifyRandomPolygons(lats, lons);\n  }\n\n","sourceOld":"  private void verify(boolean small, double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(small, lats, lons);\n    verifyRandomDistances(small, lats, lons);\n    verifyRandomPolygons(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(double[],double[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#verify(boolean,double[],double[]).mjava","sourceNew":"  private void verify(double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(lats, lons);\n    verifyRandomDistances(lats, lons);\n    verifyRandomPolygons(lats, lons);\n  }\n\n","sourceOld":"  private void verify(boolean small, double[] lats, double[] lons) throws Exception {\n    // quantize each value the same way the index does\n    // NaN means missing for the doc!!!!!\n    for (int i = 0; i < lats.length; i++) {\n      if (!Double.isNaN(lats[i])) {\n        lats[i] = quantizeLat(lats[i]);\n      }\n    }\n    for (int i = 0; i < lons.length; i++) {\n      if (!Double.isNaN(lons[i])) {\n        lons[i] = quantizeLon(lons[i]);\n      }\n    }\n    verifyRandomRectangles(small, lats, lons);\n    verifyRandomDistances(small, lats, lons);\n    verifyRandomPolygons(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"713122036535651642e6d4fe57ce12b449e18473":["f8cb57c50beb99a1245256e866350af8e5ea1f36","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"713122036535651642e6d4fe57ce12b449e18473":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}