{"path":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#doDiversifiedSearch(int,int).mjava","commits":[{"id":"45ccb604e99f21f1c05722c0e28bcfa64b94a861","date":1423735816,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#doDiversifiedSearch(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private DiversifiedTopDocsCollector doDiversifiedSearch(int numResults,\n      int maxResultsPerArtist) throws IOException {\n    // Alternate between implementations used for key lookups \n    if (random().nextBoolean()) {\n      // Faster key lookup but with potential for collisions on larger datasets\n      return doFuzzyDiversifiedSearch(numResults, maxResultsPerArtist);\n    } else {\n      // Slower key lookup but 100% accurate\n      return doAccurateDiversifiedSearch(numResults, maxResultsPerArtist);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#doDiversifiedSearch(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#doDiversifiedSearch(int,int).mjava","sourceNew":"  private DiversifiedTopDocsCollector doDiversifiedSearch(int numResults,\n      int maxResultsPerArtist) throws IOException {\n    // Alternate between implementations used for key lookups\n    if (random().nextBoolean()) {\n      // Faster key lookup but with potential for collisions on larger datasets\n      return doFuzzyDiversifiedSearch(numResults, maxResultsPerArtist);\n    } else {\n      // Slower key lookup but 100% accurate\n      return doAccurateDiversifiedSearch(numResults, maxResultsPerArtist);\n    }\n  }\n\n","sourceOld":"  private DiversifiedTopDocsCollector doDiversifiedSearch(int numResults,\n      int maxResultsPerArtist) throws IOException {\n    // Alternate between implementations used for key lookups \n    if (random().nextBoolean()) {\n      // Faster key lookup but with potential for collisions on larger datasets\n      return doFuzzyDiversifiedSearch(numResults, maxResultsPerArtist);\n    } else {\n      // Slower key lookup but 100% accurate\n      return doAccurateDiversifiedSearch(numResults, maxResultsPerArtist);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#doDiversifiedSearch(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#doDiversifiedSearch(int,int).mjava","sourceNew":"  private DiversifiedTopDocsCollector doDiversifiedSearch(int numResults,\n      int maxResultsPerArtist) throws IOException {\n    // Alternate between implementations used for key lookups\n    if (random().nextBoolean()) {\n      // Faster key lookup but with potential for collisions on larger datasets\n      return doFuzzyDiversifiedSearch(numResults, maxResultsPerArtist);\n    } else {\n      // Slower key lookup but 100% accurate\n      return doAccurateDiversifiedSearch(numResults, maxResultsPerArtist);\n    }\n  }\n\n","sourceOld":"  private DiversifiedTopDocsCollector doDiversifiedSearch(int numResults,\n      int maxResultsPerArtist) throws IOException {\n    // Alternate between implementations used for key lookups \n    if (random().nextBoolean()) {\n      // Faster key lookup but with potential for collisions on larger datasets\n      return doFuzzyDiversifiedSearch(numResults, maxResultsPerArtist);\n    } else {\n      // Slower key lookup but 100% accurate\n      return doAccurateDiversifiedSearch(numResults, maxResultsPerArtist);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#doDiversifiedSearch(int,int).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector#doDiversifiedSearch(int,int).mjava","sourceNew":"  private DiversifiedTopDocsCollector doDiversifiedSearch(int numResults,\n      int maxResultsPerArtist) throws IOException {\n    // Alternate between implementations used for key lookups\n    if (random().nextBoolean()) {\n      // Faster key lookup but with potential for collisions on larger datasets\n      return doFuzzyDiversifiedSearch(numResults, maxResultsPerArtist);\n    } else {\n      // Slower key lookup but 100% accurate\n      return doAccurateDiversifiedSearch(numResults, maxResultsPerArtist);\n    }\n  }\n\n","sourceOld":"  private DiversifiedTopDocsCollector doDiversifiedSearch(int numResults,\n      int maxResultsPerArtist) throws IOException {\n    // Alternate between implementations used for key lookups \n    if (random().nextBoolean()) {\n      // Faster key lookup but with potential for collisions on larger datasets\n      return doFuzzyDiversifiedSearch(numResults, maxResultsPerArtist);\n    } else {\n      // Slower key lookup but 100% accurate\n      return doAccurateDiversifiedSearch(numResults, maxResultsPerArtist);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["45ccb604e99f21f1c05722c0e28bcfa64b94a861","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["45ccb604e99f21f1c05722c0e28bcfa64b94a861","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}