{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(DistribStateManager,AutoScalingConfig).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(DistribStateManager,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Populate this instance from another {@link DistribStateManager} instance.\n   * @param other another instance\n   * @param config optional {@link AutoScalingConfig}, which will overwrite any existing config.\n   */\n  public SnapshotDistribStateManager(DistribStateManager other, AutoScalingConfig config) throws Exception {\n    List<String> tree = other.listTree(\"/\");\n    log.debug(\"- copying {} resources from {}\", tree.size(), other.getClass().getSimpleName());\n    for (String path : tree) {\n      dataMap.put(path, other.getData(path));\n    }\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(DistribStateManager,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(DistribStateManager,AutoScalingConfig).mjava","sourceNew":"  /**\n   * Populate this instance from another {@link DistribStateManager} instance.\n   * @param other another instance\n   * @param config optional {@link AutoScalingConfig}, which will overwrite any existing config.\n   */\n  public SnapshotDistribStateManager(DistribStateManager other, AutoScalingConfig config) throws Exception {\n    List<String> tree = other.listTree(\"/\");\n    if (log.isDebugEnabled()) {\n      log.debug(\"- copying {} resources from {}\", tree.size(), other.getClass().getSimpleName());\n    }\n    for (String path : tree) {\n      dataMap.put(path, other.getData(path));\n    }\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n  }\n\n","sourceOld":"  /**\n   * Populate this instance from another {@link DistribStateManager} instance.\n   * @param other another instance\n   * @param config optional {@link AutoScalingConfig}, which will overwrite any existing config.\n   */\n  public SnapshotDistribStateManager(DistribStateManager other, AutoScalingConfig config) throws Exception {\n    List<String> tree = other.listTree(\"/\");\n    log.debug(\"- copying {} resources from {}\", tree.size(), other.getClass().getSimpleName());\n    for (String path : tree) {\n      dataMap.put(path, other.getData(path));\n    }\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotDistribStateManager#SnapshotDistribStateManager(DistribStateManager,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  /**\n   * Populate this instance from another {@link DistribStateManager} instance.\n   * @param other another instance\n   * @param config optional {@link AutoScalingConfig}, which will overwrite any existing config.\n   */\n  public SnapshotDistribStateManager(DistribStateManager other, AutoScalingConfig config) throws Exception {\n    List<String> tree = other.listTree(\"/\");\n    if (log.isDebugEnabled()) {\n      log.debug(\"- copying {} resources from {}\", tree.size(), other.getClass().getSimpleName());\n    }\n    for (String path : tree) {\n      dataMap.put(path, other.getData(path));\n    }\n    if (config != null) { // overwrite existing\n      VersionedData vd = new VersionedData(config.getZkVersion(), Utils.toJSON(config), CreateMode.PERSISTENT, \"0\");\n      dataMap.put(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, vd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}