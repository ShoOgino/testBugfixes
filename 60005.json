{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      \n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0127d456461e4d0abe73bede6f4920d9b9dcbe85","date":1426164450,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n      \n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f7f335611574989edc8f87d25d91e89aa385b6","date":1489690739,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4eb0a25318cc756077fbde9bd3052690aed03d","date":1490280009,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \";\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      //since the default (standard) response format is now JSON\n      //need to explicitly request XML since this class uses XPath\n      ModifiableSolrParams xmlWriterTypeParams = new ModifiableSolrParams(req.getParams());\n      xmlWriterTypeParams.set(CommonParams.WT,\"xml\");\n      //for tests, let's turn indention off so we don't have to handle extraneous spaces\n      xmlWriterTypeParams.set(\"indent\", xmlWriterTypeParams.get(\"indent\", \"off\"));\n      req.setParams(xmlWriterTypeParams);\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      //since the default (standard) response format is now JSON\n      //need to explicitly request XML since this class uses XPath\n      ModifiableSolrParams xmlWriterTypeParams = new ModifiableSolrParams(req.getParams());\n      xmlWriterTypeParams.set(CommonParams.WT,\"xml\");\n      //for tests, let's turn indention off so we don't have to handle extraneous spaces\n      xmlWriterTypeParams.set(\"indent\", xmlWriterTypeParams.get(\"indent\", \"off\"));\n      req.setParams(xmlWriterTypeParams);\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      //since the default (standard) response format is now JSON\n      //need to explicitly request XML since this class uses XPath\n      ModifiableSolrParams xmlWriterTypeParams = new ModifiableSolrParams(req.getParams());\n      xmlWriterTypeParams.set(CommonParams.WT,\"xml\");\n      //for tests, let's turn indention off so we don't have to handle extraneous spaces\n      xmlWriterTypeParams.set(\"indent\", xmlWriterTypeParams.get(\"indent\", \"off\"));\n      req.setParams(xmlWriterTypeParams);\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertQ(String,SolrQueryRequest,String...).mjava","sourceNew":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      //since the default (standard) response format is now JSON\n      //need to explicitly request XML since this class uses XPath\n      ModifiableSolrParams xmlWriterTypeParams = new ModifiableSolrParams(req.getParams());\n      xmlWriterTypeParams.set(CommonParams.WT,\"xml\");\n      //for tests, let's turn indention off so we don't have to handle extraneous spaces\n      xmlWriterTypeParams.set(\"indent\", xmlWriterTypeParams.get(\"indent\", \"off\"));\n      req.setParams(xmlWriterTypeParams);\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = BaseTestHarness.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","sourceOld":"  /** Validates a query matches some XPath test expressions and closes the query */\n  public static void assertQ(String message, SolrQueryRequest req, String... tests) {\n    try {\n      String m = (null == message) ? \"\" : message + \" \"; // TODO log 'm' !!!\n      //since the default (standard) response format is now JSON\n      //need to explicitly request XML since this class uses XPath\n      ModifiableSolrParams xmlWriterTypeParams = new ModifiableSolrParams(req.getParams());\n      xmlWriterTypeParams.set(CommonParams.WT,\"xml\");\n      //for tests, let's turn indention off so we don't have to handle extraneous spaces\n      xmlWriterTypeParams.set(\"indent\", xmlWriterTypeParams.get(\"indent\", \"off\"));\n      req.setParams(xmlWriterTypeParams);\n      String response = h.query(req);\n\n      if (req.getParams().getBool(\"facet\", false)) {\n        // add a test to ensure that faceting did not throw an exception\n        // internally, where it would be added to facet_counts/exception\n        String[] allTests = new String[tests.length+1];\n        System.arraycopy(tests,0,allTests,1,tests.length);\n        allTests[0] = \"*[count(//lst[@name='facet_counts']/*[@name='exception'])=0]\";\n        tests = allTests;\n      }\n\n      String results = h.validateXPath(response, tests);\n\n      if (null != results) {\n        String msg = \"REQUEST FAILED: xpath=\" + results\n            + \"\\n\\txml response was: \" + response\n            + \"\\n\\trequest was:\" + req.getParamString();\n\n        log.error(msg);\n        throw new RuntimeException(msg);\n      }\n\n    } catch (XPathExpressionException e1) {\n      throw new RuntimeException(\"XPath is invalid\", e1);\n    } catch (Exception e2) {\n      SolrException.log(log,\"REQUEST FAILED: \" + req.getParamString(), e2);\n      throw new RuntimeException(\"Exception during query\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["7b4eb0a25318cc756077fbde9bd3052690aed03d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"0127d456461e4d0abe73bede6f4920d9b9dcbe85":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"12f7f335611574989edc8f87d25d91e89aa385b6":["0127d456461e4d0abe73bede6f4920d9b9dcbe85"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["12f7f335611574989edc8f87d25d91e89aa385b6","ac1e7fa558287a811ea07634d815ee7b1c541284"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["0127d456461e4d0abe73bede6f4920d9b9dcbe85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["12f7f335611574989edc8f87d25d91e89aa385b6"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d12bbc45d641864ffe03291bc30f178eb34e434c"],"0127d456461e4d0abe73bede6f4920d9b9dcbe85":["12f7f335611574989edc8f87d25d91e89aa385b6","7b4eb0a25318cc756077fbde9bd3052690aed03d"],"12f7f335611574989edc8f87d25d91e89aa385b6":["a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7b4eb0a25318cc756077fbde9bd3052690aed03d":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["0127d456461e4d0abe73bede6f4920d9b9dcbe85"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","936cdd5882761db3b844afd6f84ab81cbb011a75","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}