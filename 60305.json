{"path":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","commits":[{"id":"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1","date":1001444615,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.  */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }    \n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.  */\n  public final void search(Query query, HitCollector results)\n      throws IOException {\n    search(query, null, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce2d38fca9678b74e922c3d472944968909f7799","date":1013648326,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.  */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }    \n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.  */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99cb126bce20a03e471519a28129f08ae2bfc33a","date":1054791881,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }    \n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.  */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5b33cb896b29b18a1c1348527a7f5889a852551","date":1103050801,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }    \n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4613d31c11672fd9194bd0d30b4fa9826516205","date":1133473845,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }    \n\n","bugFix":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Collector)} instead.\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Collector)} instead.\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(createQueryWeight(query), null, new HitCollectorWrapper(results));\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Collector)} instead.\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(query, (Filter)null, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Collector)} instead.\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(createWeight(query), null, new HitCollectorWrapper(results));\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Collector)} instead.\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(createQueryWeight(query), null, new HitCollectorWrapper(results));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/Searcher#search(Query,HitCollector).mjava","sourceNew":null,"sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every matching\n   * document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   * <p>Note: The <code>score</code> passed to this method is a raw score.\n   * In other words, the score will not necessarily be a float whose value is\n   * between 0 and 1.\n   * @throws BooleanQuery.TooManyClauses\n   * @deprecated use {@link #search(Query, Collector)} instead.\n   */\n  public void search(Query query, HitCollector results)\n    throws IOException {\n    search(createWeight(query), null, new HitCollectorWrapper(results));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5b33cb896b29b18a1c1348527a7f5889a852551":["99cb126bce20a03e471519a28129f08ae2bfc33a"],"99cb126bce20a03e471519a28129f08ae2bfc33a":["ce2d38fca9678b74e922c3d472944968909f7799"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"c4613d31c11672fd9194bd0d30b4fa9826516205":["f5b33cb896b29b18a1c1348527a7f5889a852551"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"ce2d38fca9678b74e922c3d472944968909f7799":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["c4613d31c11672fd9194bd0d30b4fa9826516205"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61cbcf396559d597a914594d7e2830c142ecfd91"]},"commit2Childs":{"f5b33cb896b29b18a1c1348527a7f5889a852551":["c4613d31c11672fd9194bd0d30b4fa9826516205"],"99cb126bce20a03e471519a28129f08ae2bfc33a":["f5b33cb896b29b18a1c1348527a7f5889a852551"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"c4613d31c11672fd9194bd0d30b4fa9826516205":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"61cbcf396559d597a914594d7e2830c142ecfd91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce2d38fca9678b74e922c3d472944968909f7799":["99cb126bce20a03e471519a28129f08ae2bfc33a"],"fe941135bdfc28c81e20b4d21422f8726af34925":["61cbcf396559d597a914594d7e2830c142ecfd91"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["ce2d38fca9678b74e922c3d472944968909f7799"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}