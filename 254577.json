{"path":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","sourceNew":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Object[] fields = new Object[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","sourceOld":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Object[] fields = new Object[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d","date":1335141740,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","sourceNew":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see IndexSearcher#search(Query,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Object[] fields = new Object[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","sourceOld":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Object[] fields = new Object[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","sourceNew":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see IndexSearcher#search(Query,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Object[] fields = new Object[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","sourceOld":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see IndexSearcher#search(Query,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Object[] fields = new Object[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f3a2f7df6ce044e8e7f5fe84cb5b23682fa1b27d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}