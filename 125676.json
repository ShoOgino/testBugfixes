{"path":"solr/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","commits":[{"id":"03a198be002bb6786dce54cf550c3ca7bb7b88a9","date":1287519003,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#process(ResponseBuilder).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) return;\n\n    SolrParams params = rb.req.getParams();\n    String[] pivots = params.getParams(FacetParams.FACET_PIVOT);  // example: author,type  (for types by author / types within author)\n    if (pivots == null) return;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    NamedList facetCounts = (NamedList) rb.rsp.getValues().get(\"facet_counts\");\n    if (facetCounts == null) {\n      facetCounts = new NamedList();\n      rb.rsp.add(\"facet_counts\", facetCounts);\n    }\n    facetCounts.add( PIVOT_KEY, pivotResponse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetComponent#process(ResponseBuilder).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public void process(ResponseBuilder rb) throws IOException {\n    if (!rb.doFacets) return;\n\n    SolrParams params = rb.req.getParams();\n    String[] pivots = params.getParams(FacetParams.FACET_PIVOT);  // example: author,type  (for types by author / types within author)\n    if (pivots == null) return;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    NamedList facetCounts = (NamedList) rb.rsp.getValues().get(\"facet_counts\");\n    if (facetCounts == null) {\n      facetCounts = new NamedList();\n      rb.rsp.add(\"facet_counts\", facetCounts);\n    }\n    facetCounts.add( PIVOT_KEY, pivotResponse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","pathOld":"/dev/null","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/PivotFacetHelper#process(ResponseBuilder,SolrParams,String[]).mjava","sourceNew":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","sourceOld":"  public SimpleOrderedMap<List<NamedList<Object>>> process(ResponseBuilder rb, SolrParams params, String[] pivots) throws IOException {\n    if (!rb.doFacets || pivots == null) \n      return null;\n    \n    int minMatch = params.getInt( FacetParams.FACET_PIVOT_MINCOUNT, 1 );\n    \n    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();\n    for (String pivot : pivots) {\n      String[] fields = pivot.split(\",\");  // only support two levels for now\n      \n      if( fields.length < 2 ) {\n        throw new SolrException( ErrorCode.BAD_REQUEST, \n            \"Pivot Facet needs at least two fields: \"+pivot );\n      }\n      \n      DocSet docs = rb.getResults().docSet;\n      String field = fields[0];\n      String subField = fields[1];\n      Deque<String> fnames = new LinkedList<String>();\n      for( int i=fields.length-1; i>1; i-- ) {\n        fnames.push( fields[i] );\n      }\n      \n      SimpleFacets sf = getFacetImplementation(rb.req, rb.getResults().docSet, rb.req.getParams());\n      NamedList<Integer> superFacets = sf.getTermCounts(field);\n      \n      pivotResponse.add(pivot, doPivots(superFacets, field, subField, fnames, rb, docs, minMatch));\n    }\n    return pivotResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"c26f00b574427b55127e869b935845554afde1fa":["03a198be002bb6786dce54cf550c3ca7bb7b88a9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"03a198be002bb6786dce54cf550c3ca7bb7b88a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","03a198be002bb6786dce54cf550c3ca7bb7b88a9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"03a198be002bb6786dce54cf550c3ca7bb7b88a9":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}