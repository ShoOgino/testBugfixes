{"path":"lucene/core/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortability().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortability().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortability().mjava","sourceNew":"  public void testEncodedSortability() {\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes1; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char) randomInt;\n      }\n\n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes2; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte) randomInt;\n        originalString2[byteNum] = (char) randomInt;\n      }\n      int originalComparison = new String(originalString1, 0, numBytes1)\n          .compareTo(new String(originalString2, 0, numBytes2));\n      originalComparison = originalComparison < 0 ? -1\n          : originalComparison > 0 ? 1 : 0;\n\n      int encodedLen1 = IndexableBinaryStringTools.getEncodedLength(\n          originalArray1, 0, numBytes1);\n      if (encodedLen1 > encoded1.length)\n        encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1,\n          0, encodedLen1);\n\n      int encodedLen2 = IndexableBinaryStringTools.getEncodedLength(original2,\n          0, numBytes2);\n      if (encodedLen2 > encoded2.length)\n        encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0,\n          encodedLen2);\n\n      int encodedComparison = new String(encoded1, 0, encodedLen1)\n          .compareTo(new String(encoded2, 0, encodedLen2));\n      encodedComparison = encodedComparison < 0 ? -1\n          : encodedComparison > 0 ? 1 : 0;\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Original bytes and encoded chars compare differently:\"\n          + System.getProperty(\"line.separator\") + \" binary 1: \"\n          + binaryDump(originalArray1, numBytes1)\n          + System.getProperty(\"line.separator\") + \" binary 2: \"\n          + binaryDump(original2, numBytes2)\n          + System.getProperty(\"line.separator\") + \"encoded 1: \"\n          + charArrayDump(encoded1, encodedLen1)\n          + System.getProperty(\"line.separator\") + \"encoded 2: \"\n          + charArrayDump(encoded2, encodedLen2)\n          + System.getProperty(\"line.separator\"), originalComparison,\n          encodedComparison);\n    }\n  }\n\n","sourceOld":"  public void testEncodedSortability() {\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes1; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char) randomInt;\n      }\n\n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes2; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte) randomInt;\n        originalString2[byteNum] = (char) randomInt;\n      }\n      int originalComparison = new String(originalString1, 0, numBytes1)\n          .compareTo(new String(originalString2, 0, numBytes2));\n      originalComparison = originalComparison < 0 ? -1\n          : originalComparison > 0 ? 1 : 0;\n\n      int encodedLen1 = IndexableBinaryStringTools.getEncodedLength(\n          originalArray1, 0, numBytes1);\n      if (encodedLen1 > encoded1.length)\n        encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1,\n          0, encodedLen1);\n\n      int encodedLen2 = IndexableBinaryStringTools.getEncodedLength(original2,\n          0, numBytes2);\n      if (encodedLen2 > encoded2.length)\n        encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0,\n          encodedLen2);\n\n      int encodedComparison = new String(encoded1, 0, encodedLen1)\n          .compareTo(new String(encoded2, 0, encodedLen2));\n      encodedComparison = encodedComparison < 0 ? -1\n          : encodedComparison > 0 ? 1 : 0;\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Original bytes and encoded chars compare differently:\"\n          + System.getProperty(\"line.separator\") + \" binary 1: \"\n          + binaryDump(originalArray1, numBytes1)\n          + System.getProperty(\"line.separator\") + \" binary 2: \"\n          + binaryDump(original2, numBytes2)\n          + System.getProperty(\"line.separator\") + \"encoded 1: \"\n          + charArrayDump(encoded1, encodedLen1)\n          + System.getProperty(\"line.separator\") + \"encoded 2: \"\n          + charArrayDump(encoded2, encodedLen2)\n          + System.getProperty(\"line.separator\"), originalComparison,\n          encodedComparison);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortability().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortability().mjava","sourceNew":"  public void testEncodedSortability() {\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes1 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes1; ++byteNum) {\n        int randomInt = random().nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char) randomInt;\n      }\n\n      int numBytes2 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes2; ++byteNum) {\n        int randomInt = random().nextInt(0x100);\n        original2[byteNum] = (byte) randomInt;\n        originalString2[byteNum] = (char) randomInt;\n      }\n      int originalComparison = new String(originalString1, 0, numBytes1)\n          .compareTo(new String(originalString2, 0, numBytes2));\n      originalComparison = originalComparison < 0 ? -1\n          : originalComparison > 0 ? 1 : 0;\n\n      int encodedLen1 = IndexableBinaryStringTools.getEncodedLength(\n          originalArray1, 0, numBytes1);\n      if (encodedLen1 > encoded1.length)\n        encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1,\n          0, encodedLen1);\n\n      int encodedLen2 = IndexableBinaryStringTools.getEncodedLength(original2,\n          0, numBytes2);\n      if (encodedLen2 > encoded2.length)\n        encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0,\n          encodedLen2);\n\n      int encodedComparison = new String(encoded1, 0, encodedLen1)\n          .compareTo(new String(encoded2, 0, encodedLen2));\n      encodedComparison = encodedComparison < 0 ? -1\n          : encodedComparison > 0 ? 1 : 0;\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Original bytes and encoded chars compare differently:\"\n          + System.getProperty(\"line.separator\") + \" binary 1: \"\n          + binaryDump(originalArray1, numBytes1)\n          + System.getProperty(\"line.separator\") + \" binary 2: \"\n          + binaryDump(original2, numBytes2)\n          + System.getProperty(\"line.separator\") + \"encoded 1: \"\n          + charArrayDump(encoded1, encodedLen1)\n          + System.getProperty(\"line.separator\") + \"encoded 2: \"\n          + charArrayDump(encoded2, encodedLen2)\n          + System.getProperty(\"line.separator\"), originalComparison,\n          encodedComparison);\n    }\n  }\n\n","sourceOld":"  public void testEncodedSortability() {\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes1 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes1; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char) randomInt;\n      }\n\n      int numBytes2 = random.nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes2; ++byteNum) {\n        int randomInt = random.nextInt(0x100);\n        original2[byteNum] = (byte) randomInt;\n        originalString2[byteNum] = (char) randomInt;\n      }\n      int originalComparison = new String(originalString1, 0, numBytes1)\n          .compareTo(new String(originalString2, 0, numBytes2));\n      originalComparison = originalComparison < 0 ? -1\n          : originalComparison > 0 ? 1 : 0;\n\n      int encodedLen1 = IndexableBinaryStringTools.getEncodedLength(\n          originalArray1, 0, numBytes1);\n      if (encodedLen1 > encoded1.length)\n        encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1,\n          0, encodedLen1);\n\n      int encodedLen2 = IndexableBinaryStringTools.getEncodedLength(original2,\n          0, numBytes2);\n      if (encodedLen2 > encoded2.length)\n        encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0,\n          encodedLen2);\n\n      int encodedComparison = new String(encoded1, 0, encodedLen1)\n          .compareTo(new String(encoded2, 0, encodedLen2));\n      encodedComparison = encodedComparison < 0 ? -1\n          : encodedComparison > 0 ? 1 : 0;\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Original bytes and encoded chars compare differently:\"\n          + System.getProperty(\"line.separator\") + \" binary 1: \"\n          + binaryDump(originalArray1, numBytes1)\n          + System.getProperty(\"line.separator\") + \" binary 2: \"\n          + binaryDump(original2, numBytes2)\n          + System.getProperty(\"line.separator\") + \"encoded 1: \"\n          + charArrayDump(encoded1, encodedLen1)\n          + System.getProperty(\"line.separator\") + \"encoded 2: \"\n          + charArrayDump(encoded2, encodedLen2)\n          + System.getProperty(\"line.separator\"), originalComparison,\n          encodedComparison);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testEncodedSortability().mjava","sourceNew":null,"sourceOld":"  public void testEncodedSortability() {\n    byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n    byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH];\n    char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH];\n    char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10];\n\n    for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) {\n      int numBytes1 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes1; ++byteNum) {\n        int randomInt = random().nextInt(0x100);\n        originalArray1[byteNum] = (byte) randomInt;\n        originalString1[byteNum] = (char) randomInt;\n      }\n\n      int numBytes2 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1; // Min == 1\n\n      for (int byteNum = 0; byteNum < numBytes2; ++byteNum) {\n        int randomInt = random().nextInt(0x100);\n        original2[byteNum] = (byte) randomInt;\n        originalString2[byteNum] = (char) randomInt;\n      }\n      int originalComparison = new String(originalString1, 0, numBytes1)\n          .compareTo(new String(originalString2, 0, numBytes2));\n      originalComparison = originalComparison < 0 ? -1\n          : originalComparison > 0 ? 1 : 0;\n\n      int encodedLen1 = IndexableBinaryStringTools.getEncodedLength(\n          originalArray1, 0, numBytes1);\n      if (encodedLen1 > encoded1.length)\n        encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1,\n          0, encodedLen1);\n\n      int encodedLen2 = IndexableBinaryStringTools.getEncodedLength(original2,\n          0, numBytes2);\n      if (encodedLen2 > encoded2.length)\n        encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)];\n      IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0,\n          encodedLen2);\n\n      int encodedComparison = new String(encoded1, 0, encodedLen1)\n          .compareTo(new String(encoded2, 0, encodedLen2));\n      encodedComparison = encodedComparison < 0 ? -1\n          : encodedComparison > 0 ? 1 : 0;\n\n      assertEquals(\"Test #\" + (testNum + 1)\n          + \": Original bytes and encoded chars compare differently:\"\n          + System.getProperty(\"line.separator\") + \" binary 1: \"\n          + binaryDump(originalArray1, numBytes1)\n          + System.getProperty(\"line.separator\") + \" binary 2: \"\n          + binaryDump(original2, numBytes2)\n          + System.getProperty(\"line.separator\") + \"encoded 1: \"\n          + charArrayDump(encoded1, encodedLen1)\n          + System.getProperty(\"line.separator\") + \"encoded 2: \"\n          + charArrayDump(encoded2, encodedLen2)\n          + System.getProperty(\"line.separator\"), originalComparison,\n          encodedComparison);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}