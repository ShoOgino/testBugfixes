{"path":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testUserDict3().mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testUserDict3().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/TestKuromojiAnalyzer#testUserDict3().mjava","sourceNew":"  // Copied from TestJapaneseTokenizer, to make sure passing\n  // user dict to analyzer works:\n  public void testUserDict3() throws Exception {\n    // Test entry that breaks into multiple tokens:\n    final Analyzer a = new JapaneseAnalyzer(TEST_VERSION_CURRENT, TestJapaneseTokenizer.readDict(),\n                                            Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n    assertTokenStreamContents(a.tokenStream(\"foo\", new StringReader(\"abcd\")),\n                              new String[] { \"a\", \"b\", \"cd\"  },\n                              new int[] { 0, 1, 2 },\n                              new int[] { 1, 2, 4 },\n                              new Integer(4)\n    );\n  }\n\n","sourceOld":"  // Copied from TestKuromojiTokenizer, to make sure passing\n  // user dict to analyzer works:\n  public void testUserDict3() throws Exception {\n    // Test entry that breaks into multiple tokens:\n    final Analyzer a = new KuromojiAnalyzer(TEST_VERSION_CURRENT, TestKuromojiTokenizer.readDict(),\n                                            Mode.SEARCH,\n                                            KuromojiAnalyzer.getDefaultStopSet(),\n                                            KuromojiAnalyzer.getDefaultStopTags());\n    assertTokenStreamContents(a.tokenStream(\"foo\", new StringReader(\"abcd\")),\n                              new String[] { \"a\", \"b\", \"cd\"  },\n                              new int[] { 0, 1, 2 },\n                              new int[] { 1, 2, 4 },\n                              new Integer(4)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testUserDict3().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseAnalyzer#testUserDict3().mjava","sourceNew":"  // Copied from TestJapaneseTokenizer, to make sure passing\n  // user dict to analyzer works:\n  public void testUserDict3() throws Exception {\n    // Test entry that breaks into multiple tokens:\n    final Analyzer a = new JapaneseAnalyzer(TEST_VERSION_CURRENT, TestJapaneseTokenizer.readDict(),\n                                            Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n    assertTokenStreamContents(a.tokenStream(\"foo\", new StringReader(\"abcd\")),\n                              new String[] { \"a\", \"b\", \"cd\"  },\n                              new int[] { 0, 1, 2 },\n                              new int[] { 1, 2, 4 },\n                              new Integer(4)\n    );\n  }\n\n","sourceOld":"  // Copied from TestJapaneseTokenizer, to make sure passing\n  // user dict to analyzer works:\n  public void testUserDict3() throws Exception {\n    // Test entry that breaks into multiple tokens:\n    final Analyzer a = new JapaneseAnalyzer(TEST_VERSION_CURRENT, TestJapaneseTokenizer.readDict(),\n                                            Mode.SEARCH,\n                                            JapaneseAnalyzer.getDefaultStopSet(),\n                                            JapaneseAnalyzer.getDefaultStopTags());\n    assertTokenStreamContents(a.tokenStream(\"foo\", new StringReader(\"abcd\")),\n                              new String[] { \"a\", \"b\", \"cd\"  },\n                              new int[] { 0, 1, 2 },\n                              new int[] { 1, 2, 4 },\n                              new Integer(4)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}