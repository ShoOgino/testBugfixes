{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","commits":[{"id":"06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a","date":1435674390,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleClusteringResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    //First Cluster\n    Cluster cluster1 = clusters.get(0);\n    List<String> expectedLabel1 = new LinkedList<String>();\n    expectedLabel1.add(\"label1\");\n    List<String> expectedDocs1 = new LinkedList<String>();\n    expectedDocs1.add(\"id1\");\n    expectedDocs1.add(\"id2\");\n    expectedDocs1.add(\"id3\");\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(expectedDocs1, cluster1.getDocs());\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(0.6, cluster1.getScore(), 0);\n    //Second Cluster\n    Cluster cluster2 = clusters.get(1);\n    List<String> expectedLabel2 = new LinkedList<String>();\n    expectedLabel2.add(\"label2\");\n    List<String> expectedDocs2 = new LinkedList<String>();\n    expectedDocs2.add(\"id5\");\n    expectedDocs2.add(\"id6\");\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(expectedDocs2, cluster2.getDocs());\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(0.93, cluster2.getScore(), 0);\n    //Third Cluster\n    Cluster cluster3 = clusters.get(2);\n    List<String> expectedLabel3 = new LinkedList<String>();\n    expectedLabel3.add(\"label3\");\n    List<String> expectedDocs3 = new LinkedList<String>();\n    expectedDocs3.add(\"id7\");\n    expectedDocs3.add(\"id8\");\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(expectedDocs3, cluster3.getDocs());\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(1.26, cluster3.getScore(), 0);\n    //Fourth Cluster\n    Cluster cluster4 = clusters.get(3);\n    List<String> expectedLabel4 = new LinkedList<String>();\n    expectedLabel4.add(\"label4\");\n    List<String> expectedDocs4 = new LinkedList<String>();\n    expectedDocs4.add(\"id9\");\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(expectedDocs4, cluster4.getDocs());\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(0.0, cluster4.getScore(), 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","sourceNew":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleClusteringResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    //First Cluster\n    Cluster cluster1 = clusters.get(0);\n    List<String> expectedLabel1 = new LinkedList<String>();\n    expectedLabel1.add(\"label1\");\n    List<String> expectedDocs1 = new LinkedList<String>();\n    expectedDocs1.add(\"id1\");\n    expectedDocs1.add(\"id2\");\n    expectedDocs1.add(\"id3\");\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(expectedDocs1, cluster1.getDocs());\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(0.6, cluster1.getScore(), 0);\n    //Second Cluster\n    Cluster cluster2 = clusters.get(1);\n    List<String> expectedLabel2 = new LinkedList<String>();\n    expectedLabel2.add(\"label2\");\n    List<String> expectedDocs2 = new LinkedList<String>();\n    expectedDocs2.add(\"id5\");\n    expectedDocs2.add(\"id6\");\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(expectedDocs2, cluster2.getDocs());\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(0.93, cluster2.getScore(), 0);\n    //Third Cluster\n    Cluster cluster3 = clusters.get(2);\n    List<String> expectedLabel3 = new LinkedList<String>();\n    expectedLabel3.add(\"label3\");\n    List<String> expectedDocs3 = new LinkedList<String>();\n    expectedDocs3.add(\"id7\");\n    expectedDocs3.add(\"id8\");\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(expectedDocs3, cluster3.getDocs());\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(1.26, cluster3.getScore(), 0);\n    //Fourth Cluster\n    Cluster cluster4 = clusters.get(3);\n    List<String> expectedLabel4 = new LinkedList<String>();\n    expectedLabel4.add(\"label4\");\n    List<String> expectedDocs4 = new LinkedList<String>();\n    expectedDocs4.add(\"id9\");\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(expectedDocs4, cluster4.getDocs());\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(0.0, cluster4.getScore(), 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleClusteringResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    //First Cluster\n    Cluster cluster1 = clusters.get(0);\n    List<String> expectedLabel1 = new LinkedList<String>();\n    expectedLabel1.add(\"label1\");\n    List<String> expectedDocs1 = new LinkedList<String>();\n    expectedDocs1.add(\"id1\");\n    expectedDocs1.add(\"id2\");\n    expectedDocs1.add(\"id3\");\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(expectedDocs1, cluster1.getDocs());\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(0.6, cluster1.getScore(), 0);\n    //Second Cluster\n    Cluster cluster2 = clusters.get(1);\n    List<String> expectedLabel2 = new LinkedList<String>();\n    expectedLabel2.add(\"label2\");\n    List<String> expectedDocs2 = new LinkedList<String>();\n    expectedDocs2.add(\"id5\");\n    expectedDocs2.add(\"id6\");\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(expectedDocs2, cluster2.getDocs());\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(0.93, cluster2.getScore(), 0);\n    //Third Cluster\n    Cluster cluster3 = clusters.get(2);\n    List<String> expectedLabel3 = new LinkedList<String>();\n    expectedLabel3.add(\"label3\");\n    List<String> expectedDocs3 = new LinkedList<String>();\n    expectedDocs3.add(\"id7\");\n    expectedDocs3.add(\"id8\");\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(expectedDocs3, cluster3.getDocs());\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(1.26, cluster3.getScore(), 0);\n    //Fourth Cluster\n    Cluster cluster4 = clusters.get(3);\n    List<String> expectedLabel4 = new LinkedList<String>();\n    expectedLabel4.add(\"label4\");\n    List<String> expectedDocs4 = new LinkedList<String>();\n    expectedDocs4.add(\"id9\");\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(expectedDocs4, cluster4.getDocs());\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(0.0, cluster4.getScore(), 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd93fae83846b8c0667d607d80e2654cb02ffcd","date":1478528847,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","sourceNew":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleClusteringResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    checkCluster(clusters.get(0), Arrays.asList(\"label1\"), Arrays.asList(\"id1\", \"id2\", \"id3\"), 0.6d, false);\n    checkCluster(clusters.get(1), Arrays.asList(\"label2\"), Arrays.asList(\"id5\", \"id6\"), 0.93d, false);\n    checkCluster(clusters.get(2), Arrays.asList(\"label3\"), Arrays.asList(\"id7\", \"id8\"), 1.26d, false);\n    checkCluster(clusters.get(3), Arrays.asList(\"label4\"), Arrays.asList(\"id9\"), 0d, true);\n    \n    List<Cluster> sub = clusters.get(0).getSubclusters();\n    checkCluster(sub.get(0), Arrays.asList(\"label1.sub1\"), Arrays.asList(\"id1\", \"id2\"), 0.0d, false);\n    checkCluster(sub.get(1), Arrays.asList(\"label1.sub2\"), Arrays.asList(\"id2\"), 0.0d, false);\n    assertEquals(sub.size(), 2);\n  }\n\n","sourceOld":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleClusteringResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    //First Cluster\n    Cluster cluster1 = clusters.get(0);\n    List<String> expectedLabel1 = new LinkedList<String>();\n    expectedLabel1.add(\"label1\");\n    List<String> expectedDocs1 = new LinkedList<String>();\n    expectedDocs1.add(\"id1\");\n    expectedDocs1.add(\"id2\");\n    expectedDocs1.add(\"id3\");\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(expectedDocs1, cluster1.getDocs());\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(0.6, cluster1.getScore(), 0);\n    //Second Cluster\n    Cluster cluster2 = clusters.get(1);\n    List<String> expectedLabel2 = new LinkedList<String>();\n    expectedLabel2.add(\"label2\");\n    List<String> expectedDocs2 = new LinkedList<String>();\n    expectedDocs2.add(\"id5\");\n    expectedDocs2.add(\"id6\");\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(expectedDocs2, cluster2.getDocs());\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(0.93, cluster2.getScore(), 0);\n    //Third Cluster\n    Cluster cluster3 = clusters.get(2);\n    List<String> expectedLabel3 = new LinkedList<String>();\n    expectedLabel3.add(\"label3\");\n    List<String> expectedDocs3 = new LinkedList<String>();\n    expectedDocs3.add(\"id7\");\n    expectedDocs3.add(\"id8\");\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(expectedDocs3, cluster3.getDocs());\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(1.26, cluster3.getScore(), 0);\n    //Fourth Cluster\n    Cluster cluster4 = clusters.get(3);\n    List<String> expectedLabel4 = new LinkedList<String>();\n    expectedLabel4.add(\"label4\");\n    List<String> expectedDocs4 = new LinkedList<String>();\n    expectedDocs4.add(\"id9\");\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(expectedDocs4, cluster4.getDocs());\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(0.0, cluster4.getScore(), 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","sourceNew":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleClusteringResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    checkCluster(clusters.get(0), Arrays.asList(\"label1\"), Arrays.asList(\"id1\", \"id2\", \"id3\"), 0.6d, false);\n    checkCluster(clusters.get(1), Arrays.asList(\"label2\"), Arrays.asList(\"id5\", \"id6\"), 0.93d, false);\n    checkCluster(clusters.get(2), Arrays.asList(\"label3\"), Arrays.asList(\"id7\", \"id8\"), 1.26d, false);\n    checkCluster(clusters.get(3), Arrays.asList(\"label4\"), Arrays.asList(\"id9\"), 0d, true);\n    \n    List<Cluster> sub = clusters.get(0).getSubclusters();\n    checkCluster(sub.get(0), Arrays.asList(\"label1.sub1\"), Arrays.asList(\"id1\", \"id2\"), 0.0d, false);\n    checkCluster(sub.get(1), Arrays.asList(\"label1.sub2\"), Arrays.asList(\"id2\"), 0.0d, false);\n    assertEquals(sub.size(), 2);\n  }\n\n","sourceOld":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleClusteringResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    //First Cluster\n    Cluster cluster1 = clusters.get(0);\n    List<String> expectedLabel1 = new LinkedList<String>();\n    expectedLabel1.add(\"label1\");\n    List<String> expectedDocs1 = new LinkedList<String>();\n    expectedDocs1.add(\"id1\");\n    expectedDocs1.add(\"id2\");\n    expectedDocs1.add(\"id3\");\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(expectedDocs1, cluster1.getDocs());\n    Assert.assertEquals(expectedLabel1, cluster1.getLabels());\n    Assert.assertEquals(0.6, cluster1.getScore(), 0);\n    //Second Cluster\n    Cluster cluster2 = clusters.get(1);\n    List<String> expectedLabel2 = new LinkedList<String>();\n    expectedLabel2.add(\"label2\");\n    List<String> expectedDocs2 = new LinkedList<String>();\n    expectedDocs2.add(\"id5\");\n    expectedDocs2.add(\"id6\");\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(expectedDocs2, cluster2.getDocs());\n    Assert.assertEquals(expectedLabel2, cluster2.getLabels());\n    Assert.assertEquals(0.93, cluster2.getScore(), 0);\n    //Third Cluster\n    Cluster cluster3 = clusters.get(2);\n    List<String> expectedLabel3 = new LinkedList<String>();\n    expectedLabel3.add(\"label3\");\n    List<String> expectedDocs3 = new LinkedList<String>();\n    expectedDocs3.add(\"id7\");\n    expectedDocs3.add(\"id8\");\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(expectedDocs3, cluster3.getDocs());\n    Assert.assertEquals(expectedLabel3, cluster3.getLabels());\n    Assert.assertEquals(1.26, cluster3.getScore(), 0);\n    //Fourth Cluster\n    Cluster cluster4 = clusters.get(3);\n    List<String> expectedLabel4 = new LinkedList<String>();\n    expectedLabel4.add(\"label4\");\n    List<String> expectedDocs4 = new LinkedList<String>();\n    expectedDocs4.add(\"id9\");\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(expectedDocs4, cluster4.getDocs());\n    Assert.assertEquals(expectedLabel4, cluster4.getLabels());\n    Assert.assertEquals(0.0, cluster4.getScore(), 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestClusteringResponse#testClusteringResponse().mjava","sourceNew":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response = null;\n\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleClusteringResponse.xml\")) {\n      assertNotNull(is);\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n        response = parser.processResponse(in);\n      }\n    }\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    checkCluster(clusters.get(0), Arrays.asList(\"label1\"), Arrays.asList(\"id1\", \"id2\", \"id3\"), 0.6d, false);\n    checkCluster(clusters.get(1), Arrays.asList(\"label2\"), Arrays.asList(\"id5\", \"id6\"), 0.93d, false);\n    checkCluster(clusters.get(2), Arrays.asList(\"label3\"), Arrays.asList(\"id7\", \"id8\"), 1.26d, false);\n    checkCluster(clusters.get(3), Arrays.asList(\"label4\"), Arrays.asList(\"id9\"), 0d, true);\n    \n    List<Cluster> sub = clusters.get(0).getSubclusters();\n    checkCluster(sub.get(0), Arrays.asList(\"label1.sub1\"), Arrays.asList(\"id1\", \"id2\"), 0.0d, false);\n    checkCluster(sub.get(1), Arrays.asList(\"label1.sub2\"), Arrays.asList(\"id2\"), 0.0d, false);\n    assertEquals(sub.size(), 2);\n  }\n\n","sourceOld":"  @Test\n  public void testClusteringResponse() throws Exception {\n    XMLResponseParser parser = new XMLResponseParser();\n    /*Load a simple XML with the clustering response encoded in an XML format*/\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleClusteringResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n\n    QueryResponse qr = new QueryResponse(response, null);\n    ClusteringResponse clusteringResponse = qr.getClusteringResponse();\n    List<Cluster> clusters = clusteringResponse.getClusters();\n    Assert.assertEquals(4, clusters.size());\n\n    checkCluster(clusters.get(0), Arrays.asList(\"label1\"), Arrays.asList(\"id1\", \"id2\", \"id3\"), 0.6d, false);\n    checkCluster(clusters.get(1), Arrays.asList(\"label2\"), Arrays.asList(\"id5\", \"id6\"), 0.93d, false);\n    checkCluster(clusters.get(2), Arrays.asList(\"label3\"), Arrays.asList(\"id7\", \"id8\"), 1.26d, false);\n    checkCluster(clusters.get(3), Arrays.asList(\"label4\"), Arrays.asList(\"id9\"), 0d, true);\n    \n    List<Cluster> sub = clusters.get(0).getSubclusters();\n    checkCluster(sub.get(0), Arrays.asList(\"label1.sub1\"), Arrays.asList(\"id1\", \"id2\"), 0.0d, false);\n    checkCluster(sub.get(1), Arrays.asList(\"label1.sub2\"), Arrays.asList(\"id2\"), 0.0d, false);\n    assertEquals(sub.size(), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd93fae83846b8c0667d607d80e2654cb02ffcd":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a626ec4d1c92e59fe390724d6220081047b03ce7","7fd93fae83846b8c0667d607d80e2654cb02ffcd"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["7fd93fae83846b8c0667d607d80e2654cb02ffcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"7fd93fae83846b8c0667d607d80e2654cb02ffcd":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["7fd93fae83846b8c0667d607d80e2654cb02ffcd","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06b9a8e8cd9cc9a3abf5a6ff15e49624e225b22a"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}