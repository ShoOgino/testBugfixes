{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLongCompressor#longCompressorMonkeyTest(int,int,int,int,double,long).mjava","commits":[{"id":"91afec3d1be3c4538a6f92102a22573087f69d68","date":1543843480,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLongCompressor#longCompressorMonkeyTest(int,int,int,int,double,long).mjava","pathOld":"/dev/null","sourceNew":"  private void longCompressorMonkeyTest(\n      int run, int size, int minValue, int maxValue, double minChance, long randomSeed) {\n    final String description = String.format(Locale.ENGLISH,\n        \"run=%d, size=%d, minValue=%d, maxValue=%d, minChance=%1.2f, seed=%d\",\n        run, size, minValue, maxValue, minChance, randomSeed);\n    Random innerRandom = new Random(randomSeed);\n    PackedInts.Mutable expected = PackedInts.getMutable(size, PackedInts.bitsRequired(maxValue), PackedInts.DEFAULT);\n    for (int i = 0 ; i < size ; i++) {\n      if (innerRandom.nextDouble() <= minChance) {\n        continue;\n      }\n      expected.set(i, maxValue-minValue == 0 ? minValue : innerRandom.nextInt(maxValue-minValue)+minValue);\n    }\n    assertSparseValid(description, expected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90c33633162a86e6323f4cf2b93e2bb168b1dc22","date":1544534062,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLongCompressor#longCompressorMonkeyTest(int,int,int,int,double,long).mjava","sourceNew":null,"sourceOld":"  private void longCompressorMonkeyTest(\n      int run, int size, int minValue, int maxValue, double minChance, long randomSeed) {\n    final String description = String.format(Locale.ENGLISH,\n        \"run=%d, size=%d, minValue=%d, maxValue=%d, minChance=%1.2f, seed=%d\",\n        run, size, minValue, maxValue, minChance, randomSeed);\n    Random innerRandom = new Random(randomSeed);\n    PackedInts.Mutable expected = PackedInts.getMutable(size, PackedInts.bitsRequired(maxValue), PackedInts.DEFAULT);\n    for (int i = 0 ; i < size ; i++) {\n      if (innerRandom.nextDouble() <= minChance) {\n        continue;\n      }\n      expected.set(i, maxValue-minValue == 0 ? minValue : innerRandom.nextInt(maxValue-minValue)+minValue);\n    }\n    assertSparseValid(description, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene70/TestLongCompressor#longCompressorMonkeyTest(int,int,int,int,double,long).mjava","sourceNew":null,"sourceOld":"  private void longCompressorMonkeyTest(\n      int run, int size, int minValue, int maxValue, double minChance, long randomSeed) {\n    final String description = String.format(Locale.ENGLISH,\n        \"run=%d, size=%d, minValue=%d, maxValue=%d, minChance=%1.2f, seed=%d\",\n        run, size, minValue, maxValue, minChance, randomSeed);\n    Random innerRandom = new Random(randomSeed);\n    PackedInts.Mutable expected = PackedInts.getMutable(size, PackedInts.bitsRequired(maxValue), PackedInts.DEFAULT);\n    for (int i = 0 ; i < size ; i++) {\n      if (innerRandom.nextDouble() <= minChance) {\n        continue;\n      }\n      expected.set(i, maxValue-minValue == 0 ? minValue : innerRandom.nextInt(maxValue-minValue)+minValue);\n    }\n    assertSparseValid(description, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91afec3d1be3c4538a6f92102a22573087f69d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["91afec3d1be3c4538a6f92102a22573087f69d68","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["91afec3d1be3c4538a6f92102a22573087f69d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"91afec3d1be3c4538a6f92102a22573087f69d68":["cfd70c9571310639a77f0123aea0db41077d9bb6","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91afec3d1be3c4538a6f92102a22573087f69d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}