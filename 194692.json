{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testMaybeRefreshBlockingLock().mjava","commits":[{"id":"0ab98cea4388ed9a87f9d519696e2f7b68c25a84","date":1335888959,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testMaybeRefreshBlockingLock().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaybeRefreshBlockingLock() throws Exception {\n    // make sure that maybeRefreshBlocking releases the lock, otherwise other\n    // threads cannot obtain it.\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.close();\n    \n    final SearcherManager sm = new SearcherManager(dir, null);\n    \n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          // this used to not release the lock, preventing other threads from obtaining it.\n          sm.maybeRefreshBlocking();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    t.start();\n    t.join();\n    \n    // if maybeRefreshBlocking didn't release the lock, this will fail.\n    assertTrue(\"failde to obtain the refreshLock!\", sm.maybeRefresh());\n    \n    sm.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testMaybeRefreshBlockingLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testMaybeRefreshBlockingLock().mjava","sourceNew":"  public void testMaybeRefreshBlockingLock() throws Exception {\n    // make sure that maybeRefreshBlocking releases the lock, otherwise other\n    // threads cannot obtain it.\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.shutdown();\n    \n    final SearcherManager sm = new SearcherManager(dir, null);\n    \n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          // this used to not release the lock, preventing other threads from obtaining it.\n          sm.maybeRefreshBlocking();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    t.start();\n    t.join();\n    \n    // if maybeRefreshBlocking didn't release the lock, this will fail.\n    assertTrue(\"failde to obtain the refreshLock!\", sm.maybeRefresh());\n    \n    sm.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaybeRefreshBlockingLock() throws Exception {\n    // make sure that maybeRefreshBlocking releases the lock, otherwise other\n    // threads cannot obtain it.\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.close();\n    \n    final SearcherManager sm = new SearcherManager(dir, null);\n    \n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          // this used to not release the lock, preventing other threads from obtaining it.\n          sm.maybeRefreshBlocking();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    t.start();\n    t.join();\n    \n    // if maybeRefreshBlocking didn't release the lock, this will fail.\n    assertTrue(\"failde to obtain the refreshLock!\", sm.maybeRefresh());\n    \n    sm.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testMaybeRefreshBlockingLock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testMaybeRefreshBlockingLock().mjava","sourceNew":"  public void testMaybeRefreshBlockingLock() throws Exception {\n    // make sure that maybeRefreshBlocking releases the lock, otherwise other\n    // threads cannot obtain it.\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.close();\n    \n    final SearcherManager sm = new SearcherManager(dir, null);\n    \n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          // this used to not release the lock, preventing other threads from obtaining it.\n          sm.maybeRefreshBlocking();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    t.start();\n    t.join();\n    \n    // if maybeRefreshBlocking didn't release the lock, this will fail.\n    assertTrue(\"failde to obtain the refreshLock!\", sm.maybeRefresh());\n    \n    sm.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaybeRefreshBlockingLock() throws Exception {\n    // make sure that maybeRefreshBlocking releases the lock, otherwise other\n    // threads cannot obtain it.\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    w.shutdown();\n    \n    final SearcherManager sm = new SearcherManager(dir, null);\n    \n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        try {\n          // this used to not release the lock, preventing other threads from obtaining it.\n          sm.maybeRefreshBlocking();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    t.start();\n    t.join();\n    \n    // if maybeRefreshBlocking didn't release the lock, this will fail.\n    assertTrue(\"failde to obtain the refreshLock!\", sm.maybeRefresh());\n    \n    sm.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"0ab98cea4388ed9a87f9d519696e2f7b68c25a84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["0ab98cea4388ed9a87f9d519696e2f7b68c25a84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ab98cea4388ed9a87f9d519696e2f7b68c25a84"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ab98cea4388ed9a87f9d519696e2f7b68c25a84":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}