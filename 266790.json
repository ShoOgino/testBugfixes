{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRegexps().mjava","commits":[{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRegexps().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexps() throws Exception {\n    PrecedenceQueryParser qp =  getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n    inner.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    inner.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(inner, Occur.SHOULD);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRegexps().mjava","sourceNew":null,"sourceOld":"  public void testRegexps() throws Exception {\n    PrecedenceQueryParser qp =  getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n    inner.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    inner.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(inner, Occur.SHOULD);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRegexps().mjava","sourceNew":null,"sourceOld":"  public void testRegexps() throws Exception {\n    PrecedenceQueryParser qp =  getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\"));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\"));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\") instanceof RegexpQuery);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\")).getRewriteMethod());\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\"));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\"));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\"));\n    \n    BooleanQuery complex = new BooleanQuery();\n    BooleanQuery inner = new BooleanQuery();\n    inner.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    inner.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(inner, Occur.SHOULD);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:/etc/init.d/ OR /etc\\\\/init\\\\[.\\\\]d/lucene/ \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["d94d6afa51157e490fc169e192a154ffc4cdad0b","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}