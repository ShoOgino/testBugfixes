{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      Runner runner = runners.peek();\n      while( runner != null ) {\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n        runner = runners.peek();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":null,"sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      Runner runner = runners.peek();\n      while( runner != null ) {\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n        runner = runners.peek();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      Runner runner = runners.peek();\n      while( runner != null ) {\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n        runner = runners.peek();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      Runner runner = runners.peek();\n      while( runner != null ) {\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n        runner = runners.peek();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      Runner runner = runners.peek();\n      while( runner != null ) {\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n        runner = runners.peek();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e476c9a1973887c9162cf88ca0988d9bfcfcde38","date":1287952892,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      Runner runner = runners.peek();\n      while( runner != null ) {\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n        runner = runners.peek();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":["22ee5eab9703d27221d8940a0c284b42ce57676c"],"bugIntro":["945902ae43d8dd7e920418efe36981403c2ee669","945902ae43d8dd7e920418efe36981403c2ee669","945902ae43d8dd7e920418efe36981403c2ee669"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      Runner runner = runners.peek();\n      while( runner != null ) {\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n        runner = runners.peek();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      Runner runner = runners.peek();\n      while( runner != null ) {\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n        runner = runners.peek();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer#blockUntilFinished().mjava","sourceNew":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","sourceOld":"  public synchronized void blockUntilFinished()\n  {\n    lock = new CountDownLatch(1);\n    try {\n      // Wait until no runners are running\n      for(;;) {\n        Runner runner;\n        synchronized(runners) {\n          runner = runners.peek();\n        }\n        if (runner == null) break;\n        runner.runnerLock.lock();\n        runner.runnerLock.unlock();\n      }\n    } finally {\n      lock.countDown();\n      lock=null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["e476c9a1973887c9162cf88ca0988d9bfcfcde38","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"e476c9a1973887c9162cf88ca0988d9bfcfcde38":["1da8d55113b689b06716246649de6f62430f15c0"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["1da8d55113b689b06716246649de6f62430f15c0","e476c9a1973887c9162cf88ca0988d9bfcfcde38"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","e476c9a1973887c9162cf88ca0988d9bfcfcde38"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e476c9a1973887c9162cf88ca0988d9bfcfcde38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e476c9a1973887c9162cf88ca0988d9bfcfcde38"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"e476c9a1973887c9162cf88ca0988d9bfcfcde38":["c26f00b574427b55127e869b935845554afde1fa","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["e476c9a1973887c9162cf88ca0988d9bfcfcde38","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}