{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","commits":[{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testParentChildrenBlockJoinQuery() throws Exception {\n    int numParentDocs = 8 + random().nextInt(8);\n    int maxChildDocsPerParent = 8 + random().nextInt(8);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numParentDocs; i++) {\n      int numChildDocs = random().nextInt(maxChildDocsPerParent);\n      List<Document> docs = new ArrayList<>(numChildDocs + 1);\n      for (int j = 0; j < numChildDocs; j++) {\n        Document childDoc = new Document();\n        childDoc.add(new StringField(\"type\", \"child\", Field.Store.NO));\n        childDoc.add(new NumericDocValuesField(\"score\", j + 1));\n        docs.add(childDoc);\n      }\n\n      Document parenDoc = new Document();\n      parenDoc.add(new StringField(\"type\", \"parent\", Field.Store.NO));\n      parenDoc.add(new NumericDocValuesField(\"num_child_docs\", numChildDocs));\n      docs.add(parenDoc);\n      writer.addDocuments(docs);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    Query childQuery = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"type\", \"child\")), BooleanClause.Occur.FILTER)\n        .add(TestJoinUtil.numericDocValuesScoreQuery(\"score\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs parentDocs = searcher.search(new TermQuery(new Term(\"type\", \"parent\")), numParentDocs);\n    assertEquals(parentDocs.scoreDocs.length, numParentDocs);\n    for (ScoreDoc parentScoreDoc : parentDocs.scoreDocs) {\n      LeafReaderContext leafReader = reader.leaves().get(ReaderUtil.subIndex(parentScoreDoc.doc, reader.leaves()));\n      NumericDocValues numericDocValuesField = leafReader.reader().getNumericDocValues(\"num_child_docs\");\n      numericDocValuesField.advance(parentScoreDoc.doc - leafReader.docBase);\n      long expectedChildDocs = numericDocValuesField.longValue();\n\n      ParentChildrenBlockJoinQuery parentChildrenBlockJoinQuery =\n          new ParentChildrenBlockJoinQuery(parentFilter, childQuery, parentScoreDoc.doc);\n      TopDocs topDocs = searcher.search(parentChildrenBlockJoinQuery, maxChildDocsPerParent);\n      assertEquals(expectedChildDocs, topDocs.totalHits);\n      if (expectedChildDocs > 0) {\n        assertEquals(expectedChildDocs, topDocs.getMaxScore(), 0);\n        for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n          ScoreDoc childScoreDoc = topDocs.scoreDocs[i];\n          assertEquals(expectedChildDocs - i, childScoreDoc.score, 0);\n        }\n      }\n\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testParentChildrenBlockJoinQuery() throws Exception {\n    int numParentDocs = 8 + random().nextInt(8);\n    int maxChildDocsPerParent = 8 + random().nextInt(8);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numParentDocs; i++) {\n      int numChildDocs = random().nextInt(maxChildDocsPerParent);\n      List<Document> docs = new ArrayList<>(numChildDocs + 1);\n      for (int j = 0; j < numChildDocs; j++) {\n        Document childDoc = new Document();\n        childDoc.add(new StringField(\"type\", \"child\", Field.Store.NO));\n        childDoc.add(new NumericDocValuesField(\"score\", j + 1));\n        docs.add(childDoc);\n      }\n\n      Document parenDoc = new Document();\n      parenDoc.add(new StringField(\"type\", \"parent\", Field.Store.NO));\n      parenDoc.add(new NumericDocValuesField(\"num_child_docs\", numChildDocs));\n      docs.add(parenDoc);\n      writer.addDocuments(docs);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    Query childQuery = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"type\", \"child\")), BooleanClause.Occur.FILTER)\n        .add(TestJoinUtil.numericDocValuesScoreQuery(\"score\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs parentDocs = searcher.search(new TermQuery(new Term(\"type\", \"parent\")), numParentDocs);\n    assertEquals(parentDocs.scoreDocs.length, numParentDocs);\n    for (ScoreDoc parentScoreDoc : parentDocs.scoreDocs) {\n      LeafReaderContext leafReader = reader.leaves().get(ReaderUtil.subIndex(parentScoreDoc.doc, reader.leaves()));\n      NumericDocValues numericDocValuesField = leafReader.reader().getNumericDocValues(\"num_child_docs\");\n      numericDocValuesField.advance(parentScoreDoc.doc - leafReader.docBase);\n      long expectedChildDocs = numericDocValuesField.longValue();\n\n      ParentChildrenBlockJoinQuery parentChildrenBlockJoinQuery =\n          new ParentChildrenBlockJoinQuery(parentFilter, childQuery, parentScoreDoc.doc);\n      TopDocs topDocs = searcher.search(parentChildrenBlockJoinQuery, maxChildDocsPerParent);\n      assertEquals(expectedChildDocs, topDocs.totalHits);\n      if (expectedChildDocs > 0) {\n        assertEquals(expectedChildDocs, topDocs.getMaxScore(), 0);\n        for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n          ScoreDoc childScoreDoc = topDocs.scoreDocs[i];\n          assertEquals(expectedChildDocs - i, childScoreDoc.score, 0);\n        }\n      }\n\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","sourceNew":"  public void testParentChildrenBlockJoinQuery() throws Exception {\n    int numParentDocs = 8 + random().nextInt(8);\n    int maxChildDocsPerParent = 8 + random().nextInt(8);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numParentDocs; i++) {\n      int numChildDocs = random().nextInt(maxChildDocsPerParent);\n      List<Document> docs = new ArrayList<>(numChildDocs + 1);\n      for (int j = 0; j < numChildDocs; j++) {\n        Document childDoc = new Document();\n        childDoc.add(new StringField(\"type\", \"child\", Field.Store.NO));\n        childDoc.add(new NumericDocValuesField(\"score\", j + 1));\n        docs.add(childDoc);\n      }\n\n      Document parenDoc = new Document();\n      parenDoc.add(new StringField(\"type\", \"parent\", Field.Store.NO));\n      parenDoc.add(new NumericDocValuesField(\"num_child_docs\", numChildDocs));\n      docs.add(parenDoc);\n      writer.addDocuments(docs);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    Query childQuery = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"type\", \"child\")), BooleanClause.Occur.FILTER)\n        .add(TestJoinUtil.numericDocValuesScoreQuery(\"score\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs parentDocs = searcher.search(new TermQuery(new Term(\"type\", \"parent\")), numParentDocs);\n    assertEquals(parentDocs.scoreDocs.length, numParentDocs);\n    for (ScoreDoc parentScoreDoc : parentDocs.scoreDocs) {\n      LeafReaderContext leafReader = reader.leaves().get(ReaderUtil.subIndex(parentScoreDoc.doc, reader.leaves()));\n      NumericDocValues numericDocValuesField = leafReader.reader().getNumericDocValues(\"num_child_docs\");\n      numericDocValuesField.advance(parentScoreDoc.doc - leafReader.docBase);\n      long expectedChildDocs = numericDocValuesField.longValue();\n\n      ParentChildrenBlockJoinQuery parentChildrenBlockJoinQuery =\n          new ParentChildrenBlockJoinQuery(parentFilter, childQuery, parentScoreDoc.doc);\n      TopDocs topDocs = searcher.search(parentChildrenBlockJoinQuery, maxChildDocsPerParent);\n      assertEquals(expectedChildDocs, topDocs.totalHits);\n      if (expectedChildDocs > 0) {\n        for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n          ScoreDoc childScoreDoc = topDocs.scoreDocs[i];\n          assertEquals(expectedChildDocs - i, childScoreDoc.score, 0);\n        }\n      }\n\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testParentChildrenBlockJoinQuery() throws Exception {\n    int numParentDocs = 8 + random().nextInt(8);\n    int maxChildDocsPerParent = 8 + random().nextInt(8);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numParentDocs; i++) {\n      int numChildDocs = random().nextInt(maxChildDocsPerParent);\n      List<Document> docs = new ArrayList<>(numChildDocs + 1);\n      for (int j = 0; j < numChildDocs; j++) {\n        Document childDoc = new Document();\n        childDoc.add(new StringField(\"type\", \"child\", Field.Store.NO));\n        childDoc.add(new NumericDocValuesField(\"score\", j + 1));\n        docs.add(childDoc);\n      }\n\n      Document parenDoc = new Document();\n      parenDoc.add(new StringField(\"type\", \"parent\", Field.Store.NO));\n      parenDoc.add(new NumericDocValuesField(\"num_child_docs\", numChildDocs));\n      docs.add(parenDoc);\n      writer.addDocuments(docs);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    Query childQuery = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"type\", \"child\")), BooleanClause.Occur.FILTER)\n        .add(TestJoinUtil.numericDocValuesScoreQuery(\"score\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs parentDocs = searcher.search(new TermQuery(new Term(\"type\", \"parent\")), numParentDocs);\n    assertEquals(parentDocs.scoreDocs.length, numParentDocs);\n    for (ScoreDoc parentScoreDoc : parentDocs.scoreDocs) {\n      LeafReaderContext leafReader = reader.leaves().get(ReaderUtil.subIndex(parentScoreDoc.doc, reader.leaves()));\n      NumericDocValues numericDocValuesField = leafReader.reader().getNumericDocValues(\"num_child_docs\");\n      numericDocValuesField.advance(parentScoreDoc.doc - leafReader.docBase);\n      long expectedChildDocs = numericDocValuesField.longValue();\n\n      ParentChildrenBlockJoinQuery parentChildrenBlockJoinQuery =\n          new ParentChildrenBlockJoinQuery(parentFilter, childQuery, parentScoreDoc.doc);\n      TopDocs topDocs = searcher.search(parentChildrenBlockJoinQuery, maxChildDocsPerParent);\n      assertEquals(expectedChildDocs, topDocs.totalHits);\n      if (expectedChildDocs > 0) {\n        assertEquals(expectedChildDocs, topDocs.getMaxScore(), 0);\n        for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n          ScoreDoc childScoreDoc = topDocs.scoreDocs[i];\n          assertEquals(expectedChildDocs - i, childScoreDoc.score, 0);\n        }\n      }\n\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","sourceNew":"  public void testParentChildrenBlockJoinQuery() throws Exception {\n    int numParentDocs = 8 + random().nextInt(8);\n    int maxChildDocsPerParent = 8 + random().nextInt(8);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numParentDocs; i++) {\n      int numChildDocs = random().nextInt(maxChildDocsPerParent);\n      List<Document> docs = new ArrayList<>(numChildDocs + 1);\n      for (int j = 0; j < numChildDocs; j++) {\n        Document childDoc = new Document();\n        childDoc.add(new StringField(\"type\", \"child\", Field.Store.NO));\n        childDoc.add(new NumericDocValuesField(\"score\", j + 1));\n        docs.add(childDoc);\n      }\n\n      Document parenDoc = new Document();\n      parenDoc.add(new StringField(\"type\", \"parent\", Field.Store.NO));\n      parenDoc.add(new NumericDocValuesField(\"num_child_docs\", numChildDocs));\n      docs.add(parenDoc);\n      writer.addDocuments(docs);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    Query childQuery = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"type\", \"child\")), BooleanClause.Occur.FILTER)\n        .add(TestJoinUtil.numericDocValuesScoreQuery(\"score\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs parentDocs = searcher.search(new TermQuery(new Term(\"type\", \"parent\")), numParentDocs);\n    assertEquals(parentDocs.scoreDocs.length, numParentDocs);\n    for (ScoreDoc parentScoreDoc : parentDocs.scoreDocs) {\n      LeafReaderContext leafReader = reader.leaves().get(ReaderUtil.subIndex(parentScoreDoc.doc, reader.leaves()));\n      NumericDocValues numericDocValuesField = leafReader.reader().getNumericDocValues(\"num_child_docs\");\n      numericDocValuesField.advance(parentScoreDoc.doc - leafReader.docBase);\n      long expectedChildDocs = numericDocValuesField.longValue();\n\n      ParentChildrenBlockJoinQuery parentChildrenBlockJoinQuery =\n          new ParentChildrenBlockJoinQuery(parentFilter, childQuery, parentScoreDoc.doc);\n      TopDocs topDocs = searcher.search(parentChildrenBlockJoinQuery, maxChildDocsPerParent);\n      assertEquals(expectedChildDocs, topDocs.totalHits);\n      if (expectedChildDocs > 0) {\n        for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n          ScoreDoc childScoreDoc = topDocs.scoreDocs[i];\n          assertEquals(expectedChildDocs - i, childScoreDoc.score, 0);\n        }\n      }\n\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testParentChildrenBlockJoinQuery() throws Exception {\n    int numParentDocs = 8 + random().nextInt(8);\n    int maxChildDocsPerParent = 8 + random().nextInt(8);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numParentDocs; i++) {\n      int numChildDocs = random().nextInt(maxChildDocsPerParent);\n      List<Document> docs = new ArrayList<>(numChildDocs + 1);\n      for (int j = 0; j < numChildDocs; j++) {\n        Document childDoc = new Document();\n        childDoc.add(new StringField(\"type\", \"child\", Field.Store.NO));\n        childDoc.add(new NumericDocValuesField(\"score\", j + 1));\n        docs.add(childDoc);\n      }\n\n      Document parenDoc = new Document();\n      parenDoc.add(new StringField(\"type\", \"parent\", Field.Store.NO));\n      parenDoc.add(new NumericDocValuesField(\"num_child_docs\", numChildDocs));\n      docs.add(parenDoc);\n      writer.addDocuments(docs);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    Query childQuery = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"type\", \"child\")), BooleanClause.Occur.FILTER)\n        .add(TestJoinUtil.numericDocValuesScoreQuery(\"score\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs parentDocs = searcher.search(new TermQuery(new Term(\"type\", \"parent\")), numParentDocs);\n    assertEquals(parentDocs.scoreDocs.length, numParentDocs);\n    for (ScoreDoc parentScoreDoc : parentDocs.scoreDocs) {\n      LeafReaderContext leafReader = reader.leaves().get(ReaderUtil.subIndex(parentScoreDoc.doc, reader.leaves()));\n      NumericDocValues numericDocValuesField = leafReader.reader().getNumericDocValues(\"num_child_docs\");\n      numericDocValuesField.advance(parentScoreDoc.doc - leafReader.docBase);\n      long expectedChildDocs = numericDocValuesField.longValue();\n\n      ParentChildrenBlockJoinQuery parentChildrenBlockJoinQuery =\n          new ParentChildrenBlockJoinQuery(parentFilter, childQuery, parentScoreDoc.doc);\n      TopDocs topDocs = searcher.search(parentChildrenBlockJoinQuery, maxChildDocsPerParent);\n      assertEquals(expectedChildDocs, topDocs.totalHits);\n      if (expectedChildDocs > 0) {\n        assertEquals(expectedChildDocs, topDocs.getMaxScore(), 0);\n        for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n          ScoreDoc childScoreDoc = topDocs.scoreDocs[i];\n          assertEquals(expectedChildDocs - i, childScoreDoc.score, 0);\n        }\n      }\n\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestParentChildrenBlockJoinQuery#testParentChildrenBlockJoinQuery().mjava","sourceNew":"  public void testParentChildrenBlockJoinQuery() throws Exception {\n    int numParentDocs = 8 + random().nextInt(8);\n    int maxChildDocsPerParent = 8 + random().nextInt(8);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numParentDocs; i++) {\n      int numChildDocs = random().nextInt(maxChildDocsPerParent);\n      List<Document> docs = new ArrayList<>(numChildDocs + 1);\n      for (int j = 0; j < numChildDocs; j++) {\n        Document childDoc = new Document();\n        childDoc.add(new StringField(\"type\", \"child\", Field.Store.NO));\n        childDoc.add(new NumericDocValuesField(\"score\", j + 1));\n        docs.add(childDoc);\n      }\n\n      Document parenDoc = new Document();\n      parenDoc.add(new StringField(\"type\", \"parent\", Field.Store.NO));\n      parenDoc.add(new NumericDocValuesField(\"num_child_docs\", numChildDocs));\n      docs.add(parenDoc);\n      writer.addDocuments(docs);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    Query childQuery = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"type\", \"child\")), BooleanClause.Occur.FILTER)\n        .add(TestJoinUtil.numericDocValuesScoreQuery(\"score\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs parentDocs = searcher.search(new TermQuery(new Term(\"type\", \"parent\")), numParentDocs);\n    assertEquals(parentDocs.scoreDocs.length, numParentDocs);\n    for (ScoreDoc parentScoreDoc : parentDocs.scoreDocs) {\n      LeafReaderContext leafReader = reader.leaves().get(ReaderUtil.subIndex(parentScoreDoc.doc, reader.leaves()));\n      NumericDocValues numericDocValuesField = leafReader.reader().getNumericDocValues(\"num_child_docs\");\n      numericDocValuesField.advance(parentScoreDoc.doc - leafReader.docBase);\n      long expectedChildDocs = numericDocValuesField.longValue();\n\n      ParentChildrenBlockJoinQuery parentChildrenBlockJoinQuery =\n          new ParentChildrenBlockJoinQuery(parentFilter, childQuery, parentScoreDoc.doc);\n      TopDocs topDocs = searcher.search(parentChildrenBlockJoinQuery, maxChildDocsPerParent);\n      assertEquals(expectedChildDocs, topDocs.totalHits.value);\n      if (expectedChildDocs > 0) {\n        for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n          ScoreDoc childScoreDoc = topDocs.scoreDocs[i];\n          assertEquals(expectedChildDocs - i, childScoreDoc.score, 0);\n        }\n      }\n\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testParentChildrenBlockJoinQuery() throws Exception {\n    int numParentDocs = 8 + random().nextInt(8);\n    int maxChildDocsPerParent = 8 + random().nextInt(8);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    for (int i = 0; i < numParentDocs; i++) {\n      int numChildDocs = random().nextInt(maxChildDocsPerParent);\n      List<Document> docs = new ArrayList<>(numChildDocs + 1);\n      for (int j = 0; j < numChildDocs; j++) {\n        Document childDoc = new Document();\n        childDoc.add(new StringField(\"type\", \"child\", Field.Store.NO));\n        childDoc.add(new NumericDocValuesField(\"score\", j + 1));\n        docs.add(childDoc);\n      }\n\n      Document parenDoc = new Document();\n      parenDoc.add(new StringField(\"type\", \"parent\", Field.Store.NO));\n      parenDoc.add(new NumericDocValuesField(\"num_child_docs\", numChildDocs));\n      docs.add(parenDoc);\n      writer.addDocuments(docs);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    BitSetProducer parentFilter = new QueryBitSetProducer(new TermQuery(new Term(\"type\", \"parent\")));\n    Query childQuery = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"type\", \"child\")), BooleanClause.Occur.FILTER)\n        .add(TestJoinUtil.numericDocValuesScoreQuery(\"score\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs parentDocs = searcher.search(new TermQuery(new Term(\"type\", \"parent\")), numParentDocs);\n    assertEquals(parentDocs.scoreDocs.length, numParentDocs);\n    for (ScoreDoc parentScoreDoc : parentDocs.scoreDocs) {\n      LeafReaderContext leafReader = reader.leaves().get(ReaderUtil.subIndex(parentScoreDoc.doc, reader.leaves()));\n      NumericDocValues numericDocValuesField = leafReader.reader().getNumericDocValues(\"num_child_docs\");\n      numericDocValuesField.advance(parentScoreDoc.doc - leafReader.docBase);\n      long expectedChildDocs = numericDocValuesField.longValue();\n\n      ParentChildrenBlockJoinQuery parentChildrenBlockJoinQuery =\n          new ParentChildrenBlockJoinQuery(parentFilter, childQuery, parentScoreDoc.doc);\n      TopDocs topDocs = searcher.search(parentChildrenBlockJoinQuery, maxChildDocsPerParent);\n      assertEquals(expectedChildDocs, topDocs.totalHits);\n      if (expectedChildDocs > 0) {\n        for (int i = 0; i < topDocs.scoreDocs.length; i++) {\n          ScoreDoc childScoreDoc = topDocs.scoreDocs[i];\n          assertEquals(expectedChildDocs - i, childScoreDoc.score, 0);\n        }\n      }\n\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}