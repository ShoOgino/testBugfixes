{"path":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","commits":[{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    assert similarity != null : \"inform must be called first\";\n    return similarity;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    assert core != null : \"inform must be called first\";\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    assert similarity != null : \"inform must be called first\";\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20eb14adcb76cac6b8ae297eb37caec72e3a2140","date":1447952616,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    assert core != null : \"inform must be called first\";\n    return similarity;\n  }\n\n","bugFix":["08970e5b8411182a29412c177eff67ec1110095b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5b77484712d628ace0836cb9c88f9039f04b748","date":1448297449,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)\n          ? new BM25Similarity()\n          : new ClassicSimilarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      assert null != defaultSim;\n      final Similarity defaultSimilarity = defaultSim;\n      similarity = new PerFieldSimilarityWrapper() {\n        @Override\n        public Similarity get(String name) {\n          FieldType fieldType = core.getLatestSchema().getFieldTypeNoEx(name);\n          if (fieldType == null) {\n            return defaultSimilarity;\n          } else {\n            Similarity similarity = fieldType.getSimilarity();\n            return similarity == null ? defaultSimilarity : similarity;\n          }\n        }\n      };\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69dab3bc0b0a7594aee1afc0a3d21285b9555620","date":1476962740,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)\n          ? new BM25Similarity()\n          : new ClassicSimilarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)\n          ? new BM25Similarity()\n          : new ClassicSimilarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      assert null != defaultSim;\n      final Similarity defaultSimilarity = defaultSim;\n      similarity = new PerFieldSimilarityWrapper() {\n        @Override\n        public Similarity get(String name) {\n          FieldType fieldType = core.getLatestSchema().getFieldTypeNoEx(name);\n          if (fieldType == null) {\n            return defaultSimilarity;\n          } else {\n            Similarity similarity = fieldType.getSimilarity();\n            return similarity == null ? defaultSimilarity : similarity;\n          }\n        }\n      };\n    }\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)\n          ? new BM25Similarity()\n          : new ClassicSimilarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)\n          ? new BM25Similarity()\n          : new ClassicSimilarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      assert null != defaultSim;\n      final Similarity defaultSimilarity = defaultSim;\n      similarity = new PerFieldSimilarityWrapper() {\n        @Override\n        public Similarity get(String name) {\n          FieldType fieldType = core.getLatestSchema().getFieldTypeNoEx(name);\n          if (fieldType == null) {\n            return defaultSimilarity;\n          } else {\n            Similarity similarity = fieldType.getSimilarity();\n            return similarity == null ? defaultSimilarity : similarity;\n          }\n        }\n      };\n    }\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","date":1499084229,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = new BM25Similarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)\n          ? new BM25Similarity()\n          : new ClassicSimilarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = new BM25Similarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)\n          ? new BM25Similarity()\n          : new ClassicSimilarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = new BM25Similarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)\n          ? new BM25Similarity()\n          : new ClassicSimilarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49b9c73648f983a139745761ed2bedf2e3821b34","date":1543567369,"type":3,"author":"javanna","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = new LegacyBM25Similarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = new BM25Similarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da56d90379fbe988bf847d3482efa685803c5193","date":1544607230,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/SchemaSimilarityFactory#getSimilarity().mjava","sourceNew":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = coreVersion.onOrAfter(Version.LUCENE_8_0_0) ? \n            new BM25Similarity() :\n            new LegacyBM25Similarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","sourceOld":"  @Override\n  public Similarity getSimilarity() {\n    if (null == core) {\n      throw new IllegalStateException(\"SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called\");\n    }\n    if (null == similarity) {\n      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg\n      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType\n      \n      Similarity defaultSim = null;\n      if (null == defaultSimFromFieldType) {\n        // nothing configured, choose a sensible implicit default...\n        defaultSim = new LegacyBM25Similarity();\n      } else {\n        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);\n        if (null == defSimFT) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" +\n                                  defaultSimFromFieldType + \"' but that <fieldType> does not exist\");\n                                  \n        }\n        defaultSim = defSimFT.getSimilarity();\n        if (null == defaultSim) {\n          throw new SolrException(ErrorCode.SERVER_ERROR,\n                                  \"SchemaSimilarityFactory configured with \" + INIT_OPT + \"='\" + \n                                  defaultSimFromFieldType +\n                                  \"' but that <fieldType> does not define a <similarity>\");\n        }\n      }\n      similarity = new SchemaSimilarity(defaultSim);\n    }\n    return similarity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"69dab3bc0b0a7594aee1afc0a3d21285b9555620":["f5b77484712d628ace0836cb9c88f9039f04b748"],"20eb14adcb76cac6b8ae297eb37caec72e3a2140":["08970e5b8411182a29412c177eff67ec1110095b"],"30c8e5574b55d57947e989443dfde611646530ee":["69dab3bc0b0a7594aee1afc0a3d21285b9555620","cc018b79379c67835b40b1259cd3dc931df60944"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f5b77484712d628ace0836cb9c88f9039f04b748","69dab3bc0b0a7594aee1afc0a3d21285b9555620"],"08970e5b8411182a29412c177eff67ec1110095b":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["69dab3bc0b0a7594aee1afc0a3d21285b9555620"],"49b9c73648f983a139745761ed2bedf2e3821b34":["cc018b79379c67835b40b1259cd3dc931df60944"],"f5b77484712d628ace0836cb9c88f9039f04b748":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["69dab3bc0b0a7594aee1afc0a3d21285b9555620","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"da56d90379fbe988bf847d3482efa685803c5193":["49b9c73648f983a139745761ed2bedf2e3821b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da56d90379fbe988bf847d3482efa685803c5193"]},"commit2Childs":{"69dab3bc0b0a7594aee1afc0a3d21285b9555620":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","cc018b79379c67835b40b1259cd3dc931df60944"],"20eb14adcb76cac6b8ae297eb37caec72e3a2140":["f5b77484712d628ace0836cb9c88f9039f04b748"],"30c8e5574b55d57947e989443dfde611646530ee":[],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["08970e5b8411182a29412c177eff67ec1110095b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"08970e5b8411182a29412c177eff67ec1110095b":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["cc018b79379c67835b40b1259cd3dc931df60944"],"49b9c73648f983a139745761ed2bedf2e3821b34":["da56d90379fbe988bf847d3482efa685803c5193"],"f5b77484712d628ace0836cb9c88f9039f04b748":["69dab3bc0b0a7594aee1afc0a3d21285b9555620","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","49b9c73648f983a139745761ed2bedf2e3821b34"],"da56d90379fbe988bf847d3482efa685803c5193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}