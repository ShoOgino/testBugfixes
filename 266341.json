{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","commits":[{"id":"ba64142b9196306ad35a6d525c0bdf5fd411690a","date":1327172564,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the next input Token whose typeAttribute.type() is not a stop type.\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return !stopTypes.contains(typeAttribute.type());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the next input Token whose typeAttribute.type() is not a stop type.\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return !stopTypes.contains(typeAttribute.type());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdf5bc7ef6219b04dac5abbbe82e2cb84d56070f","date":1328260397,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","sourceNew":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose typeAttribute.type() is not a stop type.\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return !stopTypes.contains(typeAttribute.type());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter#accept().mjava","sourceNew":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","sourceOld":"  /**\n   * By default accept the token if its type is not a stop type.\n   * When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes\n   */\n  @Override\n  protected boolean accept() throws IOException {\n    return useWhiteList == stopTypes.contains(typeAttribute.type());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bdf5bc7ef6219b04dac5abbbe82e2cb84d56070f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba64142b9196306ad35a6d525c0bdf5fd411690a"],"ba64142b9196306ad35a6d525c0bdf5fd411690a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bdf5bc7ef6219b04dac5abbbe82e2cb84d56070f":["ba64142b9196306ad35a6d525c0bdf5fd411690a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","ba64142b9196306ad35a6d525c0bdf5fd411690a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"ba64142b9196306ad35a6d525c0bdf5fd411690a":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","bdf5bc7ef6219b04dac5abbbe82e2cb84d56070f"],"bdf5bc7ef6219b04dac5abbbe82e2cb84d56070f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}