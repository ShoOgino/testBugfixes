{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","commits":[{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  private boolean modifyIndexProps(String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFiles(Collections.singleton(IndexFetcher.INDEX_PROPERTIES));\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFiles(Collections.singleton(IndexFetcher.INDEX_PROPERTIES));\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0ca74ae423fe45e31cb4c02b83262f0549f52f5","date":1482969139,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      String tmpFileName = IndexFetcher.INDEX_PROPERTIES + \".\" + System.nanoTime();\n      final IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, tmpFileName);\n        dir.sync(Collections.singleton(tmpFileName));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      \n      solrCore.getDirectoryFactory().renameWithOverwrite(dir, tmpFileName, IndexFetcher.INDEX_PROPERTIES);\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","sourceNew":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      String tmpFileName = IndexFetcher.INDEX_PROPERTIES + \".\" + System.nanoTime();\n      final IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, tmpFileName);\n        dir.sync(Collections.singleton(tmpFileName));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      \n      solrCore.getDirectoryFactory().renameWithOverwrite(dir, tmpFileName, IndexFetcher.INDEX_PROPERTIES);\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n      try {\n        dir.deleteFile(IndexFetcher.INDEX_PROPERTIES);\n      } catch (IOException e) {\n        // no problem\n      }\n      final IndexOutput out = dir.createOutput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, IndexFetcher.INDEX_PROPERTIES);\n        dir.sync(Collections.singleton(INDEX_PROPERTIES));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b39b1b02e442aaf736cc87417e93552cbd8ef1da","date":1484786722,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      String tmpFileName = IndexFetcher.INDEX_PROPERTIES + \".\" + System.nanoTime();\n      final IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, tmpFileName);\n        dir.sync(Collections.singleton(tmpFileName));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      \n      solrCore.getDirectoryFactory().renameWithOverwrite(dir, tmpFileName, IndexFetcher.INDEX_PROPERTIES);\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#modifyIndexProps(SolrCore,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * If the index is stale by any chance, load index from a different dir in the data dir.\n   */\n  protected static boolean modifyIndexProps(SolrCore solrCore, String tmpIdxDirName) {\n    LOG.info(\"New index installed. Updating index properties... index=\"+tmpIdxDirName);\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      if (slowFileExists(dir, IndexFetcher.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n        } catch (Exception e) {\n          LOG.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n\n      String tmpFileName = IndexFetcher.INDEX_PROPERTIES + \".\" + System.nanoTime();\n      final IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      p.put(\"index\", tmpIdxDirName);\n      Writer os = null;\n      try {\n        os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n        p.store(os, tmpFileName);\n        dir.sync(Collections.singleton(tmpFileName));\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(os);\n      }\n      \n      solrCore.getDirectoryFactory().renameWithOverwrite(dir, tmpFileName, IndexFetcher.INDEX_PROPERTIES);\n      return true;\n\n    } catch (IOException e1) {\n      throw new RuntimeException(e1);\n    } finally {\n      if (dir != null) {\n        try {\n          solrCore.getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(LOG, \"\", e);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["f0ca74ae423fe45e31cb4c02b83262f0549f52f5"],"f0ca74ae423fe45e31cb4c02b83262f0549f52f5":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["f03e4bed5023ec3ef93a771b8888cae991cf448d","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["7b13106276bb5ea342253dbf6aae7b675adb38d3","f0ca74ae423fe45e31cb4c02b83262f0549f52f5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0ca74ae423fe45e31cb4c02b83262f0549f52f5":["b39b1b02e442aaf736cc87417e93552cbd8ef1da","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"44a0466296f4b2d9deac60e3e524628c97aa5191":[],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","6bfe104fc023fadc9e709f8d17403d2cc61133fe","f0ca74ae423fe45e31cb4c02b83262f0549f52f5","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","44a0466296f4b2d9deac60e3e524628c97aa5191","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}