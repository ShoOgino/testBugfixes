{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abd55340ba9df8b62edcd692b34e46cf0614a52e","date":1311341057,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, \"UTF-8\");\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader(null, null).openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cb24c5fa70ba12290e43b3aa0feab5582863ee","date":1457033685,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    InputStream is = new SolrResourceLoader().openResource(\"solrj/sampleDateFacetResponse.xml\");\n    assertNotNull(is);\n    Reader in = new InputStreamReader(is, StandardCharsets.UTF_8);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n\n      // TODO - test values?\n      // System.out.println(f.toString());\n      // System.out.println(\"GAP: \" + f.getGap());\n      // System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"5eb2511ababf862ea11e10761c70ee560cd84510":["abd55340ba9df8b62edcd692b34e46cf0614a52e","9d3d365762604952e436b51980101dfc84cc1b3e"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9d3d365762604952e436b51980101dfc84cc1b3e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9d3d365762604952e436b51980101dfc84cc1b3e":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a626ec4d1c92e59fe390724d6220081047b03ce7","15cb24c5fa70ba12290e43b3aa0feab5582863ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a626ec4d1c92e59fe390724d6220081047b03ce7":["15cb24c5fa70ba12290e43b3aa0feab5582863ee","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["abd55340ba9df8b62edcd692b34e46cf0614a52e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abd55340ba9df8b62edcd692b34e46cf0614a52e":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}