{"path":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts#getAllDims(int).mjava","commits":[{"id":"8cfd1df435f04d4287925cca73cf22120f723892","date":1493925365,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n\n    List<FacetResult> results = new ArrayList<>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      FacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return a.dim.compareTo(b.dim);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts#getAllDims(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<FacetResult> getAllDims(int topN) throws IOException {\n\n    List<FacetResult> results = new ArrayList<>();\n    for(Map.Entry<String,OrdRange> ent : state.getPrefixToOrdRange().entrySet()) {\n      FacetResult fr = getDim(ent.getKey(), ent.getValue(), topN);\n      if (fr != null) {\n        results.add(fr);\n      }\n    }\n\n    // Sort by highest count:\n    Collections.sort(results,\n                     new Comparator<FacetResult>() {\n                       @Override\n                       public int compare(FacetResult a, FacetResult b) {\n                         if (a.value.intValue() > b.value.intValue()) {\n                           return -1;\n                         } else if (b.value.intValue() > a.value.intValue()) {\n                           return 1;\n                         } else {\n                           return a.dim.compareTo(b.dim);\n                         }\n                       }\n                     });\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8cfd1df435f04d4287925cca73cf22120f723892":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8cfd1df435f04d4287925cca73cf22120f723892"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cfd1df435f04d4287925cca73cf22120f723892"]},"commit2Childs":{"8cfd1df435f04d4287925cca73cf22120f723892":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cfd1df435f04d4287925cca73cf22120f723892","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}