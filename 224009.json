{"path":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],FieldType).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DimensionalBinaryField#DimensionalBinaryField(String,byte[],FieldType).mjava","sourceNew":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, FieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","sourceOld":"  /** Expert API */\n  public DimensionalBinaryField(String name, byte[] packedPoint, FieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.dimensionCount() * type.dimensionNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.dimensionCount()=\" + type.dimensionCount() + \" and type.dimensionNumBytes()=\" + type.dimensionNumBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],FieldType).mjava","sourceNew":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, IndexableFieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","sourceOld":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, FieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#BinaryPoint(String,byte[],FieldType).mjava","sourceNew":null,"sourceOld":"  /** Expert API */\n  public BinaryPoint(String name, byte[] packedPoint, FieldType type) {\n    super(name, packedPoint, type);\n    if (packedPoint.length != type.pointDimensionCount() * type.pointNumBytes()) {\n      throw new IllegalArgumentException(\"packedPoint is length=\" + packedPoint.length + \" but type.pointDimensionCount()=\" + type.pointDimensionCount() + \" and type.pointNumBytes()=\" + type.pointNumBytes());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"]},"commit2Childs":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}