{"path":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","commits":[{"id":"be34977edad162456de4a4583804025803591c45","date":1381910671,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String,String).mjava","sourceNew":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, CoreContainer.CoreLoadFailure> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue().exception, errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":"    /**\n     * Given a solrconfig.xml file name, a schema file name, a solr home directory, \n     * and an expected errString, asserts that initializing a core with these \n     * files causes an error matching the specified errString ot be thrown.\n     */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String solrHome,\n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n\n      if (null == solrHome) {\n        initCore( solrconfigFile, schemaFile );\n      } else {\n        initCore( solrconfigFile, schemaFile, solrHome );\n      }\n\n      CoreContainer cc = h.getCoreContainer();\n      for (Map.Entry<String, Exception> entry : cc.getCoreInitFailures().entrySet()) {\n        if (matches(entry.getValue(), errString))\n          return;\n      }\n    }\n    catch (Exception e) {\n      if (matches(e, errString))\n        return;\n      throw e;\n    }\n    finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be34977edad162456de4a4583804025803591c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d629ca62e3b8ab6e29a127aebe213163d490413":["be34977edad162456de4a4583804025803591c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d629ca62e3b8ab6e29a127aebe213163d490413"]},"commit2Childs":{"be34977edad162456de4a4583804025803591c45":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be34977edad162456de4a4583804025803591c45"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}