{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSequence().mjava","commits":[{"id":"54be12ea07016c62a5bea4176bb1049699734509","date":1495725615,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSequence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSequence() throws Exception {\n    String expr = \"tuple(seq=sequence(20, 0, 1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 20);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == i);\n    }\n\n    //Change the size, stride\n    expr = \"tuple(seq=sequence(100, 0, 4))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 100);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == (i*4));\n    }\n\n    //Change the start\n    expr = \"tuple(seq=sequence(100, 10, 1))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 100);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == (i+10));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d70be9540b0b7e5e5e0ede741c22b01c63ff05a","date":1495734762,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testEvaluatorOnly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSequence().mjava","sourceNew":"  @Test\n  public void testEvaluatorOnly() throws Exception {\n    String expr = \"sequence(20, 0, 1)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> sequence = (List<Number>)tuples.get(0).get(\"out\");\n    assertTrue(sequence.size() == 20);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == i);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSequence() throws Exception {\n    String expr = \"tuple(seq=sequence(20, 0, 1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 20);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == i);\n    }\n\n    //Change the size, stride\n    expr = \"tuple(seq=sequence(100, 0, 4))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 100);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == (i*4));\n    }\n\n    //Change the start\n    expr = \"tuple(seq=sequence(100, 10, 1))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 100);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == (i+10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b753f9a41b1ca838718cebdefd3aeff42547fb4","date":1495736570,"type":5,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testEvaluatorOnly().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSequence().mjava","sourceNew":"  @Test\n  public void testEvaluatorOnly() throws Exception {\n    String expr = \"sequence(20, 0, 1)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> sequence = (List<Number>)tuples.get(0).get(\"out\");\n    assertTrue(sequence.size() == 20);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == i);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSequence() throws Exception {\n    String expr = \"tuple(seq=sequence(20, 0, 1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 20);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == i);\n    }\n\n    //Change the size, stride\n    expr = \"tuple(seq=sequence(100, 0, 4))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 100);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == (i*4));\n    }\n\n    //Change the start\n    expr = \"tuple(seq=sequence(100, 10, 1))\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    sequence = (List<Number>)tuples.get(0).get(\"seq\");\n    assertTrue(sequence.size() == 100);\n    for(int i=0; i<sequence.size(); i++) {\n      assertTrue(sequence.get(i).intValue() == (i+10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54be12ea07016c62a5bea4176bb1049699734509":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b753f9a41b1ca838718cebdefd3aeff42547fb4":["54be12ea07016c62a5bea4176bb1049699734509","8d70be9540b0b7e5e5e0ede741c22b01c63ff05a"],"8d70be9540b0b7e5e5e0ede741c22b01c63ff05a":["54be12ea07016c62a5bea4176bb1049699734509"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54be12ea07016c62a5bea4176bb1049699734509","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54be12ea07016c62a5bea4176bb1049699734509":["6b753f9a41b1ca838718cebdefd3aeff42547fb4","8d70be9540b0b7e5e5e0ede741c22b01c63ff05a"],"6b753f9a41b1ca838718cebdefd3aeff42547fb4":[],"8d70be9540b0b7e5e5e0ede741c22b01c63ff05a":["6b753f9a41b1ca838718cebdefd3aeff42547fb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b753f9a41b1ca838718cebdefd3aeff42547fb4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}