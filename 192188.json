{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","commits":[{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testUserFields() {\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["217d69becab798f592818bc6b6006e337c04c0cd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testUserFields() {\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217d69becab798f592818bc6b6006e337c04c0cd","date":1342168377,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+name:foo^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\", \"qf\",\"text_sw\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\", \"qf\",\"text_sw\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b360a3d5b9d443b4e880d2c92724cffd7def8db","date":1490740768,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\", \"qf\",\"text\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\", \"qf\",\"text_sw\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d81030ef9ff5ae6820e560c0833127181c7a2c","date":1490873946,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testUserFields().mjava","sourceNew":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\", \"qf\",\"text\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","sourceOld":"  public void testUserFields() {\n    String allr = \"*[count(//doc)=10]\";\n    String oner = \"*[count(//doc)=1]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n    // User fields\n    // Default is allow all \"*\"\n    // If a list of fields are given, only those are allowed \"foo bar\"\n    // Possible to invert with \"-\" syntax:\n    //   Disallow all: \"-*\"\n    //   Allow all but id: \"* -id\"\n    // Also supports \"dynamic\" field name wildcarding\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"id:42\"),\n        oner);\n    \n    // SOLR-3377 - parens should be allowed immediately before field name\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"( id:42 )\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+id:42)\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"+(+((+id:42)))\"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\" +( +( ( +id:42) ) ) \"),\n        oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"(id:(*:*)^200)\"),\n        allr);\n\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"loremipsum\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"id:42\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -loremipsum\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"id^5.0\", \"q\",\"id:42^10.0\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"na*\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me\", \"q\",\"name:Zapp\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -na*\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*me -name\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"*ame -*e\", \"q\",\"name:Zapp\"),\n        nor);\n    \n    // Boosts from user fields\n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+id:42']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"*^2.0 id^5.0 -xyz\", \"q\",\"name:foo\"),\n        \"//str[@name='parsedquery_toString'][.='+(name:foo)^2.0']\");\n    \n    assertQ(req(\"defType\",\"edismax\", \"debugQuery\",\"true\", \"rows\",\"0\", \"uf\",\"i*^5.0\", \"q\",\"id:42\"),\n        \"//str[@name='parsedquery_toString'][.='+(id:42)^5.0']\");\n    \n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"-*\", \"q\",\"cannons\", \"qf\",\"text_sw\"),\n        oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -id\", \"q\",\"42\", \"qf\", \"id\"), oner);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["e55782fb51a6e9789542818eb2161a3247f39ace"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["217d69becab798f592818bc6b6006e337c04c0cd","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["217d69becab798f592818bc6b6006e337c04c0cd"],"36d81030ef9ff5ae6820e560c0833127181c7a2c":["c03778630c4604270d88c148afb8c7de35b51d3c"],"c03778630c4604270d88c148afb8c7de35b51d3c":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"e55782fb51a6e9789542818eb2161a3247f39ace":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc","217d69becab798f592818bc6b6006e337c04c0cd"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc","217d69becab798f592818bc6b6006e337c04c0cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"217d69becab798f592818bc6b6006e337c04c0cd":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b0cdf628dda21ad509f09608c835dc27541d1ca3"],"36d81030ef9ff5ae6820e560c0833127181c7a2c":[],"c03778630c4604270d88c148afb8c7de35b51d3c":["36d81030ef9ff5ae6820e560c0833127181c7a2c"],"e55782fb51a6e9789542818eb2161a3247f39ace":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","217d69becab798f592818bc6b6006e337c04c0cd"],"217d69becab798f592818bc6b6006e337c04c0cd":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","36d81030ef9ff5ae6820e560c0833127181c7a2c","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}