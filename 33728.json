{"path":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","commits":[{"id":"fde68de507dbf344495d7b5e8052866fe5f254ab","date":1189434831,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.flush();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.flush();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.flush();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.flush();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"455aeff4fef915340c5b19d71d5e147034e83093","date":1210099270,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, true, ANALYZER, true);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(7));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(7));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(7));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(7));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(7));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fde68de507dbf344495d7b5e8052866fe5f254ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"455aeff4fef915340c5b19d71d5e147034e83093":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c4ae99f08f69aa3acba7cd75134e8447eb747559","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["455aeff4fef915340c5b19d71d5e147034e83093"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["e82780afe6097066eb5befb86e9432f077667e3d"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"fde68de507dbf344495d7b5e8052866fe5f254ab":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"455aeff4fef915340c5b19d71d5e147034e83093":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["455aeff4fef915340c5b19d71d5e147034e83093"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"e82780afe6097066eb5befb86e9432f077667e3d":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"87c966e9308847938a7c905c2e46a56d8df788b8":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}