{"path":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","commits":[{"id":"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6","date":1461860441,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","pathOld":"/dev/null","sourceNew":"  public void test(LSBRadixSorter sorter, int[] arr, int len) {\n    final int[] expected = Arrays.copyOf(arr, len);\n    Arrays.sort(expected);\n\n    int numBits = 0;\n    for (int i = 0; i < len; ++i) {\n      numBits = Math.max(numBits, PackedInts.bitsRequired(arr[i]));\n    }\n\n    if (random().nextBoolean()) {\n      numBits = TestUtil.nextInt(random(), numBits, 32);\n    }\n\n    sorter.sort(numBits, arr, len);\n    final int[] actual = Arrays.copyOf(arr, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","pathOld":"/dev/null","sourceNew":"  public void test(LSBRadixSorter sorter, int[] arr, int len) {\n    final int[] expected = Arrays.copyOf(arr, len);\n    Arrays.sort(expected);\n\n    int numBits = 0;\n    for (int i = 0; i < len; ++i) {\n      numBits = Math.max(numBits, PackedInts.bitsRequired(arr[i]));\n    }\n\n    if (random().nextBoolean()) {\n      numBits = TestUtil.nextInt(random(), numBits, 32);\n    }\n\n    sorter.sort(numBits, arr, len);\n    final int[] actual = Arrays.copyOf(arr, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","sourceNew":"  public void test(LSBRadixSorter sorter, int[] arr, int len) {\n    final int[] expected = ArrayUtil.copyOfSubArray(arr, 0, len);\n    Arrays.sort(expected);\n\n    int numBits = 0;\n    for (int i = 0; i < len; ++i) {\n      numBits = Math.max(numBits, PackedInts.bitsRequired(arr[i]));\n    }\n\n    if (random().nextBoolean()) {\n      numBits = TestUtil.nextInt(random(), numBits, 32);\n    }\n\n    sorter.sort(numBits, arr, len);\n    final int[] actual = ArrayUtil.copyOfSubArray(arr, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  public void test(LSBRadixSorter sorter, int[] arr, int len) {\n    final int[] expected = Arrays.copyOf(arr, len);\n    Arrays.sort(expected);\n\n    int numBits = 0;\n    for (int i = 0; i < len; ++i) {\n      numBits = Math.max(numBits, PackedInts.bitsRequired(arr[i]));\n    }\n\n    if (random().nextBoolean()) {\n      numBits = TestUtil.nextInt(random(), numBits, 32);\n    }\n\n    sorter.sort(numBits, arr, len);\n    final int[] actual = Arrays.copyOf(arr, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","sourceNew":"  public void test(LSBRadixSorter sorter, int[] arr, int len) {\n    final int[] expected = ArrayUtil.copyOfSubArray(arr, 0, len);\n    Arrays.sort(expected);\n\n    int numBits = 0;\n    for (int i = 0; i < len; ++i) {\n      numBits = Math.max(numBits, PackedInts.bitsRequired(arr[i]));\n    }\n\n    if (random().nextBoolean()) {\n      numBits = TestUtil.nextInt(random(), numBits, 32);\n    }\n\n    sorter.sort(numBits, arr, len);\n    final int[] actual = ArrayUtil.copyOfSubArray(arr, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  public void test(LSBRadixSorter sorter, int[] arr, int len) {\n    final int[] expected = Arrays.copyOf(arr, len);\n    Arrays.sort(expected);\n\n    int numBits = 0;\n    for (int i = 0; i < len; ++i) {\n      numBits = Math.max(numBits, PackedInts.bitsRequired(arr[i]));\n    }\n\n    if (random().nextBoolean()) {\n      numBits = TestUtil.nextInt(random(), numBits, 32);\n    }\n\n    sorter.sort(numBits, arr, len);\n    final int[] actual = Arrays.copyOf(arr, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLSBRadixSorter#test(LSBRadixSorter,int[],int).mjava","sourceNew":"  public void test(LSBRadixSorter sorter, int[] arr, int len) {\n    final int[] expected = ArrayUtil.copyOfSubArray(arr, 0, len);\n    Arrays.sort(expected);\n\n    int numBits = 0;\n    for (int i = 0; i < len; ++i) {\n      numBits = Math.max(numBits, PackedInts.bitsRequired(arr[i]));\n    }\n\n    if (random().nextBoolean()) {\n      numBits = TestUtil.nextInt(random(), numBits, 32);\n    }\n\n    sorter.sort(numBits, arr, len);\n    final int[] actual = ArrayUtil.copyOfSubArray(arr, 0, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","sourceOld":"  public void test(LSBRadixSorter sorter, int[] arr, int len) {\n    final int[] expected = Arrays.copyOf(arr, len);\n    Arrays.sort(expected);\n\n    int numBits = 0;\n    for (int i = 0; i < len; ++i) {\n      numBits = Math.max(numBits, PackedInts.bitsRequired(arr[i]));\n    }\n\n    if (random().nextBoolean()) {\n      numBits = TestUtil.nextInt(random(), numBits, 32);\n    }\n\n    sorter.sort(numBits, arr, len);\n    final int[] actual = Arrays.copyOf(arr, len);\n    assertArrayEquals(expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6","9798d0818e7a880546802b509792d3f3d57babd2"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6"]},"commit2Childs":{"5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f8ac9e4a1f2a93ec9acbeb9da9bae9bc5d582c6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}