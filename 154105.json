{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flushBlockJumps(int[],int,IndexOutput,long).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flushBlockJumps(int[],int,IndexOutput,long).mjava","pathOld":"/dev/null","sourceNew":"  // Flushes the offet & index jump-table for blocks. This should be the last data written to out\n  // This method returns the blockCount for the blocks reachable for the jump_table or -1 for no jump-table\n  private static short flushBlockJumps(int[] jumps, int blockCount, IndexOutput out, long origo) throws IOException {\n    if (blockCount == 2) { // Jumps with a single real entry + NO_MORE_DOCS is just wasted space so we ignore that\n      blockCount = 0;\n    }\n    for (int i = 0 ; i < blockCount ; i++) {\n      out.writeInt(jumps[i*2]); // index\n      out.writeInt(jumps[i*2+1]); // offset\n    }\n    // As there are at most 32k blocks, the count is a short\n    // The jumpTableOffset will be at lastPos - (blockCount * Long.BYTES)\n    return (short)blockCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flushBlockJumps(int[],int,IndexOutput,long).mjava","pathOld":"/dev/null","sourceNew":"  // Flushes the offet & index jump-table for blocks. This should be the last data written to out\n  // This method returns the blockCount for the blocks reachable for the jump_table or -1 for no jump-table\n  private static short flushBlockJumps(int[] jumps, int blockCount, IndexOutput out, long origo) throws IOException {\n    if (blockCount == 2) { // Jumps with a single real entry + NO_MORE_DOCS is just wasted space so we ignore that\n      blockCount = 0;\n    }\n    for (int i = 0 ; i < blockCount ; i++) {\n      out.writeInt(jumps[i*2]); // index\n      out.writeInt(jumps[i*2+1]); // offset\n    }\n    // As there are at most 32k blocks, the count is a short\n    // The jumpTableOffset will be at lastPos - (blockCount * Long.BYTES)\n    return (short)blockCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2af44fa9bd43d5df330d6438c1af390323f7d567","date":1574847240,"type":3,"author":"Benedict Jin","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flushBlockJumps(int[],int,IndexOutput,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flushBlockJumps(int[],int,IndexOutput,long).mjava","sourceNew":"  // Flushes the offset & index jump-table for blocks. This should be the last data written to out\n  // This method returns the blockCount for the blocks reachable for the jump_table or -1 for no jump-table\n  private static short flushBlockJumps(int[] jumps, int blockCount, IndexOutput out, long origo) throws IOException {\n    if (blockCount == 2) { // Jumps with a single real entry + NO_MORE_DOCS is just wasted space so we ignore that\n      blockCount = 0;\n    }\n    for (int i = 0 ; i < blockCount ; i++) {\n      out.writeInt(jumps[i*2]); // index\n      out.writeInt(jumps[i*2+1]); // offset\n    }\n    // As there are at most 32k blocks, the count is a short\n    // The jumpTableOffset will be at lastPos - (blockCount * Long.BYTES)\n    return (short)blockCount;\n  }\n\n","sourceOld":"  // Flushes the offet & index jump-table for blocks. This should be the last data written to out\n  // This method returns the blockCount for the blocks reachable for the jump_table or -1 for no jump-table\n  private static short flushBlockJumps(int[] jumps, int blockCount, IndexOutput out, long origo) throws IOException {\n    if (blockCount == 2) { // Jumps with a single real entry + NO_MORE_DOCS is just wasted space so we ignore that\n      blockCount = 0;\n    }\n    for (int i = 0 ; i < blockCount ; i++) {\n      out.writeInt(jumps[i*2]); // index\n      out.writeInt(jumps[i*2+1]); // offset\n    }\n    // As there are at most 32k blocks, the count is a short\n    // The jumpTableOffset will be at lastPos - (blockCount * Long.BYTES)\n    return (short)blockCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flushBlockJumps(int[],int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/IndexedDISI#flushBlockJumps(int[],int,IndexOutput,long).mjava","sourceNew":"  // Flushes the offset & index jump-table for blocks. This should be the last data written to out\n  // This method returns the blockCount for the blocks reachable for the jump_table or -1 for no jump-table\n  private static short flushBlockJumps(int[] jumps, int blockCount, IndexOutput out) throws IOException {\n    if (blockCount == 2) { // Jumps with a single real entry + NO_MORE_DOCS is just wasted space so we ignore that\n      blockCount = 0;\n    }\n    for (int i = 0 ; i < blockCount ; i++) {\n      out.writeInt(jumps[i*2]); // index\n      out.writeInt(jumps[i*2+1]); // offset\n    }\n    // As there are at most 32k blocks, the count is a short\n    // The jumpTableOffset will be at lastPos - (blockCount * Long.BYTES)\n    return (short)blockCount;\n  }\n\n","sourceOld":"  // Flushes the offset & index jump-table for blocks. This should be the last data written to out\n  // This method returns the blockCount for the blocks reachable for the jump_table or -1 for no jump-table\n  private static short flushBlockJumps(int[] jumps, int blockCount, IndexOutput out, long origo) throws IOException {\n    if (blockCount == 2) { // Jumps with a single real entry + NO_MORE_DOCS is just wasted space so we ignore that\n      blockCount = 0;\n    }\n    for (int i = 0 ; i < blockCount ; i++) {\n      out.writeInt(jumps[i*2]); // index\n      out.writeInt(jumps[i*2+1]); // offset\n    }\n    // As there are at most 32k blocks, the count is a short\n    // The jumpTableOffset will be at lastPos - (blockCount * Long.BYTES)\n    return (short)blockCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["2af44fa9bd43d5df330d6438c1af390323f7d567"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2af44fa9bd43d5df330d6438c1af390323f7d567":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","2af44fa9bd43d5df330d6438c1af390323f7d567"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["c9f94c392daa8f5708186bede16c84eafad4cdd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}