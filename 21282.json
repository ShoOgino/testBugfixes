{"path":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.indexConfig.ramBufferSizeMB;\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.indexConfig.mergePolicyInfo.className;\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.indexConfig.mergeSchedulerInfo.className;\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.getDouble(\"indexDefaults/ramBufferSizeMB\");\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.get(\"indexDefaults/mergePolicy/@class\");\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.get(\"indexDefaults/mergeScheduler/@class\");\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6972962f6d16afcfbe2ce9b2dffe52f0612dbc48","date":1353103421,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.indexConfig.ramBufferSizeMB;\n    assertTrue(bufferSize + \" does not equal: \" + 100, bufferSize == 100);\n    String mergePolicy = solrConfig.indexConfig.mergePolicyInfo.className;\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.indexConfig.mergeSchedulerInfo.className;\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.indexConfig.ramBufferSizeMB;\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.indexConfig.mergePolicyInfo.className;\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.indexConfig.mergeSchedulerInfo.className;\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.indexConfig.ramBufferSizeMB;\n    assertTrue(bufferSize + \" does not equal: \" + 100, bufferSize == 100);\n    String mergePolicy = solrConfig.indexConfig.mergePolicyInfo.className;\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.indexConfig.mergeSchedulerInfo.className;\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.indexConfig.ramBufferSizeMB;\n    assertTrue(bufferSize + \" does not equal: \" + 32, bufferSize == 32);\n    String mergePolicy = solrConfig.indexConfig.mergePolicyInfo.className;\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.indexConfig.mergeSchedulerInfo.className;\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"926f89db68f9df123a00d986d92b2e6f15f9cf91","date":1376358057,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.indexConfig.ramBufferSizeMB;\n    assertTrue(bufferSize + \" does not equal: \" + 100, bufferSize == 100);\n    String mergePolicy = solrConfig.indexConfig.mergePolicyInfo.className;\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.indexConfig.mergeSchedulerInfo.className;\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestConfig#testLucene23Upgrades().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testLucene23Upgrades() throws Exception {\n    double bufferSize = solrConfig.indexConfig.ramBufferSizeMB;\n    assertTrue(bufferSize + \" does not equal: \" + 100, bufferSize == 100);\n    String mergePolicy = solrConfig.indexConfig.mergePolicyInfo.className;\n    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);\n    String mergeSched = solrConfig.indexConfig.mergeSchedulerInfo.className;\n    assertTrue(mergeSched + \" is not equal to \" + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"926f89db68f9df123a00d986d92b2e6f15f9cf91":["6972962f6d16afcfbe2ce9b2dffe52f0612dbc48"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["6972962f6d16afcfbe2ce9b2dffe52f0612dbc48","926f89db68f9df123a00d986d92b2e6f15f9cf91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["4a5469a71486c4c1e313c7fcb08188d7111195c2","6972962f6d16afcfbe2ce9b2dffe52f0612dbc48"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["926f89db68f9df123a00d986d92b2e6f15f9cf91"],"6972962f6d16afcfbe2ce9b2dffe52f0612dbc48":["4a5469a71486c4c1e313c7fcb08188d7111195c2"]},"commit2Childs":{"926f89db68f9df123a00d986d92b2e6f15f9cf91":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["407687e67faf6e1f02a211ca078d8e3eed631027","6972962f6d16afcfbe2ce9b2dffe52f0612dbc48"],"c26f00b574427b55127e869b935845554afde1fa":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6972962f6d16afcfbe2ce9b2dffe52f0612dbc48":["926f89db68f9df123a00d986d92b2e6f15f9cf91","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}