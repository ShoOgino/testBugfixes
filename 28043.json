{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#setupCluster().mjava","commits":[{"id":"d959ec4c6f38b465c2b853271aecb516e06e7d94","date":1580403663,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    final List<String> users = Arrays.asList(READ_ONLY_USER, WRITE_X_USER, WRITE_Y_USER, ADMIN_USER);\n    // For simplicity: every user uses a password the same as their name...\n    final Map<String,String> credentials = users.stream()\n      .collect(Collectors.toMap(Function.identity(), s -> getSaltedHashedValue(s)));\n    \n    // For simplicity: Every user is their own role...\n    final Map<String,String> roles = users.stream()\n      .collect(Collectors.toMap(Function.identity(), Function.identity()));\n\n    final String SECURITY_JSON = Utils.toJSONString\n      (Utils.makeMap(\"authorization\",\n                     Utils.makeMap(\"class\", RuleBasedAuthorizationPlugin.class.getName(),\n                                   \"user-role\", roles,\n                                   // NOTE: permissions order matters!\n                                   \"permissions\", Arrays.asList(// any authn user can 'read' or hit /stream\n                                                                Utils.makeMap(\"name\",\"read\",\n                                                                              \"role\",\"*\"),\n                                                                Utils.makeMap(\"name\",\"stream\",\n                                                                              \"collection\", \"*\",\n                                                                              \"path\", \"/stream\",\n                                                                              \"role\",\"*\"),\n                                                                // per collection write perms\n                                                                Utils.makeMap(\"name\",\"update\",\n                                                                              \"collection\", COLLECTION_X,\n                                                                              \"role\", WRITE_X_USER),\n                                                                Utils.makeMap(\"name\",\"update\",\n                                                                              \"collection\", COLLECTION_Y,\n                                                                              \"role\", WRITE_Y_USER),\n                                                                Utils.makeMap(\"name\",\"all\",\n                                                                              \"role\",ADMIN_USER))),\n                     \"authentication\",\n                     Utils.makeMap(\"class\", BasicAuthPlugin.class.getName(),\n                                   \"blockUnknown\",true,\n                                   \"credentials\", credentials)));\n    \n    // we want at most one core per node to force lots of network traffic to try and tickle distributed bugs\n    configureCluster(5)\n      .withSecurityJson(SECURITY_JSON)\n      .configure();\n\n    for (String collection : Arrays.asList(COLLECTION_X, COLLECTION_Y)) {\n      CollectionAdminRequest.createCollection(collection, \"_default\", 2, 2)\n        .setBasicAuthCredentials(ADMIN_USER, ADMIN_USER)\n        .process(cluster.getSolrClient());\n    }\n    \n    for (String collection : Arrays.asList(COLLECTION_X, COLLECTION_Y)) {\n      cluster.getSolrClient().waitForState(collection, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n                                           (n, c) -> DocCollection.isFullyActive(n, c, 2, 2));\n    }\n\n    solrUrl = cluster.getRandomJetty(random()).getProxyBaseUrl().toString();\n    \n    log.info(\"All stream requests will be sent to random solrUrl: {}\", solrUrl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d959ec4c6f38b465c2b853271aecb516e06e7d94"]},"commit2Childs":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}