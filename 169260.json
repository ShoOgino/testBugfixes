{"path":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","pathOld":"/dev/null","sourceNew":"  static final float idf(Term term, Searcher searcher) throws IOException {\n    // Use maxDoc() instead of numDocs() because its proportional to docFreq(),\n    // i.e., when one is inaccurate, so is the other, and in the same way.\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","sourceNew":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of {@link\n   * IndexReader#numDocs()} because it is proportional to {@link\n   * Searcher#docFreq(Term)} , i.e., when one is inaccurate, so is the other,\n   * and in the same direction.\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","sourceOld":"  static final float idf(Term term, Searcher searcher) throws IOException {\n    // Use maxDoc() instead of numDocs() because its proportional to docFreq(),\n    // i.e., when one is inaccurate, so is the other, and in the same way.\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3009593b01914a6a056759c669a4f333150b6ae","date":1063877166,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","sourceNew":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link IndexReader#numDocs()} because it is proportional to\n   * {@link Searcher#docFreq(Term)} , i.e., when one is inaccurate,\n   * so is the other, and in the same direction.\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","sourceOld":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of {@link\n   * IndexReader#numDocs()} because it is proportional to {@link\n   * Searcher#docFreq(Term)} , i.e., when one is inaccurate, so is the other,\n   * and in the same direction.\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10c49614cb8b943c412debb24ccb614128394470","date":1178343409,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","sourceNew":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs()} because it is proportional to\n   * {@link Searcher#docFreq(Term)} , i.e., when one is inaccurate,\n   * so is the other, and in the same direction.\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","sourceOld":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link IndexReader#numDocs()} because it is proportional to\n   * {@link Searcher#docFreq(Term)} , i.e., when one is inaccurate,\n   * so is the other, and in the same direction.\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8da75c64a26663199511eef8db650621ed89107","date":1251204606,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","sourceNew":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs()} because it is proportional to\n   * {@link Searcher#docFreq(Term)} , i.e., when one is inaccurate,\n   * so is the other, and in the same direction.\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   * @deprecated see {@link #idfExplain(Term, Searcher)}\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","sourceOld":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs()} because it is proportional to\n   * {@link Searcher#docFreq(Term)} , i.e., when one is inaccurate,\n   * so is the other, and in the same direction.\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53d1297e80bc9b90821486a8bbb4ecfb695787a3","date":1253036675,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","sourceNew":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   * @deprecated see {@link #idfExplain(Term, Searcher)}\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","sourceOld":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs()} because it is proportional to\n   * {@link Searcher#docFreq(Term)} , i.e., when one is inaccurate,\n   * so is the other, and in the same direction.\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   * @deprecated see {@link #idfExplain(Term, Searcher)}\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58","date":1256297148,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/Similarity#idf(Term,Searcher).mjava","sourceNew":null,"sourceOld":"  /** Computes a score factor for a simple term.\n   *\n   * <p>The default implementation is:<pre>\n   *   return idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   *\n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *\n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return a score factor for the term\n   * @deprecated see {@link #idfExplain(Term, Searcher)}\n   */\n  public float idf(Term term, Searcher searcher) throws IOException {\n    return idf(searcher.docFreq(term), searcher.maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10c49614cb8b943c412debb24ccb614128394470":["c3009593b01914a6a056759c669a4f333150b6ae"],"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["53d1297e80bc9b90821486a8bbb4ecfb695787a3"],"f8da75c64a26663199511eef8db650621ed89107":["10c49614cb8b943c412debb24ccb614128394470"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c3009593b01914a6a056759c669a4f333150b6ae":["6f5efa46fb27648cd98137d9898d819e115911bc"],"6f5efa46fb27648cd98137d9898d819e115911bc":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"53d1297e80bc9b90821486a8bbb4ecfb695787a3":["f8da75c64a26663199511eef8db650621ed89107"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["6f5efa46fb27648cd98137d9898d819e115911bc"],"10c49614cb8b943c412debb24ccb614128394470":["f8da75c64a26663199511eef8db650621ed89107"],"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"f8da75c64a26663199511eef8db650621ed89107":["53d1297e80bc9b90821486a8bbb4ecfb695787a3"],"c3009593b01914a6a056759c669a4f333150b6ae":["10c49614cb8b943c412debb24ccb614128394470"],"6f5efa46fb27648cd98137d9898d819e115911bc":["c3009593b01914a6a056759c669a4f333150b6ae"],"53d1297e80bc9b90821486a8bbb4ecfb695787a3":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}