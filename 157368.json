{"path":"lucene/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","sourceNew":"  /** read as a d-gaps list */ \n  private void readDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n    }          \n  }\n\n","sourceOld":"  /** read as a d-gaps list */ \n  private void readDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n    }          \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#readSetDgaps(IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","sourceNew":"  /** read as a d-gaps list */ \n  private void readSetDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n      assert n >= 0;\n    }          \n  }\n\n","sourceOld":"  /** read as a d-gaps list */ \n  private void readDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n    }          \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","sourceNew":null,"sourceOld":"  /** read as a d-gaps list */ \n  private void readDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n    }          \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/BitVector#readDgaps(IndexInput).mjava","sourceNew":null,"sourceOld":"  /** read as a d-gaps list */ \n  private void readDgaps(IndexInput input) throws IOException {\n    size = input.readInt();       // (re)read size\n    count = input.readInt();        // read count\n    bits = new byte[(size >> 3) + 1];     // allocate bits\n    int last=0;\n    int n = count();\n    while (n>0) {\n      last += input.readVInt();\n      bits[last] = input.readByte();\n      n -= BYTE_COUNTS[bits[last] & 0xFF];\n    }          \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["9454a6510e2db155fb01faa5c049b06ece95fab9","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}