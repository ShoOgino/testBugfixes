{"path":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","commits":[{"id":"aa75c94645bfc8da99a503e2018fd71899cbf9f2","date":1404877329,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberFieldName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanFieldName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberFieldName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanFieldName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (!(numberType instanceof TrieDoubleField)) { // TODO support TrieField (any trie) once BBoxStrategy does\n      throw new RuntimeException(\"Must be TrieDoubleField: \" + numberType);\n    }\n\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        register(schema, name + BBoxStrategy.SUFFIX_MINX, numberType);\n        register(schema, name + BBoxStrategy.SUFFIX_MAXX, numberType);\n        register(schema, name + BBoxStrategy.SUFFIX_MINY, numberType);\n        register(schema, name + BBoxStrategy.SUFFIX_MAXY, numberType);\n        register(schema, name + BBoxStrategy.SUFFIX_XDL, booleanType);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2a44d91ba112b5986f9411955e116445c92a37f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a44d91ba112b5986f9411955e116445c92a37f0","date":1416887019,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (!(numberType instanceof TrieDoubleField)) { // TODO support TrieField (any trie) once BBoxStrategy does\n      throw new RuntimeException(\"Must be TrieDoubleField: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberFieldName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanFieldName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberFieldName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanFieldName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (!(numberType instanceof TrieDoubleField)) { // TODO support TrieField (any trie) once BBoxStrategy does\n      throw new RuntimeException(\"Must be TrieDoubleField: \" + numberType);\n    }\n\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        register(schema, name + BBoxStrategy.SUFFIX_MINX, numberType);\n        register(schema, name + BBoxStrategy.SUFFIX_MAXX, numberType);\n        register(schema, name + BBoxStrategy.SUFFIX_MINY, numberType);\n        register(schema, name + BBoxStrategy.SUFFIX_MAXY, numberType);\n        register(schema, name + BBoxStrategy.SUFFIX_XDL, booleanType);\n      }\n    }\n  }\n\n","bugFix":["aa75c94645bfc8da99a503e2018fd71899cbf9f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c939830c5ef00597037daf5dde07e64e5df61e2a","date":1497546065,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (numberType.getNumberType() != NumberType.DOUBLE) {\n      throw new RuntimeException(\"Must be Double number type: \" + numberType);\n    }\n    if ( ! numberType.hasProperty(DOC_VALUES)) {\n      throw new RuntimeException(\"Must have doc values: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (!(numberType instanceof TrieDoubleField)) { // TODO support TrieField (any trie) once BBoxStrategy does\n      throw new RuntimeException(\"Must be TrieDoubleField: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed602796f18796570ef57efb019278af50cbba92","date":1497547748,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (numberType.getNumberType() != NumberType.DOUBLE) {\n      throw new RuntimeException(\"Must be Double number type: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (numberType.getNumberType() != NumberType.DOUBLE) {\n      throw new RuntimeException(\"Must be Double number type: \" + numberType);\n    }\n    if ( ! numberType.hasProperty(DOC_VALUES)) {\n      throw new RuntimeException(\"Must have doc values: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (numberType.getNumberType() != NumberType.DOUBLE) {\n      throw new RuntimeException(\"Must be Double number type: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (!(numberType instanceof TrieDoubleField)) { // TODO support TrieField (any trie) once BBoxStrategy does\n      throw new RuntimeException(\"Must be TrieDoubleField: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#inform(IndexSchema).mjava","sourceNew":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (numberType.getNumberType() != NumberType.DOUBLE) {\n      throw new RuntimeException(\"Must be Double number type: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(IndexSchema schema) {\n    this.schema = schema;\n    FieldType numberType = schema.getFieldTypeByName(numberTypeName);\n    FieldType booleanType = schema.getFieldTypeByName(booleanTypeName);\n\n    if (numberType == null) {\n      throw new RuntimeException(\"Cannot find number fieldType: \" + numberTypeName);\n    }\n    if (booleanType == null) {\n      throw new RuntimeException(\"Cannot find boolean fieldType: \" + booleanTypeName);\n    }\n    if (!(booleanType instanceof BoolField)) {\n      throw new RuntimeException(\"Must be a BoolField: \" + booleanType);\n    }\n    if (!(numberType instanceof TrieDoubleField)) { // TODO support TrieField (any trie) once BBoxStrategy does\n      throw new RuntimeException(\"Must be TrieDoubleField: \" + numberType);\n    }\n\n    //note: this only works for explicit fields, not dynamic fields\n    List<SchemaField> fields = new ArrayList<>(schema.getFields().values());//copy, because we modify during iteration\n    for (SchemaField sf : fields) {\n      if (sf.getType() == this) {\n        String name = sf.getName();\n        registerSubFields(schema, name, numberType, booleanType);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa75c94645bfc8da99a503e2018fd71899cbf9f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a44d91ba112b5986f9411955e116445c92a37f0":["aa75c94645bfc8da99a503e2018fd71899cbf9f2"],"c939830c5ef00597037daf5dde07e64e5df61e2a":["2a44d91ba112b5986f9411955e116445c92a37f0"],"28288370235ed02234a64753cdbf0c6ec096304a":["2a44d91ba112b5986f9411955e116445c92a37f0","ed602796f18796570ef57efb019278af50cbba92"],"ed602796f18796570ef57efb019278af50cbba92":["c939830c5ef00597037daf5dde07e64e5df61e2a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["2a44d91ba112b5986f9411955e116445c92a37f0","ed602796f18796570ef57efb019278af50cbba92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"aa75c94645bfc8da99a503e2018fd71899cbf9f2":["2a44d91ba112b5986f9411955e116445c92a37f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa75c94645bfc8da99a503e2018fd71899cbf9f2"],"2a44d91ba112b5986f9411955e116445c92a37f0":["c939830c5ef00597037daf5dde07e64e5df61e2a","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c939830c5ef00597037daf5dde07e64e5df61e2a":["ed602796f18796570ef57efb019278af50cbba92"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ed602796f18796570ef57efb019278af50cbba92":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}