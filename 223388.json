{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","commits":[{"id":"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","date":1461010196,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testGatherNodesStream() throws Exception {\n\n    indexr(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\");\n    indexr(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\");\n    indexr(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\");\n    indexr(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\");\n    indexr(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\");\n    indexr(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\");\n    indexr(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\");\n    indexr(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\");\n    indexr(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\");\n    indexr(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testGatherNodesStream() throws Exception {\n\n    indexr(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\");\n    indexr(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\");\n    indexr(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\");\n    indexr(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\");\n    indexr(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\");\n    indexr(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\");\n    indexr(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\");\n    indexr(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\");\n    indexr(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\");\n    indexr(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","date":1461702806,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  private void testGatherNodesStream() throws Exception {\n\n    indexr(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\");\n    indexr(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\");\n    indexr(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\");\n    indexr(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\");\n    indexr(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\");\n    indexr(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\");\n    indexr(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\");\n    indexr(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\");\n    indexr(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\");\n    indexr(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testGatherNodesStream() throws Exception {\n\n    indexr(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\");\n    indexr(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\");\n    indexr(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\");\n    indexr(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\");\n    indexr(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\");\n    indexr(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\");\n    indexr(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\");\n    indexr(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\");\n    indexr(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\");\n    indexr(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testGatherNodesStream() throws Exception {\n\n    indexr(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\");\n    indexr(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\");\n    indexr(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\");\n    indexr(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\");\n    indexr(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\");\n    indexr(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\");\n    indexr(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\");\n    indexr(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\");\n    indexr(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\");\n    indexr(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testGatherNodesStream() throws Exception {\n\n    indexr(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\");\n    indexr(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\");\n    indexr(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\");\n    indexr(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\");\n    indexr(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\");\n    indexr(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\");\n    indexr(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\");\n    indexr(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\");\n    indexr(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\");\n    indexr(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testGatherNodesStream() throws Exception {\n\n    indexr(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\");\n    indexr(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\");\n    indexr(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\");\n    indexr(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\");\n    indexr(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\");\n    indexr(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\");\n    indexr(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\");\n    indexr(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\");\n    indexr(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\");\n    indexr(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54d17c38a2ec6cf529776157e201d539c5c0ff2f","date":1462480579,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1, product7->product_s\\\",\" +\n        \"maxDocFreq=\\\"2\\\",\"+\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->basket_s\\\",\" +\n        \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79728e71d79579147b18f43e27a36e34be4986e2","date":1462480538,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1, product7->product_s\\\",\" +\n        \"maxDocFreq=\\\"2\\\",\"+\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->basket_s\\\",\" +\n        \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1, product7->product_s\\\",\" +\n        \"maxDocFreq=\\\"2\\\",\"+\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->basket_s\\\",\" +\n        \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  private void testGatherNodesStream() throws Exception {\n\n    indexr(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\");\n    indexr(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\");\n    indexr(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\");\n    indexr(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\");\n    indexr(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\");\n    indexr(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\");\n    indexr(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\");\n    indexr(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\");\n    indexr(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\");\n    indexr(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\");\n    indexr(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\");\n\n    commit();\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1, product7->product_s\\\",\" +\n        \"maxDocFreq=\\\"2\\\",\"+\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->basket_s\\\",\" +\n        \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n                               \"walk=\\\"product1->product_s\\\",\" +\n                               \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n                         \"walk=\\\"product1, product7->product_s\\\",\" +\n                         \"maxDocFreq=\\\"2\\\",\"+\n                         \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n                                 expr+\",\"+\n                                \"walk=\\\"node->basket_s\\\",\" +\n                                \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n           \"walk=\\\"product4, product7->product_s\\\",\" +\n           \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n                        \"walk=\\\"product4, product7->product_s\\\",\" +\n                        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bd3ba64594a889f0e0224b3a1627b038cced5cf","date":1483845464,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"nodes(collection1, \" +\n        \"walk=\\\"product1->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1, product7->product_s\\\",\" +\n        \"maxDocFreq=\\\"2\\\",\"+\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->basket_s\\\",\" +\n        \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1, product7->product_s\\\",\" +\n        \"maxDocFreq=\\\"2\\\",\"+\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->basket_s\\\",\" +\n        \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphExpressionTest#testGatherNodesStream().mjava","sourceNew":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"nodes(collection1, \" +\n        \"walk=\\\"product1->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1, product7->product_s\\\",\" +\n        \"maxDocFreq=\\\"2\\\",\"+\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->basket_s\\\",\" +\n        \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testGatherNodesStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"basket_s\", \"basket1\", \"product_s\", \"product1\", \"price_f\", \"20\")\n        .add(id, \"1\", \"basket_s\", \"basket1\", \"product_s\", \"product3\", \"price_f\", \"30\")\n        .add(id, \"2\", \"basket_s\", \"basket1\", \"product_s\", \"product5\", \"price_f\", \"1\")\n        .add(id, \"3\", \"basket_s\", \"basket2\", \"product_s\", \"product1\", \"price_f\", \"2\")\n        .add(id, \"4\", \"basket_s\", \"basket2\", \"product_s\", \"product6\", \"price_f\", \"5\")\n        .add(id, \"5\", \"basket_s\", \"basket2\", \"product_s\", \"product7\", \"price_f\", \"10\")\n        .add(id, \"6\", \"basket_s\", \"basket3\", \"product_s\", \"product4\", \"price_f\", \"20\")\n        .add(id, \"7\", \"basket_s\", \"basket3\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"8\", \"basket_s\", \"basket3\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .add(id, \"9\", \"basket_s\", \"basket4\", \"product_s\", \"product4\", \"price_f\", \"40\")\n        .add(id, \"10\", \"basket_s\", \"basket4\", \"product_s\", \"product3\", \"price_f\", \"10\")\n        .add(id, \"11\", \"basket_s\", \"basket4\", \"product_s\", \"product1\", \"price_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    List<Tuple> tuples = null;\n    Set<String> paths = null;\n    GatherNodesStream stream = null;\n    StreamContext context = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    context.setSolrClientCache(cache);\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"count\", CountMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class);\n\n    String expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 4);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket1\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"basket4\"));\n\n\n    //Test maxDocFreq param\n    String docFreqExpr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product1, product7->product_s\\\",\" +\n        \"maxDocFreq=\\\"2\\\",\"+\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(docFreqExpr);\n    stream.setStreamContext(context);\n\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 1);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n\n\n\n    String expr2 = \"gatherNodes(collection1, \" +\n        expr+\",\"+\n        \"walk=\\\"node->basket_s\\\",\" +\n        \"gather=\\\"product_s\\\", count(*), avg(price_f), sum(price_f), min(price_f), max(price_f))\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr2);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n\n    stream.setStreamContext(context);\n\n\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n\n\n    assertTrue(tuples.size() == 5);\n\n\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"product3\"));\n    assertTrue(tuples.get(0).getDouble(\"count(*)\").equals(3.0D));\n\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"product4\"));\n    assertTrue(tuples.get(1).getDouble(\"count(*)\").equals(2.0D));\n    assertTrue(tuples.get(1).getDouble(\"avg(price_f)\").equals(30.0D));\n    assertTrue(tuples.get(1).getDouble(\"sum(price_f)\").equals(60.0D));\n    assertTrue(tuples.get(1).getDouble(\"min(price_f)\").equals(20.0D));\n    assertTrue(tuples.get(1).getDouble(\"max(price_f)\").equals(40.0D));\n\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"product5\"));\n    assertTrue(tuples.get(2).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(3).getString(\"node\").equals(\"product6\"));\n    assertTrue(tuples.get(3).getDouble(\"count(*)\").equals(1.0D));\n    assertTrue(tuples.get(4).getString(\"node\").equals(\"product7\"));\n    assertTrue(tuples.get(4).getDouble(\"count(*)\").equals(1.0D));\n\n    //Test list of root nodes\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 3);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n    assertTrue(tuples.get(2).getString(\"node\").equals(\"basket4\"));\n\n    //Test with negative filter query\n\n    expr = \"gatherNodes(collection1, \" +\n        \"walk=\\\"product4, product7->product_s\\\",\" +\n        \"gather=\\\"basket_s\\\", fq=\\\"-basket_s:basket4\\\")\";\n\n    stream = (GatherNodesStream)factory.constructStream(expr);\n\n    context = new StreamContext();\n    context.setSolrClientCache(cache);\n    stream.setStreamContext(context);\n    tuples = getTuples(stream);\n\n    Collections.sort(tuples, new FieldComparator(\"node\", ComparatorOrder.ASCENDING));\n    assertTrue(tuples.size() == 2);\n    assertTrue(tuples.get(0).getString(\"node\").equals(\"basket2\"));\n    assertTrue(tuples.get(1).getString(\"node\").equals(\"basket3\"));\n\n    cache.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73450c0955930295d34703e7ddbfc6973b7a121a":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","b940572a59da1b42b6c20ab5278155b12816807a"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5bd3ba64594a889f0e0224b3a1627b038cced5cf"],"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"b940572a59da1b42b6c20ab5278155b12816807a":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96"],"79728e71d79579147b18f43e27a36e34be4986e2":["73450c0955930295d34703e7ddbfc6973b7a121a","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"5bd3ba64594a889f0e0224b3a1627b038cced5cf":["79728e71d79579147b18f43e27a36e34be4986e2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","79728e71d79579147b18f43e27a36e34be4986e2"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["73450c0955930295d34703e7ddbfc6973b7a121a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","79728e71d79579147b18f43e27a36e34be4986e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","afdf6ff5b1319d8ae254212f1203a6233ed3e1dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bd3ba64594a889f0e0224b3a1627b038cced5cf"]},"commit2Childs":{"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"73450c0955930295d34703e7ddbfc6973b7a121a":["79728e71d79579147b18f43e27a36e34be4986e2","54d17c38a2ec6cf529776157e201d539c5c0ff2f"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"79728e71d79579147b18f43e27a36e34be4986e2":["5bd3ba64594a889f0e0224b3a1627b038cced5cf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"5bd3ba64594a889f0e0224b3a1627b038cced5cf":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54d17c38a2ec6cf529776157e201d539c5c0ff2f":["79728e71d79579147b18f43e27a36e34be4986e2"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","0e15955b4980562a0c1c81d08654904f3fadb83b"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}