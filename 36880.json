{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n\t  assertAnalyzesTo(analyzer, \"ประโยคว่า the ประโยคว่า\",\n\t          new String[] { \"ประโยค\", \"ว่า\", \"ประโยค\", \"ว่า\" },\n\t          new int[] { 0, 6, 14, 20 },\n\t          new int[] { 6, 9, 20, 23 },\n\t          new int[] { 1, 1, 2, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n\t  assertAnalyzesTo(analyzer, \"ประโยคว่าtheประโยคว่า\",\n\t      new String[] { \"ประโยค\", \"ว่า\", \"ประโยค\", \"ว่า\" },\n\t      new int[] { 0, 6, 12, 18 },\n\t      new int[] { 6, 9, 18, 21 },\n\t      new int[] { 1, 1, 2, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n\t  assertAnalyzesTo(analyzer, \"ประโยคว่า the ประโยคว่า\",\n\t          new String[] { \"ประโยค\", \"ว่า\", \"ประโยค\", \"ว่า\" },\n\t          new int[] { 0, 6, 14, 20 },\n\t          new int[] { 6, 9, 20, 23 },\n\t          new int[] { 1, 1, 2, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n\t  assertAnalyzesTo(analyzer, \"ประโยคว่าtheประโยคว่า\",\n\t      new String[] { \"ประโยค\", \"ว่า\", \"ประโยค\", \"ว่า\" },\n\t      new int[] { 0, 6, 12, 18 },\n\t      new int[] { 6, 9, 18, 21 },\n\t      new int[] { 1, 1, 2, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9bb89d6ac5da067733bee436027909ab5f49c6","date":1284521435,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n\t  assertAnalyzesTo(analyzer, \"ประโยคว่า the ประโยคว่า\",\n\t          new String[] { \"ประโยค\", \"ว่า\", \"ประโยค\", \"ว่า\" },\n\t          new int[] { 0, 6, 14, 20 },\n\t          new int[] { 6, 9, 20, 23 },\n\t          new int[] { 1, 1, 2, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n\t  assertAnalyzesTo(analyzer, \"ประโยคว่าtheประโยคว่า\",\n\t      new String[] { \"ประโยค\", \"ว่า\", \"ประโยค\", \"ว่า\" },\n\t      new int[] { 0, 6, 12, 18 },\n\t      new int[] { 6, 9, 18, 21 },\n\t      new int[] { 1, 1, 2, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5d78730ab190ff8c3ec8984b6e7170f7b35de8","date":1284910806,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  Assume.assumeTrue(ThaiWordFilter.DBBI_AVAILABLE);\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f","date":1287243791,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  Assume.assumeTrue(ThaiWordFilter.DBBI_AVAILABLE);\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  Assume.assumeTrue(ThaiWordFilter.DBBI_AVAILABLE);\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n\t  assertAnalyzesTo(analyzer, \"ประโยคว่า the ประโยคว่า\",\n\t          new String[] { \"ประโยค\", \"ว่า\", \"ประโยค\", \"ว่า\" },\n\t          new int[] { 0, 6, 14, 20 },\n\t          new int[] { 6, 9, 20, 23 },\n\t          new int[] { 1, 1, 2, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n\t  assertAnalyzesTo(analyzer, \"ประโยคว่าtheประโยคว่า\",\n\t      new String[] { \"ประโยค\", \"ว่า\", \"ประโยค\", \"ว่า\" },\n\t      new int[] { 0, 6, 12, 18 },\n\t      new int[] { 6, 9, 18, 21 },\n\t      new int[] { 1, 1, 2, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c18cddad60612066911323793b93dcc410126b2","date":1310124363,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(new ThaiAnalyzer(TEST_VERSION_CURRENT), \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf703a22c95bad237d2d787a15bfbbc329df81c0","date":1323380832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  assumeTrue(\"JRE does not support Thai dictionary-based BreakIterator\", ThaiWordFilter.DBBI_AVAILABLE);\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d47f1eb3c3b8adc62b915f0609e62634a9c9e8","date":1328702872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\t// note this test uses stopfilter's stopset\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\t// note this test uses stopfilter's stopset\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\t// note this test uses stopfilter's stopset\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d47f1eb3c3b8adc62b915f0609e62634a9c9e8":["bf703a22c95bad237d2d787a15bfbbc329df81c0"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3c18cddad60612066911323793b93dcc410126b2","bf703a22c95bad237d2d787a15bfbbc329df81c0"],"3b5d78730ab190ff8c3ec8984b6e7170f7b35de8":["ac9bb89d6ac5da067733bee436027909ab5f49c6"],"3c18cddad60612066911323793b93dcc410126b2":["e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["56d47f1eb3c3b8adc62b915f0609e62634a9c9e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac9bb89d6ac5da067733bee436027909ab5f49c6":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"bf703a22c95bad237d2d787a15bfbbc329df81c0":["3c18cddad60612066911323793b93dcc410126b2"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f","3c18cddad60612066911323793b93dcc410126b2"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3b5d78730ab190ff8c3ec8984b6e7170f7b35de8","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["3b5d78730ab190ff8c3ec8984b6e7170f7b35de8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"56d47f1eb3c3b8adc62b915f0609e62634a9c9e8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3b5d78730ab190ff8c3ec8984b6e7170f7b35de8":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f"],"3c18cddad60612066911323793b93dcc410126b2":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","bf703a22c95bad237d2d787a15bfbbc329df81c0","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ac9bb89d6ac5da067733bee436027909ab5f49c6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"ac9bb89d6ac5da067733bee436027909ab5f49c6":["3b5d78730ab190ff8c3ec8984b6e7170f7b35de8"],"bf703a22c95bad237d2d787a15bfbbc329df81c0":["56d47f1eb3c3b8adc62b915f0609e62634a9c9e8","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"e42b97f2dcf8cca9bf6437e7d0dd3e8711f7413f":["3c18cddad60612066911323793b93dcc410126b2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}