{"path":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","commits":[{"id":"7c62564d5adf82d1fc178ea3e881841b5ae83a94","date":1144164358,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(float).mjava","sourceNew":"    /**\n     * Tests two span queries.\n     *\n     * @throws IOException\n     */\n    protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s, final float expectedScore) throws IOException {\n\n        final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery, BooleanClause.Occur.MUST);\n        query.add(spanQuery, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"1\", \"2\", \"3\", \"4\" };\n        final float[] expectedScores = new float[] { expectedScore, expectedScore, expectedScore, expectedScore };\n        assertHits(s, query, \"two span queries\", expectedIds, expectedScores);\n    }\n\n","sourceOld":"    /**\n     * Tests two span queries.\n     *\n     * @throws IOException\n     */\n    protected void doTestBooleanQueryWithSpanQueries(final float expectedScore) throws IOException {\n\n        final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery, BooleanClause.Occur.MUST);\n        query.add(spanQuery, BooleanClause.Occur.MUST);\n        final Hits hits = executeQuery(query);\n        final String[] expectedIds = new String[] { \"1\", \"2\", \"3\", \"4\" };\n        final float[] expectedScores = new float[] { expectedScore, expectedScore, expectedScore, expectedScore };\n        assertHits(hits, \"two span queries\", expectedIds, expectedScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","sourceNew":"    /**\n     * Tests two span queries.\n     *\n     * @throws IOException\n     */\n    protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s, final float expectedScore) throws IOException {\n\n        final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery, BooleanClause.Occur.MUST);\n        query.add(spanQuery, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"1\", \"2\", \"3\", \"4\" };\n        final float[] expectedScores = new float[] { expectedScore, expectedScore, expectedScore, expectedScore };\n        assertHits(s, query, \"two span queries\", expectedIds, expectedScores);\n    }\n\n","sourceOld":"    /**\n     * Tests two span queries.\n     *\n     * @throws IOException\n     */\n    protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s, final float expectedScore) throws IOException {\n\n        final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n        final BooleanQuery query = new BooleanQuery();\n        query.add(spanQuery, BooleanClause.Occur.MUST);\n        query.add(spanQuery, BooleanClause.Occur.MUST);\n        final String[] expectedIds = new String[] { \"1\", \"2\", \"3\", \"4\" };\n        final float[] expectedScores = new float[] { expectedScore, expectedScore, expectedScore, expectedScore };\n        assertHits(s, query, \"two span queries\", expectedIds, expectedScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"7c62564d5adf82d1fc178ea3e881841b5ae83a94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c62564d5adf82d1fc178ea3e881841b5ae83a94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c62564d5adf82d1fc178ea3e881841b5ae83a94":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}