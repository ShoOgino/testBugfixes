{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"/dev/null","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testBasicDelete().mjava","sourceNew":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testBasicDelete() throws IOException\n    {\n        Directory dir = new MockRAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 100 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        reader.close();\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        int deleted = 0;\n        reader = IndexReader.open(dir, false);\n        deleted = reader.deleteDocuments(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n\n        // open a 2nd reader to make sure first reader can\n        // commit its changes (.del) while second reader\n        // is open:\n        IndexReader reader2 = IndexReader.open(dir, false);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir, false);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        reader.close();\n        reader2.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}