{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, scoreDocsInOrder, topScorer, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, true, false, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}