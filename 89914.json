{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"3128e6d07d9fef0d1aa24f58b07133c9293131b2","date":1342190719,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = super.intersect(automaton, bytes);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = super.intersect(automaton, bytes);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = super.intersect(automaton, bytes);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d00acb12c9809438e21de7c24f016356973d46","date":1359349254,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = super.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = super.intersect(automaton, bytes);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = super.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = super.intersect(automaton, bytes);\n      assert termsEnum != null;\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe43a17fb193c95257604ee5486e9f6e2a392c28","date":1365104925,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = super.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":["3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe43a17fb193c95257604ee5486e9f6e2a392c28":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"59d00acb12c9809438e21de7c24f016356973d46":["3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3128e6d07d9fef0d1aa24f58b07133c9293131b2","59d00acb12c9809438e21de7c24f016356973d46"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe43a17fb193c95257604ee5486e9f6e2a392c28":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"59d00acb12c9809438e21de7c24f016356973d46":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["fe43a17fb193c95257604ee5486e9f6e2a392c28"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["59d00acb12c9809438e21de7c24f016356973d46","aba371508186796cc6151d8223a5b4e16d02e26e","d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}