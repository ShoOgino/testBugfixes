{"path":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63131741120598595ba46620adaf3fad049ca291","date":1335567423,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache old) {\n    if (regenerator == null) return;\n    long warmingStartTime = System.nanoTime();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (isAutowarmingOn()) {\n      int sz = autowarm.getWarmCount(other.size());\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n              this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        } catch (Exception e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4d7d3943904804560937e6239effeebda0f920e4":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c44cc06c26e456fe9c215072b79fce30babe3975":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"63131741120598595ba46620adaf3fad049ca291":["c26f00b574427b55127e869b935845554afde1fa"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["63131741120598595ba46620adaf3fad049ca291","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["63131741120598595ba46620adaf3fad049ca291"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a117d95183986014a31f25bb04e5464ca06d6068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["4d7d3943904804560937e6239effeebda0f920e4"],"c26f00b574427b55127e869b935845554afde1fa":["63131741120598595ba46620adaf3fad049ca291"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c44cc06c26e456fe9c215072b79fce30babe3975":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"a117d95183986014a31f25bb04e5464ca06d6068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"63131741120598595ba46620adaf3fad049ca291":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["a117d95183986014a31f25bb04e5464ca06d6068"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}