{"path":"src/test/org/apache/lucene/index/TestIndexReader#testOpenEmptyDirectory().mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testOpenEmptyDirectory().mjava","pathOld":"/dev/null","sourceNew":"    public void testOpenEmptyDirectory() throws IOException{\n      String dirName = \"test.empty\";\n      File fileDirName = new File(dirName);\n      if (!fileDirName.exists()) {\n        fileDirName.mkdir();\n      }\n      try {\n        IndexReader reader = IndexReader.open(fileDirName);\n        fail(\"opening IndexReader on empty directory failed to produce FileNotFoundException\");\n      } catch (FileNotFoundException e) {\n        // GOOD\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e378ef7ce32d70ec949c972e4d980c8579077676","date":1163978071,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testOpenEmptyDirectory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testOpenEmptyDirectory().mjava","sourceNew":"    public void testOpenEmptyDirectory() throws IOException{\n      String dirName = \"test.empty\";\n      File fileDirName = new File(dirName);\n      if (!fileDirName.exists()) {\n        fileDirName.mkdir();\n      }\n      try {\n        IndexReader reader = IndexReader.open(fileDirName);\n        fail(\"opening IndexReader on empty directory failed to produce FileNotFoundException\");\n      } catch (FileNotFoundException e) {\n        // GOOD\n      }\n      rmDir(fileDirName);\n    }\n\n","sourceOld":"    public void testOpenEmptyDirectory() throws IOException{\n      String dirName = \"test.empty\";\n      File fileDirName = new File(dirName);\n      if (!fileDirName.exists()) {\n        fileDirName.mkdir();\n      }\n      try {\n        IndexReader reader = IndexReader.open(fileDirName);\n        fail(\"opening IndexReader on empty directory failed to produce FileNotFoundException\");\n      } catch (FileNotFoundException e) {\n        // GOOD\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testOpenEmptyDirectory().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testOpenEmptyDirectory().mjava","sourceNew":"    public void testOpenEmptyDirectory() throws IOException{\n      String dirName = \"test.empty\";\n      File fileDirName = new File(dirName);\n      if (!fileDirName.exists()) {\n        fileDirName.mkdir();\n      }\n      try {\n        IndexReader.open(fileDirName);\n        fail(\"opening IndexReader on empty directory failed to produce FileNotFoundException\");\n      } catch (FileNotFoundException e) {\n        // GOOD\n      }\n      rmDir(fileDirName);\n    }\n\n","sourceOld":"    public void testOpenEmptyDirectory() throws IOException{\n      String dirName = \"test.empty\";\n      File fileDirName = new File(dirName);\n      if (!fileDirName.exists()) {\n        fileDirName.mkdir();\n      }\n      try {\n        IndexReader reader = IndexReader.open(fileDirName);\n        fail(\"opening IndexReader on empty directory failed to produce FileNotFoundException\");\n      } catch (FileNotFoundException e) {\n        // GOOD\n      }\n      rmDir(fileDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testOpenEmptyDirectory().mjava","sourceNew":null,"sourceOld":"    public void testOpenEmptyDirectory() throws IOException{\n      String dirName = \"test.empty\";\n      File fileDirName = new File(dirName);\n      if (!fileDirName.exists()) {\n        fileDirName.mkdir();\n      }\n      try {\n        IndexReader.open(fileDirName);\n        fail(\"opening IndexReader on empty directory failed to produce FileNotFoundException\");\n      } catch (FileNotFoundException e) {\n        // GOOD\n      }\n      rmDir(fileDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testOpenEmptyDirectory().mjava","sourceNew":null,"sourceOld":"    public void testOpenEmptyDirectory() throws IOException{\n      String dirName = \"test.empty\";\n      File fileDirName = new File(dirName);\n      if (!fileDirName.exists()) {\n        fileDirName.mkdir();\n      }\n      try {\n        IndexReader.open(fileDirName);\n        fail(\"opening IndexReader on empty directory failed to produce FileNotFoundException\");\n      } catch (FileNotFoundException e) {\n        // GOOD\n      }\n      rmDir(fileDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e378ef7ce32d70ec949c972e4d980c8579077676":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["e82780afe6097066eb5befb86e9432f077667e3d","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e82780afe6097066eb5befb86e9432f077667e3d":["e378ef7ce32d70ec949c972e4d980c8579077676"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e378ef7ce32d70ec949c972e4d980c8579077676":["e82780afe6097066eb5befb86e9432f077667e3d"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["e378ef7ce32d70ec949c972e4d980c8579077676"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e82780afe6097066eb5befb86e9432f077667e3d":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}