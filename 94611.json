{"path":"src/java/org/apache/solr/common/params/CommonParams#setValues(NamedList).mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/params/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"194b2effd3a78c710e7585eab9d9b902def26aaa","date":1181865263,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/common/params/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/common/params/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        SolrCore.log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","date":1185993405,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/CommonParams#setValues(NamedList).mjava","pathOld":"src/java/org/apache/solr/common/params/CommonParams#setValues(NamedList).mjava","sourceNew":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + FL);\n      }\n    }\n\n    tmp = args.get(DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + DF);\n      }\n    }\n\n    tmp = args.get(DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Sets the params using values from a NamedList, usefull in the\n   * init method for your handler.\n   *\n   * <p>\n   * If any param is not of the expected type, a severe error is\n   * logged,and the param is skipped.\n   * </p>\n   *\n   * <p>\n   * If any param is not of in the NamedList, it is skipped and the\n   * old value is left alone.\n   * </p>\n   *\n   */\n  public void setValues(NamedList args) {\n\n    Object tmp;\n\n    tmp = args.get(SolrParams.FL);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        fl = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.FL);\n      }\n    }\n\n    tmp = args.get(SolrParams.DF);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        df = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.DF);\n      }\n    }\n\n    tmp = args.get(SolrParams.DEBUG_QUERY);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        debugQuery = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.DEBUG_QUERY);\n      }\n    }\n\n    tmp = args.get(SolrParams.EXPLAIN_OTHER);\n    if (null != tmp) {\n      if (tmp instanceof String) {\n        explainOther = tmp.toString();\n      } else {\n        log.severe(\"init param is not a str: \" + SolrParams.EXPLAIN_OTHER);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":["194b2effd3a78c710e7585eab9d9b902def26aaa"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"194b2effd3a78c710e7585eab9d9b902def26aaa":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef":[],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["194b2effd3a78c710e7585eab9d9b902def26aaa"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"194b2effd3a78c710e7585eab9d9b902def26aaa":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}