{"path":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#obtain().mjava","commits":[{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#obtain().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized boolean obtain() throws IOException {\n\n      if (lock != null) {\n        // Our instance is already locked:\n        return false;\n      }\n\n      // Ensure that lockDir exists and is a directory.\n      Files.createDirectories(lockDir);\n      try {\n        Files.createFile(path);\n      } catch (IOException ignore) {\n        // we must create the file to have a truly canonical path.\n        // if its already created, we don't care. if it cant be created, it will fail below.\n      }\n      final Path canonicalPath = path.toRealPath();\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n      // This is a pretty crazy workaround for some documented\n      // but yet awkward JVM behavior:\n      //\n      //   On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file\n      //   regardless of whether the locks were acquired via that channel or via another channel open on the same file.\n      //   It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given\n      //   file.\n      //\n      // This essentially means if we close \"A\" channel for a given file all locks might be released... the odd part\n      // is that we can't re-obtain the lock in the same JVM but from a different process if that happens. Nevertheless\n      // this is super trappy. See LUCENE-5738\n      boolean obtained = false;\n      if (LOCK_HELD.add(canonicalPath.toString())) {\n        try {\n          channel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n          try {\n            lock = channel.tryLock();\n            obtained = lock != null;\n          } catch (IOException | OverlappingFileLockException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          }\n        } finally {\n          if (obtained == false) { // not successful - clear up and move out\n            clearLockHeld(path);\n            final FileChannel toClose = channel;\n            channel = null;\n            IOUtils.closeWhileHandlingException(toClose);\n          }\n        }\n      }\n      return obtained;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#obtain().mjava","sourceNew":"    @Override\n    public synchronized boolean obtain() throws IOException {\n\n      if (lock != null) {\n        // Our instance is already locked:\n        return false;\n      }\n\n      // Ensure that lockDir exists and is a directory.\n      Files.createDirectories(lockDir);\n      try {\n        Files.createFile(path);\n      } catch (IOException ignore) {\n        // we must create the file to have a truly canonical path.\n        // if it's already created, we don't care. if it cant be created, it will fail below.\n      }\n      final Path canonicalPath = path.toRealPath();\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n      // This is a pretty crazy workaround for some documented\n      // but yet awkward JVM behavior:\n      //\n      //   On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file\n      //   regardless of whether the locks were acquired via that channel or via another channel open on the same file.\n      //   It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given\n      //   file.\n      //\n      // This essentially means if we close \"A\" channel for a given file all locks might be released... the odd part\n      // is that we can't re-obtain the lock in the same JVM but from a different process if that happens. Nevertheless\n      // this is super trappy. See LUCENE-5738\n      boolean obtained = false;\n      if (LOCK_HELD.add(canonicalPath.toString())) {\n        try {\n          channel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n          try {\n            lock = channel.tryLock();\n            obtained = lock != null;\n          } catch (IOException | OverlappingFileLockException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          }\n        } finally {\n          if (obtained == false) { // not successful - clear up and move out\n            clearLockHeld(path);\n            final FileChannel toClose = channel;\n            channel = null;\n            IOUtils.closeWhileHandlingException(toClose);\n          }\n        }\n      }\n      return obtained;\n    }\n\n","sourceOld":"    @Override\n    public synchronized boolean obtain() throws IOException {\n\n      if (lock != null) {\n        // Our instance is already locked:\n        return false;\n      }\n\n      // Ensure that lockDir exists and is a directory.\n      Files.createDirectories(lockDir);\n      try {\n        Files.createFile(path);\n      } catch (IOException ignore) {\n        // we must create the file to have a truly canonical path.\n        // if its already created, we don't care. if it cant be created, it will fail below.\n      }\n      final Path canonicalPath = path.toRealPath();\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n      // This is a pretty crazy workaround for some documented\n      // but yet awkward JVM behavior:\n      //\n      //   On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file\n      //   regardless of whether the locks were acquired via that channel or via another channel open on the same file.\n      //   It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given\n      //   file.\n      //\n      // This essentially means if we close \"A\" channel for a given file all locks might be released... the odd part\n      // is that we can't re-obtain the lock in the same JVM but from a different process if that happens. Nevertheless\n      // this is super trappy. See LUCENE-5738\n      boolean obtained = false;\n      if (LOCK_HELD.add(canonicalPath.toString())) {\n        try {\n          channel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n          try {\n            lock = channel.tryLock();\n            obtained = lock != null;\n          } catch (IOException | OverlappingFileLockException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          }\n        } finally {\n          if (obtained == false) { // not successful - clear up and move out\n            clearLockHeld(path);\n            final FileChannel toClose = channel;\n            channel = null;\n            IOUtils.closeWhileHandlingException(toClose);\n          }\n        }\n      }\n      return obtained;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd448926db19517b82cc7c775c62c57f7d2ee6a","date":1432845380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#obtain().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#obtain().mjava","sourceNew":"    @Override\n    public synchronized boolean obtain() throws IOException {\n\n      if (channel != null) {\n        // Our instance is already locked:\n        assert channel.isOpen();\n        assert realPath != null;\n        throw new LockObtainFailedException(\"this lock instance was already obtained\");\n      }\n\n      // Ensure that lockDir exists and is a directory.\n      Files.createDirectories(lockDir);\n      try {\n        Files.createFile(path);\n      } catch (IOException ignore) {\n        // we must create the file to have a truly canonical path.\n        // if it's already created, we don't care. if it cant be created, it will fail below.\n      }\n      realPath = path.toRealPath();\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n      // This is a pretty crazy workaround for some documented\n      // but yet awkward JVM behavior:\n      //\n      //   On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file\n      //   regardless of whether the locks were acquired via that channel or via another channel open on the same file.\n      //   It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given\n      //   file.\n      //\n      // This essentially means if we close \"A\" channel for a given file all locks might be released... the odd part\n      // is that we can't re-obtain the lock in the same JVM but from a different process if that happens. Nevertheless\n      // this is super trappy. See LUCENE-5738\n      boolean obtained = false;\n      if (LOCK_HELD.add(realPath.toString())) {\n        FileChannel ch = null;\n        try {\n          ch = FileChannel.open(realPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n          try {\n            if (ch.tryLock() != null) {\n              channel = ch;\n              obtained = true;\n            }\n          } catch (IOException | OverlappingFileLockException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          }\n        } finally {\n          if (obtained == false) { // not successful - clear up and move out\n            IOUtils.closeWhileHandlingException(ch);\n            clearLockHeld(realPath);  // clear LOCK_HELD last \n          }\n        }\n      }\n      return obtained;\n    }\n\n","sourceOld":"    @Override\n    public synchronized boolean obtain() throws IOException {\n\n      if (lock != null) {\n        // Our instance is already locked:\n        return false;\n      }\n\n      // Ensure that lockDir exists and is a directory.\n      Files.createDirectories(lockDir);\n      try {\n        Files.createFile(path);\n      } catch (IOException ignore) {\n        // we must create the file to have a truly canonical path.\n        // if it's already created, we don't care. if it cant be created, it will fail below.\n      }\n      final Path canonicalPath = path.toRealPath();\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n      // This is a pretty crazy workaround for some documented\n      // but yet awkward JVM behavior:\n      //\n      //   On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file\n      //   regardless of whether the locks were acquired via that channel or via another channel open on the same file.\n      //   It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given\n      //   file.\n      //\n      // This essentially means if we close \"A\" channel for a given file all locks might be released... the odd part\n      // is that we can't re-obtain the lock in the same JVM but from a different process if that happens. Nevertheless\n      // this is super trappy. See LUCENE-5738\n      boolean obtained = false;\n      if (LOCK_HELD.add(canonicalPath.toString())) {\n        try {\n          channel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n          try {\n            lock = channel.tryLock();\n            obtained = lock != null;\n          } catch (IOException | OverlappingFileLockException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          }\n        } finally {\n          if (obtained == false) { // not successful - clear up and move out\n            clearLockHeld(path);\n            final FileChannel toClose = channel;\n            channel = null;\n            IOUtils.closeWhileHandlingException(toClose);\n          }\n        }\n      }\n      return obtained;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/NativeFSLockFactory.NativeFSLock#obtain().mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized boolean obtain() throws IOException {\n\n      if (channel != null) {\n        // Our instance is already locked:\n        assert channel.isOpen();\n        assert realPath != null;\n        throw new LockObtainFailedException(\"this lock instance was already obtained\");\n      }\n\n      // Ensure that lockDir exists and is a directory.\n      Files.createDirectories(lockDir);\n      try {\n        Files.createFile(path);\n      } catch (IOException ignore) {\n        // we must create the file to have a truly canonical path.\n        // if it's already created, we don't care. if it cant be created, it will fail below.\n      }\n      realPath = path.toRealPath();\n      // Make sure nobody else in-process has this lock held\n      // already, and, mark it held if not:\n      // This is a pretty crazy workaround for some documented\n      // but yet awkward JVM behavior:\n      //\n      //   On some systems, closing a channel releases all locks held by the Java virtual machine on the underlying file\n      //   regardless of whether the locks were acquired via that channel or via another channel open on the same file.\n      //   It is strongly recommended that, within a program, a unique channel be used to acquire all locks on any given\n      //   file.\n      //\n      // This essentially means if we close \"A\" channel for a given file all locks might be released... the odd part\n      // is that we can't re-obtain the lock in the same JVM but from a different process if that happens. Nevertheless\n      // this is super trappy. See LUCENE-5738\n      boolean obtained = false;\n      if (LOCK_HELD.add(realPath.toString())) {\n        FileChannel ch = null;\n        try {\n          ch = FileChannel.open(realPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n          try {\n            if (ch.tryLock() != null) {\n              channel = ch;\n              obtained = true;\n            }\n          } catch (IOException | OverlappingFileLockException e) {\n            // At least on OS X, we will sometimes get an\n            // intermittent \"Permission Denied\" IOException,\n            // which seems to simply mean \"you failed to get\n            // the lock\".  But other IOExceptions could be\n            // \"permanent\" (eg, locking is not supported via\n            // the filesystem).  So, we record the failure\n            // reason here; the timeout obtain (usually the\n            // one calling us) will use this as \"root cause\"\n            // if it fails to get the lock.\n            failureReason = e;\n          }\n        } finally {\n          if (obtained == false) { // not successful - clear up and move out\n            IOUtils.closeWhileHandlingException(ch);\n            clearLockHeld(realPath);  // clear LOCK_HELD last \n          }\n        }\n      }\n      return obtained;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["285cdc737de75b7cc7c284a156b20214deb67bca"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"285cdc737de75b7cc7c284a156b20214deb67bca":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285cdc737de75b7cc7c284a156b20214deb67bca"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}