{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader.Norm#bytes(byte[],int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader.Norm#bytes(byte[],int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentReader.Norm#bytes(byte[],int,int).mjava","sourceNew":"    // Load bytes but do not cache them if they were not\n    // already cached\n    public synchronized void bytes(byte[] bytesOut, int offset, int len) throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      if (bytes != null) {\n        // Already cached -- copy from cache:\n        assert len <= maxDoc();\n        System.arraycopy(bytes, 0, bytesOut, offset, len);\n      } else {\n        // Not cached\n        if (origNorm != null) {\n          // Ask origNorm to load\n          origNorm.bytes(bytesOut, offset, len);\n        } else {\n          // We are orig -- read ourselves from disk:\n          synchronized(in) {\n            in.seek(normSeek);\n            in.readBytes(bytesOut, offset, len, false);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    // Load bytes but do not cache them if they were not\n    // already cached\n    public synchronized void bytes(byte[] bytesOut, int offset, int len) throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      if (bytes != null) {\n        // Already cached -- copy from cache:\n        assert len <= maxDoc();\n        System.arraycopy(bytes, 0, bytesOut, offset, len);\n      } else {\n        // Not cached\n        if (origNorm != null) {\n          // Ask origNorm to load\n          origNorm.bytes(bytesOut, offset, len);\n        } else {\n          // We are orig -- read ourselves from disk:\n          synchronized(in) {\n            in.seek(normSeek);\n            in.readBytes(bytesOut, offset, len, false);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentReader.Norm#bytes(byte[],int,int).mjava","sourceNew":null,"sourceOld":"    // Load bytes but do not cache them if they were not\n    // already cached\n    public synchronized void bytes(byte[] bytesOut, int offset, int len) throws IOException {\n      assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      if (bytes != null) {\n        // Already cached -- copy from cache:\n        assert len <= maxDoc();\n        System.arraycopy(bytes, 0, bytesOut, offset, len);\n      } else {\n        // Not cached\n        if (origNorm != null) {\n          // Ask origNorm to load\n          origNorm.bytes(bytesOut, offset, len);\n        } else {\n          // We are orig -- read ourselves from disk:\n          synchronized(in) {\n            in.seek(normSeek);\n            in.readBytes(bytesOut, offset, len, false);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}