{"path":"lucene/backwards/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestRAMDirectory#testRAMDirectorySize().mjava","sourceNew":null,"sourceOld":"  public void testRAMDirectorySize() throws IOException, InterruptedException {\n      \n    Directory dir = FSDirectory.open(indexDir);\n    final MockRAMDirectory ramDir = new MockRAMDirectory(dir);\n    dir.close();\n    \n    final IndexWriter writer  = new IndexWriter(ramDir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n    writer.optimize();\n    \n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    Thread[] threads = new Thread[numThreads];\n    for (int i=0; i<numThreads; i++) {\n      final int num = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          for (int j=1; j<docsPerThread; j++) {\n            Document doc = new Document();\n            doc.add(new Field(\"sizeContent\", English.intToEnglish(num*docsPerThread+j).trim(), Field.Store.YES, Field.Index.NOT_ANALYZED));\n            try {\n              writer.addDocument(doc);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n    for (int i=0; i<numThreads; i++)\n      threads[i].start();\n    for (int i=0; i<numThreads; i++)\n      threads[i].join();\n\n    writer.optimize();\n    assertEquals(ramDir.sizeInBytes(), ramDir.getRecomputedSizeInBytes());\n    \n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}