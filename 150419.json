{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":null,"sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexWriter writerB = new IndexWriter(indexStoreB, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fulltext\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}