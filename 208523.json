{"path":"lucene/core/src/java/org/apache/lucene/util/FutureArrays#compare(long[],int,int,long[],int,int).mjava","commits":[{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FutureArrays#compare(long[],int,int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Behaves like Java 9's Arrays.compare\r\n   * @see <a href=\"http://download.java.net/java/jdk9/docs/api/java/util/Arrays.html#compare-long:A-int-int-long:A-int-int-\">Arrays.compare</a>\r\n   */\r\n  public static int compare(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex) {\r\n    checkFromToIndex(aFromIndex, aToIndex, a.length);\r\n    checkFromToIndex(bFromIndex, bToIndex, b.length);\r\n    int aLen = aToIndex - aFromIndex;\r\n    int bLen = bToIndex - bFromIndex;\r\n    int len = Math.min(aLen, bLen);\r\n    for (int i = 0; i < len; i++) {\r\n      long aInt = a[i+aFromIndex];\r\n      long bInt = b[i+bFromIndex];\r\n      if (aInt > bInt) {\r\n        return 1;\r\n      } else if (aInt < bInt) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    // One is a prefix of the other, or, they are equal:\r\n    return aLen - bLen;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/FutureArrays#compare(long[],int,int,long[],int,int).mjava","sourceNew":null,"sourceOld":"  /**\r\n   * Behaves like Java 9's Arrays.compare\r\n   * @see <a href=\"http://download.java.net/java/jdk9/docs/api/java/util/Arrays.html#compare-long:A-int-int-long:A-int-int-\">Arrays.compare</a>\r\n   */\r\n  public static int compare(long[] a, int aFromIndex, int aToIndex, long[] b, int bFromIndex, int bToIndex) {\r\n    checkFromToIndex(aFromIndex, aToIndex, a.length);\r\n    checkFromToIndex(bFromIndex, bToIndex, b.length);\r\n    int aLen = aToIndex - aFromIndex;\r\n    int bLen = bToIndex - bFromIndex;\r\n    int len = Math.min(aLen, bLen);\r\n    for (int i = 0; i < len; i++) {\r\n      long aInt = a[i+aFromIndex];\r\n      long bInt = b[i+bFromIndex];\r\n      if (aInt > bInt) {\r\n        return 1;\r\n      } else if (aInt < bInt) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    // One is a prefix of the other, or, they are equal:\r\n    return aLen - bLen;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["456d7e7092cb043c740b4674301660ee8abc26fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}