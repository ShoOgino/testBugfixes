{"path":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","pathOld":"/dev/null","sourceNew":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n    \n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"3\"));\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"int asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, int desc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // we've exactly exhausted all the results, but solr had no way of know that\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", \"int asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4","date":1390935815,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","sourceNew":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = defaultCodecSupportsMissingDocValues() ? intsort : \"int\";\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // we've exactly exhausted all the results, but solr had no way of know that\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","sourceOld":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n    \n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"3\"));\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"int asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, int desc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // we've exactly exhausted all the results, but solr had no way of know that\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", \"int asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","sourceNew":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // we've exactly exhausted all the results, but solr had no way of know that\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","sourceOld":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = defaultCodecSupportsMissingDocValues() ? intsort : \"int\";\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // we've exactly exhausted all the results, but solr had no way of know that\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","sourceNew":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // we've exactly exhausted all the results, but solr had no way of know that\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","sourceOld":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = defaultCodecSupportsMissingDocValues() ? intsort : \"int\";\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // we've exactly exhausted all the results, but solr had no way of know that\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","bugFix":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f7f81a15cd0183e4e6262806b2e491a130e63db","date":1438643602,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","sourceNew":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page.\n    // also a function based sort using a simple function(s) on same field\n    // (order should be the same in all cases)\n    for (String primarysort : new String[] { \"float\", \"field('float')\", \"sum(float,42)\" }) {\n      cursorMark = CURSOR_MARK_START;\n      params = params(\"q\", \"*:*\", \n                      \"rows\",\"2\",\n                      \"fl\", \"id\",\n                      \"sort\", primarysort + \" asc, \"+intsort+\" desc, id desc\");\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp);\n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 2, 9);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 7, 4);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 3, 8);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 5, 6);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp);\n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 1, 0);\n      cursorMark = assertHashNextCursorMark(rsp);\n      // we've exactly exhausted all the results, but solr had no way of know that\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp);\n      assertEquals(\"no more docs, but cursorMark has changed\", \n                   cursorMark, assertHashNextCursorMark(rsp));\n    }\n    \n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","sourceOld":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // we've exactly exhausted all the results, but solr had no way of know that\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf63de3e4e9eb8bd4e996f197d8d569d55ffbcbd","date":1541025219,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest#doSimpleTest().mjava","sourceNew":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"facet.mincount\", \"1\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(3, rsp.getFacetField(\"str\").getValues().size());\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page.\n    // also a function based sort using a simple function(s) on same field\n    // (order should be the same in all cases)\n    for (String primarysort : new String[] { \"float\", \"field('float')\", \"sum(float,42)\" }) {\n      cursorMark = CURSOR_MARK_START;\n      params = params(\"q\", \"*:*\", \n                      \"rows\",\"2\",\n                      \"fl\", \"id\",\n                      \"sort\", primarysort + \" asc, \"+intsort+\" desc, id desc\");\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp);\n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 2, 9);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 7, 4);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 3, 8);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 5, 6);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp);\n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 1, 0);\n      cursorMark = assertHashNextCursorMark(rsp);\n      // we've exactly exhausted all the results, but solr had no way of know that\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp);\n      assertEquals(\"no more docs, but cursorMark has changed\", \n                   cursorMark, assertHashNextCursorMark(rsp));\n    }\n    \n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","sourceOld":"  private void doSimpleTest() throws Exception {\n    String cursorMark = CURSOR_MARK_START;\n    SolrParams params = null;\n    QueryResponse rsp = null;\n\n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // don't add in order of either field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    indexDoc(sdoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    indexDoc(sdoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    indexDoc(sdoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    indexDoc(sdoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    indexDoc(sdoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    indexDoc(sdoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    indexDoc(sdoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    commit();\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(0, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(cursorMark, assertHashNextCursorMark(rsp));\n\n    // simple id sort\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 8, 7, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 3, 2, 1);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp); \n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n    \n    // NOTE: because field stats and queryNorms can vary amongst shards,\n    //       not all \"obvious\" score based sorts can be iterated cleanly.\n    //       queries that seem like they should result in an obvious \"tie\" score \n    //       between two documents (and would tie in a single node case) may actually\n    //       get diff scores for diff docs if they are on diff shards\n    //\n    //       so here, in this test, we can't assert a hardcoded score ordering -- we trust \n    //       the full walk testing (below)\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 3);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"a\", rsp.getFacetField(\"str\").getValues().get(0).getName());\n    assertEquals(4, rsp.getFacetField(\"str\").getValues().get(0).getCount());\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n  \n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first  asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 3, 7, 0);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 1, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 9, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 0, 4);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 6, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 6, 4, 3, 1, 8, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 0, 9, 7, 2);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // tri-level sort with more dups of primary then fit on a page.\n    // also a function based sort using a simple function(s) on same field\n    // (order should be the same in all cases)\n    for (String primarysort : new String[] { \"float\", \"field('float')\", \"sum(float,42)\" }) {\n      cursorMark = CURSOR_MARK_START;\n      params = params(\"q\", \"*:*\", \n                      \"rows\",\"2\",\n                      \"fl\", \"id\",\n                      \"sort\", primarysort + \" asc, \"+intsort+\" desc, id desc\");\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp);\n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 2, 9);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 7, 4);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 3, 8);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 5, 6);\n      cursorMark = assertHashNextCursorMark(rsp);\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp);\n      assertStartsAt(0, rsp);\n      assertDocList(rsp, 1, 0);\n      cursorMark = assertHashNextCursorMark(rsp);\n      // we've exactly exhausted all the results, but solr had no way of know that\n      //\n      rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n      assertNumFound(10, rsp); \n      assertStartsAt(0, rsp);\n      assertDocList(rsp);\n      assertEquals(\"no more docs, but cursorMark has changed\", \n                   cursorMark, assertHashNextCursorMark(rsp));\n    }\n    \n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 7, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(2, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(10, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 1, 3);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the last guy we got\n    del(\"id:3\");\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(9, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 4, 6);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // delete the next guy we expect\n    del(\"id:0\"); \n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 5, 8);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update a doc we've already seen so it repeats\n    indexDoc(sdoc(\"id\", \"5\", \"str\", \"c\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertNumFound(8, rsp);\n    assertStartsAt(0, rsp);\n    assertDocList(rsp, 2, 5);\n    cursorMark = assertHashNextCursorMark(rsp);\n    // update the next doc we expect so it's now in the past\n    indexDoc(sdoc(\"id\", \"7\", \"str\", \"a\"));\n    commit();\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp, 9);\n    cursorMark = assertHashNextCursorMark(rsp);\n    //\n    rsp = query(p(params, CURSOR_MARK_PARAM, cursorMark));\n    assertDocList(rsp);\n    assertEquals(\"no more docs, but cursorMark has changed\", \n                 cursorMark, assertHashNextCursorMark(rsp));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7f81a15cd0183e4e6262806b2e491a130e63db":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cf63de3e4e9eb8bd4e996f197d8d569d55ffbcbd":["3f7f81a15cd0183e4e6262806b2e491a130e63db"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"ad2a673349939e48652bf304cccf673c3412198f":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf63de3e4e9eb8bd4e996f197d8d569d55ffbcbd"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4","ad2a673349939e48652bf304cccf673c3412198f"]},"commit2Childs":{"3f7f81a15cd0183e4e6262806b2e491a130e63db":["cf63de3e4e9eb8bd4e996f197d8d569d55ffbcbd"],"cf63de3e4e9eb8bd4e996f197d8d569d55ffbcbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["ad2a673349939e48652bf304cccf673c3412198f","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["3f7f81a15cd0183e4e6262806b2e491a130e63db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}