{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","commits":[{"id":"649cd7f3ed0b77633bbb7d36169859c932931e22","date":1297172536,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["649cd7f3ed0b77633bbb7d36169859c932931e22"],"649cd7f3ed0b77633bbb7d36169859c932931e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["649cd7f3ed0b77633bbb7d36169859c932931e22","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","649cd7f3ed0b77633bbb7d36169859c932931e22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["29ef99d61cda9641b6250bf9567329a6e65f901d","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","649cd7f3ed0b77633bbb7d36169859c932931e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"649cd7f3ed0b77633bbb7d36169859c932931e22":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["649cd7f3ed0b77633bbb7d36169859c932931e22","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}