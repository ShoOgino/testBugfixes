{"path":"solr/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","commits":[{"id":"8f86529fc497c589a6282416c6de55435212238d","date":1278688851,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensure the factory works with hyphenation grammar+dictionary: using default options.\n   */\n  public void testHyphenationWithDictionary() throws Exception {\n    Reader reader = new StringReader(\"min veninde som er lidt af en læsehest\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    HyphenationCompoundWordTokenFilterFactory factory = new HyphenationCompoundWordTokenFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>(DEFAULT_VERSION_PARAM);\n    args.put(\"hyphenator\", \"da_UTF8.xml\");\n    args.put(\"dictionary\", \"da_compoundDictionary.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    TokenStream stream = factory.create(tokenizer);\n    \n    assertTokenStreamContents(stream, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensure the factory works with hyphenation grammar+dictionary: using default options.\n   */\n  public void testHyphenationWithDictionary() throws Exception {\n    Reader reader = new StringReader(\"min veninde som er lidt af en læsehest\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    HyphenationCompoundWordTokenFilterFactory factory = new HyphenationCompoundWordTokenFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>(DEFAULT_VERSION_PARAM);\n    args.put(\"hyphenator\", \"da_UTF8.xml\");\n    args.put(\"dictionary\", \"da_compoundDictionary.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    TokenStream stream = factory.create(tokenizer);\n    \n    assertTokenStreamContents(stream, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","sourceNew":"  /**\n   * Ensure the factory works with hyphenation grammar+dictionary: using default options.\n   */\n  public void testHyphenationWithDictionary() throws Exception {\n    Reader reader = new StringReader(\"min veninde som er lidt af en læsehest\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    HyphenationCompoundWordTokenFilterFactory factory = new HyphenationCompoundWordTokenFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>(DEFAULT_VERSION_PARAM);\n    args.put(\"hyphenator\", \"da_UTF8.xml\");\n    args.put(\"dictionary\", \"da_compoundDictionary.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    TokenStream stream = factory.create(tokenizer);\n    \n    assertTokenStreamContents(stream, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  /**\n   * Ensure the factory works with hyphenation grammar+dictionary: using default options.\n   */\n  public void testHyphenationWithDictionary() throws Exception {\n    Reader reader = new StringReader(\"min veninde som er lidt af en læsehest\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    HyphenationCompoundWordTokenFilterFactory factory = new HyphenationCompoundWordTokenFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>(DEFAULT_VERSION_PARAM);\n    args.put(\"hyphenator\", \"da_UTF8.xml\");\n    args.put(\"dictionary\", \"da_compoundDictionary.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    TokenStream stream = factory.create(tokenizer);\n    \n    assertTokenStreamContents(stream, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","sourceNew":"  /**\n   * Ensure the factory works with hyphenation grammar+dictionary: using default options.\n   */\n  public void testHyphenationWithDictionary() throws Exception {\n    Reader reader = new StringReader(\"min veninde som er lidt af en læsehest\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    HyphenationCompoundWordTokenFilterFactory factory = new HyphenationCompoundWordTokenFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>(DEFAULT_VERSION_PARAM);\n    args.put(\"hyphenator\", \"da_UTF8.xml\");\n    args.put(\"dictionary\", \"da_compoundDictionary.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    TokenStream stream = factory.create(tokenizer);\n    \n    assertTokenStreamContents(stream, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  /**\n   * Ensure the factory works with hyphenation grammar+dictionary: using default options.\n   */\n  public void testHyphenationWithDictionary() throws Exception {\n    Reader reader = new StringReader(\"min veninde som er lidt af en læsehest\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    HyphenationCompoundWordTokenFilterFactory factory = new HyphenationCompoundWordTokenFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>(DEFAULT_VERSION_PARAM);\n    args.put(\"hyphenator\", \"da_UTF8.xml\");\n    args.put(\"dictionary\", \"da_compoundDictionary.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    TokenStream stream = factory.create(tokenizer);\n    \n    assertTokenStreamContents(stream, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestHyphenationCompoundWordTokenFilterFactory#testHyphenationWithDictionary().mjava","sourceNew":"  /**\n   * Ensure the factory works with hyphenation grammar+dictionary: using default options.\n   */\n  public void testHyphenationWithDictionary() throws Exception {\n    Reader reader = new StringReader(\"min veninde som er lidt af en læsehest\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    HyphenationCompoundWordTokenFilterFactory factory = new HyphenationCompoundWordTokenFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>(DEFAULT_VERSION_PARAM);\n    args.put(\"hyphenator\", \"da_UTF8.xml\");\n    args.put(\"dictionary\", \"da_compoundDictionary.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    TokenStream stream = factory.create(tokenizer);\n    \n    assertTokenStreamContents(stream, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","sourceOld":"  /**\n   * Ensure the factory works with hyphenation grammar+dictionary: using default options.\n   */\n  public void testHyphenationWithDictionary() throws Exception {\n    Reader reader = new StringReader(\"min veninde som er lidt af en læsehest\");\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    HyphenationCompoundWordTokenFilterFactory factory = new HyphenationCompoundWordTokenFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>(DEFAULT_VERSION_PARAM);\n    args.put(\"hyphenator\", \"da_UTF8.xml\");\n    args.put(\"dictionary\", \"da_compoundDictionary.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    TokenStream stream = factory.create(tokenizer);\n    \n    assertTokenStreamContents(stream, \n        new String[] { \"min\", \"veninde\", \"som\", \"er\", \"lidt\", \"af\", \"en\", \"læsehest\", \"læse\", \"hest\" },\n        new int[] { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f86529fc497c589a6282416c6de55435212238d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["8f86529fc497c589a6282416c6de55435212238d"],"c26f00b574427b55127e869b935845554afde1fa":["8f86529fc497c589a6282416c6de55435212238d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["8f86529fc497c589a6282416c6de55435212238d"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f86529fc497c589a6282416c6de55435212238d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"8f86529fc497c589a6282416c6de55435212238d":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f86529fc497c589a6282416c6de55435212238d","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}