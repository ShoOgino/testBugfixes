{"path":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed8ca33744b1e924a29aa3aabb54d4c8c831d0f4","date":1415225048,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n    \n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"solr.TrieDateField\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdv\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n        tdatedv instanceof TrieDateField);\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.isMultiValued());\n    assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n        6, ((TrieDateField)tdatedv).getPrecisionStep());\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n  }\n\n","bugFix":null,"bugIntro":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd","date":1445009862,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n    \n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"solr.TrieDateField\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdvs\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n        tdatedv instanceof TrieDateField);\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.isMultiValued());\n    assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n        6, ((TrieDateField)tdatedv).getPrecisionStep());\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n    \n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"solr.TrieDateField\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdv\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n        tdatedv instanceof TrieDateField);\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.isMultiValued());\n    assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n        6, ((TrieDateField)tdatedv).getPrecisionStep());\n  }\n\n","bugFix":["ed8ca33744b1e924a29aa3aabb54d4c8c831d0f4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n    final String dateClass = RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class);\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"\"+dateClass+\"\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdvs\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n               (usingPoints ? DatePointField.class : TrieDateField.class).isInstance(tdatedv));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n               tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n               tdatedv.isMultiValued());\n    if ( ! usingPoints ) {\n      assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n                   6, ((TrieDateField)tdatedv).getPrecisionStep());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n    \n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"solr.TrieDateField\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdvs\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n        tdatedv instanceof TrieDateField);\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.isMultiValued());\n    assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n        6, ((TrieDateField)tdatedv).getPrecisionStep());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n    final String dateClass = RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class);\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"\"+dateClass+\"\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdvs\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n               (usingPoints ? DatePointField.class : TrieDateField.class).isInstance(tdatedv));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n               tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n               tdatedv.isMultiValued());\n    if ( ! usingPoints ) {\n      assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n                   6, ((TrieDateField)tdatedv).getPrecisionStep());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n    \n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"solr.TrieDateField\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdvs\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n        tdatedv instanceof TrieDateField);\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.isMultiValued());\n    assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n        6, ((TrieDateField)tdatedv).getPrecisionStep());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/IndexSchemaTest#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n\n    final String dateClass = RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class);\n    final boolean usingPoints = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"\"+dateClass+\"\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdvs\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n               (usingPoints ? DatePointField.class : TrieDateField.class).isInstance(tdatedv));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n               tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n               tdatedv.isMultiValued());\n    if ( ! usingPoints ) {\n      assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n                   6, ((TrieDateField)tdatedv).getPrecisionStep());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception{\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    assertFalse(schema.getField(\"id\").multiValued());\n    \n    // Test TrieDate fields. The following asserts are expecting a field type defined as:\n    String expectedDefinition = \"<fieldtype name=\\\"tdatedv\\\" class=\\\"solr.TrieDateField\\\" \" +\n        \"precisionStep=\\\"6\\\" docValues=\\\"true\\\" multiValued=\\\"true\\\"/>\";\n    FieldType tdatedv = schema.getFieldType(\"foo_tdtdvs\");\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition, \n        tdatedv instanceof TrieDateField);\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.hasProperty(FieldProperties.DOC_VALUES));\n    assertTrue(\"Expecting a field type defined as \" + expectedDefinition,\n        tdatedv.isMultiValued());\n    assertEquals(\"Expecting a field type defined as \" + expectedDefinition,\n        6, ((TrieDateField)tdatedv).getPrecisionStep());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd":["ed8ca33744b1e924a29aa3aabb54d4c8c831d0f4"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"ed8ca33744b1e924a29aa3aabb54d4c8c831d0f4":["08970e5b8411182a29412c177eff67ec1110095b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"08970e5b8411182a29412c177eff67ec1110095b":["2f49143da0a5d278a72f741432047fcfa6da996e"]},"commit2Childs":{"c8fef7b93de1912f1554371b19f6d4ef5f8c0acd":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"ed8ca33744b1e924a29aa3aabb54d4c8c831d0f4":["c8fef7b93de1912f1554371b19f6d4ef5f8c0acd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2f49143da0a5d278a72f741432047fcfa6da996e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2f49143da0a5d278a72f741432047fcfa6da996e":["08970e5b8411182a29412c177eff67ec1110095b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08970e5b8411182a29412c177eff67ec1110095b":["ed8ca33744b1e924a29aa3aabb54d4c8c831d0f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}