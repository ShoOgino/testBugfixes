{"path":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","commits":[{"id":"4e535d313239c42be7df343d2ad892dda58778b5","date":1423213559,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"/dev/null","sourceNew":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(new RESTfulServerProvider() {\n        @Override\n        public String getBaseURL() {\n          return ((HttpSolrClient) client).getBaseURL();\n        }\n      });\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b04972a589b63fe694313d3868815a20546c4907","date":1460726888,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(new RESTfulServerProvider() {\n        @Override\n        public String getBaseURL() {\n          return ((HttpSolrClient) client).getBaseURL();\n        }\n      });\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(new RESTfulServerProvider() {\n        @Override\n        public String getBaseURL() {\n          return ((HttpSolrClient) client).getBaseURL();\n        }\n      });\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60fbf45fdc4c578b71b38d70a03617829161f4bd","date":1471870345,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":["b04972a589b63fe694313d3868815a20546c4907","4e535d313239c42be7df343d2ad892dda58778b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final SolrClient client : clients) {\n      RestTestHarness harness = new RestTestHarness(() -> ((HttpSolrClient) client).getBaseURL());\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","date":1489203052,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (true) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83d04526cdf6f9abbab7600c4b6517e3641f307","date":1497347618,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (random().nextBoolean()) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (true) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12f6fb5243ded355bba38265744936d146d4aff2","date":1497357536,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (random().nextBoolean()) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (true) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (random().nextBoolean()) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (true) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReqParamsAPI#setupHarnesses().mjava","sourceNew":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (random().nextBoolean()) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","sourceOld":"  private void setupHarnesses() {\n    for (final JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      RestTestHarness harness = new RestTestHarness(() -> jettySolrRunner.getBaseUrl().toString() + \"/\" + COLL_NAME);\n      if (true) {\n        harness.setServerProvider(() -> jettySolrRunner.getBaseUrl().toString() + \"/____v2/c/\" + COLL_NAME);\n      }\n      restTestHarnesses.add(harness);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b04972a589b63fe694313d3868815a20546c4907":["4e535d313239c42be7df343d2ad892dda58778b5"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","60fbf45fdc4c578b71b38d70a03617829161f4bd"],"f83d04526cdf6f9abbab7600c4b6517e3641f307":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"28288370235ed02234a64753cdbf0c6ec096304a":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","12f6fb5243ded355bba38265744936d146d4aff2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"12f6fb5243ded355bba38265744936d146d4aff2":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","f83d04526cdf6f9abbab7600c4b6517e3641f307"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e535d313239c42be7df343d2ad892dda58778b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["4e535d313239c42be7df343d2ad892dda58778b5","b04972a589b63fe694313d3868815a20546c4907"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","12f6fb5243ded355bba38265744936d146d4aff2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b04972a589b63fe694313d3868815a20546c4907":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"f83d04526cdf6f9abbab7600c4b6517e3641f307":["12f6fb5243ded355bba38265744936d146d4aff2"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["f83d04526cdf6f9abbab7600c4b6517e3641f307","28288370235ed02234a64753cdbf0c6ec096304a","12f6fb5243ded355bba38265744936d146d4aff2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"12f6fb5243ded355bba38265744936d146d4aff2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e535d313239c42be7df343d2ad892dda58778b5"],"4e535d313239c42be7df343d2ad892dda58778b5":["b04972a589b63fe694313d3868815a20546c4907","73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["0c82557b0a8c9d4012f208e5de912ae7500ea351","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60fbf45fdc4c578b71b38d70a03617829161f4bd","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}