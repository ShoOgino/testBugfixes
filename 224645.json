{"path":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","commits":[{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","pathOld":"/dev/null","sourceNew":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, ValueType type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      docToOrdIndex = PackedInts.getReader(idxIn); // read the ords in to prevent too many random disk seeks\n      ordToOffsetIndex = PackedInts.getRandomAccessReaderIterator(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1346e81f172438a4f28d91266cdd03851f94b831","date":1318404834,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","sourceNew":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, ValueType type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getRandomAccessReaderIterator(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.advance(valueCount);\n      docToOrdIndex = PackedInts.getRandomAccessReaderIterator((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, ValueType type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      docToOrdIndex = PackedInts.getReader(idxIn); // read the ords in to prevent too many random disk seeks\n      ordToOffsetIndex = PackedInts.getRandomAccessReaderIterator(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","date":1320691430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","sourceNew":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, ValueType type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, ValueType type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getRandomAccessReaderIterator(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.advance(valueCount);\n      docToOrdIndex = PackedInts.getRandomAccessReaderIterator((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","sourceNew":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, ValueType type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, ValueType type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.DirectSortedSource#DirectSortedSource(IndexInput,IndexInput,Comparator[BytesRef],ValueType).mjava","sourceNew":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, Type type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","sourceOld":"    DirectSortedSource(IndexInput datIn, IndexInput idxIn,\n        Comparator<BytesRef> comparator, ValueType type) throws IOException {\n      super(type, comparator);\n      idxIn.readLong();\n      ordToOffsetIndex = PackedInts.getDirectReader(idxIn);\n      valueCount = ordToOffsetIndex.size()-1; // the last value here is just a dummy value to get the length of the last value\n      // advance this iterator to the end and clone the stream once it points to the docToOrdIndex header\n      ordToOffsetIndex.get(valueCount);\n      docToOrdIndex = PackedInts.getDirectReader((IndexInput) idxIn.clone()); // read the ords in to prevent too many random disk seeks\n      basePointer = datIn.getFilePointer();\n      this.datIn = datIn;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1346e81f172438a4f28d91266cdd03851f94b831":["e128967bca58657bc0039d4bfe631e63e81f1977"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["1346e81f172438a4f28d91266cdd03851f94b831"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"e128967bca58657bc0039d4bfe631e63e81f1977":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"1346e81f172438a4f28d91266cdd03851f94b831":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e128967bca58657bc0039d4bfe631e63e81f1977"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1346e81f172438a4f28d91266cdd03851f94b831"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}