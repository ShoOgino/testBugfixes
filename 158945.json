{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      do {\n        next();\n      } while (ord < numTerms - 1 && term().compareTo(text) < 0);\n      return term().equals(text) ? SeekStatus.FOUND : SeekStatus.END;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      do {\n        next();\n      } while (ord < numTerms - 1 && term().compareTo(text) < 0);\n      return term().equals(text) ? SeekStatus.FOUND : SeekStatus.END;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0946cbede4c060f69d0fd5d2e8d3d2b29788318","date":1359536886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      while (true) {\n        final BytesRef term = next();\n        if (term == null) {\n          return SeekStatus.END;\n        }\n        final int cmp = term.compareTo(text);\n        if (cmp > 0) {\n          return SeekStatus.NOT_FOUND;\n        } else if (cmp == 0) {\n          return SeekStatus.FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      do {\n        next();\n      } while (ord < numTerms - 1 && term().compareTo(text) < 0);\n      return term().equals(text) ? SeekStatus.FOUND : SeekStatus.END;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      while (true) {\n        final BytesRef term = next();\n        if (term == null) {\n          return SeekStatus.END;\n        }\n        final int cmp = term.compareTo(text);\n        if (cmp > 0) {\n          return SeekStatus.NOT_FOUND;\n        } else if (cmp == 0) {\n          return SeekStatus.FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      do {\n        next();\n      } while (ord < numTerms - 1 && term().compareTo(text) < 0);\n      return term().equals(text) ? SeekStatus.FOUND : SeekStatus.END;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      while (true) {\n        final BytesRef term = next();\n        if (term == null) {\n          return SeekStatus.END;\n        }\n        final int cmp = term.compareTo(text);\n        if (cmp > 0) {\n          return SeekStatus.NOT_FOUND;\n        } else if (cmp == 0) {\n          return SeekStatus.FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      while (true) {\n        final BytesRef term = next();\n        if (term == null) {\n          return SeekStatus.END;\n        }\n        final int cmp = term.compareTo(text);\n        if (cmp > 0) {\n          return SeekStatus.NOT_FOUND;\n        } else if (cmp == 0) {\n          return SeekStatus.FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.TVTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      while (true) {\n        final BytesRef term = next();\n        if (term == null) {\n          return SeekStatus.END;\n        }\n        final int cmp = term.compareTo(text);\n        if (cmp > 0) {\n          return SeekStatus.NOT_FOUND;\n        } else if (cmp == 0) {\n          return SeekStatus.FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache)\n        throws IOException {\n      if (ord < numTerms && ord >= 0) {\n        final int cmp = term().compareTo(text);\n        if (cmp == 0) {\n          return SeekStatus.FOUND;\n        } else if (cmp > 0) {\n          reset();\n        }\n      }\n      // linear scan\n      while (true) {\n        final BytesRef term = next();\n        if (term == null) {\n          return SeekStatus.END;\n        }\n        final int cmp = term.compareTo(text);\n        if (cmp > 0) {\n          return SeekStatus.NOT_FOUND;\n        } else if (cmp == 0) {\n          return SeekStatus.FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","a0946cbede4c060f69d0fd5d2e8d3d2b29788318"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0946cbede4c060f69d0fd5d2e8d3d2b29788318"],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"a0946cbede4c060f69d0fd5d2e8d3d2b29788318":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["a0946cbede4c060f69d0fd5d2e8d3d2b29788318"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"]},"commit2Childs":{"61d5f95d14e5b9b046998c51e16709a398c15226":[],"eda61b1e90b490cc5837200e04c02639a0d272c7":["07155cdd910937cdf6877e48884d5782845c8b8b","a0946cbede4c060f69d0fd5d2e8d3d2b29788318"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"a0946cbede4c060f69d0fd5d2e8d3d2b29788318":["61d5f95d14e5b9b046998c51e16709a398c15226","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}