{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","commits":[{"id":"7e66d99e5beccb546edd910c91f646fb7d831a94","date":1395391298,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","pathOld":"/dev/null","sourceNew":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if(data ==null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if(roles ==null) return;\n      List nodeList= (List) roles.get(\"overseer\");\n      if(nodeList == null) return;\n      if(nodeList.contains(getNodeName())){\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \",props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (Exception e) {\n      log.warn(\"could not readd the overseer designate \",e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85ec460f67944b9b583915e8cfbb700ebbe75f97","date":1395657081,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","sourceNew":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if(data ==null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if(roles ==null) return;\n      List nodeList= (List) roles.get(\"overseer\");\n      if(nodeList == null) return;\n      if(nodeList.contains(getNodeName())){\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \",props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (NoNodeException nne){\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not readd the overseer designate \",e);\n    }\n  }\n\n","sourceOld":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if(data ==null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if(roles ==null) return;\n      List nodeList= (List) roles.get(\"overseer\");\n      if(nodeList == null) return;\n      if(nodeList.contains(getNodeName())){\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \",props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (Exception e) {\n      log.warn(\"could not readd the overseer designate \",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","sourceNew":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if (data == null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if (roles == null) return;\n      List nodeList = (List) roles.get(\"overseer\");\n      if (nodeList == null) return;\n      if (nodeList.contains(getNodeName())) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \", props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (NoNodeException nne) {\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not readd the overseer designate \", e);\n    }\n  }\n\n","sourceOld":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if(data ==null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if(roles ==null) return;\n      List nodeList= (List) roles.get(\"overseer\");\n      if(nodeList == null) return;\n      if(nodeList.contains(getNodeName())){\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \",props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (NoNodeException nne){\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not readd the overseer designate \",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["275019a81d0883a1db4560391b072d1fbe272ec4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","sourceNew":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if (data == null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if (roles == null) return;\n      List nodeList = (List) roles.get(\"overseer\");\n      if (nodeList == null) return;\n      if (nodeList.contains(getNodeName())) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \", props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (NoNodeException nne) {\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not readd the overseer designate \", e);\n    }\n  }\n\n","sourceOld":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if(data ==null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if(roles ==null) return;\n      List nodeList= (List) roles.get(\"overseer\");\n      if(nodeList == null) return;\n      if(nodeList.contains(getNodeName())){\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \",props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (NoNodeException nne){\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not readd the overseer designate \",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"275019a81d0883a1db4560391b072d1fbe272ec4","date":1432741049,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","sourceNew":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if (data == null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if (roles == null) return;\n      List nodeList = (List) roles.get(\"overseer\");\n      if (nodeList == null) return;\n      if (nodeList.contains(getNodeName())) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \", props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (NoNodeException nne) {\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not read the overseer designate \", e);\n    }\n  }\n\n","sourceOld":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if (data == null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if (roles == null) return;\n      List nodeList = (List) roles.get(\"overseer\");\n      if (nodeList == null) return;\n      if (nodeList.contains(getNodeName())) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \", props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (NoNodeException nne) {\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not readd the overseer designate \", e);\n    }\n  }\n\n","bugFix":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","sourceNew":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if (data == null) return;\n      Map roles = (Map) Utils.fromJSON(data);\n      if (roles == null) return;\n      List nodeList = (List) roles.get(\"overseer\");\n      if (nodeList == null) return;\n      if (nodeList.contains(getNodeName())) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \", props);\n        getOverseerCollectionQueue().offer(Utils.toJSON(props));\n      }\n    } catch (NoNodeException nne) {\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not read the overseer designate \", e);\n    }\n  }\n\n","sourceOld":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if (data == null) return;\n      Map roles = (Map) ZkStateReader.fromJSON(data);\n      if (roles == null) return;\n      List nodeList = (List) roles.get(\"overseer\");\n      if (nodeList == null) return;\n      if (nodeList.contains(getNodeName())) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \", props);\n        getOverseerCollectionQueue().offer(ZkStateReader.toJSON(props));\n      }\n    } catch (NoNodeException nne) {\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not read the overseer designate \", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkOverseerDesignate().mjava","sourceNew":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if (data == null) return;\n      @SuppressWarnings({\"rawtypes\"})\n      Map roles = (Map) Utils.fromJSON(data);\n      if (roles == null) return;\n      @SuppressWarnings({\"rawtypes\"})\n      List nodeList = (List) roles.get(\"overseer\");\n      if (nodeList == null) return;\n      if (nodeList.contains(getNodeName())) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \", props);\n        getOverseerCollectionQueue().offer(Utils.toJSON(props));\n      }\n    } catch (NoNodeException nne) {\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not read the overseer designate \", e);\n    }\n  }\n\n","sourceOld":"  public void checkOverseerDesignate() {\n    try {\n      byte[] data = zkClient.getData(ZkStateReader.ROLES, null, new Stat(), true);\n      if (data == null) return;\n      Map roles = (Map) Utils.fromJSON(data);\n      if (roles == null) return;\n      List nodeList = (List) roles.get(\"overseer\");\n      if (nodeList == null) return;\n      if (nodeList.contains(getNodeName())) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.ADDROLE.toString().toLowerCase(Locale.ROOT),\n            \"node\", getNodeName(),\n            \"role\", \"overseer\");\n        log.info(\"Going to add role {} \", props);\n        getOverseerCollectionQueue().offer(Utils.toJSON(props));\n      }\n    } catch (NoNodeException nne) {\n      return;\n    } catch (Exception e) {\n      log.warn(\"could not read the overseer designate \", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["85ec460f67944b9b583915e8cfbb700ebbe75f97","fbcfc050b9f253136eaa5950b57248b2109eac11"],"85ec460f67944b9b583915e8cfbb700ebbe75f97":["7e66d99e5beccb546edd910c91f646fb7d831a94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["275019a81d0883a1db4560391b072d1fbe272ec4"],"7e66d99e5beccb546edd910c91f646fb7d831a94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"275019a81d0883a1db4560391b072d1fbe272ec4":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["85ec460f67944b9b583915e8cfbb700ebbe75f97"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"85ec460f67944b9b583915e8cfbb700ebbe75f97":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e66d99e5beccb546edd910c91f646fb7d831a94"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"7e66d99e5beccb546edd910c91f646fb7d831a94":["85ec460f67944b9b583915e8cfbb700ebbe75f97"],"275019a81d0883a1db4560391b072d1fbe272ec4":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","275019a81d0883a1db4560391b072d1fbe272ec4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}