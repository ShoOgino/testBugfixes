{"path":"solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion#doRTG(String,String).mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion#doRTG(String,String).mjava","pathOld":"/dev/null","sourceNew":"  void doRTG(String ids, String versions) throws Exception {\n    Map<String, Object> expectedIds = new HashMap<String,Object>();\n    List<String> strs = StrUtils.splitSmart(ids, \",\", true);\n    List<String> verS = StrUtils.splitSmart(versions, \",\", true);\n    for (int i=0; i<strs.size(); i++) {\n      expectedIds.put(strs.get(i), Long.valueOf(verS.get(i)));\n    }\n\n    ss.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Map<String, Object> obtainedIds = new HashMap<String,Object>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.put((String) doc.get(\"id\"), doc.get(vfield));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion#doRTG(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion#doRTG(String,String).mjava","sourceNew":"  void doRTG(String ids, String versions) throws Exception {\n    Map<String, Object> expectedIds = new HashMap<>();\n    List<String> strs = StrUtils.splitSmart(ids, \",\", true);\n    List<String> verS = StrUtils.splitSmart(versions, \",\", true);\n    for (int i=0; i<strs.size(); i++) {\n      expectedIds.put(strs.get(i), Long.valueOf(verS.get(i)));\n    }\n\n    ss.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Map<String, Object> obtainedIds = new HashMap<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.put((String) doc.get(\"id\"), doc.get(vfield));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":"  void doRTG(String ids, String versions) throws Exception {\n    Map<String, Object> expectedIds = new HashMap<String,Object>();\n    List<String> strs = StrUtils.splitSmart(ids, \",\", true);\n    List<String> verS = StrUtils.splitSmart(versions, \",\", true);\n    for (int i=0; i<strs.size(); i++) {\n      expectedIds.put(strs.get(i), Long.valueOf(verS.get(i)));\n    }\n\n    ss.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Map<String, Object> obtainedIds = new HashMap<String,Object>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.put((String) doc.get(\"id\"), doc.get(vfield));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion#doRTG(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion#doRTG(String,String).mjava","sourceNew":"  void doRTG(String ids, String versions) throws Exception {\n    Map<String, Object> expectedIds = new HashMap<>();\n    List<String> strs = StrUtils.splitSmart(ids, \",\", true);\n    List<String> verS = StrUtils.splitSmart(versions, \",\", true);\n    for (int i=0; i<strs.size(); i++) {\n      expectedIds.put(strs.get(i), Long.valueOf(verS.get(i)));\n    }\n\n    solrClient.query(params(\"qt\", \"/get\", \"ids\", ids));\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Map<String, Object> obtainedIds = new HashMap<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.put((String) doc.get(\"id\"), doc.get(vfield));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":"  void doRTG(String ids, String versions) throws Exception {\n    Map<String, Object> expectedIds = new HashMap<>();\n    List<String> strs = StrUtils.splitSmart(ids, \",\", true);\n    List<String> verS = StrUtils.splitSmart(versions, \",\", true);\n    for (int i=0; i<strs.size(); i++) {\n      expectedIds.put(strs.get(i), Long.valueOf(verS.get(i)));\n    }\n\n    ss.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Map<String, Object> obtainedIds = new HashMap<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.put((String) doc.get(\"id\"), doc.get(vfield));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion#doRTG(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion#doRTG(String,String).mjava","sourceNew":"  void doRTG(String ids, String versions) throws Exception {\n    Map<String, Object> expectedIds = new HashMap<>();\n    List<String> strs = StrUtils.splitSmart(ids, \",\", true);\n    List<String> verS = StrUtils.splitSmart(versions, \",\", true);\n    for (int i=0; i<strs.size(); i++) {\n      expectedIds.put(strs.get(i), Long.valueOf(verS.get(i)));\n    }\n\n    solrClient.query(params(\"qt\", \"/get\", \"ids\", ids));\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Map<String, Object> obtainedIds = new HashMap<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.put((String) doc.get(\"id\"), doc.get(vfield));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":"  void doRTG(String ids, String versions) throws Exception {\n    Map<String, Object> expectedIds = new HashMap<>();\n    List<String> strs = StrUtils.splitSmart(ids, \",\", true);\n    List<String> verS = StrUtils.splitSmart(versions, \",\", true);\n    for (int i=0; i<strs.size(); i++) {\n      expectedIds.put(strs.get(i), Long.valueOf(verS.get(i)));\n    }\n\n    solrClient.query(params(\"qt\", \"/get\", \"ids\", ids));\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Map<String, Object> obtainedIds = new HashMap<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.put((String) doc.get(\"id\"), doc.get(vfield));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f8973f28b29873ff0d7a016e562c9036ae649a9"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bafca15d8e408346a67f4282ad1143b88023893b":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}