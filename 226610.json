{"path":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer countingConjunctionSumScorer(List requiredScorers)\n  // each scorer from the list counted as a single matcher\n  {\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      public float score() throws IOException {\n        coordinator.nrMatchers += requiredNrMatchers;\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"932db587e9455a3b90b120d2aa13d5e52dc2558e","date":1121996912,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List requiredScorers)\n  // each scorer from the list counted as a single matcher\n  {\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (doc() > lastScoredDoc) {\n          lastScoredDoc = doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List requiredScorers)\n  // each scorer from the list counted as a single matcher\n  {\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      public float score() throws IOException {\n        coordinator.nrMatchers += requiredNrMatchers;\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":["3fd58432f55321d0a48511242c1830dc12680132"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List requiredScorers) {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (doc() > lastScoredDoc) {\n          lastScoredDoc = doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List requiredScorers)\n  // each scorer from the list counted as a single matcher\n  {\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (doc() > lastScoredDoc) {\n          lastScoredDoc = doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fd58432f55321d0a48511242c1830dc12680132","date":1150924313,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List requiredScorers) {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (this.doc() > lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List requiredScorers) {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (doc() > lastScoredDoc) {\n          lastScoredDoc = doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","bugFix":["932db587e9455a3b90b120d2aa13d5e52dc2558e"],"bugIntro":["facd440f562ba04187b82c36465181d6ba7030fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"facd440f562ba04187b82c36465181d6ba7030fa","date":1181183679,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List requiredScorers) {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (this.doc() >= lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List requiredScorers) {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (this.doc() > lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","bugFix":["3fd58432f55321d0a48511242c1830dc12680132"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (this.doc() >= lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List requiredScorers) {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (this.doc() >= lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n    Iterator rsi = requiredScorers.iterator();\n    while (rsi.hasNext()) {\n      cs.add((Scorer) rsi.next());\n    }\n    return cs;\n  }\n\n","bugFix":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = doc();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n\n      public float score() throws IOException {\n        if (this.doc() >= lastScoredDoc) {\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return super.score();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = doc();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"facd440f562ba04187b82c36465181d6ba7030fa":["3fd58432f55321d0a48511242c1830dc12680132"],"932db587e9455a3b90b120d2aa13d5e52dc2558e":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"30a558487f2298c2c19ceca9103c1b6865d64708":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["facd440f562ba04187b82c36465181d6ba7030fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["932db587e9455a3b90b120d2aa13d5e52dc2558e"],"3fd58432f55321d0a48511242c1830dc12680132":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"facd440f562ba04187b82c36465181d6ba7030fa":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"932db587e9455a3b90b120d2aa13d5e52dc2558e":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"30a558487f2298c2c19ceca9103c1b6865d64708":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a251547210ad8523f10c15c461496a2ad4bb3df4":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["3fd58432f55321d0a48511242c1830dc12680132"],"3fd58432f55321d0a48511242c1830dc12680132":["facd440f562ba04187b82c36465181d6ba7030fa"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["932db587e9455a3b90b120d2aa13d5e52dc2558e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}