{"path":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/BKD3DTreeReader#addAll(QueryState,int).mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/BKD3DTreeReader#addAll(QueryState,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Fast path: this is called when the query rect fully encompasses all cells under this node. */\n  private int addAll(QueryState state, int nodeID) throws IOException {\n    //System.out.println(\"  addAll nodeID=\" + nodeID + \" leafNodeOffset=\" + leafNodeOffset);\n\n    if (nodeID >= leafNodeOffset) {\n\n      /*\n      System.out.println(\"A: \" + BKDTreeWriter.decodeLat(cellLatMinEnc)\n                         + \" \" + BKDTreeWriter.decodeLat(cellLatMaxEnc)\n                         + \" \" + BKDTreeWriter.decodeLon(cellLonMinEnc)\n                         + \" \" + BKDTreeWriter.decodeLon(cellLonMaxEnc));\n      */\n\n      // Leaf node\n      long fp = leafBlockFPs[nodeID-leafNodeOffset];\n      //System.out.println(\"    leaf fp=\" + fp);\n      state.in.seek(fp);\n      \n      //System.out.println(\"    seek to leafFP=\" + fp);\n      // How many points are stored in this leaf cell:\n      int count = state.in.readVInt();\n      //System.out.println(\"    count=\" + count);\n      state.docs.grow(count);\n      for(int i=0;i<count;i++) {\n        int docID = state.in.readInt();\n        state.docs.add(docID);\n\n        // Up above in the recursion we asked valueFilter to relate our cell, and it returned Relation.CELL_INSIDE_SHAPE\n        // so all docs inside this cell better be accepted by the filter:\n\n        // NOTE: this is too anal, because we lost precision in the pack/unpack (8 bytes to 4 bytes), a point that's a bit above/below the\n        // earth's surface due to that quantization may incorrectly evaluate as not inside the shape:\n        // assert state.valueFilter.accept(docID);\n      }\n\n      return count;\n    } else {\n      int count = addAll(state, 2*nodeID);\n      count += addAll(state, 2*nodeID+1);\n      return count;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/bkdtree3d/BKD3DTreeReader#addAll(QueryState,int).mjava","sourceNew":null,"sourceOld":"  /** Fast path: this is called when the query rect fully encompasses all cells under this node. */\n  private int addAll(QueryState state, int nodeID) throws IOException {\n    //System.out.println(\"  addAll nodeID=\" + nodeID + \" leafNodeOffset=\" + leafNodeOffset);\n\n    if (nodeID >= leafNodeOffset) {\n\n      /*\n      System.out.println(\"A: \" + BKDTreeWriter.decodeLat(cellLatMinEnc)\n                         + \" \" + BKDTreeWriter.decodeLat(cellLatMaxEnc)\n                         + \" \" + BKDTreeWriter.decodeLon(cellLonMinEnc)\n                         + \" \" + BKDTreeWriter.decodeLon(cellLonMaxEnc));\n      */\n\n      // Leaf node\n      long fp = leafBlockFPs[nodeID-leafNodeOffset];\n      //System.out.println(\"    leaf fp=\" + fp);\n      state.in.seek(fp);\n      \n      //System.out.println(\"    seek to leafFP=\" + fp);\n      // How many points are stored in this leaf cell:\n      int count = state.in.readVInt();\n      //System.out.println(\"    count=\" + count);\n      state.docs.grow(count);\n      for(int i=0;i<count;i++) {\n        int docID = state.in.readInt();\n        state.docs.add(docID);\n\n        // Up above in the recursion we asked valueFilter to relate our cell, and it returned Relation.CELL_INSIDE_SHAPE\n        // so all docs inside this cell better be accepted by the filter:\n\n        // NOTE: this is too anal, because we lost precision in the pack/unpack (8 bytes to 4 bytes), a point that's a bit above/below the\n        // earth's surface due to that quantization may incorrectly evaluate as not inside the shape:\n        // assert state.valueFilter.accept(docID);\n      }\n\n      return count;\n    } else {\n      int count = addAll(state, 2*nodeID);\n      count += addAll(state, 2*nodeID+1);\n      return count;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}