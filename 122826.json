{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","sourceNew":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), false);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","sourceOld":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), false);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","sourceNew":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","sourceOld":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), false);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","bugFix":["3cd7782b032787117c986a2278d05b25056b2eba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","sourceNew":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","sourceOld":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), false);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","sourceNew":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","sourceOld":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), false);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","sourceNew":"  private BitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    BitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","sourceOld":"  private FixedBitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    FixedBitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","sourceNew":"  private BitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    BitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          PostingsEnum postingsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert postingsEnum != null;\n          int doc = postingsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","sourceOld":"  private BitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    BitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          DocsEnum docsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert docsEnum != null;\n          int doc = docsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","sourceNew":"  private BitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    BitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          PostingsEnum postingsEnum = MultiFields.getTermDocsEnum(topLevelReader, \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert postingsEnum != null;\n          int doc = postingsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","sourceOld":"  private BitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    BitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          PostingsEnum postingsEnum = MultiFields.getTermDocsEnum(topLevelReader, MultiFields.getLiveDocs(topLevelReader), \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert postingsEnum != null;\n          int doc = postingsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createExpectedResult(String,boolean,IndexReader,IndexIterationContext).mjava","sourceNew":"  private BitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    BitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          PostingsEnum postingsEnum = MultiTerms.getTermPostingsEnum(topLevelReader, \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert postingsEnum != null;\n          int doc = postingsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","sourceOld":"  private BitSet createExpectedResult(String queryValue, boolean from, IndexReader topLevelReader, IndexIterationContext context) throws IOException {\n    final Map<String, List<RandomDoc>> randomValueDocs;\n    final Map<String, List<RandomDoc>> linkValueDocuments;\n    if (from) {\n      randomValueDocs = context.randomValueFromDocs;\n      linkValueDocuments = context.toDocuments;\n    } else {\n      randomValueDocs = context.randomValueToDocs;\n      linkValueDocuments = context.fromDocuments;\n    }\n\n    BitSet expectedResult = new FixedBitSet(topLevelReader.maxDoc());\n    List<RandomDoc> matchingDocs = randomValueDocs.get(queryValue);\n    if (matchingDocs == null) {\n      return new FixedBitSet(topLevelReader.maxDoc());\n    }\n\n    for (RandomDoc matchingDoc : matchingDocs) {\n      for (String linkValue : matchingDoc.linkValues) {\n        List<RandomDoc> otherMatchingDocs = linkValueDocuments.get(linkValue);\n        if (otherMatchingDocs == null) {\n          continue;\n        }\n\n        for (RandomDoc otherSideDoc : otherMatchingDocs) {\n          PostingsEnum postingsEnum = MultiFields.getTermDocsEnum(topLevelReader, \"id\", new BytesRef(otherSideDoc.id), 0);\n          assert postingsEnum != null;\n          int doc = postingsEnum.nextDoc();\n          expectedResult.set(doc);\n        }\n      }\n    }\n    return expectedResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"51f5280f31484820499077f41fcdfe92d527d9dc":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"02331260bb246364779cb6f04919ca47900d01bb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"02331260bb246364779cb6f04919ca47900d01bb":["b012914a8110b2ff1d075ed1ef72aa57084d4897","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}