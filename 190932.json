{"path":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = IndexReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = IndexReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().length);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().length > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.getSequentialSubReaders().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.getSequentialSubReaders().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    // Never deletes a commit\n    KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n    Directory dir = newDirectory();\n    policy.dir = dir;\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(policy).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.shutdown();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.shutdown();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.shutdown();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.shutdown();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.shutdown();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.shutdown();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.shutdown();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setIndexDeletionPolicy(policy).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.shutdown();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.shutdown();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.shutdown();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.shutdown();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.shutdown();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testOpenPriorSnapshot().mjava","sourceNew":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.getDocStats().numDocs);\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.getDocStats().numDocs);\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.getDocStats().numDocs);\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.getDocStats().numDocs);\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  /* Uses KeepAllDeletionPolicy to keep all commits around,\n   * then, opens a new IndexWriter on a previous commit\n   * point. */\n  public void testOpenPriorSnapshot() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setIndexDeletionPolicy(new KeepAllDeletionPolicy(dir)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    KeepAllDeletionPolicy policy = (KeepAllDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    for(int i=0;i<10;i++) {\n      addDoc(writer);\n      if ((1+i)%2 == 0)\n        writer.commit();\n    }\n    writer.close();\n\n    Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    assertEquals(5, commits.size());\n    IndexCommit lastCommit = null;\n    for (final IndexCommit commit : commits) {\n      if (lastCommit == null || commit.getGeneration() > lastCommit.getGeneration())\n        lastCommit = commit;\n    }\n    assertTrue(lastCommit != null);\n\n    // Now add 1 doc and merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    addDoc(writer);\n    assertEquals(11, writer.numDocs());\n    writer.forceMerge(1);\n    writer.close();\n\n    assertEquals(6, DirectoryReader.listCommits(dir).size());\n\n    // Now open writer on the commit just before merge:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n\n    // Should undo our rollback:\n    writer.rollback();\n\n    DirectoryReader r = DirectoryReader.open(dir);\n    // Still merged, still 11 docs\n    assertEquals(1, r.leaves().size());\n    assertEquals(11, r.numDocs());\n    r.close();\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy)\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    // Commits the rollback:\n    writer.close();\n\n    // Now 8 because we made another commit\n    assertEquals(7, DirectoryReader.listCommits(dir).size());\n    \n    r = DirectoryReader.open(dir);\n    // Not fully merged because we rolled it back, and now only\n    // 10 docs\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Re-merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexDeletionPolicy(policy));\n    writer.forceMerge(1);\n    writer.close();\n\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    // Now open writer on the commit just before merging,\n    // but this time keeping only the last commit:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                    .setIndexCommit(lastCommit));\n    assertEquals(10, writer.numDocs());\n    \n    // Reader still sees fully merged index, because writer\n    // opened on the prior commit has not yet committed:\n    r = DirectoryReader.open(dir);\n    assertEquals(1, r.leaves().size());\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    writer.close();\n\n    // Now reader sees not-fully-merged index:\n    r = DirectoryReader.open(dir);\n    assertTrue(r.leaves().size() > 1);\n    assertEquals(10, r.numDocs());\n    r.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["70790b11e79a0366b21b2cc5b82d03b6fddcef81","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}