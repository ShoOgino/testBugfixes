{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(CategoryAssociationsContainer).mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(CategoryAssociationsContainer).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(CategoryContainer).mjava","sourceNew":"  @Override\n  public CategoryAssociationsContainer getNextFacets(CategoryAssociationsContainer facets) \n      throws NoMoreDataException, IOException {\n    if (facets == null) {\n      facets = new CategoryAssociationsContainer();\n    } else {\n      facets.clear();\n    }\n    int numFacets = 1 + random.nextInt(maxDocFacets-1); // at least one facet to each doc\n    for (int i=0; i<numFacets; i++) {\n      CategoryPath cp = new CategoryPath();\n      int depth = 1 + random.nextInt(maxFacetDepth-1); // depth 0 is not useful\n      for (int k=0; k<depth; k++) {\n        cp.add(Integer.toString(random.nextInt(maxValue)));\n        addItem();\n      }\n      facets.setAssociation(cp, null);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n    return facets;\n  }\n\n","sourceOld":"  @Override\n  public CategoryContainer getNextFacets(CategoryContainer facets) throws NoMoreDataException, IOException {\n    if (facets == null) {\n      facets = new CategoryContainer();\n    } else {\n      facets.clear();\n    }\n    int numFacets = 1 + random.nextInt(maxDocFacets-1); // at least one facet to each doc\n    for (int i=0; i<numFacets; i++) {\n      CategoryPath cp = new CategoryPath();\n      int depth = 1 + random.nextInt(maxFacetDepth-1); // depth 0 is not useful\n      for (int k=0; k<depth; k++) {\n        cp.add(Integer.toString(random.nextInt(maxValue)));\n        addItem();\n      }\n      facets.addCategory(cp);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n    return facets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(CategoryAssociationsContainer).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(CategoryAssociationsContainer).mjava","sourceNew":"  @Override\n  public CategoryAssociationsContainer getNextFacets(CategoryAssociationsContainer facets) \n      throws NoMoreDataException, IOException {\n    if (facets == null) {\n      facets = new CategoryAssociationsContainer();\n    } else {\n      facets.clear();\n    }\n    int numFacets = 1 + random.nextInt(maxDocFacets-1); // at least one facet to each doc\n    for (int i = 0; i < numFacets; i++) {\n      int depth = 1 + random.nextInt(maxFacetDepth - 1); // depth 0 is not useful\n      String[] components = new String[depth];\n      for (int k = 0; k < depth; k++) {\n        components[k] = Integer.toString(random.nextInt(maxValue));\n        addItem();\n      }\n      CategoryPath cp = new CategoryPath(components);\n      facets.setAssociation(cp, null);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n    return facets;\n  }\n\n","sourceOld":"  @Override\n  public CategoryAssociationsContainer getNextFacets(CategoryAssociationsContainer facets) \n      throws NoMoreDataException, IOException {\n    if (facets == null) {\n      facets = new CategoryAssociationsContainer();\n    } else {\n      facets.clear();\n    }\n    int numFacets = 1 + random.nextInt(maxDocFacets-1); // at least one facet to each doc\n    for (int i=0; i<numFacets; i++) {\n      CategoryPath cp = new CategoryPath();\n      int depth = 1 + random.nextInt(maxFacetDepth-1); // depth 0 is not useful\n      for (int k=0; k<depth; k++) {\n        cp.add(Integer.toString(random.nextInt(maxValue)));\n        addItem();\n      }\n      facets.setAssociation(cp, null);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n    return facets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(CategoryAssociationsContainer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public CategoryAssociationsContainer getNextFacets(CategoryAssociationsContainer facets) \n      throws NoMoreDataException, IOException {\n    if (facets == null) {\n      facets = new CategoryAssociationsContainer();\n    } else {\n      facets.clear();\n    }\n    int numFacets = 1 + random.nextInt(maxDocFacets-1); // at least one facet to each doc\n    for (int i = 0; i < numFacets; i++) {\n      int depth = 1 + random.nextInt(maxFacetDepth - 1); // depth 0 is not useful\n      String[] components = new String[depth];\n      for (int k = 0; k < depth; k++) {\n        components[k] = Integer.toString(random.nextInt(maxValue));\n        addItem();\n      }\n      CategoryPath cp = new CategoryPath(components);\n      facets.setAssociation(cp, null);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n    return facets;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53442c6c7d342feead7bcbabb097abcfeb06b575","date":1358751520,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(List[CategoryPath]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(CategoryAssociationsContainer).mjava","sourceNew":"  @Override\n  public void getNextFacets(List<CategoryPath> facets) throws NoMoreDataException, IOException {\n    facets.clear();\n    int numFacets = 1 + random.nextInt(maxDocFacets); // at least one facet to each doc\n    for (int i = 0; i < numFacets; i++) {\n      int depth = 1 + random.nextInt(maxFacetDepth); // depth 0 is not useful\n      String[] components = new String[depth];\n      for (int k = 0; k < depth; k++) {\n        components[k] = Integer.toString(random.nextInt(maxValue));\n        addItem();\n      }\n      CategoryPath cp = new CategoryPath(components);\n      facets.add(cp);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n  }\n\n","sourceOld":"  @Override\n  public CategoryAssociationsContainer getNextFacets(CategoryAssociationsContainer facets) \n      throws NoMoreDataException, IOException {\n    if (facets == null) {\n      facets = new CategoryAssociationsContainer();\n    } else {\n      facets.clear();\n    }\n    int numFacets = 1 + random.nextInt(maxDocFacets-1); // at least one facet to each doc\n    for (int i = 0; i < numFacets; i++) {\n      int depth = 1 + random.nextInt(maxFacetDepth - 1); // depth 0 is not useful\n      String[] components = new String[depth];\n      for (int k = 0; k < depth; k++) {\n        components[k] = Integer.toString(random.nextInt(maxValue));\n        addItem();\n      }\n      CategoryPath cp = new CategoryPath(components);\n      facets.setAssociation(cp, null);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n    return facets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(List[CategoryPath]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/RandomFacetSource#getNextFacets(CategoryAssociationsContainer).mjava","sourceNew":"  @Override\n  public void getNextFacets(List<CategoryPath> facets) throws NoMoreDataException, IOException {\n    facets.clear();\n    int numFacets = 1 + random.nextInt(maxDocFacets); // at least one facet to each doc\n    for (int i = 0; i < numFacets; i++) {\n      int depth = 1 + random.nextInt(maxFacetDepth); // depth 0 is not useful\n      String[] components = new String[depth];\n      for (int k = 0; k < depth; k++) {\n        components[k] = Integer.toString(random.nextInt(maxValue));\n        addItem();\n      }\n      CategoryPath cp = new CategoryPath(components);\n      facets.add(cp);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n  }\n\n","sourceOld":"  @Override\n  public CategoryAssociationsContainer getNextFacets(CategoryAssociationsContainer facets) \n      throws NoMoreDataException, IOException {\n    if (facets == null) {\n      facets = new CategoryAssociationsContainer();\n    } else {\n      facets.clear();\n    }\n    int numFacets = 1 + random.nextInt(maxDocFacets-1); // at least one facet to each doc\n    for (int i = 0; i < numFacets; i++) {\n      int depth = 1 + random.nextInt(maxFacetDepth - 1); // depth 0 is not useful\n      String[] components = new String[depth];\n      for (int k = 0; k < depth; k++) {\n        components[k] = Integer.toString(random.nextInt(maxValue));\n        addItem();\n      }\n      CategoryPath cp = new CategoryPath(components);\n      facets.setAssociation(cp, null);\n      addBytes(cp.toString().length()); // very rough approximation\n    }\n    return facets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53442c6c7d342feead7bcbabb097abcfeb06b575":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","53442c6c7d342feead7bcbabb097abcfeb06b575"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53442c6c7d342feead7bcbabb097abcfeb06b575"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","53442c6c7d342feead7bcbabb097abcfeb06b575"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"53442c6c7d342feead7bcbabb097abcfeb06b575":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}