{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","commits":[{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,String,RecoveryListener).mjava","sourceNew":"  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread\");\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = zkController.getCoreNodeName(cd);\n  }\n\n","sourceOld":"  public RecoveryStrategy(CoreContainer cc, String name, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = name;\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread\");\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = zkController.getNodeName() + \"_\" + coreName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread\");\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","sourceOld":"  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread\");\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = zkController.getCoreNodeName(cd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread\");\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","sourceOld":"  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread\");\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = zkController.getCoreNodeName(cd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41dec0c23219eacd1c0fb9a62f923ab75afe7c91","date":1419432508,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","sourceOld":"  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread\");\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e","date":1423420267,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  // this should only be used from SolrCoreState\n  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","sourceOld":"  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7392b75d2c2f2aecf31188732a0764fe0dc74ade","date":1489420141,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","sourceOld":"  // this should only be used from SolrCoreState\n  public RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","sourceOld":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","sourceOld":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","sourceOld":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5413931a874939770ede57e7f5ce5c64c1d2366c","date":1494979390,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","sourceOld":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","sourceOld":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    replicaType = cd.getCloudDescriptor().getReplicaType();\n  }\n\n","sourceOld":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#RecoveryStrategy(CoreContainer,CoreDescriptor,RecoveryListener).mjava","sourceNew":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    replicaType = cd.getCloudDescriptor().getReplicaType();\n  }\n\n","sourceOld":"  protected RecoveryStrategy(CoreContainer cc, CoreDescriptor cd, RecoveryListener recoveryListener) {\n    this.cc = cc;\n    this.coreName = cd.getName();\n    this.recoveryListener = recoveryListener;\n    setName(\"RecoveryThread-\"+this.coreName);\n    zkController = cc.getZkController();\n    zkStateReader = zkController.getZkStateReader();\n    baseUrl = zkController.getBaseUrl();\n    coreZkNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    onlyLeaderIndexes = zkStateReader.getClusterState().getCollection(collection).getRealtimeReplicas() == 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61c45e99cf6676da48f19d7511c73712ad39402b":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"41dec0c23219eacd1c0fb9a62f923ab75afe7c91":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e":["41dec0c23219eacd1c0fb9a62f923ab75afe7c91"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["be320990bdc77e643388fa801e75017f19289c42","5413931a874939770ede57e7f5ce5c64c1d2366c"],"5413931a874939770ede57e7f5ce5c64c1d2366c":["be320990bdc77e643388fa801e75017f19289c42"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be320990bdc77e643388fa801e75017f19289c42":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"7392b75d2c2f2aecf31188732a0764fe0dc74ade":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["7392b75d2c2f2aecf31188732a0764fe0dc74ade","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"41dec0c23219eacd1c0fb9a62f923ab75afe7c91":["e8fa677b7b2405d2c2b902646dbae8f5fe34b60e"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"e8fa677b7b2405d2c2b902646dbae8f5fe34b60e":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"5413931a874939770ede57e7f5ce5c64c1d2366c":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","41dec0c23219eacd1c0fb9a62f923ab75afe7c91"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"be320990bdc77e643388fa801e75017f19289c42":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","5413931a874939770ede57e7f5ce5c64c1d2366c"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"7392b75d2c2f2aecf31188732a0764fe0dc74ade":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}