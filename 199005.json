{"path":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#processPayloads(Collection,int,int).mjava","commits":[{"id":"25dd1cb2e42d3840232ff4a1c39639386facc7ef","date":1250252059,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#processPayloads(Collection,int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but can be overridden to do other things.\n     *\n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     *\n     * @see {@link org.apache.lucene.search.spans.Spans}\n     */\n    protected void processPayloads(Collection payLoads, int start, int end) {\n      for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {\n        byte[] thePayload = (byte[]) iterator.next();\n        payloadScore = function.currentScore(doc, fieldName, start, end, payloadsSeen, payloadScore,\n                similarity.scorePayload(doc, fieldName, spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2c3800fed12bcb045f9d4f5124cca905b8ecfb","date":1250399678,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#processPayloads(Collection,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#processPayloads(Collection,int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but can be overridden to do other things.\n     *\n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     *\n     * @see Spans\n     */\n    protected void processPayloads(Collection payLoads, int start, int end) {\n      for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {\n        byte[] thePayload = (byte[]) iterator.next();\n        payloadScore = function.currentScore(doc, fieldName, start, end, payloadsSeen, payloadScore,\n                similarity.scorePayload(doc, fieldName, spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but can be overridden to do other things.\n     *\n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     *\n     * @see {@link org.apache.lucene.search.spans.Spans}\n     */\n    protected void processPayloads(Collection payLoads, int start, int end) {\n      for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {\n        byte[] thePayload = (byte[]) iterator.next();\n        payloadScore = function.currentScore(doc, fieldName, start, end, payloadsSeen, payloadScore,\n                similarity.scorePayload(doc, fieldName, spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4f1b5e611afe6cb170951e0a9202ff95dc9156","date":1250976267,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#processPayloads(Collection,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/BoostingNearQuery.BoostingSpanScorer#processPayloads(Collection,int,int).mjava","sourceNew":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but\n     * can be overridden to do other things.\n     * \n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     * \n     * @see Spans\n     */\n    protected void processPayloads(Collection payLoads, int start, int end) {\n      for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {\n        byte[] thePayload = (byte[]) iterator.next();\n        payloadScore = function.currentScore(doc, fieldName, start, end,\n            payloadsSeen, payloadScore, similarity.scorePayload(doc, fieldName,\n                spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","sourceOld":"    /**\n     * By default, uses the {@link PayloadFunction} to score the payloads, but can be overridden to do other things.\n     *\n     * @param payLoads The payloads\n     * @param start The start position of the span being scored\n     * @param end The end position of the span being scored\n     *\n     * @see Spans\n     */\n    protected void processPayloads(Collection payLoads, int start, int end) {\n      for (Iterator iterator = payLoads.iterator(); iterator.hasNext();) {\n        byte[] thePayload = (byte[]) iterator.next();\n        payloadScore = function.currentScore(doc, fieldName, start, end, payloadsSeen, payloadScore,\n                similarity.scorePayload(doc, fieldName, spans.start(), spans.end(), thePayload, 0, thePayload.length));\n        ++payloadsSeen;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25dd1cb2e42d3840232ff4a1c39639386facc7ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["7a2c3800fed12bcb045f9d4f5124cca905b8ecfb"],"7a2c3800fed12bcb045f9d4f5124cca905b8ecfb":["25dd1cb2e42d3840232ff4a1c39639386facc7ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"]},"commit2Childs":{"25dd1cb2e42d3840232ff4a1c39639386facc7ef":["7a2c3800fed12bcb045f9d4f5124cca905b8ecfb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25dd1cb2e42d3840232ff4a1c39639386facc7ef"],"fa4f1b5e611afe6cb170951e0a9202ff95dc9156":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a2c3800fed12bcb045f9d4f5124cca905b8ecfb":["fa4f1b5e611afe6cb170951e0a9202ff95dc9156"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}