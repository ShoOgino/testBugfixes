{"path":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#setupCluster().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { // we're indexing each Currency value in 3 docs, each with a diff 'x_s' field value\n      // use modulo to pick the values, so we don't add the docs in strict order of either VALUES of STR_VALS\n      // (that way if we want ot filter by id later, it's an independent variable)\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { // we're indexing each Currency value in 3 docs, each with a diff 'x_s' field value\n      // use modulo to pick the values, so we don't add the docs in strict order of either VALUES of STR_VALS\n      // (that way if we want ot filter by id later, it's an independent variable)\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CurrencyRangeFacetCloudTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { // we're indexing each Currency value in 3 docs, each with a diff 'x_s' field value\n      // use modulo to pick the values, so we don't add the docs in strict order of either VALUES of STR_VALS\n      // (that way if we want ot filter by id later, it's an independent variable)\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    CurrencyFieldTypeTest.assumeCurrencySupport(\"USD\", \"EUR\", \"MXN\", \"GBP\", \"JPY\", \"NOK\");\n    FIELD = usually() ? \"amount_CFT\" : \"amount\";\n    \n    final int numShards = TestUtil.nextInt(random(),1,5);\n    final int numReplicas = 1;\n    final int maxShardsPerNode = 1;\n    final int nodeCount = numShards * numReplicas;\n\n    configureCluster(nodeCount)\n      .addConfig(CONF, Paths.get(TEST_HOME(), \"collection1\", \"conf\"))\n      .configure();\n\n    assertEquals(0, (CollectionAdminRequest.createCollection(COLLECTION, CONF, numShards, numReplicas)\n                     .setMaxShardsPerNode(maxShardsPerNode)\n                     .setProperties(Collections.singletonMap(CoreAdminParams.CONFIG, \"solrconfig-minimal.xml\"))\n                     .process(cluster.getSolrClient())).getStatus());\n    \n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n    \n    for (int id = 0; id < NUM_DOCS; id++) { // we're indexing each Currency value in 3 docs, each with a diff 'x_s' field value\n      // use modulo to pick the values, so we don't add the docs in strict order of either VALUES of STR_VALS\n      // (that way if we want ot filter by id later, it's an independent variable)\n      final String x = STR_VALS.get(id % STR_VALS.size());\n      final String val = VALUES.get(id % VALUES.size());\n      assertEquals(0, (new UpdateRequest().add(sdoc(\"id\", \"\" + id,\n                                                    \"x_s\", x,\n                                                    FIELD, val))\n                       ).process(cluster.getSolrClient()).getStatus());\n      \n    }\n    assertEquals(0, cluster.getSolrClient().commit().getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}