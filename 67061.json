{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","commits":[{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"/dev/null","sourceNew":"  void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n    if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n      if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n      for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n        if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n        if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n        replicaList.add(new Pair<>(shard.getValue().get(0), r));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","sourceNew":"  void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n    if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n      if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n      for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n        if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n        if (shard.getValue() == null || shard.getValue().isEmpty()) continue;\n        replicaList.add(new Pair<>(shard.getValue().get(0), r));\n      }\n    }\n  }\n\n","sourceOld":"  void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n    if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n      if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n      for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n        if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n        if(shard.getValue() == null || shard.getValue().isEmpty()) continue;\n        replicaList.add(new Pair<>(shard.getValue().get(0), r));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"708ea19ea208d4e9fdbf203794aabf4fd2f8afed","date":1541319836,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","sourceNew":"  void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n    if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n      if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n      for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n        if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n        if (shard.getValue() == null || shard.getValue().isEmpty()) continue;\n        for (ReplicaInfo replicaInfo : shard.getValue()) {\n          if (replicaInfo.getName().startsWith(\"SYNTHETIC.\")) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n    if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n      if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n      for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n        if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n        if (shard.getValue() == null || shard.getValue().isEmpty()) continue;\n        replicaList.add(new Pair<>(shard.getValue().get(0), r));\n      }\n    }\n  }\n\n","bugFix":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#addReplicaToList(Row,boolean,List[Pair[Replica,Row]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#addReplicaToList(Row,boolean,List[Pair[ReplicaInfo,Row]]).mjava","sourceNew":"  void addReplicaToList(Row r, boolean isSource, List<Pair<Replica, Row>> replicaList) {\n    if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n    for (Map.Entry<String, Map<String, List<Replica>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n      if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n      for (Map.Entry<String, List<Replica>> shard : e.getValue().entrySet()) {\n        if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n        if (shard.getValue() == null || shard.getValue().isEmpty()) continue;\n        for (Replica replicaInfo : shard.getValue()) {\n          if (replicaInfo.getName().startsWith(\"SYNTHETIC.\")) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void addReplicaToList(Row r, boolean isSource, List<Pair<ReplicaInfo, Row>> replicaList) {\n    if (!isAllowed(r.node, isSource ? Hint.SRC_NODE : Hint.TARGET_NODE)) return;\n    for (Map.Entry<String, Map<String, List<ReplicaInfo>>> e : r.collectionVsShardVsReplicas.entrySet()) {\n      if (!isAllowed(e.getKey(), Hint.COLL)) continue;\n      for (Map.Entry<String, List<ReplicaInfo>> shard : e.getValue().entrySet()) {\n        if (!isAllowed(new Pair<>(e.getKey(), shard.getKey()), Hint.COLL_SHARD)) continue;//todo fix\n        if (shard.getValue() == null || shard.getValue().isEmpty()) continue;\n        for (ReplicaInfo replicaInfo : shard.getValue()) {\n          if (replicaInfo.getName().startsWith(\"SYNTHETIC.\")) continue;\n          replicaList.add(new Pair<>(shard.getValue().get(0), r));\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"708ea19ea208d4e9fdbf203794aabf4fd2f8afed":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["708ea19ea208d4e9fdbf203794aabf4fd2f8afed"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"708ea19ea208d4e9fdbf203794aabf4fd2f8afed":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}