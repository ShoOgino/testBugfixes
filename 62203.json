{"path":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#uploadKey(byte[],String,MiniSolrCloudCluster).mjava","commits":[{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#uploadKey(byte[],String,MiniSolrCloudCluster).mjava","pathOld":"/dev/null","sourceNew":"  public static void uploadKey(byte[] bytes, String path, MiniSolrCloudCluster cluster) throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try(HttpSolrClient client = (HttpSolrClient) jetty.newClient()) {\n      PackageUtils.uploadKey(bytes, path, jetty.getCoreContainer().getResourceLoader().getInstancePath(), client);\n      Object resp = Utils.executeGET(client.getHttpClient(), jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\", null);\n      System.out.println(\"sync resp: \"+jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\"+\" ,is: \"+resp);\n    }\n    waitForAllNodesHaveFile(cluster,path, Utils.makeMap(\":files:\" + path + \":name\", (Predicate<Object>) Objects::nonNull),\n        false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#uploadKey(byte[],String,MiniSolrCloudCluster).mjava","pathOld":"/dev/null","sourceNew":"  public static void uploadKey(byte[] bytes, String path, MiniSolrCloudCluster cluster) throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try(HttpSolrClient client = (HttpSolrClient) jetty.newClient()) {\n      PackageUtils.uploadKey(bytes, path, jetty.getCoreContainer().getResourceLoader().getInstancePath(), client);\n      Object resp = Utils.executeGET(client.getHttpClient(), jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\", null);\n      System.out.println(\"sync resp: \"+jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\"+\" ,is: \"+resp);\n    }\n    waitForAllNodesHaveFile(cluster,path, Utils.makeMap(\":files:\" + path + \":name\", (Predicate<Object>) Objects::nonNull),\n        false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#uploadKey(byte[],String,MiniSolrCloudCluster).mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#uploadKey(byte[],String,MiniSolrCloudCluster).mjava","sourceNew":"  public static void uploadKey(byte[] bytes, String path, MiniSolrCloudCluster cluster) throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try(HttpSolrClient client = (HttpSolrClient) jetty.newClient()) {\n      PackageUtils.uploadKey(bytes, path, Paths.get(jetty.getCoreContainer().getSolrHome()), client);\n      Object resp = Utils.executeGET(client.getHttpClient(), jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\", null);\n      System.out.println(\"sync resp: \"+jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\"+\" ,is: \"+resp);\n    }\n    waitForAllNodesHaveFile(cluster,path, Utils.makeMap(\":files:\" + path + \":name\", (Predicate<Object>) Objects::nonNull),\n        false);\n  }\n\n","sourceOld":"  public static void uploadKey(byte[] bytes, String path, MiniSolrCloudCluster cluster) throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try(HttpSolrClient client = (HttpSolrClient) jetty.newClient()) {\n      PackageUtils.uploadKey(bytes, path, jetty.getCoreContainer().getResourceLoader().getInstancePath(), client);\n      Object resp = Utils.executeGET(client.getHttpClient(), jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\", null);\n      System.out.println(\"sync resp: \"+jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\"+\" ,is: \"+resp);\n    }\n    waitForAllNodesHaveFile(cluster,path, Utils.makeMap(\":files:\" + path + \":name\", (Predicate<Object>) Objects::nonNull),\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64ec73f19361ec6354e55c878a349735fa8bc52e","date":1596183798,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#uploadKey(byte[],String,MiniSolrCloudCluster).mjava","pathOld":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore#uploadKey(byte[],String,MiniSolrCloudCluster).mjava","sourceNew":"  public static void uploadKey(byte[] bytes, String path, MiniSolrCloudCluster cluster) throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try(HttpSolrClient client = (HttpSolrClient) jetty.newClient()) {\n      PackageUtils.uploadKey(bytes, path, Paths.get(jetty.getCoreContainer().getSolrHome()), client);\n      Object resp = Utils.executeGET(client.getHttpClient(), jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\", null);\n      System.out.println(\"sync resp: \"+jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\" + \" ,is: \" + resp);\n    }\n    checkAllNodesForFile(cluster,path, Utils.makeMap(\":files:\" + path + \":name\", (Predicate<Object>) Objects::nonNull), false);\n  }\n\n","sourceOld":"  public static void uploadKey(byte[] bytes, String path, MiniSolrCloudCluster cluster) throws Exception {\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    try(HttpSolrClient client = (HttpSolrClient) jetty.newClient()) {\n      PackageUtils.uploadKey(bytes, path, Paths.get(jetty.getCoreContainer().getSolrHome()), client);\n      Object resp = Utils.executeGET(client.getHttpClient(), jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\", null);\n      System.out.println(\"sync resp: \"+jetty.getBaseURLV2().toString() + \"/node/files\" + path + \"?sync=true\"+\" ,is: \"+resp);\n    }\n    waitForAllNodesHaveFile(cluster,path, Utils.makeMap(\":files:\" + path + \":name\", (Predicate<Object>) Objects::nonNull),\n        false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d218decf811b7a0a4d86218c54c79c74a962374b"],"64ec73f19361ec6354e55c878a349735fa8bc52e":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64ec73f19361ec6354e55c878a349735fa8bc52e"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"64ec73f19361ec6354e55c878a349735fa8bc52e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["64ec73f19361ec6354e55c878a349735fa8bc52e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}