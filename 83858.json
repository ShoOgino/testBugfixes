{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87778e49fc2a9683c4dc9217a451004dc7edf6da","date":1361489436,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new {@link TermRangeQuery} instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new {@link TermRangeQuery} instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new {@link TermRangeQuery} instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new {@link TermRangeQuery} instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = getAnalyzer().normalize(field, part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = getAnalyzer().normalize(field, part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new {@link TermRangeQuery} instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new {@link TermRangeQuery} instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new {@link TermRangeQuery} instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new {@link TermRangeQuery} instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = getAnalyzer().normalize(field, part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = getAnalyzer().normalize(field, part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new {@link TermRangeQuery} instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new {@link TermRangeQuery} instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeMultitermTerm(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeMultitermTerm(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["87778e49fc2a9683c4dc9217a451004dc7edf6da"],"87778e49fc2a9683c4dc9217a451004dc7edf6da":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["87778e49fc2a9683c4dc9217a451004dc7edf6da","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["87778e49fc2a9683c4dc9217a451004dc7edf6da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"87778e49fc2a9683c4dc9217a451004dc7edf6da":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}