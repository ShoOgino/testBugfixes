{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfb4fa9625aa6890405c24c1eec47db1b0c15441","date":1331479109,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      // todo: factor out a shared checkValues(DocValues, Type (from fieldinfos), ...) and share this method\n      // between this and testDocValues\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          DocValues.Type type = dv.type();\n          if (type != info.getNormType()) {\n            throw new RuntimeException(\"field: \" + info.name + \" has type: \" + type + \" but fieldInfos says:\" + info.getNormType());\n          }\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":["381d580ec52adb3c6976ebe95b15943af3af7dcb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"381d580ec52adb3c6976ebe95b15943af3af7dcb","date":1331480752,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      // todo: factor out a shared checkValues(DocValues, Type (from fieldinfos), ...) and share this method\n      // between this and testDocValues\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          DocValues.Type type = dv.type();\n          if (type != info.getNormType()) {\n            throw new RuntimeException(\"field: \" + info.name + \" has type: \" + type + \" but fieldInfos says:\" + info.getNormType());\n          }\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","a1c385b88a2532c3fbcb9082d04be2a1433f2762","dfb4fa9625aa6890405c24c1eec47db1b0c15441","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46818a810eab72123f0e37e6ec5f2d426bd47be1","date":1331482161,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); // deprecated path\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); // deprecated path\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); // deprecated path\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); // deprecated path\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          assert reader.hasNorms(info.name); // deprecated path\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          assert !reader.hasNorms(info.name); // deprecated path\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   * @lucene.experimental\n   */\n  public static Status.FieldNormStatus testFieldNorms(AtomicReader reader, PrintStream infoStream) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : reader.getFieldInfos()) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      for (FieldInfo info : fieldInfos) {\n        if (info.hasNorms()) {\n          DocValues dv = reader.normValues(info.name);\n          checkDocValues(dv, info.name, info.getNormType(), reader.maxDoc());\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","46818a810eab72123f0e37e6ec5f2d426bd47be1"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["46818a810eab72123f0e37e6ec5f2d426bd47be1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"381d580ec52adb3c6976ebe95b15943af3af7dcb":["dfb4fa9625aa6890405c24c1eec47db1b0c15441"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dfb4fa9625aa6890405c24c1eec47db1b0c15441":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"46818a810eab72123f0e37e6ec5f2d426bd47be1":["381d580ec52adb3c6976ebe95b15943af3af7dcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d4d69c535930b5cce125cff868d40f6373dc27d4","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","dfb4fa9625aa6890405c24c1eec47db1b0c15441"],"381d580ec52adb3c6976ebe95b15943af3af7dcb":["46818a810eab72123f0e37e6ec5f2d426bd47be1"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"dfb4fa9625aa6890405c24c1eec47db1b0c15441":["381d580ec52adb3c6976ebe95b15943af3af7dcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"46818a810eab72123f0e37e6ec5f2d426bd47be1":["38e3b736c7ca086d61b7dbb841c905ee115490da","e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}