{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","pathOld":"/dev/null","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    // nocommit silly that skipper must write skip when we no\n    // postings come after it, but if we don't do this, skip\n    // reader incorrectly thinks it can read another level 0\n    // skip entry here!:\n    //if (docCount > blockSize && docBufferUpto > 0) {\n    if (docCount > blockSize) {\n      final int lastDocCount = blockSize*(docCount/blockSize);\n      if (DEBUG) {\n        System.out.println(\"  bufferSkip at finishTerm: lastDocID=\" + lastBlockDocID + \" docCount=\" + lastDocCount);\n      }\n      skipWriter.bufferSkip(lastBlockDocID, lastDocCount, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockEndOffset, lastBlockPayloadByteUpto);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = (int)docDeltaBuffer[i];\n      final int freq = (int)freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > blockSize) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< blockSize) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = (int)posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = (int)payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt((int)offsetStartDeltaBuffer[i]);\n            posOut.writeVInt((int)offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > blockSize) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut)-docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= blockSize) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f81e20fb7784c464473faba4f1fdd4f775e8ee87","date":1343937502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    // nocommit silly that skipper must write skip when we no\n    // postings come after it, but if we don't do this, skip\n    // reader incorrectly thinks it can read another level 0\n    // skip entry here!:\n    //if (docCount > blockSize && docBufferUpto > 0) {\n    if (docCount > blockSize) {\n      final int lastDocCount = blockSize*(docCount/blockSize);\n      if (DEBUG) {\n        System.out.println(\"  bufferSkip at finishTerm: lastDocID=\" + lastBlockDocID + \" docCount=\" + lastDocCount);\n      }\n      skipWriter.bufferSkip(lastBlockDocID, lastDocCount, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockStartOffset, lastBlockPayloadByteUpto);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = (int)docDeltaBuffer[i];\n      final int freq = (int)freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > blockSize) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< blockSize) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = (int)posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = (int)payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt((int)offsetStartDeltaBuffer[i]);\n            posOut.writeVInt((int)offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > blockSize) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut)-docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= blockSize) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    // nocommit silly that skipper must write skip when we no\n    // postings come after it, but if we don't do this, skip\n    // reader incorrectly thinks it can read another level 0\n    // skip entry here!:\n    //if (docCount > blockSize && docBufferUpto > 0) {\n    if (docCount > blockSize) {\n      final int lastDocCount = blockSize*(docCount/blockSize);\n      if (DEBUG) {\n        System.out.println(\"  bufferSkip at finishTerm: lastDocID=\" + lastBlockDocID + \" docCount=\" + lastDocCount);\n      }\n      skipWriter.bufferSkip(lastBlockDocID, lastDocCount, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockEndOffset, lastBlockPayloadByteUpto);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = (int)docDeltaBuffer[i];\n      final int freq = (int)freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > blockSize) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< blockSize) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = (int)posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = (int)payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt((int)offsetStartDeltaBuffer[i]);\n            posOut.writeVInt((int)offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > blockSize) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut)-docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= blockSize) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = (int) docDeltaBuffer[i];\n      final int freq = (int) freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< blockSize) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = (int) posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = (int) payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt((int) offsetStartDeltaBuffer[i]);\n            posOut.writeVInt((int) offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut)-docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    // nocommit silly that skipper must write skip when we no\n    // postings come after it, but if we don't do this, skip\n    // reader incorrectly thinks it can read another level 0\n    // skip entry here!:\n    //if (docCount > blockSize && docBufferUpto > 0) {\n    if (docCount > blockSize) {\n      final int lastDocCount = blockSize*(docCount/blockSize);\n      if (DEBUG) {\n        System.out.println(\"  bufferSkip at finishTerm: lastDocID=\" + lastBlockDocID + \" docCount=\" + lastDocCount);\n      }\n      skipWriter.bufferSkip(lastBlockDocID, lastDocCount, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockStartOffset, lastBlockPayloadByteUpto);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = (int)docDeltaBuffer[i];\n      final int freq = (int)freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > blockSize) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< blockSize) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = (int)posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = (int)payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt((int)offsetStartDeltaBuffer[i]);\n            posOut.writeVInt((int)offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > blockSize) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut)-docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= blockSize) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = (int) docDeltaBuffer[i];\n      final int freq = (int) freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = (int) posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = (int) payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt((int) offsetStartDeltaBuffer[i]);\n            posOut.writeVInt((int) offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut)-docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = (int) docDeltaBuffer[i];\n      final int freq = (int) freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< blockSize) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = (int) posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = (int) payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt((int) offsetStartDeltaBuffer[i]);\n            posOut.writeVInt((int) offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut)-docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97b1b5806a1f8e249985ae7c486ef449726fd236","date":1344446896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt(offsetStartDeltaBuffer[i]);\n            posOut.writeVInt(offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut) - docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = (int) docDeltaBuffer[i];\n      final int freq = (int) freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = (int) posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = (int) payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt((int) offsetStartDeltaBuffer[i]);\n            posOut.writeVInt((int) offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut)-docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishTerm(TermStats).mjava","sourceNew":null,"sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    if (DEBUG) {\n      System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    }\n\n    if (DEBUG) {\n      if (docBufferUpto > 0) {\n        System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n      }\n    }\n\n    // vInt encode the remaining doc deltas and freqs:\n    for(int i=0;i<docBufferUpto;i++) {\n      final int docDelta = docDeltaBuffer[i];\n      final int freq = freqBuffer[i];\n      if (!fieldHasFreqs) {\n        docOut.writeVInt(docDelta);\n      } else if (freqBuffer[i] == 1) {\n        docOut.writeVInt((docDelta<<1)|1);\n      } else {\n        docOut.writeVInt(docDelta<<1);\n        docOut.writeVInt(freq);\n      }\n    }\n\n    final int lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      if (DEBUG) {\n        if (posBufferUpto > 0) {\n          System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n        }\n      }\n\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        lastPosBlockOffset = (int) (posOut.getFilePointer() - posTermStartFP);\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {\n        posOut.writeVInt(posBufferUpto);\n        \n        // nocommit should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            if (DEBUG) {\n              System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            }\n\n            if (payloadLength != 0) {\n              if (DEBUG) {\n                System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            if (DEBUG) {\n              System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            }\n            posOut.writeVInt(offsetStartDeltaBuffer[i]);\n            posOut.writeVInt(offsetLengthBuffer[i]);\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    int skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = (int) (skipWriter.writeSkip(docOut) - docTermStartFP);\n      \n      if (DEBUG) {\n        System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      }\n    } else {\n      skipOffset = -1;\n      if (DEBUG) {\n        System.out.println(\"  no skip: docCount=\" + docCount);\n      }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    if (DEBUG) {\n      System.out.println(\"  payStartFP=\" + payStartFP);\n    }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["f81e20fb7784c464473faba4f1fdd4f775e8ee87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["97b1b5806a1f8e249985ae7c486ef449726fd236"],"97b1b5806a1f8e249985ae7c486ef449726fd236":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"f81e20fb7784c464473faba4f1fdd4f775e8ee87":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}