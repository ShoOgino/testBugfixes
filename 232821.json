{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testDimensionalValues(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the dimensional values index.\n   * @lucene.experimental\n   */\n  public static Status.DimensionalValuesStatus testDimensionalValues(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.DimensionalValuesStatus status = new Status.DimensionalValuesStatus();\n    try {\n      if (fieldInfos.hasDimensionalValues()) {\n        DimensionalReader values = reader.getDimensionalReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with dimensional values, but reader.getDimensionalRader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getDimensionCount();\n            int bytesPerDim = fieldInfo.getDimensionNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new DimensionalValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public DimensionalValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return DimensionalValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[dimCount*bytesPerDim];\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            if (globalMinPackedValue == null && size != 0) {\n              throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n            }\n            if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null && size != 0) {\n              throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n            }\n            if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              System.out.println(\"HERE: \" + values);\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[dimCount*bytesPerDim];\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd02e1ad5e564b8e6a5ca20e63139181e85ef340","date":1456959582,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              System.out.println(\"HERE: \" + values);\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            if (globalMinPackedValue == null && size != 0) {\n              throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n            }\n            if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null && size != 0) {\n              throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n            }\n            if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              System.out.println(\"HERE: \" + values);\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"251c5b33f0a2c8988550b63c78ed22b0e84524e5","date":1456961997,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              System.out.println(\"HERE: \" + values);\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"867c37762e00195ba676dfa8ce0f75a2cd7f5798","date":1457002095,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            byte[] lastMinPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMinPacked = new BytesRef(lastMinPackedValue);\n            byte[] lastMaxPackedValue = new byte[dimCount*bytesPerDim];\n            BytesRef lastMaxPacked = new BytesRef(lastMaxPackedValue);\n            BytesRef scratch = new BytesRef();\n            lastMaxPacked.length = bytesPerDim;\n            lastMinPacked.length = bytesPerDim;\n            scratch.length = bytesPerDim;\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 scratch.bytes = packedValue;\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   lastMaxPacked.offset = bytesPerDim * dim;\n                                   lastMinPacked.offset = bytesPerDim * dim;\n                                   scratch.offset = bytesPerDim * dim;\n\n                                   if (scratch.compareTo(lastMinPacked) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (scratch.compareTo(lastMaxPacked) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, minPackedValue.length);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, maxPackedValue.length);\n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != dimCount * bytesPerDim) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + (dimCount * bytesPerDim) + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointsReader values = reader.getPointsReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointReader values = reader.getPointReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab","date":1457539417,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader values = reader.getPointsReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n      if (fieldInfos.hasPointValues()) {\n        PointsReader values = reader.getPointsReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n            byte[] globalMinPackedValue = values.getMinPackedValue();\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue();\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader values = reader.getPointsReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n            byte[] globalMinPackedValue = values.getMinPackedValue();\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue();\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader values = reader.getPointsReader();\n        if (values == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            byte[] globalMinPackedValue = values.getMinPackedValue(fieldInfo.name);\n            long size = values.size(fieldInfo.name);\n            int docCount = values.getDocCount(fieldInfo.name);\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue(fieldInfo.name);\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(fieldInfo.name,\n                             new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"313b9c84057c3a31294cbcd794ea84c4e81646d9","date":1478080099,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n            byte[] globalMinPackedValue = values.getMinPackedValue();\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue();\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n            byte[] globalMinPackedValue = values.getMinPackedValue();\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue();\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n            byte[] globalMinPackedValue = values.getMinPackedValue();\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue();\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n            byte[] globalMinPackedValue = values.getMinPackedValue();\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue();\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID);\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID);\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID);\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n            byte[] globalMinPackedValue = values.getMinPackedValue();\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue();\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            FixedBitSet docsSeen = new FixedBitSet(reader.maxDoc());\n            status.totalValueFields++;\n            int dimCount = fieldInfo.getPointDimensionCount();\n            int bytesPerDim = fieldInfo.getPointNumBytes();\n            int packedBytesCount = dimCount * bytesPerDim;\n            byte[] lastMinPackedValue = new byte[packedBytesCount];\n            byte[] lastMaxPackedValue = new byte[packedBytesCount];\n            BytesRef scratch = new BytesRef();\n            scratch.length = bytesPerDim;\n            byte[] lastPackedValue = new byte[packedBytesCount];\n\n            long[] pointCountSeen = new long[1];\n\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n            byte[] globalMinPackedValue = values.getMinPackedValue();\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            if (docCount > size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points and inconsistent docCount=\" + docCount);\n            }\n\n            if (docCount > reader.maxDoc()) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but that's greater than maxDoc=\" + reader.maxDoc());\n            }\n\n            if (globalMinPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMinPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMinPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMinPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMinPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n            byte[] globalMaxPackedValue = values.getMaxPackedValue();\n            if (globalMaxPackedValue == null) {\n              if (size != 0) {\n                throw new RuntimeException(\"getMaxPackedValue is null points for field \\\"\" + fieldInfo.name + \"\\\" yet size=\" + size);\n              }\n            } else if (globalMaxPackedValue.length != packedBytesCount) {\n              throw new RuntimeException(\"getMaxPackedValue for field \\\"\" + fieldInfo.name + \"\\\" return length=\" + globalMaxPackedValue.length + \" array, but should be \" + packedBytesCount);\n            }\n\n            values.intersect(new PointValues.IntersectVisitor() {\n\n                               private int lastDocID = -1;\n\n                               @Override\n                               public void visit(int docID) {\n                                 throw new RuntimeException(\"codec called IntersectVisitor.visit without a packed value for docID=\" + docID);\n                               }\n\n                               @Override\n                               public void visit(int docID, byte[] packedValue) {\n                                 checkPackedValue(\"packed value\", packedValue, docID);\n                                 pointCountSeen[0]++;\n                                 docsSeen.set(docID);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   // Compare to last cell:\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMinPackedValue, offset) < 0) {\n                                     // This doc's point, in this dimension, is lower than the minimum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, packedValue, offset, lastMaxPackedValue, offset) > 0) {\n                                     // This doc's point, in this dimension, is greater than the maximum value of the last cell checked:\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", docID=\" + docID + \" is out-of-bounds of the last cell min=\" + Arrays.toString(lastMinPackedValue) + \" max=\" + Arrays.toString(lastMaxPackedValue) + \" dim=\" + dim);\n                                   }\n                                 }\n\n                                 // In the 1D case, PointValues must make a single in-order sweep through all values, and tie-break by\n                                 // increasing docID:\n                                 if (dimCount == 1) {\n                                   int cmp = StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0);\n                                   if (cmp > 0) {\n                                     throw new RuntimeException(\"packed points value \" + Arrays.toString(packedValue) + \" for field=\\\"\" + fieldInfo.name + \"\\\", for docID=\" + docID + \" is out-of-order vs the previous document's value \" + Arrays.toString(lastPackedValue));\n                                   } else if (cmp == 0) {\n                                     if (docID < lastDocID) {\n                                       throw new RuntimeException(\"packed points value is the same, but docID=\" + docID + \" is out of order vs previous docID=\" + lastDocID + \", field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                     }\n                                   }\n                                   System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n                                   lastDocID = docID;\n                                 }\n\n                                 status.totalValuePoints++;\n                               }\n\n                               @Override\n                               public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                                 checkPackedValue(\"min packed value\", minPackedValue, -1);\n                                 System.arraycopy(minPackedValue, 0, lastMinPackedValue, 0, packedBytesCount);\n                                 checkPackedValue(\"max packed value\", maxPackedValue, -1);\n                                 System.arraycopy(maxPackedValue, 0, lastMaxPackedValue, 0, packedBytesCount);\n\n                                 for(int dim=0;dim<dimCount;dim++) {\n                                   int offset = bytesPerDim * dim;\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the cell's maxPackedValue \" + Arrays.toString(maxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   // Make sure this cell is not outside of the global min/max:\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMinPackedValue, offset) < 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global minimum \" + Arrays.toString(globalMinPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n\n                                   if (StringHelper.compare(bytesPerDim, minPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell minPackedValue \" + Arrays.toString(minPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n                                   if (StringHelper.compare(bytesPerDim, maxPackedValue, offset, globalMaxPackedValue, offset) > 0) {\n                                     throw new RuntimeException(\"packed points cell maxPackedValue \" + Arrays.toString(maxPackedValue) +\n                                                                \" is out-of-bounds of the global maximum \" + Arrays.toString(globalMaxPackedValue) + \" dim=\" + dim + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                   }\n                                 }                                   \n\n                                 // We always pretend the query shape is so complex that it crosses every cell, so\n                                 // that packedValue is passed for every document\n                                 return PointValues.Relation.CELL_CROSSES_QUERY;\n                               }\n\n                               private void checkPackedValue(String desc, byte[] packedValue, int docID) {\n                                 if (packedValue == null) {\n                                   throw new RuntimeException(desc + \" is null for docID=\" + docID + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                 }\n\n                                 if (packedValue.length != packedBytesCount) {\n                                   throw new RuntimeException(desc + \" has incorrect length=\" + packedValue.length + \" vs expected=\" + packedBytesCount + \" for docID=\" + docID + \" field=\\\"\" + fieldInfo.name + \"\\\"\");\n                                 }\n                               }\n                             });\n\n            if (pointCountSeen[0] != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + pointCountSeen[0]);\n            }\n\n            if (docsSeen.cardinality() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + docsSeen.cardinality());\n            }\n          }\n        }\n      }\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15fe6782474c00ec2ccc636052a025f8fe0bdb8b","date":1484743707,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDataDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testPoints(CodecReader,PrintStream,boolean).mjava","sourceNew":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test the points index\n   * @lucene.experimental\n   */\n  public static Status.PointsStatus testPoints(CodecReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    if (infoStream != null) {\n      infoStream.print(\"    test: points..............\");\n    }\n    long startNS = System.nanoTime();\n    FieldInfos fieldInfos = reader.getFieldInfos();\n    Status.PointsStatus status = new Status.PointsStatus();\n    try {\n\n      if (fieldInfos.hasPointValues()) {\n        PointsReader pointsReader = reader.getPointsReader();\n        if (pointsReader == null) {\n          throw new RuntimeException(\"there are fields with points, but reader.getPointsReader() is null\");\n        }\n        for (FieldInfo fieldInfo : fieldInfos) {\n          if (fieldInfo.getPointDataDimensionCount() > 0) {\n            PointValues values = pointsReader.getValues(fieldInfo.name);\n            if (values == null) {\n              continue;\n            }\n\n            status.totalValueFields++;\n\n            long size = values.size();\n            int docCount = values.getDocCount();\n\n            final long crossCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_CROSSES_QUERY));\n            if (crossCost < size / 2) {\n              throw new RuntimeException(\"estimatePointCount should return >= size/2 when all cells match\");\n            }\n            final long insideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_INSIDE_QUERY));\n            if (insideCost < size) {\n              throw new RuntimeException(\"estimatePointCount should return >= size when all cells fully match\");\n            }\n            final long outsideCost = values.estimatePointCount(new ConstantRelationIntersectVisitor(Relation.CELL_OUTSIDE_QUERY));\n            if (outsideCost != 0) {\n              throw new RuntimeException(\"estimatePointCount should return 0 when no cells match\");\n            }\n\n            VerifyPointsVisitor visitor = new VerifyPointsVisitor(fieldInfo.name, reader.maxDoc(), values);\n            values.intersect(visitor);\n\n            if (visitor.getPointCountSeen() != size) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have size=\" + size + \" points, but in fact has \" + visitor.getPointCountSeen());\n            }\n\n            if (visitor.getDocCountSeen() != docCount) {\n              throw new RuntimeException(\"point values for field \\\"\" + fieldInfo.name + \"\\\" claims to have docCount=\" + docCount + \" but in fact has \" + visitor.getDocCountSeen());\n            }\n\n            status.totalValuePoints += visitor.getPointCountSeen();\n          }\n        }\n      }\n\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d fields, %d points] [took %.3f sec]\", status.totalValueFields, status.totalValuePoints, nsToSec(System.nanoTime()-startNS)));\n\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR: \" + e);\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","313b9c84057c3a31294cbcd794ea84c4e81646d9"],"867c37762e00195ba676dfa8ce0f75a2cd7f5798":["251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"302d34f2c66e8d489ee13078305c330cbf67b226":["9856095f7afb5a607bf5e65077615ed91273508c","15fe6782474c00ec2ccc636052a025f8fe0bdb8b"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["313b9c84057c3a31294cbcd794ea84c4e81646d9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["fd02e1ad5e564b8e6a5ca20e63139181e85ef340"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"fd02e1ad5e564b8e6a5ca20e63139181e85ef340":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"15fe6782474c00ec2ccc636052a025f8fe0bdb8b":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"313b9c84057c3a31294cbcd794ea84c4e81646d9":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","867c37762e00195ba676dfa8ce0f75a2cd7f5798"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["f6652c943595e92c187ee904c382863013eae28f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"867c37762e00195ba676dfa8ce0f75a2cd7f5798":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","313b9c84057c3a31294cbcd794ea84c4e81646d9"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"302d34f2c66e8d489ee13078305c330cbf67b226":[],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","9856095f7afb5a607bf5e65077615ed91273508c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"251c5b33f0a2c8988550b63c78ed22b0e84524e5":["867c37762e00195ba676dfa8ce0f75a2cd7f5798"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["fd02e1ad5e564b8e6a5ca20e63139181e85ef340"],"9856095f7afb5a607bf5e65077615ed91273508c":["302d34f2c66e8d489ee13078305c330cbf67b226"],"fd02e1ad5e564b8e6a5ca20e63139181e85ef340":["251c5b33f0a2c8988550b63c78ed22b0e84524e5"],"15fe6782474c00ec2ccc636052a025f8fe0bdb8b":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","302d34f2c66e8d489ee13078305c330cbf67b226","e9017cf144952056066919f1ebc7897ff9bd71b1"],"313b9c84057c3a31294cbcd794ea84c4e81646d9":["9720b151fde2073f4e401450f4574e5f31c2d0ff","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["302d34f2c66e8d489ee13078305c330cbf67b226","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}