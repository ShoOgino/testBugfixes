{"path":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7006f130a90f88aaa52ca7c0bfe4a204efef6b3","date":1282077658,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#testConcurrentAccess().mjava","sourceNew":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","sourceOld":"  /*\n   * tests if the internally shared indexsearcher is correctly closed \n   * when the spellchecker is concurrently accessed and closed.\n   */\n  public void testConcurrentAccess() throws IOException, InterruptedException {\n    assertEquals(1, searchers.size());\n    final IndexReader r = IndexReader.open(userindex, true);\n    spellChecker.clearIndex();\n    assertEquals(2, searchers.size());\n    addwords(r, spellChecker, \"field1\");\n    assertEquals(3, searchers.size());\n    int num_field1 = this.numdoc();\n    addwords(r, spellChecker, \"field2\");\n    assertEquals(4, searchers.size());\n    int num_field2 = this.numdoc();\n    assertEquals(num_field2, num_field1 + 1);\n    int numThreads = 5 + this.random.nextInt(5);\n    ExecutorService executor = Executors.newFixedThreadPool(numThreads);\n    SpellCheckWorker[] workers = new SpellCheckWorker[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      SpellCheckWorker spellCheckWorker = new SpellCheckWorker(r);\n      executor.execute(spellCheckWorker);\n      workers[i] = spellCheckWorker;\n      \n    }\n    int iterations = 5 + random.nextInt(5);\n    for (int i = 0; i < iterations; i++) {\n      Thread.sleep(100);\n      // concurrently reset the spell index\n      spellChecker.setSpellIndex(this.spellindex);\n      // for debug - prints the internal open searchers \n      // showSearchersOpen();\n    }\n    \n    spellChecker.close();\n    executor.shutdown();\n    // wait for 60 seconds - usually this is very fast but coverage runs could take quite long\n    executor.awaitTermination(60L, TimeUnit.SECONDS);\n    \n    for (int i = 0; i < workers.length; i++) {\n      assertFalse(String.format(\"worker thread %d failed\", i), workers[i].failed);\n      assertTrue(String.format(\"worker thread %d is still running but should be terminated\", i), workers[i].terminated);\n    }\n    // 4 searchers more than iterations\n    // 1. at creation\n    // 2. clearIndex()\n    // 2. and 3. during addwords\n    assertEquals(iterations + 4, searchers.size());\n    assertSearchersClosed();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7006f130a90f88aaa52ca7c0bfe4a204efef6b3":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"e230a61047bc041516c811baa08a7174d6f8322a":["c7006f130a90f88aaa52ca7c0bfe4a204efef6b3"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c7006f130a90f88aaa52ca7c0bfe4a204efef6b3","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","c7006f130a90f88aaa52ca7c0bfe4a204efef6b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c7006f130a90f88aaa52ca7c0bfe4a204efef6b3","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"c7006f130a90f88aaa52ca7c0bfe4a204efef6b3":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["c7006f130a90f88aaa52ca7c0bfe4a204efef6b3"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}