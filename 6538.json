{"path":"solr/core/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","sourceNew":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","sourceOld":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","sourceNew":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","sourceOld":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","sourceNew":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","sourceOld":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7","date":1582642100,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestDocSet#iter(DocSet,DocSet).mjava","sourceNew":"  public void iter(DocSet d1, DocSet d2) {\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","sourceOld":"  public void iter(DocSet d1, DocSet d2) {\n    // HashDocSet and DocList doesn't iterate in order.\n    if (d1 instanceof HashDocSet || d2 instanceof HashDocSet || d1 instanceof DocList || d2 instanceof DocList) return;\n\n    DocIterator i1 = d1.iterator();\n    DocIterator i2 = d2.iterator();\n\n    assert(i1.hasNext() == i2.hasNext());\n\n    for(;;) {\n      boolean b1 = i1.hasNext();\n      boolean b2 = i2.hasNext();\n      assertEquals(b1,b2);\n      if (!b1) break;\n      assertEquals(i1.nextDoc(), i2.nextDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["90440a2155c2b9ce30bf8fc29b1c978c58dae1e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"90440a2155c2b9ce30bf8fc29b1c978c58dae1e7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}