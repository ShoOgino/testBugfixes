{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Map[String,Document],Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Map[String,Document],Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Random,Map[String,Document],Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Map[String,Document],Directory).mjava","sourceNew":"  public static void indexSerial(Random random, Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","sourceOld":"  public static void indexSerial(Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexSerial(Map[String,Document],Directory).mjava","sourceNew":null,"sourceOld":"  public static void indexSerial(Map<String,Document> docs, Directory dir) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // index all docs in a single thread\n    Iterator<Document> iter = docs.values().iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      ArrayList<Fieldable> fields = new ArrayList<Fieldable>();\n      fields.addAll(d.getFields());\n      // put fields in same order each time\n      Collections.sort(fields, fieldNameComparator);\n      \n      Document d1 = new Document();\n      d1.setBoost(d.getBoost());\n      for (int i=0; i<fields.size(); i++) {\n        d1.add(fields.get(i));\n      }\n      w.addDocument(d1);\n      // System.out.println(\"indexing \"+d1);\n    }\n    \n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}