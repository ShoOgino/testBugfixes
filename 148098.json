{"path":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        result.put(tag,items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if(getZnodeVersion() > -1) result.put(\"znodeVersion\",getZnodeVersion());\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        result.put(tag,items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        result.put(tag,items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b360c16ae043c3c78792b8ffba555db42e8b2b9d","date":1417095752,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if(getZnodeVersion() > -1) result.put(\"znodeVersion\",getZnodeVersion());\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        if(tag.equals(SolrRequestHandler.TYPE)){\n          for (Map.Entry e : overlay.getReqHandlers().entrySet())  items.put(e.getKey(),e.getValue());\n        }\n        result.put(tag,items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if(getZnodeVersion() > -1) result.put(\"znodeVersion\",getZnodeVersion());\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        result.put(tag,items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","date":1423220905,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if(getZnodeVersion() > -1) result.put(\"znodeVersion\",getZnodeVersion());\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if(getZnodeVersion() > -1) result.put(\"znodeVersion\",getZnodeVersion());\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        if(tag.equals(SolrRequestHandler.TYPE)){\n          for (Map.Entry e : overlay.getReqHandlers().entrySet())  items.put(e.getKey(),e.getValue());\n        }\n        result.put(tag,items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(\"znodeVersion\", getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if(getZnodeVersion() > -1) result.put(\"znodeVersion\",getZnodeVersion());\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["73b91012493e4750b9dc169cf1ae8cdd91493b42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(\"znodeVersion\", getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if(getZnodeVersion() > -1) result.put(\"znodeVersion\",getZnodeVersion());\n    result.put(\"luceneMatchVersion\",luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if(infos == null || infos.isEmpty()) continue;\n      String tag = plugin.tag;\n      tag = tag.replace(\"/\",\"\");\n      if(plugin.options.contains(PluginOpts.REQUIRE_NAME)){\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if(plugin.options.contains(MULTI_OK)){\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag,l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m,filterCacheConfig,queryResultCacheConfig,documentCacheConfig,fieldValueCacheConfig);\n    if(jmxConfig != null) result.put(\"jmx\",jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\",handleSelect);\n    if(httpCachingConfig!=null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\",multipartUploadLimitKB,\n        \"formUploadLimitKB\",formUploadLimitKB,\n        \"addHttpRequestToContext\",addHttpRequestToContext));\n    if(indexConfig != null) result.put(\"indexConfig\",indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(\"znodeVersion\", getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(\"znodeVersion\", getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"668fe2906a81b0c8bddc1807e233c3e7dad4c0e9","date":1431528783,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", ZkNodeProps.makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":"  @Override\n  public Map<String, Object> toMap(Map<String, Object> result) {\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info);\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<MapSerializable> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info);\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0));\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig);\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig);\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig);\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    m = new LinkedHashMap();\n    result.put(\"peerSync\", m);\n    m.put(\"useRangeVersions\", useRangeVersionsForPeerSync);\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#toMap().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Object> toMap() {\n    LinkedHashMap result = new LinkedHashMap();\n    if (getZnodeVersion() > -1) result.put(ZNODEVER, getZnodeVersion());\n    result.put(\"luceneMatchVersion\", luceneMatchVersion);\n    result.put(\"updateHandler\", getUpdateHandlerInfo().toMap());\n    Map m = new LinkedHashMap();\n    result.put(\"query\", m);\n    m.put(\"useFilterForSortedQuery\", useFilterForSortedQuery);\n    m.put(\"queryResultWindowSize\", queryResultWindowSize);\n    m.put(\"queryResultMaxDocsCached\", queryResultMaxDocsCached);\n    m.put(\"enableLazyFieldLoading\", enableLazyFieldLoading);\n    m.put(\"maxBooleanClauses\", booleanQueryMaxClauseCount);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    for (SolrPluginInfo plugin : plugins) {\n      List<PluginInfo> infos = getPluginInfos(plugin.clazz.getName());\n      if (infos == null || infos.isEmpty()) continue;\n      String tag = plugin.getCleanTag();\n      tag = tag.replace(\"/\", \"\");\n      if (plugin.options.contains(PluginOpts.REQUIRE_NAME)) {\n        LinkedHashMap items = new LinkedHashMap();\n        for (PluginInfo info : infos) items.put(info.name, info.toMap());\n        for (Map.Entry e : overlay.getNamedPlugins(plugin.tag).entrySet()) items.put(e.getKey(), e.getValue());\n        result.put(tag, items);\n      } else {\n        if (plugin.options.contains(MULTI_OK)) {\n          ArrayList<Map> l = new ArrayList<>();\n          for (PluginInfo info : infos) l.add(info.toMap());\n          result.put(tag, l);\n        } else {\n          result.put(tag, infos.get(0).toMap());\n        }\n\n      }\n\n    }\n\n\n    addCacheConfig(m, filterCacheConfig, queryResultCacheConfig, documentCacheConfig, fieldValueCacheConfig);\n    if (jmxConfig != null) result.put(\"jmx\", jmxConfig.toMap());\n    m = new LinkedHashMap();\n    result.put(\"requestDispatcher\", m);\n    m.put(\"handleSelect\", handleSelect);\n    if (httpCachingConfig != null) m.put(\"httpCaching\", httpCachingConfig.toMap());\n    m.put(\"requestParsers\", makeMap(\"multipartUploadLimitKB\", multipartUploadLimitKB,\n        \"formUploadLimitKB\", formUploadLimitKB,\n        \"addHttpRequestToContext\", addHttpRequestToContext));\n    if (indexConfig != null) result.put(\"indexConfig\", indexConfig.toMap());\n\n    //TODO there is more to add\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["668fe2906a81b0c8bddc1807e233c3e7dad4c0e9","e511b092029d56e0d4e30204fba8509c1c2647b6"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"1f1f31880696765d6aec499d3b01fa501129af45":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"b360c16ae043c3c78792b8ffba555db42e8b2b9d":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["668fe2906a81b0c8bddc1807e233c3e7dad4c0e9","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["668fe2906a81b0c8bddc1807e233c3e7dad4c0e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","1f1f31880696765d6aec499d3b01fa501129af45"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["b360c16ae043c3c78792b8ffba555db42e8b2b9d"],"668fe2906a81b0c8bddc1807e233c3e7dad4c0e9":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"fab172655716b96f7e42376116235017a922de3a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["b360c16ae043c3c78792b8ffba555db42e8b2b9d"],"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["1f1f31880696765d6aec499d3b01fa501129af45","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["668fe2906a81b0c8bddc1807e233c3e7dad4c0e9","fab172655716b96f7e42376116235017a922de3a"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b360c16ae043c3c78792b8ffba555db42e8b2b9d":["c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["389d072b64597cdcf75c2d536aaec3e8afe3393f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fab172655716b96f7e42376116235017a922de3a"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9f9f3353941a7e1d1addbd7f9f901a292f6a4d1":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"668fe2906a81b0c8bddc1807e233c3e7dad4c0e9":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e511b092029d56e0d4e30204fba8509c1c2647b6"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}