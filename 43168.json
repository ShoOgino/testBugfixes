{"path":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","commits":[{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","pathOld":"/dev/null","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8735477f53284dd67c6335828378cadf20cddabc","date":1365956061,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n            ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName())\n            || !replica.get(ZkStateReader.STATE_PROP).equals(\n            ZkStateReader.ACTIVE)) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeyShardSplitTest#waitTillRecovered().mjava","sourceNew":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.forceUpdateCollection(\"collection1\");\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","sourceOld":"  private void waitTillRecovered() throws Exception {\n    for (int i = 0; i < 30; i++) {\n      Thread.sleep(3000);\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      zkStateReader.updateClusterState();\n      ClusterState clusterState = zkStateReader.getClusterState();\n      DocCollection collection1 = clusterState.getCollection(\"collection1\");\n      Slice slice = collection1.getSlice(\"shard1\");\n      Collection<Replica> replicas = slice.getReplicas();\n      boolean allActive = true;\n      for (Replica replica : replicas) {\n        if (!clusterState.liveNodesContain(replica.getNodeName()) || replica.getState() != Replica.State.ACTIVE) {\n          allActive = false;\n          break;\n        }\n      }\n      if (allActive) {\n        return;\n      }\n    }\n    printLayout();\n    fail(\"timeout waiting to see recovered node\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["8735477f53284dd67c6335828378cadf20cddabc"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8735477f53284dd67c6335828378cadf20cddabc":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"8735477f53284dd67c6335828378cadf20cddabc":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["8735477f53284dd67c6335828378cadf20cddabc"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}