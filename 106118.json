{"path":"src/java/org/apache/solr/util/SimplePostTool#postData(Reader,Writer).mjava","commits":[{"id":"196a576c5807672fc9ec3fd6db6311bf919bab9c","date":1171834203,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#postData(Reader,Writer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads data from the data reader and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(Reader data, Writer output) {\n\n    HttpURLConnection urlc = null;\n    try {\n      urlc = (HttpURLConnection) solrUrl.openConnection();\n      try {\n        urlc.setRequestMethod(\"POST\");\n      } catch (ProtocolException e) {\n        throw new PostException(\"Shouldn't happen: HttpURLConnection doesn't support POST??\", e);\n      }\n      urlc.setDoOutput(true);\n      urlc.setDoInput(true);\n      urlc.setUseCaches(false);\n      urlc.setAllowUserInteraction(false);\n      urlc.setRequestProperty(\"Content-type\", \"text/xml; charset=\" + POST_ENCODING);\n      \n      OutputStream out = urlc.getOutputStream();\n      \n      try {\n        Writer writer = new OutputStreamWriter(out, POST_ENCODING);\n        pipe(data, writer);\n        writer.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while posting data\", e);\n      } finally {\n        if(out!=null) out.close();\n      }\n      \n      InputStream in = urlc.getInputStream();\n      try {\n        Reader reader = new InputStreamReader(in);\n        pipe(reader, output);\n        reader.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while reading response\", e);\n      } finally {\n        if(in!=null) in.close();\n      }\n      \n    } catch (IOException e) {\n      fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4137df2692bcf273792e1233c8aee938e1a536d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4137df2692bcf273792e1233c8aee938e1a536d6","date":1182576786,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#postData(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#postData(Reader,Writer).mjava","sourceNew":"  /**\n   * Reads data from the data reader and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(Reader data, Writer output) {\n\n    HttpURLConnection urlc = null;\n    try {\n      urlc = (HttpURLConnection) solrUrl.openConnection();\n      try {\n        urlc.setRequestMethod(\"POST\");\n      } catch (ProtocolException e) {\n        throw new PostException(\"Shouldn't happen: HttpURLConnection doesn't support POST??\", e);\n      }\n      urlc.setDoOutput(true);\n      urlc.setDoInput(true);\n      urlc.setUseCaches(false);\n      urlc.setAllowUserInteraction(false);\n      urlc.setRequestProperty(\"Content-type\", \"text/xml; charset=\" + POST_ENCODING);\n      \n      OutputStream out = urlc.getOutputStream();\n      \n      try {\n        Writer writer = new OutputStreamWriter(out, POST_ENCODING);\n        pipe(data, writer);\n        writer.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while posting data\", e);\n      } finally {\n        if(out!=null) out.close();\n      }\n      \n      InputStream in = urlc.getInputStream();\n      try {\n        Reader reader = new InputStreamReader(in);\n        pipe(reader, output);\n        reader.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while reading response\", e);\n      } finally {\n        if(in!=null) in.close();\n      }\n      \n    } catch (IOException e) {\n      try {\n        fatal(\"Solr returned an error: \" + urlc.getResponseMessage());\n      } catch (IOException f) { }\n      fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data reader and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(Reader data, Writer output) {\n\n    HttpURLConnection urlc = null;\n    try {\n      urlc = (HttpURLConnection) solrUrl.openConnection();\n      try {\n        urlc.setRequestMethod(\"POST\");\n      } catch (ProtocolException e) {\n        throw new PostException(\"Shouldn't happen: HttpURLConnection doesn't support POST??\", e);\n      }\n      urlc.setDoOutput(true);\n      urlc.setDoInput(true);\n      urlc.setUseCaches(false);\n      urlc.setAllowUserInteraction(false);\n      urlc.setRequestProperty(\"Content-type\", \"text/xml; charset=\" + POST_ENCODING);\n      \n      OutputStream out = urlc.getOutputStream();\n      \n      try {\n        Writer writer = new OutputStreamWriter(out, POST_ENCODING);\n        pipe(data, writer);\n        writer.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while posting data\", e);\n      } finally {\n        if(out!=null) out.close();\n      }\n      \n      InputStream in = urlc.getInputStream();\n      try {\n        Reader reader = new InputStreamReader(in);\n        pipe(reader, output);\n        reader.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while reading response\", e);\n      } finally {\n        if(in!=null) in.close();\n      }\n      \n    } catch (IOException e) {\n      fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n      \n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":["196a576c5807672fc9ec3fd6db6311bf919bab9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#postData(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#postData(Reader,Writer).mjava","sourceNew":"  /**\n   * Reads data from the data reader and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(Reader data, Writer output) {\n\n    HttpURLConnection urlc = null;\n    try {\n      urlc = (HttpURLConnection) solrUrl.openConnection();\n      try {\n        urlc.setRequestMethod(\"POST\");\n      } catch (ProtocolException e) {\n        throw new PostException(\"Shouldn't happen: HttpURLConnection doesn't support POST??\", e);\n      }\n      urlc.setDoOutput(true);\n      urlc.setDoInput(true);\n      urlc.setUseCaches(false);\n      urlc.setAllowUserInteraction(false);\n      urlc.setRequestProperty(\"Content-type\", \"text/xml; charset=\" + POST_ENCODING);\n      \n      OutputStream out = urlc.getOutputStream();\n      \n      try {\n        Writer writer = new OutputStreamWriter(out, POST_ENCODING);\n        pipe(data, writer);\n        writer.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while posting data\", e);\n      } finally {\n        if(out!=null) out.close();\n      }\n      \n      InputStream in = urlc.getInputStream();\n      try {\n        Reader reader = new InputStreamReader(in);\n        pipe(reader, output);\n        reader.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while reading response\", e);\n      } finally {\n        if(in!=null) in.close();\n      }\n      \n    } catch (IOException e) {\n      try {\n        fatal(\"Solr returned an error: \" + urlc.getResponseMessage());\n      } catch (IOException f) { }\n      fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads data from the data reader and posts it to solr,\n   * writes to the response to output\n   */\n  public void postData(Reader data, Writer output) {\n\n    HttpURLConnection urlc = null;\n    try {\n      urlc = (HttpURLConnection) solrUrl.openConnection();\n      try {\n        urlc.setRequestMethod(\"POST\");\n      } catch (ProtocolException e) {\n        throw new PostException(\"Shouldn't happen: HttpURLConnection doesn't support POST??\", e);\n      }\n      urlc.setDoOutput(true);\n      urlc.setDoInput(true);\n      urlc.setUseCaches(false);\n      urlc.setAllowUserInteraction(false);\n      urlc.setRequestProperty(\"Content-type\", \"text/xml; charset=\" + POST_ENCODING);\n      \n      OutputStream out = urlc.getOutputStream();\n      \n      try {\n        Writer writer = new OutputStreamWriter(out, POST_ENCODING);\n        pipe(data, writer);\n        writer.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while posting data\", e);\n      } finally {\n        if(out!=null) out.close();\n      }\n      \n      InputStream in = urlc.getInputStream();\n      try {\n        Reader reader = new InputStreamReader(in);\n        pipe(reader, output);\n        reader.close();\n      } catch (IOException e) {\n        throw new PostException(\"IOException while reading response\", e);\n      } finally {\n        if(in!=null) in.close();\n      }\n      \n    } catch (IOException e) {\n      try {\n        fatal(\"Solr returned an error: \" + urlc.getResponseMessage());\n      } catch (IOException f) { }\n      fatal(\"Connection error (is Solr running at \" + solrUrl + \" ?): \" + e);\n    } finally {\n      if(urlc!=null) urlc.disconnect();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"196a576c5807672fc9ec3fd6db6311bf919bab9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4137df2692bcf273792e1233c8aee938e1a536d6":["196a576c5807672fc9ec3fd6db6311bf919bab9c"],"ad94625fb8d088209f46650c8097196fec67f00c":["4137df2692bcf273792e1233c8aee938e1a536d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"196a576c5807672fc9ec3fd6db6311bf919bab9c":["4137df2692bcf273792e1233c8aee938e1a536d6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["196a576c5807672fc9ec3fd6db6311bf919bab9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4137df2692bcf273792e1233c8aee938e1a536d6":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}