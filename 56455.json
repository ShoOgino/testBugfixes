{"path":"backwards/src/java/org/apache/lucene/util/BitUtil#pop_array(long[],int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/BitUtil#pop_array(long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /*** Returns the number of set bits in an array of longs. */\n  public static long pop_array(long A[], int wordOffset, int numWords) {\n    /*\n    * Robert Harley and David Seal's bit counting algorithm, as documented\n    * in the revisions of Hacker's Delight\n    * http://www.hackersdelight.org/revisions.pdf\n    * http://www.hackersdelight.org/HDcode/newCode/pop_arrayHS.cc\n    *\n    * This function was adapted to Java, and extended to use 64 bit words.\n    * if only we had access to wider registers like SSE from java...\n    *\n    * This function can be transformed to compute the popcount of other functions\n    * on bitsets via something like this:\n    * sed 's/A\\[\\([^]]*\\)\\]/\\(A[\\1] \\& B[\\1]\\)/g'\n    *\n    */\n    int n = wordOffset+numWords;\n    long tot=0, tot8=0;\n    long ones=0, twos=0, fours=0;\n\n    int i;\n    for (i = wordOffset; i <= n - 8; i+=8) {\n      /***  C macro from Hacker's Delight\n       #define CSA(h,l, a,b,c) \\\n       {unsigned u = a ^ b; unsigned v = c; \\\n       h = (a & b) | (u & v); l = u ^ v;}\n       ***/\n\n      long twosA,twosB,foursA,foursB,eights;\n\n      // CSA(twosA, ones, ones, A[i], A[i+1])\n      {\n        long b=A[i], c=A[i+1];\n        long u=ones ^ b;\n        twosA=(ones & b)|( u & c);\n        ones=u^c;\n      }\n      // CSA(twosB, ones, ones, A[i+2], A[i+3])\n      {\n        long b=A[i+2], c=A[i+3];\n        long u=ones^b;\n        twosB =(ones&b)|(u&c);\n        ones=u^c;\n      }\n      //CSA(foursA, twos, twos, twosA, twosB)\n      {\n        long u=twos^twosA;\n        foursA=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n      //CSA(twosA, ones, ones, A[i+4], A[i+5])\n      {\n        long b=A[i+4], c=A[i+5];\n        long u=ones^b;\n        twosA=(ones&b)|(u&c);\n        ones=u^c;\n      }\n      // CSA(twosB, ones, ones, A[i+6], A[i+7])\n      {\n        long b=A[i+6], c=A[i+7];\n        long u=ones^b;\n        twosB=(ones&b)|(u&c);\n        ones=u^c;\n      }\n      //CSA(foursB, twos, twos, twosA, twosB)\n      {\n        long u=twos^twosA;\n        foursB=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n\n      //CSA(eights, fours, fours, foursA, foursB)\n      {\n        long u=fours^foursA;\n        eights=(fours&foursA)|(u&foursB);\n        fours=u^foursB;\n      }\n      tot8 += pop(eights);\n    }\n\n    // handle trailing words in a binary-search manner...\n    // derived from the loop above by setting specific elements to 0.\n    // the original method in Hackers Delight used a simple for loop:\n    //   for (i = i; i < n; i++)      // Add in the last elements\n    //  tot = tot + pop(A[i]);\n\n    if (i<=n-4) {\n      long twosA, twosB, foursA, eights;\n      {\n        long b=A[i], c=A[i+1];\n        long u=ones ^ b;\n        twosA=(ones & b)|( u & c);\n        ones=u^c;\n      }\n      {\n        long b=A[i+2], c=A[i+3];\n        long u=ones^b;\n        twosB =(ones&b)|(u&c);\n        ones=u^c;\n      }\n      {\n        long u=twos^twosA;\n        foursA=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n      eights=fours&foursA;\n      fours=fours^foursA;\n\n      tot8 += pop(eights);\n      i+=4;\n    }\n\n    if (i<=n-2) {\n      long b=A[i], c=A[i+1];\n      long u=ones ^ b;\n      long twosA=(ones & b)|( u & c);\n      ones=u^c;\n\n      long foursA=twos&twosA;\n      twos=twos^twosA;\n\n      long eights=fours&foursA;\n      fours=fours^foursA;\n\n      tot8 += pop(eights);\n      i+=2;\n    }\n\n    if (i<n) {\n      tot += pop(A[i]);\n    }\n\n    tot += (pop(fours)<<2)\n            + (pop(twos)<<1)\n            + pop(ones)\n            + (tot8<<3);\n\n    return tot;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/BitUtil#pop_array(long[],int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/BitUtil#pop_array(long[],int,int).mjava","sourceNew":"  /*** Returns the number of set bits in an array of longs. */\n  public static long pop_array(long A[], int wordOffset, int numWords) {\n    /*\n    * Robert Harley and David Seal's bit counting algorithm, as documented\n    * in the revisions of Hacker's Delight\n    * http://www.hackersdelight.org/revisions.pdf\n    * http://www.hackersdelight.org/HDcode/newCode/pop_arrayHS.cc\n    *\n    * This function was adapted to Java, and extended to use 64 bit words.\n    * if only we had access to wider registers like SSE from java...\n    *\n    * This function can be transformed to compute the popcount of other functions\n    * on bitsets via something like this:\n    * sed 's/A\\[\\([^]]*\\)\\]/\\(A[\\1] \\& B[\\1]\\)/g'\n    *\n    */\n    int n = wordOffset+numWords;\n    long tot=0, tot8=0;\n    long ones=0, twos=0, fours=0;\n\n    int i;\n    for (i = wordOffset; i <= n - 8; i+=8) {\n      /***  C macro from Hacker's Delight\n       #define CSA(h,l, a,b,c) \\\n       {unsigned u = a ^ b; unsigned v = c; \\\n       h = (a & b) | (u & v); l = u ^ v;}\n       ***/\n\n      long twosA,twosB,foursA,foursB,eights;\n\n      // CSA(twosA, ones, ones, A[i], A[i+1])\n      {\n        long b=A[i], c=A[i+1];\n        long u=ones ^ b;\n        twosA=(ones & b)|( u & c);\n        ones=u^c;\n      }\n      // CSA(twosB, ones, ones, A[i+2], A[i+3])\n      {\n        long b=A[i+2], c=A[i+3];\n        long u=ones^b;\n        twosB =(ones&b)|(u&c);\n        ones=u^c;\n      }\n      //CSA(foursA, twos, twos, twosA, twosB)\n      {\n        long u=twos^twosA;\n        foursA=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n      //CSA(twosA, ones, ones, A[i+4], A[i+5])\n      {\n        long b=A[i+4], c=A[i+5];\n        long u=ones^b;\n        twosA=(ones&b)|(u&c);\n        ones=u^c;\n      }\n      // CSA(twosB, ones, ones, A[i+6], A[i+7])\n      {\n        long b=A[i+6], c=A[i+7];\n        long u=ones^b;\n        twosB=(ones&b)|(u&c);\n        ones=u^c;\n      }\n      //CSA(foursB, twos, twos, twosA, twosB)\n      {\n        long u=twos^twosA;\n        foursB=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n\n      //CSA(eights, fours, fours, foursA, foursB)\n      {\n        long u=fours^foursA;\n        eights=(fours&foursA)|(u&foursB);\n        fours=u^foursB;\n      }\n      tot8 += pop(eights);\n    }\n\n    // handle trailing words in a binary-search manner...\n    // derived from the loop above by setting specific elements to 0.\n    // the original method in Hackers Delight used a simple for loop:\n    //   for (i = i; i < n; i++)      // Add in the last elements\n    //  tot = tot + pop(A[i]);\n\n    if (i<=n-4) {\n      long twosA, twosB, foursA, eights;\n      {\n        long b=A[i], c=A[i+1];\n        long u=ones ^ b;\n        twosA=(ones & b)|( u & c);\n        ones=u^c;\n      }\n      {\n        long b=A[i+2], c=A[i+3];\n        long u=ones^b;\n        twosB =(ones&b)|(u&c);\n        ones=u^c;\n      }\n      {\n        long u=twos^twosA;\n        foursA=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n      eights=fours&foursA;\n      fours=fours^foursA;\n\n      tot8 += pop(eights);\n      i+=4;\n    }\n\n    if (i<=n-2) {\n      long b=A[i], c=A[i+1];\n      long u=ones ^ b;\n      long twosA=(ones & b)|( u & c);\n      ones=u^c;\n\n      long foursA=twos&twosA;\n      twos=twos^twosA;\n\n      long eights=fours&foursA;\n      fours=fours^foursA;\n\n      tot8 += pop(eights);\n      i+=2;\n    }\n\n    if (i<n) {\n      tot += pop(A[i]);\n    }\n\n    tot += (pop(fours)<<2)\n            + (pop(twos)<<1)\n            + pop(ones)\n            + (tot8<<3);\n\n    return tot;\n  }\n\n","sourceOld":"  /*** Returns the number of set bits in an array of longs. */\n  public static long pop_array(long A[], int wordOffset, int numWords) {\n    /*\n    * Robert Harley and David Seal's bit counting algorithm, as documented\n    * in the revisions of Hacker's Delight\n    * http://www.hackersdelight.org/revisions.pdf\n    * http://www.hackersdelight.org/HDcode/newCode/pop_arrayHS.cc\n    *\n    * This function was adapted to Java, and extended to use 64 bit words.\n    * if only we had access to wider registers like SSE from java...\n    *\n    * This function can be transformed to compute the popcount of other functions\n    * on bitsets via something like this:\n    * sed 's/A\\[\\([^]]*\\)\\]/\\(A[\\1] \\& B[\\1]\\)/g'\n    *\n    */\n    int n = wordOffset+numWords;\n    long tot=0, tot8=0;\n    long ones=0, twos=0, fours=0;\n\n    int i;\n    for (i = wordOffset; i <= n - 8; i+=8) {\n      /***  C macro from Hacker's Delight\n       #define CSA(h,l, a,b,c) \\\n       {unsigned u = a ^ b; unsigned v = c; \\\n       h = (a & b) | (u & v); l = u ^ v;}\n       ***/\n\n      long twosA,twosB,foursA,foursB,eights;\n\n      // CSA(twosA, ones, ones, A[i], A[i+1])\n      {\n        long b=A[i], c=A[i+1];\n        long u=ones ^ b;\n        twosA=(ones & b)|( u & c);\n        ones=u^c;\n      }\n      // CSA(twosB, ones, ones, A[i+2], A[i+3])\n      {\n        long b=A[i+2], c=A[i+3];\n        long u=ones^b;\n        twosB =(ones&b)|(u&c);\n        ones=u^c;\n      }\n      //CSA(foursA, twos, twos, twosA, twosB)\n      {\n        long u=twos^twosA;\n        foursA=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n      //CSA(twosA, ones, ones, A[i+4], A[i+5])\n      {\n        long b=A[i+4], c=A[i+5];\n        long u=ones^b;\n        twosA=(ones&b)|(u&c);\n        ones=u^c;\n      }\n      // CSA(twosB, ones, ones, A[i+6], A[i+7])\n      {\n        long b=A[i+6], c=A[i+7];\n        long u=ones^b;\n        twosB=(ones&b)|(u&c);\n        ones=u^c;\n      }\n      //CSA(foursB, twos, twos, twosA, twosB)\n      {\n        long u=twos^twosA;\n        foursB=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n\n      //CSA(eights, fours, fours, foursA, foursB)\n      {\n        long u=fours^foursA;\n        eights=(fours&foursA)|(u&foursB);\n        fours=u^foursB;\n      }\n      tot8 += pop(eights);\n    }\n\n    // handle trailing words in a binary-search manner...\n    // derived from the loop above by setting specific elements to 0.\n    // the original method in Hackers Delight used a simple for loop:\n    //   for (i = i; i < n; i++)      // Add in the last elements\n    //  tot = tot + pop(A[i]);\n\n    if (i<=n-4) {\n      long twosA, twosB, foursA, eights;\n      {\n        long b=A[i], c=A[i+1];\n        long u=ones ^ b;\n        twosA=(ones & b)|( u & c);\n        ones=u^c;\n      }\n      {\n        long b=A[i+2], c=A[i+3];\n        long u=ones^b;\n        twosB =(ones&b)|(u&c);\n        ones=u^c;\n      }\n      {\n        long u=twos^twosA;\n        foursA=(twos&twosA)|(u&twosB);\n        twos=u^twosB;\n      }\n      eights=fours&foursA;\n      fours=fours^foursA;\n\n      tot8 += pop(eights);\n      i+=4;\n    }\n\n    if (i<=n-2) {\n      long b=A[i], c=A[i+1];\n      long u=ones ^ b;\n      long twosA=(ones & b)|( u & c);\n      ones=u^c;\n\n      long foursA=twos&twosA;\n      twos=twos^twosA;\n\n      long eights=fours&foursA;\n      fours=fours^foursA;\n\n      tot8 += pop(eights);\n      i+=2;\n    }\n\n    if (i<n) {\n      tot += pop(A[i]);\n    }\n\n    tot += (pop(fours)<<2)\n            + (pop(twos)<<1)\n            + pop(ones)\n            + (tot8<<3);\n\n    return tot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}