{"path":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","pathOld":"/dev/null","sourceNew":"  synchronized void close() throws IOException {\n    // why don't we trap the exception and at least make sure that\n    // all streams that we can close are closed?\n    if (tvx != null) tvx.close();\n    if (tvd != null) tvd.close();\n    if (tvf != null) tvf.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f65ca883c12cb520aa6deffe97701dde4f18c8","date":1092775996,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","sourceNew":"  void close() throws IOException {\n  \t// make all effort to close up. Keep the first exception\n  \t// and throw it as a new one.\n  \tIOException keep = null;\n  \tif (tvx != null) try { tvx.close(); } catch (IOException e) { if (keep == null) keep = e; }\n  \tif (tvd != null) try { tvd.close(); } catch (IOException e) { if (keep == null) keep = e; }\n  \tif (tvf  != null) try {  tvf.close(); } catch (IOException e) { if (keep == null) keep = e; }\n  \tif (keep != null) throw (IOException) keep.fillInStackTrace();\n  }\n\n","sourceOld":"  synchronized void close() throws IOException {\n    // why don't we trap the exception and at least make sure that\n    // all streams that we can close are closed?\n    if (tvx != null) tvx.close();\n    if (tvd != null) tvd.close();\n    if (tvf != null) tvf.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","sourceNew":"  void close() throws IOException {\n    // make all effort to close up. Keep the first exception\n    // and throw it as a new one.\n    IOException keep = null;\n    if (tvx != null) try { tvx.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (tvd != null) try { tvd.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (tvf  != null) try {  tvf.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (keep != null) throw (IOException) keep.fillInStackTrace();\n  }\n\n","sourceOld":"  void close() throws IOException {\n  \t// make all effort to close up. Keep the first exception\n  \t// and throw it as a new one.\n  \tIOException keep = null;\n  \tif (tvx != null) try { tvx.close(); } catch (IOException e) { if (keep == null) keep = e; }\n  \tif (tvd != null) try { tvd.close(); } catch (IOException e) { if (keep == null) keep = e; }\n  \tif (tvf  != null) try {  tvf.close(); } catch (IOException e) { if (keep == null) keep = e; }\n  \tif (keep != null) throw (IOException) keep.fillInStackTrace();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","sourceNew":"  void close() throws IOException {\n    // make all effort to close up. Keep the first exception\n    // and throw it as a new one.\n    IOException keep = null;\n    if (tvx != null) try { tvx.close(); } catch (IOException e) { keep = e; }\n    if (tvd != null) try { tvd.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (tvf  != null) try {  tvf.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (keep != null) throw (IOException) keep.fillInStackTrace();\n  }\n\n","sourceOld":"  void close() throws IOException {\n    // make all effort to close up. Keep the first exception\n    // and throw it as a new one.\n    IOException keep = null;\n    if (tvx != null) try { tvx.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (tvd != null) try { tvd.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (tvf  != null) try {  tvf.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (keep != null) throw (IOException) keep.fillInStackTrace();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsReader#close().mjava","sourceNew":"  void close() throws IOException {\n    // make all effort to close up. Keep the first exception\n    // and throw it as a new one.\n    IOException keep = null;\n    if (tvx != null) try { tvx.close(); } catch (IOException e) { keep = e; }\n    if (tvd != null) try { tvd.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (tvf  != null) try {  tvf.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (keep != null) throw (IOException) keep.fillInStackTrace();\n  }\n\n","sourceOld":"  void close() throws IOException {\n    // make all effort to close up. Keep the first exception\n    // and throw it as a new one.\n    IOException keep = null;\n    if (tvx != null) try { tvx.close(); } catch (IOException e) { keep = e; }\n    if (tvd != null) try { tvd.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (tvf  != null) try {  tvf.close(); } catch (IOException e) { if (keep == null) keep = e; }\n    if (keep != null) throw (IOException) keep.fillInStackTrace();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["11f65ca883c12cb520aa6deffe97701dde4f18c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11f65ca883c12cb520aa6deffe97701dde4f18c8":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["11f65ca883c12cb520aa6deffe97701dde4f18c8"],"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"11f65ca883c12cb520aa6deffe97701dde4f18c8":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}