{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    Payload pay = new Payload((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.getData()));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    Payload pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new Payload((\"pos: \" + 0).getBytes());\n    pay2 = new Payload((\"pos: \" + 1).getBytes());\n    Payload pay3 = new Payload((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.getData());\n    list.add(pay2.getData());\n    list.add(pay3.getData());\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d673420224c5154fd8d6f55d8230c36ac23783fd","date":1341692649,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(\"UTF-8\"));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(\"UTF-8\"));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(\"UTF-8\"));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(\"UTF-8\"));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes());\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes());\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes());\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes());\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(\"UTF-8\"));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(\"UTF-8\"));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(\"UTF-8\"));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(\"UTF-8\"));\n    list = new ArrayList<byte[]>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(\"UTF-8\"));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(\"UTF-8\"));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(\"UTF-8\"));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(\"UTF-8\"));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(\"UTF-8\"));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(\"UTF-8\"));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  public void testSpanPayloadCheck() throws Exception {\n    SpanQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d673420224c5154fd8d6f55d8230c36ac23783fd":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["76fa9933adb0556e752e8af9734c4d0ae14622ff","d673420224c5154fd8d6f55d8230c36ac23783fd"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"46d8ada1fff8d18cb197c38c7983225162599948":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"d673420224c5154fd8d6f55d8230c36ac23783fd":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["d673420224c5154fd8d6f55d8230c36ac23783fd","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}