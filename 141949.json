{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplication().mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#doTestPartialReplication().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  public void doTestPartialReplication() throws Exception {\n    this.clearSourceCollection();\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertEquals(200, getNumDocs(SOURCE_COLLECTION));\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplication().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplication().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplication().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationHandlerTest#testPartialReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest#testPartialReplication().mjava","sourceNew":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","sourceOld":"  /**\n   * Test the scenario where the slave is killed before receiving all the documents. The replication\n   * strategy should fetch all the missing tlog files from the leader.\n   */\n  @Test\n  @ShardsFixed(num = 2)\n  public void testPartialReplication() throws Exception {\n    for (int i = 0; i < 5; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);\n    ChaosMonkey.stop(slaves.get(0).jetty);\n\n    for (int i = 5; i < 10; i++) {\n      List<SolrInputDocument> docs = new ArrayList<>();\n      for (int j = i * 20; j < (i * 20) + 20; j++) {\n        docs.add(getDoc(id, Integer.toString(j)));\n      }\n      index(SOURCE_COLLECTION, docs);\n    }\n\n    assertNumDocs(200, SOURCE_COLLECTION);\n\n    // Restart the slave node to trigger Replication strategy\n    this.restartServer(slaves.get(0));\n\n    // at this stage, the slave should have replicated the 5 missing tlog files\n    this.assertUpdateLogsEquals(SOURCE_COLLECTION, 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["e7da9d8536c11576df10e348efa79d2739170936"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}