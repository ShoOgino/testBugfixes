{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/ReplaceFunctionTest#multiValueStringTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/ReplaceFunctionTest#multiValueStringTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void multiValueStringTest() {\n    TestStringValueStream val = new TestStringValueStream();\n    TestStringValue comp = new TestStringValue();\n    TestStringValue fill = new TestStringValue();\n\n    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n    assertTrue(uncasted instanceof StringValueStream);\n    StringValueStream func = (StringValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"ads\").setExists(true);\n    fill.setValue(\"empty\").setExists(true);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Comp doesn't exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<String> values1 = Arrays.asList(\"abc\", \"123\", \"456\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    // Values exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"123\").setExists(true);\n    fill.setExists(false);\n    Iterator<String> values2 = Arrays.asList(\"abc\", \"456\", \"def\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"456\").setExists(true);\n    fill.setValue(\"changed\").setExists(true);\n    Iterator<String> values3 = Arrays.asList(\"abc\", \"123\", \"changed\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/ReplaceFunctionTest#multiValueStringTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/ReplaceFunctionTest#multiValueStringTest().mjava","sourceNew":"  @Test\n  public void multiValueStringTest() {\n    TestStringValueStream val = new TestStringValueStream();\n    TestStringValue comp = new TestStringValue();\n    TestStringValue fill = new TestStringValue();\n\n    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n    assertTrue(uncasted instanceof StringValueStream);\n    StringValueStream func = (StringValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"ads\").setExists(true);\n    fill.setValue(\"empty\").setExists(true);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // Comp doesn't exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<String> values1 = Arrays.asList(\"abc\", \"123\", \"456\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    // Values exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"123\").setExists(true);\n    fill.setExists(false);\n    Iterator<String> values2 = Arrays.asList(\"abc\", \"456\", \"def\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"456\").setExists(true);\n    fill.setValue(\"changed\").setExists(true);\n    Iterator<String> values3 = Arrays.asList(\"abc\", \"123\", \"changed\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void multiValueStringTest() {\n    TestStringValueStream val = new TestStringValueStream();\n    TestStringValue comp = new TestStringValue();\n    TestStringValue fill = new TestStringValue();\n\n    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n    assertTrue(uncasted instanceof StringValueStream);\n    StringValueStream func = (StringValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"ads\").setExists(true);\n    fill.setValue(\"empty\").setExists(true);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Comp doesn't exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<String> values1 = Arrays.asList(\"abc\", \"123\", \"456\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    // Values exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"123\").setExists(true);\n    fill.setExists(false);\n    Iterator<String> values2 = Arrays.asList(\"abc\", \"456\", \"def\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"456\").setExists(true);\n    fill.setValue(\"changed\").setExists(true);\n    Iterator<String> values3 = Arrays.asList(\"abc\", \"123\", \"changed\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/ReplaceFunctionTest#multiValueStringTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/ReplaceFunctionTest#multiValueStringTest().mjava","sourceNew":"  @Test\n  public void multiValueStringTest() {\n    TestStringValueStream val = new TestStringValueStream();\n    TestStringValue comp = new TestStringValue();\n    TestStringValue fill = new TestStringValue();\n\n    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n    assertTrue(uncasted instanceof StringValueStream);\n    StringValueStream func = (StringValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"ads\").setExists(true);\n    fill.setValue(\"empty\").setExists(true);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // Comp doesn't exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<String> values1 = Arrays.asList(\"abc\", \"123\", \"456\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    // Values exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"123\").setExists(true);\n    fill.setExists(false);\n    Iterator<String> values2 = Arrays.asList(\"abc\", \"456\", \"def\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"456\").setExists(true);\n    fill.setValue(\"changed\").setExists(true);\n    Iterator<String> values3 = Arrays.asList(\"abc\", \"123\", \"changed\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","sourceOld":"  @Test\n  public void multiValueStringTest() {\n    TestStringValueStream val = new TestStringValueStream();\n    TestStringValue comp = new TestStringValue();\n    TestStringValue fill = new TestStringValue();\n\n    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n    assertTrue(uncasted instanceof StringValueStream);\n    StringValueStream func = (StringValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"ads\").setExists(true);\n    fill.setValue(\"empty\").setExists(true);\n    func.streamStrings( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // Comp doesn't exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<String> values1 = Arrays.asList(\"abc\", \"123\", \"456\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    // Values exist\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"123\").setExists(true);\n    fill.setExists(false);\n    Iterator<String> values2 = Arrays.asList(\"abc\", \"456\", \"def\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"abc\", \"123\", \"456\", \"def\", \"123\");\n    comp.setValue(\"456\").setExists(true);\n    fill.setValue(\"changed\").setExists(true);\n    Iterator<String> values3 = Arrays.asList(\"abc\", \"123\", \"changed\", \"def\", \"123\").iterator();\n    func.streamStrings( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}