{"path":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b2d93bae52478a5f8ac862354e58d276d0b38d","date":1314923489,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n    } catch (ConnectException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    assertTrue( content.length > 10 ); // found something...\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35471ead64769a37b2107927b504f54e8f53be30","date":1319717172,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    // Test the stream\n    in = stream.getStream();\n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffe92cedbbf02489fafd2831d761ee2851406625","date":1339611760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      conn.connect();\n      int code = conn.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      URLConnection conn = url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffd125cb6d26c3c5ecf5d6e6a31ac2398505ba96","date":1345145071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      conn.connect();\n      int code = conn.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    StringBuilder sb = new StringBuilder();\n    Reader reader = stream.getReader();\n    int ch;\n    while ((ch = reader.read()) > 0) {\n      sb.append((char)ch);\n    }\n    assertEquals(new String(content, charset), sb.toString());\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      conn.connect();\n      int code = conn.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e675e91052ff0b2d721d76b2bd2091a012365f","date":1345146825,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      conn.connect();\n      int code = conn.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    Reader reader = stream.getReader();\n    try {\n      String streamContent = IOUtils.toString(reader);\n      assertEquals(new String(content, charset), streamContent);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      conn.connect();\n      int code = conn.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    StringBuilder sb = new StringBuilder();\n    Reader reader = stream.getReader();\n    int ch;\n    while ((ch = reader.read()) > 0) {\n      sb.append((char)ch);\n    }\n    assertEquals(new String(content, charset), sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb8fefbe3de65c4dd937adad85d9b35009578838","date":1345153841,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      conn.connect();\n      int code = conn.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    Reader reader = stream.getReader();\n    try {\n      String streamContent = IOUtils.toString(reader);\n      assertEquals(new String(content, charset), streamContent);\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      conn.connect();\n      int code = conn.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    byte[] content = null;\n    String contentType = null;\n    URL url = new URL( \"http://svn.apache.org/repos/asf/lucene/dev/trunk/\" );\n    InputStream in = null;\n    try {\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      conn.setConnectTimeout(1000);\n      conn.setReadTimeout(1000);\n      conn.connect();\n      int code = conn.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      in = conn.getInputStream();\n      contentType = conn.getContentType();\n      content = IOUtils.toByteArray(in);\n\n      assumeTrue(\"not enough content for test to be useful\",\n                 content.length > 10 ); \n\n    } catch (IOException ex) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n    }finally {\n      if (in != null) {\n        IOUtils.closeQuietly(in);\n      }\n    }\n    \n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( url );\n    in = stream.getStream();  // getStream is needed before getSize is valid\n    assertEquals( content.length, stream.getSize().intValue() );\n    \n    try {\n      assertTrue( IOUtils.contentEquals( \n          new ByteArrayInputStream(content), in ) );\n    } \n    finally {\n      IOUtils.closeQuietly(in);\n    }\n\n    String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n    if (charset == null)\n      charset = ContentStreamBase.DEFAULT_CHARSET;\n    // Re-open the stream and this time use a reader\n    stream = new ContentStreamBase.URLStream( url );\n    assertTrue( IOUtils.contentEquals( new StringReader(new String(content, charset)), stream.getReader() ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = TestUtil.createTempFile(\"README\", \"\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, \"UTF-8\");\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(TEMP_DIR, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, \"UTF-8\");\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = TestUtil.createTempFile(\"README\", \"\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(file.toURI().toASCIIString()) );\n    assertTrue( IOUtils.contentEquals( new FileInputStream( file ), stream.getStream() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n    assertTrue( IOUtils.contentEquals( new InputStreamReader(new FileInputStream(file), \"UTF-8\"), stream.getReader() ) );\n    assertEquals( file.length(), stream.getSize().intValue() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, \"UTF-8\");\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, \"UTF-8\");\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(dataDir, \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir().toFile(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader().openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir().toFile(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader(null, null).openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir().toFile(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException \n  {\n    File file = null;\n    FileOutputStream os = null;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource( \"solrj/README\" )) {\n      assertNotNull(is);\n      file = new File(createTempDir().toFile(), \"README\");\n      os = new FileOutputStream(file);\n      IOUtils.copy(is, os);\n      os.close();\n      is.close();\n    }\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    InputStream is = new SolrResourceLoader().openResource( \"solrj/README\" );\n    assertNotNull( is );\n    File file = new File(createTempDir().toFile(), \"README\");\n    FileOutputStream os = new FileOutputStream(file);\n    IOUtils.copy(is, os);\n    os.close();\n    is.close();\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be58baf5760d4f17a711eb110f79091ab713ae36","date":1539906801,"type":3,"author":"Andrew Lundgren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         FileInputStream fis2 = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      // For File URLs, the content type is determined automatically by the mime type\n      // associated with the file extension,\n      // This is inconsistent from the FileStream as that code tries to guess the content based on the 1st character.\n      //\n      // HTTP URLS, the content type is determined by the headers.  Those are not tested here.\n      //\n      assertEquals(\"text/html\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException \n  {\n    File file = null;\n    FileOutputStream os = null;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource( \"solrj/README\" )) {\n      assertNotNull(is);\n      file = new File(createTempDir().toFile(), \"README\");\n      os = new FileOutputStream(file);\n      IOUtils.copy(is, os);\n      os.close();\n      is.close();\n    }\n    \n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file\n        .toURI().toASCIIString()));\n    InputStream s = stream.getStream();\n    FileInputStream fis = new FileInputStream(file);\n    FileInputStream fis2 = new FileInputStream(file);\n    InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n    Reader r = stream.getReader();\n    try {\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    } finally {\n      r.close();\n      s.close();\n      isr.close();\n      fis.close();\n      fis2.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         FileInputStream fis2 = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      // For File URLs, the content type is determined automatically by the mime type\n      // associated with the file extension,\n      // This is inconsistent from the FileStream as that code tries to guess the content based on the 1st character.\n      //\n      // HTTP URLS, the content type is determined by the headers.  Those are not tested here.\n      //\n      assertEquals(\"text/html\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         FileInputStream fis2 = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      // For File URLs, the content type is determined automatically by the mime type\n      // associated with the file extension,\n      // This is inconsistent from the FileStream as that code tries to guess the content based on the 1st character.\n      //\n      // HTTP URLS, the content type is determined by the headers.  Those are not tested here.\n      //\n      assertEquals(\"text/html\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/ContentStreamTest#testURLStream().mjava","sourceNew":"  public void testURLStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n\n    try (SolrResourceLoader srl = new SolrResourceLoader(); InputStream is = srl.openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         FileInputStream fis2 = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      // For File URLs, the content type is determined automatically by the mime type\n      // associated with the file extension,\n      // This is inconsistent from the FileStream as that code tries to guess the content based on the 1st character.\n      //\n      // HTTP URLS, the content type is determined by the headers.  Those are not tested here.\n      //\n      assertEquals(\"text/html\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","sourceOld":"  public void testURLStream() throws IOException {\n    File file = new File(createTempDir().toFile(), \"README\");\n\n    try (InputStream is = new SolrResourceLoader().openResource(\"solrj/README\");\n         FileOutputStream os = new FileOutputStream(file)) {\n      IOUtils.copy(is, os);\n    }\n\n    ContentStreamBase stream = new ContentStreamBase.URLStream(new URL(file.toURI().toASCIIString()));\n\n    try (InputStream s = stream.getStream();\n         FileInputStream fis = new FileInputStream(file);\n         FileInputStream fis2 = new FileInputStream(file);\n         InputStreamReader isr = new InputStreamReader(fis, StandardCharsets.UTF_8);\n         Reader r = stream.getReader()) {\n      // For File URLs, the content type is determined automatically by the mime type\n      // associated with the file extension,\n      // This is inconsistent from the FileStream as that code tries to guess the content based on the 1st character.\n      //\n      // HTTP URLS, the content type is determined by the headers.  Those are not tested here.\n      //\n      assertEquals(\"text/html\", stream.getContentType());\n      assertTrue(IOUtils.contentEquals(fis2, s));\n      assertEquals(file.length(), stream.getSize().intValue());\n      assertTrue(IOUtils.contentEquals(isr, r));\n      assertEquals(file.length(), stream.getSize().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":["ffe92cedbbf02489fafd2831d761ee2851406625","eb8fefbe3de65c4dd937adad85d9b35009578838"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","5eb2511ababf862ea11e10761c70ee560cd84510"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["be58baf5760d4f17a711eb110f79091ab713ae36"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["be58baf5760d4f17a711eb110f79091ab713ae36","8c5cdabe00d4d433e6a831e18f68201284973eef"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["eb8fefbe3de65c4dd937adad85d9b35009578838"],"78e675e91052ff0b2d721d76b2bd2091a012365f":["ffd125cb6d26c3c5ecf5d6e6a31ac2398505ba96"],"35471ead64769a37b2107927b504f54e8f53be30":["b0b2d93bae52478a5f8ac862354e58d276d0b38d"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["f4abec28b874149a7223e32cc7a01704c27790de"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["ffe92cedbbf02489fafd2831d761ee2851406625","eb8fefbe3de65c4dd937adad85d9b35009578838"],"9d3d365762604952e436b51980101dfc84cc1b3e":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"5eb2511ababf862ea11e10761c70ee560cd84510":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","9d3d365762604952e436b51980101dfc84cc1b3e"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["eb8fefbe3de65c4dd937adad85d9b35009578838","19275ba31e621f6da1b83bf13af75233876fd3d4"],"ffd125cb6d26c3c5ecf5d6e6a31ac2398505ba96":["ffe92cedbbf02489fafd2831d761ee2851406625"],"ffe92cedbbf02489fafd2831d761ee2851406625":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["35471ead64769a37b2107927b504f54e8f53be30"],"be58baf5760d4f17a711eb110f79091ab713ae36":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"eb8fefbe3de65c4dd937adad85d9b35009578838":["78e675e91052ff0b2d721d76b2bd2091a012365f"],"b0b2d93bae52478a5f8ac862354e58d276d0b38d":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c5cdabe00d4d433e6a831e18f68201284973eef"]},"commit2Childs":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"c26f00b574427b55127e869b935845554afde1fa":["b0b2d93bae52478a5f8ac862354e58d276d0b38d"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["1416f9d09d016a6894cd17e1caac137dad2bba59","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d0d579490a72f2e6297eaa648940611234c57cf1"],"78e675e91052ff0b2d721d76b2bd2091a012365f":["eb8fefbe3de65c4dd937adad85d9b35009578838"],"35471ead64769a37b2107927b504f54e8f53be30":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9d3d365762604952e436b51980101dfc84cc1b3e"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","5eb2511ababf862ea11e10761c70ee560cd84510"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["be58baf5760d4f17a711eb110f79091ab713ae36"],"5eb2511ababf862ea11e10761c70ee560cd84510":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"ffe92cedbbf02489fafd2831d761ee2851406625":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","ffd125cb6d26c3c5ecf5d6e6a31ac2398505ba96"],"ffd125cb6d26c3c5ecf5d6e6a31ac2398505ba96":["78e675e91052ff0b2d721d76b2bd2091a012365f"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["5eb2511ababf862ea11e10761c70ee560cd84510"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["ffe92cedbbf02489fafd2831d761ee2851406625"],"be58baf5760d4f17a711eb110f79091ab713ae36":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"f4abec28b874149a7223e32cc7a01704c27790de":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"eb8fefbe3de65c4dd937adad85d9b35009578838":["616c1830142ff5c1ddedec1ed898733b73c8e23b","19275ba31e621f6da1b83bf13af75233876fd3d4","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"b0b2d93bae52478a5f8ac862354e58d276d0b38d":["35471ead64769a37b2107927b504f54e8f53be30"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","1da93834e39ce341a13e42b611d0a83bd3114bba","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}