{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMovingMAD().mjava","commits":[{"id":"68351643306aad7f2b578f3eea2b361e9601e3f8","date":1548096393,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMovingMAD().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMovingMAD() throws Exception {\n    String cexpr = \"movingMAD(array(1,2,3,4,5,6,9), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0).doubleValue(), 1, .0);\n    assertEquals((double) out.get(1).doubleValue(), 1, .0);\n    assertEquals((double) out.get(2).doubleValue(), 1, .0);\n    assertEquals((double) out.get(3).doubleValue(), 1.5, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29773b4185eca6f4e01b83fdc60a704394315d0f","date":1548097273,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMovingMAD().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMovingMAD().mjava","sourceNew":"  @Test\n  public void testMovingMAD() throws Exception {\n    String cexpr = \"movingMAD(array(1,2,3,4,5,6,9.25), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    System.out.println(\"MAD:\"+out);\n    assertEquals((double) out.get(0).doubleValue(), 1, .0);\n    assertEquals((double) out.get(1).doubleValue(), 1, .0);\n    assertEquals((double) out.get(2).doubleValue(), 1, .0);\n    assertEquals((double) out.get(3).doubleValue(), 1.59375, .0);\n  }\n\n","sourceOld":"  @Test\n  public void testMovingMAD() throws Exception {\n    String cexpr = \"movingMAD(array(1,2,3,4,5,6,9), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    assertEquals((double) out.get(0).doubleValue(), 1, .0);\n    assertEquals((double) out.get(1).doubleValue(), 1, .0);\n    assertEquals((double) out.get(2).doubleValue(), 1, .0);\n    assertEquals((double) out.get(3).doubleValue(), 1.5, .0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMovingMAD().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMovingMAD() throws Exception {\n    String cexpr = \"movingMAD(array(1,2,3,4,5,6,9.25), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    System.out.println(\"MAD:\"+out);\n    assertEquals((double) out.get(0).doubleValue(), 1, .0);\n    assertEquals((double) out.get(1).doubleValue(), 1, .0);\n    assertEquals((double) out.get(2).doubleValue(), 1, .0);\n    assertEquals((double) out.get(3).doubleValue(), 1.59375, .0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMovingMAD().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMovingMAD().mjava","sourceNew":"  @Test\n  public void testMovingMAD() throws Exception {\n    String cexpr = \"movingMAD(array(1,2,3,4,5,6,9.25), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    System.out.println(\"MAD:\"+out);\n    assertEquals(out.get(0).doubleValue(), 1, .0);\n    assertEquals(out.get(1).doubleValue(), 1, .0);\n    assertEquals(out.get(2).doubleValue(), 1, .0);\n    assertEquals(out.get(3).doubleValue(), 1.59375, .0);\n  }\n\n","sourceOld":"  @Test\n  public void testMovingMAD() throws Exception {\n    String cexpr = \"movingMAD(array(1,2,3,4,5,6,9.25), 4)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"return-value\");\n    assertTrue(out.size()==4);\n    System.out.println(\"MAD:\"+out);\n    assertEquals((double) out.get(0).doubleValue(), 1, .0);\n    assertEquals((double) out.get(1).doubleValue(), 1, .0);\n    assertEquals((double) out.get(2).doubleValue(), 1, .0);\n    assertEquals((double) out.get(3).doubleValue(), 1.59375, .0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["29773b4185eca6f4e01b83fdc60a704394315d0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29773b4185eca6f4e01b83fdc60a704394315d0f":["68351643306aad7f2b578f3eea2b361e9601e3f8"],"68351643306aad7f2b578f3eea2b361e9601e3f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29773b4185eca6f4e01b83fdc60a704394315d0f"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68351643306aad7f2b578f3eea2b361e9601e3f8","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"29773b4185eca6f4e01b83fdc60a704394315d0f":["9ba1b632c041956c93c41aa1143d16a567014891","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"68351643306aad7f2b578f3eea2b361e9601e3f8":["29773b4185eca6f4e01b83fdc60a704394315d0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}