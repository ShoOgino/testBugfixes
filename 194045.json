{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n        Map<String,Int> termFreqMap = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n        Map<String,Int> termFreqMap = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        String text[] = d.getValues(fieldName);\n        if (text != null) {\n          for (int j = 0; j < text.length; j++) {\n            addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param docNum the id of the lucene document from which to find terms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n        Map<String,Int> termFreqMap = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n            TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n            // field does not store term vector info\n            if (vector == null) {\n            \tDocument d=ir.document(docNum);\n            \tString text[]=d.getValues(fieldName);\n            \tif(text!=null)\n            \t{\n                for (int j = 0; j < text.length; j++) {\n                  addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n                }\n            \t}\n            }\n            else {\n\t\t\t\taddTermFrequencies(termFreqMap, vector);\n            }\n\n        }\n\n        return createQueue(termFreqMap);\n    }\n\n","bugFix":null,"bugIntro":["e562682007e295029696e354ac6947531b083c79"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(int).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(int).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        String text[] = d.getValues(fieldName);\n        if (text != null) {\n          for (int j = 0; j < text.length; j++) {\n            addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   *\n   * @param docNum the id of the lucene document from which to find terms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(int docNum) throws IOException {\n    Map<String, Int> termFreqMap = new HashMap<String, Int>();\n    for (String fieldName : fieldNames) {\n      TermFreqVector vector = ir.getTermFreqVector(docNum, fieldName);\n\n      // field does not store term vector info\n      if (vector == null) {\n        Document d = ir.document(docNum);\n        String text[] = d.getValues(fieldName);\n        if (text != null) {\n          for (int j = 0; j < text.length; j++) {\n            addTermFrequencies(new StringReader(text[j]), termFreqMap, fieldName);\n          }\n        }\n      } else {\n        addTermFrequencies(termFreqMap, vector);\n      }\n\n    }\n\n    return createQueue(termFreqMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["e141595402370bee958745de8b1c9de1fa182581"],"e141595402370bee958745de8b1c9de1fa182581":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e141595402370bee958745de8b1c9de1fa182581":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e141595402370bee958745de8b1c9de1fa182581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}