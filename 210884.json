{"path":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","commits":[{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong refrence to the \n   * Cached Values.  Maintaining refrences to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakRefrence.\n   * </p>\n   * <p>\n   * <b>EXPERIMENTAL API:</b> This API is considered extremely advanced \n   * and experimental.  It may be removed or altered w/o warning in future \n   * releases \n   * of Lucene.\n   * </p>\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakRefrence.\n   * </p>\n   * <p>\n   * <b>EXPERIMENTAL API:</b> This API is considered extremely advanced \n   * and experimental.  It may be removed or altered w/o warning in future \n   * releases \n   * of Lucene.\n   * </p>\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong refrence to the \n   * Cached Values.  Maintaining refrences to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakRefrence.\n   * </p>\n   * <p>\n   * <b>EXPERIMENTAL API:</b> This API is considered extremely advanced \n   * and experimental.  It may be removed or altered w/o warning in future \n   * releases \n   * of Lucene.\n   * </p>\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f47a3442a348eee5552fd6d199bd49e8c917374","date":1260267548,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * <p>\n   * <b>EXPERIMENTAL API:</b> This API is considered extremely advanced \n   * and experimental.  It may be removed or altered w/o warning in future \n   * releases \n   * of Lucene.\n   * </p>\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakRefrence.\n   * </p>\n   * <p>\n   * <b>EXPERIMENTAL API:</b> This API is considered extremely advanced \n   * and experimental.  It may be removed or altered w/o warning in future \n   * releases \n   * of Lucene.\n   * </p>\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6","date":1264951226,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * <p>\n   * <b>EXPERIMENTAL API:</b> This API is considered extremely advanced \n   * and experimental.  It may be removed or altered w/o warning in future \n   * releases \n   * of Lucene.\n   * </p>\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the IndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6":["4f47a3442a348eee5552fd6d199bd49e8c917374"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["e69f59b863731d864bf3047235e718f0f88f8841"],"e69f59b863731d864bf3047235e718f0f88f8841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f47a3442a348eee5552fd6d199bd49e8c917374":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1e0ca16f14d94e05bda40e00ecb2a2c0225343c6"]},"commit2Childs":{"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["4f47a3442a348eee5552fd6d199bd49e8c917374"],"e69f59b863731d864bf3047235e718f0f88f8841":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69f59b863731d864bf3047235e718f0f88f8841"],"4f47a3442a348eee5552fd6d199bd49e8c917374":["1e0ca16f14d94e05bda40e00ecb2a2c0225343c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}