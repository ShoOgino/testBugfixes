{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","sourceNew":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","sourceOld":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","sourceNew":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","sourceNew":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}