{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#insertTailWithOverFlow(DisiWrapper).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#insertTailWithOverFlow(DisiWrapper).mjava","pathOld":"/dev/null","sourceNew":"  /** Insert an entry in 'tail' and evict the least-costly scorer if full. */\n  private DisiWrapper insertTailWithOverFlow(DisiWrapper s) {\n    if (tailSize < tail.length && tailMaxScore + s.maxScore < minCompetitiveScore) {\n      // we have free room for this new entry\n      addTail(s);\n      tailMaxScore += s.maxScore;\n      return null;\n    } else if (tailSize == 0) {\n      return s;\n    } else {\n      final DisiWrapper top = tail[0];\n      if (greaterMaxScore(top, s) == false) {\n        return s;\n      }\n      // Swap top and s\n      tail[0] = s;\n      downHeapMaxScore(tail, tailSize);\n      tailMaxScore = tailMaxScore - top.maxScore + s.maxScore;\n      return top;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#insertTailWithOverFlow(DisiWrapper).mjava","pathOld":"/dev/null","sourceNew":"  /** Insert an entry in 'tail' and evict the least-costly scorer if full. */\n  private DisiWrapper insertTailWithOverFlow(DisiWrapper s) {\n    if (tailSize < tail.length && tailMaxScore + s.maxScore < minCompetitiveScore) {\n      // we have free room for this new entry\n      addTail(s);\n      tailMaxScore += s.maxScore;\n      return null;\n    } else if (tailSize == 0) {\n      return s;\n    } else {\n      final DisiWrapper top = tail[0];\n      if (greaterMaxScore(top, s) == false) {\n        return s;\n      }\n      // Swap top and s\n      tail[0] = s;\n      downHeapMaxScore(tail, tailSize);\n      tailMaxScore = tailMaxScore - top.maxScore + s.maxScore;\n      return top;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#insertTailWithOverFlow(DisiWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#insertTailWithOverFlow(DisiWrapper).mjava","sourceNew":"  /** Insert an entry in 'tail' and evict the least-costly scorer if full. */\n  private DisiWrapper insertTailWithOverFlow(DisiWrapper s) {\n    if (tailMaxScore + s.maxScore < minCompetitiveScore) {\n      // we have free room for this new entry\n      addTail(s);\n      tailMaxScore += s.maxScore;\n      return null;\n    } else if (tailSize == 0) {\n      return s;\n    } else {\n      final DisiWrapper top = tail[0];\n      if (greaterMaxScore(top, s) == false) {\n        return s;\n      }\n      // Swap top and s\n      tail[0] = s;\n      downHeapMaxScore(tail, tailSize);\n      tailMaxScore = tailMaxScore - top.maxScore + s.maxScore;\n      return top;\n    }\n  }\n\n","sourceOld":"  /** Insert an entry in 'tail' and evict the least-costly scorer if full. */\n  private DisiWrapper insertTailWithOverFlow(DisiWrapper s) {\n    if (tailSize < tail.length && tailMaxScore + s.maxScore < minCompetitiveScore) {\n      // we have free room for this new entry\n      addTail(s);\n      tailMaxScore += s.maxScore;\n      return null;\n    } else if (tailSize == 0) {\n      return s;\n    } else {\n      final DisiWrapper top = tail[0];\n      if (greaterMaxScore(top, s) == false) {\n        return s;\n      }\n      // Swap top and s\n      tail[0] = s;\n      downHeapMaxScore(tail, tailSize);\n      tailMaxScore = tailMaxScore - top.maxScore + s.maxScore;\n      return top;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["523cc6563c99a55527ef7993efc5413c6648852d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}