{"path":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"/dev/null","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append(\"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append(\"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append(CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append(t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append(new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append(new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    t.setEmpty().append(CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5) /* \"34\" */, 1, 2);\n    assertEquals(\"4\", t.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b298ec7eee064feb32314fd646a95e38f1152835","date":1271673925,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","sourceOld":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append(\"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append(\"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append(CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append(t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append(new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append(new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    t.setEmpty().append(CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5) /* \"34\" */, 1, 2);\n    assertEquals(\"4\", t.toString());\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","sourceOld":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b298ec7eee064feb32314fd646a95e38f1152835"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b298ec7eee064feb32314fd646a95e38f1152835":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b298ec7eee064feb32314fd646a95e38f1152835":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b298ec7eee064feb32314fd646a95e38f1152835"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}