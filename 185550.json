{"path":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#merge(Sort,int,int,TopDocs[]).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) throws IOException {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.pop();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.add(ref);\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Same as {@link #merge(Sort, int, TopDocs[])} but also slices the result at the same time based\n   * on the provided start and size. The return TopDocs will always have a scoreDocs with length of at most size.\n   */\n  public static TopDocs merge(Sort sort, int start, int size, TopDocs[] shardHits) throws IOException {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.pop();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.add(ref);\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"281353161681adf1e8db8b47161439b24b15130c","date":1446560300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) throws IOException {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","sourceOld":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) throws IOException {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.pop();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.add(ref);\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","sourceOld":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) throws IOException {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","sourceOld":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) throws IOException {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500a89755c0c3953ca1886b5abb653b8cef8e299","date":1487933004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    Boolean setShardIndex = null;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        if (shard.scoreDocs[0].shardIndex == -1) {\n          if (setShardIndex != null && setShardIndex == false) {\n            throw new IllegalStateException(\"scoreDocs at index \" + shardIDX + \" has undefined shard indices but previous scoreDocs were predefined\");\n          }\n          setShardIndex = true;\n        } else {\n          if (setShardIndex != null && setShardIndex) {\n            throw new IllegalStateException(\"scoreDocs at index \" + shardIDX + \" has predefined shard indices but previous scoreDocs were undefined\");\n          }\n          setShardIndex = false;\n        }\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX, setShardIndex == false));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        if (setShardIndex) {\n          // unless this index is already initialized potentially due to multiple merge phases, or explicitly by the user\n          // we set the shard index to the index of the TopDocs array this hit is coming from.\n          // this allows multiple merge phases if needed but requires extra accounting on the users end.\n          // at the same time this is fully backwards compatible since the value was initialize to -1 from the beginning\n          hit.shardIndex = ref.shardIndex;\n        }\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","sourceOld":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        hit.shardIndex = ref.shardIndex;\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a5b816df64f2b489d1e711be80f9416f9862c1b","date":1487973679,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#mergeAux(Sort,int,int,TopDocs[]).mjava","sourceNew":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits, boolean setShardIndex) {\n\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX, setShardIndex == false));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        if (setShardIndex) {\n          // caller asked us to record shardIndex (index of the TopDocs array) this hit is coming from:\n          hit.shardIndex = ref.shardIndex;\n        } else if (hit.shardIndex == -1) {\n          throw new IllegalArgumentException(\"setShardIndex is false but TopDocs[\" + ref.shardIndex + \"].scoreDocs[\" + (ref.hitIndex-1) + \"] is not set\");\n        }\n          \n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","sourceOld":"  /** Auxiliary method used by the {@link #merge} impls. A sort value of null\n   *  is used to indicate that docs should be sorted by score. */\n  private static TopDocs mergeAux(Sort sort, int start, int size, TopDocs[] shardHits) {\n    final PriorityQueue<ShardRef> queue;\n    if (sort == null) {\n      queue = new ScoreMergeSortQueue(shardHits);\n    } else {\n      queue = new MergeSortQueue(sort, shardHits);\n    }\n\n    int totalHitCount = 0;\n    int availHitCount = 0;\n    float maxScore = Float.MIN_VALUE;\n    Boolean setShardIndex = null;\n    for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n      final TopDocs shard = shardHits[shardIDX];\n      // totalHits can be non-zero even if no hits were\n      // collected, when searchAfter was used:\n      totalHitCount += shard.totalHits;\n      if (shard.scoreDocs != null && shard.scoreDocs.length > 0) {\n        if (shard.scoreDocs[0].shardIndex == -1) {\n          if (setShardIndex != null && setShardIndex == false) {\n            throw new IllegalStateException(\"scoreDocs at index \" + shardIDX + \" has undefined shard indices but previous scoreDocs were predefined\");\n          }\n          setShardIndex = true;\n        } else {\n          if (setShardIndex != null && setShardIndex) {\n            throw new IllegalStateException(\"scoreDocs at index \" + shardIDX + \" has predefined shard indices but previous scoreDocs were undefined\");\n          }\n          setShardIndex = false;\n        }\n        availHitCount += shard.scoreDocs.length;\n        queue.add(new ShardRef(shardIDX, setShardIndex == false));\n        maxScore = Math.max(maxScore, shard.getMaxScore());\n        //System.out.println(\"  maxScore now \" + maxScore + \" vs \" + shard.getMaxScore());\n      }\n    }\n\n    if (availHitCount == 0) {\n      maxScore = Float.NaN;\n    }\n\n    final ScoreDoc[] hits;\n    if (availHitCount <= start) {\n      hits = new ScoreDoc[0];\n    } else {\n      hits = new ScoreDoc[Math.min(size, availHitCount - start)];\n      int requestedResultWindow = start + size;\n      int numIterOnHits = Math.min(availHitCount, requestedResultWindow);\n      int hitUpto = 0;\n      while (hitUpto < numIterOnHits) {\n        assert queue.size() > 0;\n        ShardRef ref = queue.top();\n        final ScoreDoc hit = shardHits[ref.shardIndex].scoreDocs[ref.hitIndex++];\n        if (setShardIndex) {\n          // unless this index is already initialized potentially due to multiple merge phases, or explicitly by the user\n          // we set the shard index to the index of the TopDocs array this hit is coming from.\n          // this allows multiple merge phases if needed but requires extra accounting on the users end.\n          // at the same time this is fully backwards compatible since the value was initialize to -1 from the beginning\n          hit.shardIndex = ref.shardIndex;\n        }\n        if (hitUpto >= start) {\n          hits[hitUpto - start] = hit;\n        }\n\n        //System.out.println(\"  hitUpto=\" + hitUpto);\n        //System.out.println(\"    doc=\" + hits[hitUpto].doc + \" score=\" + hits[hitUpto].score);\n\n        hitUpto++;\n\n        if (ref.hitIndex < shardHits[ref.shardIndex].scoreDocs.length) {\n          // Not done with this these TopDocs yet:\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n    }\n\n    if (sort == null) {\n      return new TopDocs(totalHitCount, hits, maxScore);\n    } else {\n      return new TopFieldDocs(totalHitCount, hits, sort.getSort(), maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a5b816df64f2b489d1e711be80f9416f9862c1b":["500a89755c0c3953ca1886b5abb653b8cef8e299"],"03e38c6374c23083c93e212a9498ff0a9c255476":["281353161681adf1e8db8b47161439b24b15130c"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["03e38c6374c23083c93e212a9498ff0a9c255476"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["281353161681adf1e8db8b47161439b24b15130c","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a5b816df64f2b489d1e711be80f9416f9862c1b"],"281353161681adf1e8db8b47161439b24b15130c":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["281353161681adf1e8db8b47161439b24b15130c"],"9a5b816df64f2b489d1e711be80f9416f9862c1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03e38c6374c23083c93e212a9498ff0a9c255476":["500a89755c0c3953ca1886b5abb653b8cef8e299","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["9a5b816df64f2b489d1e711be80f9416f9862c1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"281353161681adf1e8db8b47161439b24b15130c":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}