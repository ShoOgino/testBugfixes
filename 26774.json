{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.mergeSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.mergeSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.timSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.mergeSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["22e2025b7e33fa5d6792a512e46490c4c1a0931f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22e2025b7e33fa5d6792a512e46490c4c1a0931f","date":1375257101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    sorter.sort(0, subSpansByDoc.length);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.timSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    sorter.sort(0, subSpansByDoc.length);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    ArrayUtil.timSort(subSpansByDoc, spanDocComparator);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":null,"sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    sorter.sort(0, subSpansByDoc.length);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#toSameDoc().mjava","sourceNew":null,"sourceOld":"  /** Advance the subSpans to the same document */\n  private boolean toSameDoc() throws IOException {\n    sorter.sort(0, subSpansByDoc.length);\n    int firstIndex = 0;\n    int maxDoc = subSpansByDoc[subSpansByDoc.length - 1].doc();\n    while (subSpansByDoc[firstIndex].doc() != maxDoc) {\n      if (! subSpansByDoc[firstIndex].skipTo(maxDoc)) {\n        more = false;\n        inSameDoc = false;\n        return false;\n      }\n      maxDoc = subSpansByDoc[firstIndex].doc();\n      if (++firstIndex == subSpansByDoc.length) {\n        firstIndex = 0;\n      }\n    }\n    for (int i = 0; i < subSpansByDoc.length; i++) {\n      assert (subSpansByDoc[i].doc() == maxDoc)\n             : \" NearSpansOrdered.toSameDoc() spans \" + subSpansByDoc[0]\n                                 + \"\\n at doc \" + subSpansByDoc[i].doc()\n                                 + \", but should be at \" + maxDoc;\n    }\n    inSameDoc = true;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22e2025b7e33fa5d6792a512e46490c4c1a0931f":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["22e2025b7e33fa5d6792a512e46490c4c1a0931f"],"fab172655716b96f7e42376116235017a922de3a":["22e2025b7e33fa5d6792a512e46490c4c1a0931f","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"22e2025b7e33fa5d6792a512e46490c4c1a0931f":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["22e2025b7e33fa5d6792a512e46490c4c1a0931f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}