{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","commits":[{"id":"3dd3270bbe1832a7b0b0986602736d4106d2473e","date":1164738568,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"/dev/null","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\", new WhitespaceAnalyzer()) {\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer()) {\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(\"field\", new WhitespaceAnalyzer()) {\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer()) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer()) {\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer()) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["ba1116b3450a9c1642c89445d131b37344055245"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"3dd3270bbe1832a7b0b0986602736d4106d2473e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["3dd3270bbe1832a7b0b0986602736d4106d2473e"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"3dd3270bbe1832a7b0b0986602736d4106d2473e":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dd3270bbe1832a7b0b0986602736d4106d2473e"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba1116b3450a9c1642c89445d131b37344055245":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}