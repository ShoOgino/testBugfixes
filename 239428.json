{"path":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","commits":[{"id":"2e38054de362483189e0fdd850b779ed766aa7aa","date":1578059239,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField loglevel = doc.getField(\"log_level_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(loglevel.getValue(), \"INFO\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d42d9137df31cd94969bed5087634c6751d97eed","date":1578059239,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","sourceNew":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n  }\n\n","sourceOld":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField loglevel = doc.getField(\"log_level_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(loglevel.getValue(), \"INFO\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a36d7415fd302a874e548c5e8b2f15930464d095","date":1579118488,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","sourceNew":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n    SolrInputField ids = doc.getField(\"ids_s\");\n    SolrInputField shards = doc.getField(\"shards_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n    assertEquals(ids.getValue(), \"false\");\n    assertEquals(shards.getValue(), \"false\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca","date":1585744908,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","sourceNew":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n    SolrInputField ids = doc.getField(\"ids_s\");\n    SolrInputField shards = doc.getField(\"shards_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n    assertEquals(ids.getValue(), \"false\");\n    assertEquals(shards.getValue(), \"false\");\n  }\n\n","sourceOld":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n    SolrInputField ids = doc.getField(\"ids_s\");\n    SolrInputField shards = doc.getField(\"shards_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n    assertEquals(ids.getValue(), \"false\");\n    assertEquals(shards.getValue(), \"false\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1e7f5b96ccf8844b947064317d55fbe9a308236","date":1589464324,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrLogPostToolTest#testQueryRecord().mjava","sourceNew":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&shards.purpose=36&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n    SolrInputField ids = doc.getField(\"ids_s\");\n    SolrInputField shards = doc.getField(\"shards_s\");\n    SolrInputField purpose = doc.getField(\"purpose_ss\");\n    Object[] purposes = purpose.getValues().toArray();\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n    assertEquals(ids.getValue(), \"false\");\n    assertEquals(shards.getValue(), \"false\");\n    assertEquals(\"GET_TOP_IDS\", purposes[0].toString());\n    assertEquals(\"REFINE_FACETS\", purposes[1].toString());\n  }\n\n","sourceOld":"  @Test\n  public void testQueryRecord() throws Exception{\n    String record = \"2019-12-09 15:05:01.931 INFO  (qtp2103763750-21) [c:logs4 s:shard1 r:core_node2 x:logs4_shard1_replica_n1] o.a.s.c.S.Request [logs4_shard1_replica_n1]  webapp=/solr path=/select params={q=*:*&_=1575835181759&isShard=true&wt=javabin&distrib=false} hits=234868 status=0 QTime=8\\n\";\n    List<SolrInputDocument> docs = readDocs(record);\n    assertEquals(docs.size(), 1);\n    SolrInputDocument doc = docs.get(0);\n\n    SolrInputField query = doc.getField(\"q_s\");\n    SolrInputField date = doc.getField(\"date_dt\");\n    SolrInputField collection = doc.getField(\"collection_s\");\n    SolrInputField path = doc.getField(\"path_s\");\n    SolrInputField hits = doc.getField(\"hits_l\");\n    SolrInputField type = doc.getField(\"type_s\");\n    SolrInputField status = doc.getField(\"status_s\");\n    SolrInputField shard = doc.getField(\"shard_s\");\n    SolrInputField replica = doc.getField(\"replica_s\");\n    SolrInputField core = doc.getField(\"core_s\");\n    SolrInputField wt = doc.getField(\"wt_s\");\n    SolrInputField distrib = doc.getField(\"distrib_s\");\n    SolrInputField isShard = doc.getField(\"isShard_s\");\n    SolrInputField ids = doc.getField(\"ids_s\");\n    SolrInputField shards = doc.getField(\"shards_s\");\n\n    assertEquals(query.getValue(), \"*:*\");\n    assertEquals(date.getValue(), \"2019-12-09T15:05:01.931\");\n    assertEquals(collection.getValue(), \"logs4\");\n    assertEquals(path.getValue(), \"/select\");\n    assertEquals(hits.getValue(), \"234868\");\n    assertEquals(type.getValue(), \"query\");\n    assertEquals(status.getValue(), \"0\");\n    assertEquals(shard.getValue(), \"shard1\");\n    assertEquals(replica.getValue(), \"core_node2\");\n    assertEquals(core.getValue(), \"logs4_shard1_replica_n1\");\n    assertEquals(wt.getValue(), \"javabin\");\n    assertEquals(distrib.getValue(), \"false\");\n    assertEquals(isShard.getValue(), \"true\");\n    assertEquals(ids.getValue(), \"false\");\n    assertEquals(shards.getValue(), \"false\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca":["a36d7415fd302a874e548c5e8b2f15930464d095"],"d42d9137df31cd94969bed5087634c6751d97eed":["2e38054de362483189e0fdd850b779ed766aa7aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1e7f5b96ccf8844b947064317d55fbe9a308236":["f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca"],"2e38054de362483189e0fdd850b779ed766aa7aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d42d9137df31cd94969bed5087634c6751d97eed"],"a36d7415fd302a874e548c5e8b2f15930464d095":["d42d9137df31cd94969bed5087634c6751d97eed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1e7f5b96ccf8844b947064317d55fbe9a308236"]},"commit2Childs":{"f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca":["d1e7f5b96ccf8844b947064317d55fbe9a308236"],"d42d9137df31cd94969bed5087634c6751d97eed":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","a36d7415fd302a874e548c5e8b2f15930464d095"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e38054de362483189e0fdd850b779ed766aa7aa","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"2e38054de362483189e0fdd850b779ed766aa7aa":["d42d9137df31cd94969bed5087634c6751d97eed"],"d1e7f5b96ccf8844b947064317d55fbe9a308236":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"a36d7415fd302a874e548c5e8b2f15930464d095":["f44d533b1ca980d07e26a1f9ec24e6bf20bca2ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}