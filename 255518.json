{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      log.info(\"Deleting data for {}\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    log.info(\"Updating data for {} to ver {} \", coll, newState.getZNodeVersion());\n    // CAS update loop\n    while (true) {\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          return;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68281b529b74366dea47f5d3f95138e3c8422474","date":1439843698,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      log.info(\"Deleting data for {}\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!interestingCollections.contains(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          log.info(\"Add data for {} ver {} \", coll, newState.getZNodeVersion());\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          log.info(\"Updating data for {} from {} to {} \", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          break;\n        }\n      }\n    }\n\n    // Resolve race with removeZKWatch.\n    if (!interestingCollections.contains(coll)) {\n      watchedCollectionStates.remove(coll);\n      log.info(\"Removing uninteresting collection {}\", coll);\n    }\n  }\n\n","sourceOld":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      log.info(\"Deleting data for {}\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    log.info(\"Updating data for {} to ver {} \", coll, newState.getZNodeVersion());\n    // CAS update loop\n    while (true) {\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          return;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!interestingCollections.contains(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          break;\n        }\n      }\n    }\n\n    // Resolve race with removeZKWatch.\n    if (!interestingCollections.contains(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n  }\n\n","sourceOld":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      log.info(\"Deleting data for {}\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!interestingCollections.contains(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          log.info(\"Add data for {} ver {} \", coll, newState.getZNodeVersion());\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          log.info(\"Updating data for {} from {} to {} \", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          break;\n        }\n      }\n    }\n\n    // Resolve race with removeZKWatch.\n    if (!interestingCollections.contains(coll)) {\n      watchedCollectionStates.remove(coll);\n      log.info(\"Removing uninteresting collection {}\", coll);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private void updateWatchedCollection(String coll, DocCollection newState) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      notifyStateWatchers(liveNodes, coll, null);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n  }\n\n","sourceOld":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!interestingCollections.contains(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          break;\n        }\n      }\n    }\n\n    // Resolve race with removeZKWatch.\n    if (!interestingCollections.contains(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private void updateWatchedCollection(String coll, DocCollection newState) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      notifyStateWatchers(liveNodes, coll, null);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n  }\n\n","sourceOld":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!interestingCollections.contains(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          break;\n        }\n      }\n    }\n\n    // Resolve race with removeZKWatch.\n    if (!interestingCollections.contains(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cd4080fba20c774e4183c2ceb96ede05e5fb779","date":1463477646,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private void updateWatchedCollection(String coll, DocCollection newState) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      notifyStateWatchers(liveNodes, coll, null);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n  }\n\n","sourceOld":"  // returns true if the state has changed\n  private void updateWatchedCollection(String coll, DocCollection newState) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      notifyStateWatchers(liveNodes, coll, null);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private void updateWatchedCollection(String coll, DocCollection newState) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      notifyStateWatchers(liveNodes, coll, null);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n  }\n\n","sourceOld":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!interestingCollections.contains(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          break;\n        }\n      }\n    }\n\n    // Resolve race with removeZKWatch.\n    if (!interestingCollections.contains(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","sourceOld":"  // returns true if the state has changed\n  private void updateWatchedCollection(String coll, DocCollection newState) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      notifyStateWatchers(liveNodes, coll, null);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          notifyStateWatchers(liveNodes, coll, newState);\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      LOG.debug(\"Removing cached collection state for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.debug(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.debug(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.debug(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","sourceOld":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      LOG.debug(\"Removing cached collection state for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.debug(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.debug(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.debug(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","sourceOld":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      LOG.debug(\"Removing cached collection state for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.debug(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.debug(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.debug(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","sourceOld":"  private void updateWatchedCollection(String coll, DocCollection newState) {\n    if (newState == null) {\n      LOG.info(\"Deleting data for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return;\n    }\n\n    // CAS update loop\n    while (true) {\n      if (!interestingCollections.contains(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.info(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // Nothing to do, someone else updated same or newer.\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.info(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          break;\n        }\n      }\n    }\n\n    // Resolve race with removeZKWatch.\n    if (!interestingCollections.contains(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.info(\"Removing uninteresting collection [{}]\", coll);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      log.debug(\"Removing cached collection state for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          log.debug(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          log.debug(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      log.debug(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","sourceOld":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      LOG.debug(\"Removing cached collection state for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          LOG.debug(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          LOG.debug(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      LOG.debug(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateWatchedCollection(String,DocCollection).mjava","sourceNew":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      log.debug(\"Removing cached collection state for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          }\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          }\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      log.debug(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","sourceOld":"  // returns true if the state has changed\n  private boolean updateWatchedCollection(String coll, DocCollection newState) {\n\n    if (newState == null) {\n      log.debug(\"Removing cached collection state for [{}]\", coll);\n      watchedCollectionStates.remove(coll);\n      return true;\n    }\n\n    boolean updated = false;\n    // CAS update loop\n    while (true) {\n      if (!collectionWatches.containsKey(coll)) {\n        break;\n      }\n      DocCollection oldState = watchedCollectionStates.get(coll);\n      if (oldState == null) {\n        if (watchedCollectionStates.putIfAbsent(coll, newState) == null) {\n          log.debug(\"Add data for [{}] ver [{}]\", coll, newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      } else {\n        if (oldState.getZNodeVersion() >= newState.getZNodeVersion()) {\n          // no change to state, but we might have been triggered by the addition of a\n          // state watcher, so run notifications\n          updated = true;\n          break;\n        }\n        if (watchedCollectionStates.replace(coll, oldState, newState)) {\n          log.debug(\"Updating data for [{}] from [{}] to [{}]\", coll, oldState.getZNodeVersion(), newState.getZNodeVersion());\n          updated = true;\n          break;\n        }\n      }\n    }\n\n    // Resolve race with unregisterCore.\n    if (!collectionWatches.containsKey(coll)) {\n      watchedCollectionStates.remove(coll);\n      log.debug(\"Removing uninteresting collection [{}]\", coll);\n    }\n\n    return updated;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"0ad30c6a479e764150a3316e57263319775f1df2":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"68281b529b74366dea47f5d3f95138e3c8422474":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","962cd4f5e313777f35da8f521265323e84184929"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["68281b529b74366dea47f5d3f95138e3c8422474"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"68281b529b74366dea47f5d3f95138e3c8422474":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["68281b529b74366dea47f5d3f95138e3c8422474"],"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}