{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testMultiValued().mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testMultiValued().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    List<byte[][]> docValues = new ArrayList<>();\n    List<Integer> docIDs = new ArrayList<>();\n\n    for(int docID=0;docID<numDocs;docID++) {\n      int numValuesInDoc = TestUtil.nextInt(random(), 1, 5);\n      for(int ord=0;ord<numValuesInDoc;ord++) {\n        docIDs.add(docID);\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues.add(values);\n      }\n    }\n\n    byte[][][] docValuesArray = docValues.toArray(new byte[docValues.size()][][]);\n    int[] docIDsArray = new int[docIDs.size()];\n    for(int i=0;i<docIDsArray.length;i++) {\n      docIDsArray[i] = docIDs.get(i);\n    }\n\n    verify(docValuesArray, docIDsArray, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    List<byte[][]> docValues = new ArrayList<>();\n    List<Integer> docIDs = new ArrayList<>();\n\n    for(int docID=0;docID<numDocs;docID++) {\n      int numValuesInDoc = TestUtil.nextInt(random(), 1, 5);\n      for(int ord=0;ord<numValuesInDoc;ord++) {\n        docIDs.add(docID);\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues.add(values);\n      }\n    }\n\n    byte[][][] docValuesArray = docValues.toArray(new byte[docValues.size()][][]);\n    int[] docIDsArray = new int[docIDs.size()];\n    for(int i=0;i<docIDsArray.length;i++) {\n      docIDsArray[i] = docIDs.get(i);\n    }\n\n    verify(docValuesArray, docIDsArray, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testMultiValued().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(1000) : atLeast(100);\n    List<byte[][]> docValues = new ArrayList<>();\n    List<Integer> docIDs = new ArrayList<>();\n\n    for(int docID=0;docID<numDocs;docID++) {\n      int numValuesInDoc = TestUtil.nextInt(random(), 1, 5);\n      for(int ord=0;ord<numValuesInDoc;ord++) {\n        docIDs.add(docID);\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues.add(values);\n      }\n    }\n\n    byte[][][] docValuesArray = docValues.toArray(new byte[docValues.size()][][]);\n    int[] docIDsArray = new int[docIDs.size()];\n    for(int i=0;i<docIDsArray.length;i++) {\n      docIDsArray[i] = docIDs.get(i);\n    }\n\n    verify(docValuesArray, docIDsArray, numDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = atLeast(1000);\n    List<byte[][]> docValues = new ArrayList<>();\n    List<Integer> docIDs = new ArrayList<>();\n\n    for(int docID=0;docID<numDocs;docID++) {\n      int numValuesInDoc = TestUtil.nextInt(random(), 1, 5);\n      for(int ord=0;ord<numValuesInDoc;ord++) {\n        docIDs.add(docID);\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues.add(values);\n      }\n    }\n\n    byte[][][] docValuesArray = docValues.toArray(new byte[docValues.size()][][]);\n    int[] docIDsArray = new int[docIDs.size()];\n    for(int i=0;i<docIDsArray.length;i++) {\n      docIDsArray[i] = docIDs.get(i);\n    }\n\n    verify(docValuesArray, docIDsArray, numDims, numBytesPerDim);\n  }\n\n","bugFix":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testMultiValued().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n    int numIndexDims = TestUtil.nextInt(random(), 1, Math.min(PointValues.MAX_INDEX_DIMENSIONS, numDims));\n\n    int numDocs = TEST_NIGHTLY ? atLeast(1000) : atLeast(100);\n    List<byte[][]> docValues = new ArrayList<>();\n    List<Integer> docIDs = new ArrayList<>();\n\n    for(int docID=0;docID<numDocs;docID++) {\n      int numValuesInDoc = TestUtil.nextInt(random(), 1, 5);\n      for(int ord=0;ord<numValuesInDoc;ord++) {\n        docIDs.add(docID);\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues.add(values);\n      }\n    }\n\n    byte[][][] docValuesArray = docValues.toArray(new byte[docValues.size()][][]);\n    int[] docIDsArray = new int[docIDs.size()];\n    for(int i=0;i<docIDsArray.length;i++) {\n      docIDsArray[i] = docIDs.get(i);\n    }\n\n    verify(docValuesArray, docIDsArray, numDims, numIndexDims, numBytesPerDim);\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(1000) : atLeast(100);\n    List<byte[][]> docValues = new ArrayList<>();\n    List<Integer> docIDs = new ArrayList<>();\n\n    for(int docID=0;docID<numDocs;docID++) {\n      int numValuesInDoc = TestUtil.nextInt(random(), 1, 5);\n      for(int ord=0;ord<numValuesInDoc;ord++) {\n        docIDs.add(docID);\n        byte[][] values = new byte[numDims][];\n        for(int dim=0;dim<numDims;dim++) {\n          values[dim] = new byte[numBytesPerDim];\n          random().nextBytes(values[dim]);\n        }\n        docValues.add(values);\n      }\n    }\n\n    byte[][][] docValuesArray = docValues.toArray(new byte[docValues.size()][][]);\n    int[] docIDsArray = new int[docIDs.size()];\n    for(int i=0;i<docIDsArray.length;i++) {\n      docIDsArray[i] = docIDs.get(i);\n    }\n\n    verify(docValuesArray, docIDsArray, numDims, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["71da933d30aea361ccc224d6544c451cbf49916d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"71da933d30aea361ccc224d6544c451cbf49916d":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["71da933d30aea361ccc224d6544c451cbf49916d"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"71da933d30aea361ccc224d6544c451cbf49916d":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}