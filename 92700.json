{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStandardize().mjava","commits":[{"id":"e33001cc090cf359296602fc5b76486f1eff2553","date":1509673049,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStandardize().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStandardize() throws Exception {\n    String cexpr = \"let(echo=true, a=standardize(matrix(array(1,2,3), array(4,5,6))), b=standardize(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 1, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 1, 0.0);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 1, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStandardize().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStandardize() throws Exception {\n    String cexpr = \"let(echo=true, a=standardize(matrix(array(1,2,3), array(4,5,6))), b=standardize(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 1, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 1, 0.0);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 1, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testStandardize().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testStandardize().mjava","sourceNew":"  @Test\n  public void testStandardize() throws Exception {\n    String cexpr = \"let(echo=true, a=standardize(matrix(array(1,2,3), array(4,5,6))), b=standardize(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 1, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 1, 0.0);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 1, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testStandardize() throws Exception {\n    String cexpr = \"let(echo=true, a=standardize(matrix(array(1,2,3), array(4,5,6))), b=standardize(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 1, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 1, 0.0);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), -1, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 1, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e33001cc090cf359296602fc5b76486f1eff2553"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e33001cc090cf359296602fc5b76486f1eff2553":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","e33001cc090cf359296602fc5b76486f1eff2553"],"e33001cc090cf359296602fc5b76486f1eff2553":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}