{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testLongRangeEquals().mjava","commits":[{"id":"8be9dc9e17c1046a542423f69130abddef886f16","date":1530129441,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testLongRangeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongRangeEquals() throws Exception {\n    assertEquals(new LongRange(\"field\", -7, true, 17, false),\n                 new LongRange(\"field\", -7, true, 17, false));\n    assertEquals(new LongRange(\"field\", -7, true, 17, false).hashCode(),\n                 new LongRange(\"field\", -7, true, 17, false).hashCode());\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).equals(new LongRange(\"field\", -7, true, 17, true)));\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).hashCode() ==\n                new LongRange(\"field\", -7, true, 17, true).hashCode());\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).equals(new LongRange(\"field\", -7, true, 18, false)));\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).hashCode() ==\n                new LongRange(\"field\", -7, true, 18, false).hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testLongRangeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongRangeEquals() throws Exception {\n    assertEquals(new LongRange(\"field\", -7, true, 17, false),\n                 new LongRange(\"field\", -7, true, 17, false));\n    assertEquals(new LongRange(\"field\", -7, true, 17, false).hashCode(),\n                 new LongRange(\"field\", -7, true, 17, false).hashCode());\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).equals(new LongRange(\"field\", -7, true, 17, true)));\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).hashCode() ==\n                new LongRange(\"field\", -7, true, 17, true).hashCode());\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).equals(new LongRange(\"field\", -7, true, 18, false)));\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).hashCode() ==\n                new LongRange(\"field\", -7, true, 18, false).hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testLongRangeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongRangeEquals() throws Exception {\n    assertEquals(new LongRange(\"field\", -7, true, 17, false),\n                 new LongRange(\"field\", -7, true, 17, false));\n    assertEquals(new LongRange(\"field\", -7, true, 17, false).hashCode(),\n                 new LongRange(\"field\", -7, true, 17, false).hashCode());\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).equals(new LongRange(\"field\", -7, true, 17, true)));\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).hashCode() ==\n                new LongRange(\"field\", -7, true, 17, true).hashCode());\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).equals(new LongRange(\"field\", -7, true, 18, false)));\n    assertFalse(new LongRange(\"field\", -7, true, 17, false).hashCode() ==\n                new LongRange(\"field\", -7, true, 18, false).hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be9dc9e17c1046a542423f69130abddef886f16"],"8be9dc9e17c1046a542423f69130abddef886f16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be9dc9e17c1046a542423f69130abddef886f16"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be9dc9e17c1046a542423f69130abddef886f16"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"8be9dc9e17c1046a542423f69130abddef886f16":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8be9dc9e17c1046a542423f69130abddef886f16","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}