{"path":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor#approxBestDistance(double,double,double,double,double,double).mjava","commits":[{"id":"b01431682e11036a1a7d757a3fa7c1f903fb2c45","date":1460646145,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor#approxBestDistance(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: incoming args never cross the dateline, since they are a BKD cell\n  private static double approxBestDistance(double minLat, double maxLat, double minLon, double maxLon, double pointLat, double pointLon) {\n    \n    // TODO: can we make this the trueBestDistance?  I.e., minimum distance between the point and ANY point on the box?  we can speed things\n    // up if so, but not enrolling any BKD cell whose true best distance is > bottom of the current hit queue\n\n    if (pointLat >= minLat && pointLat <= maxLat && pointLon >= minLon && pointLon <= minLon) {\n      // point is inside the cell!\n      return 0.0;\n    }\n\n    double d1 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, minLon);\n    double d2 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, maxLon);\n    double d3 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, maxLon);\n    double d4 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, minLon);\n    return Math.min(Math.min(d1, d2), Math.min(d3, d4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c728c2c4e564b70110b013139d764abe136033f2","date":1460649910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor#approxBestDistance(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor#approxBestDistance(double,double,double,double,double,double).mjava","sourceNew":"  // NOTE: incoming args never cross the dateline, since they are a BKD cell\n  private static double approxBestDistance(double minLat, double maxLat, double minLon, double maxLon, double pointLat, double pointLon) {\n    \n    // TODO: can we make this the trueBestDistance?  I.e., minimum distance between the point and ANY point on the box?  we can speed things\n    // up if so, but not enrolling any BKD cell whose true best distance is > bottom of the current hit queue\n\n    if (pointLat >= minLat && pointLat <= maxLat && pointLon >= minLon && pointLon <= maxLon) {\n      // point is inside the cell!\n      return 0.0;\n    }\n\n    double d1 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, minLon);\n    double d2 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, maxLon);\n    double d3 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, maxLon);\n    double d4 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, minLon);\n    return Math.min(Math.min(d1, d2), Math.min(d3, d4));\n  }\n\n","sourceOld":"  // NOTE: incoming args never cross the dateline, since they are a BKD cell\n  private static double approxBestDistance(double minLat, double maxLat, double minLon, double maxLon, double pointLat, double pointLon) {\n    \n    // TODO: can we make this the trueBestDistance?  I.e., minimum distance between the point and ANY point on the box?  we can speed things\n    // up if so, but not enrolling any BKD cell whose true best distance is > bottom of the current hit queue\n\n    if (pointLat >= minLat && pointLat <= maxLat && pointLon >= minLon && pointLon <= minLon) {\n      // point is inside the cell!\n      return 0.0;\n    }\n\n    double d1 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, minLon);\n    double d2 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, maxLon);\n    double d3 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, maxLon);\n    double d4 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, minLon);\n    return Math.min(Math.min(d1, d2), Math.min(d3, d4));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor#approxBestDistance(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor#approxBestDistance(double,double,double,double,double,double).mjava","sourceNew":"  // NOTE: incoming args never cross the dateline, since they are a BKD cell\n  private static double approxBestDistance(double minLat, double maxLat, double minLon, double maxLon, double pointLat, double pointLon) {\n    \n    // TODO: can we make this the trueBestDistance?  I.e., minimum distance between the point and ANY point on the box?  we can speed things\n    // up if so, but not enrolling any BKD cell whose true best distance is > bottom of the current hit queue\n\n    if (pointLat >= minLat && pointLat <= maxLat && pointLon >= minLon && pointLon <= maxLon) {\n      // point is inside the cell!\n      return 0.0;\n    }\n\n    double d1 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, minLon);\n    double d2 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, maxLon);\n    double d3 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, maxLon);\n    double d4 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, minLon);\n    return Math.min(Math.min(d1, d2), Math.min(d3, d4));\n  }\n\n","sourceOld":"  // NOTE: incoming args never cross the dateline, since they are a BKD cell\n  private static double approxBestDistance(double minLat, double maxLat, double minLon, double maxLon, double pointLat, double pointLon) {\n    \n    // TODO: can we make this the trueBestDistance?  I.e., minimum distance between the point and ANY point on the box?  we can speed things\n    // up if so, but not enrolling any BKD cell whose true best distance is > bottom of the current hit queue\n\n    if (pointLat >= minLat && pointLat <= maxLat && pointLon >= minLon && pointLon <= maxLon) {\n      // point is inside the cell!\n      return 0.0;\n    }\n\n    double d1 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, minLon);\n    double d2 = SloppyMath.haversinMeters(pointLat, pointLon, minLat, maxLon);\n    double d3 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, maxLon);\n    double d4 = SloppyMath.haversinMeters(pointLat, pointLon, maxLat, minLon);\n    return Math.min(Math.min(d1, d2), Math.min(d3, d4));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["c728c2c4e564b70110b013139d764abe136033f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c728c2c4e564b70110b013139d764abe136033f2":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["c728c2c4e564b70110b013139d764abe136033f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c728c2c4e564b70110b013139d764abe136033f2":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}