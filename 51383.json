{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testRedaction().mjava","commits":[{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testRedaction().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRedaction() throws Exception {\n    Path tmpPath = createTempDir();\n    File tmpDir = tmpPath.toFile();\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Set<String> redacted = new HashSet<>(realManager.getClusterStateProvider().getLiveNodes());\n    redacted.addAll(realManager.getClusterStateProvider().getClusterState().getCollectionStates().keySet());\n    snapshotCloudManager.saveSnapshot(tmpDir, true, true);\n    for (String key : SnapshotCloudManager.REQUIRED_KEYS) {\n      File src = new File(tmpDir, key + \".json\");\n      assertTrue(src.toString() + \" doesn't exist\", src.exists());\n      String data = IOUtils.toString(new FileInputStream(src), Charset.forName(\"UTF-8\"));\n      assertFalse(\"empty data in \" + src, data.trim().isEmpty());\n      for (String redactedName : redacted) {\n        assertFalse(\"redacted name \" + redactedName + \" found in \" + src, data.contains(redactedName));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e08090077035a6351996c50fec2cfa71699280","date":1568227670,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testRedaction().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testRedaction().mjava","sourceNew":"  @Test\n  public void testRedaction() throws Exception {\n    Path tmpPath = createTempDir();\n    File tmpDir = tmpPath.toFile();\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Set<String> redacted = new HashSet<>(realManager.getClusterStateProvider().getLiveNodes());\n    redacted.addAll(realManager.getClusterStateProvider().getClusterState().getCollectionStates().keySet());\n    snapshotCloudManager.saveSnapshot(tmpDir, true, true);\n    for (String key : SnapshotCloudManager.REQUIRED_KEYS) {\n      File src = new File(tmpDir, key + \".json\");\n      assertTrue(src.toString() + \" doesn't exist\", src.exists());\n      try (FileInputStream is = new FileInputStream(src)) {\n        String data = IOUtils.toString(is, Charset.forName(\"UTF-8\"));\n        assertFalse(\"empty data in \" + src, data.trim().isEmpty());\n        for (String redactedName : redacted) {\n          assertFalse(\"redacted name \" + redactedName + \" found in \" + src, data.contains(redactedName));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRedaction() throws Exception {\n    Path tmpPath = createTempDir();\n    File tmpDir = tmpPath.toFile();\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Set<String> redacted = new HashSet<>(realManager.getClusterStateProvider().getLiveNodes());\n    redacted.addAll(realManager.getClusterStateProvider().getClusterState().getCollectionStates().keySet());\n    snapshotCloudManager.saveSnapshot(tmpDir, true, true);\n    for (String key : SnapshotCloudManager.REQUIRED_KEYS) {\n      File src = new File(tmpDir, key + \".json\");\n      assertTrue(src.toString() + \" doesn't exist\", src.exists());\n      String data = IOUtils.toString(new FileInputStream(src), Charset.forName(\"UTF-8\"));\n      assertFalse(\"empty data in \" + src, data.trim().isEmpty());\n      for (String redactedName : redacted) {\n        assertFalse(\"redacted name \" + redactedName + \" found in \" + src, data.contains(redactedName));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e01fcbda8c04bde654f99836a2f8813f9444f3","date":1589564391,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testRedaction().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testRedaction().mjava","sourceNew":"  @Test\n  public void testRedaction() throws Exception {\n    Path tmpPath = createTempDir();\n    File tmpDir = tmpPath.toFile();\n    Set<String> redacted = new HashSet<>(realManager.getClusterStateProvider().getLiveNodes());\n    try (SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null)) {\n      redacted.addAll(realManager.getClusterStateProvider().getClusterState().getCollectionStates().keySet());\n      snapshotCloudManager.saveSnapshot(tmpDir, true, true);\n    }\n    for (String key : SnapshotCloudManager.REQUIRED_KEYS) {\n      File src = new File(tmpDir, key + \".json\");\n      assertTrue(src.toString() + \" doesn't exist\", src.exists());\n      try (FileInputStream is = new FileInputStream(src)) {\n        String data = IOUtils.toString(is, Charset.forName(\"UTF-8\"));\n        assertFalse(\"empty data in \" + src, data.trim().isEmpty());\n        for (String redactedName : redacted) {\n          assertFalse(\"redacted name \" + redactedName + \" found in \" + src, data.contains(redactedName));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRedaction() throws Exception {\n    Path tmpPath = createTempDir();\n    File tmpDir = tmpPath.toFile();\n    SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null);\n    Set<String> redacted = new HashSet<>(realManager.getClusterStateProvider().getLiveNodes());\n    redacted.addAll(realManager.getClusterStateProvider().getClusterState().getCollectionStates().keySet());\n    snapshotCloudManager.saveSnapshot(tmpDir, true, true);\n    for (String key : SnapshotCloudManager.REQUIRED_KEYS) {\n      File src = new File(tmpDir, key + \".json\");\n      assertTrue(src.toString() + \" doesn't exist\", src.exists());\n      try (FileInputStream is = new FileInputStream(src)) {\n        String data = IOUtils.toString(is, Charset.forName(\"UTF-8\"));\n        assertFalse(\"empty data in \" + src, data.trim().isEmpty());\n        for (String redactedName : redacted) {\n          assertFalse(\"redacted name \" + redactedName + \" found in \" + src, data.contains(redactedName));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#testRedaction().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRedaction() throws Exception {\n    Path tmpPath = createTempDir();\n    File tmpDir = tmpPath.toFile();\n    Set<String> redacted = new HashSet<>(realManager.getClusterStateProvider().getLiveNodes());\n    try (SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(realManager, null)) {\n      redacted.addAll(realManager.getClusterStateProvider().getClusterState().getCollectionStates().keySet());\n      snapshotCloudManager.saveSnapshot(tmpDir, true, true);\n    }\n    for (String key : SnapshotCloudManager.REQUIRED_KEYS) {\n      File src = new File(tmpDir, key + \".json\");\n      assertTrue(src.toString() + \" doesn't exist\", src.exists());\n      try (FileInputStream is = new FileInputStream(src)) {\n        String data = IOUtils.toString(is, Charset.forName(\"UTF-8\"));\n        assertFalse(\"empty data in \" + src, data.trim().isEmpty());\n        for (String redactedName : redacted) {\n          assertFalse(\"redacted name \" + redactedName + \" found in \" + src, data.contains(redactedName));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["58e08090077035a6351996c50fec2cfa71699280"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58e08090077035a6351996c50fec2cfa71699280":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["58e08090077035a6351996c50fec2cfa71699280"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"58e08090077035a6351996c50fec2cfa71699280":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}