{"path":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","commits":[{"id":"d04b321158481d3895702b3cbf6821a3083e6c15","date":1120530543,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"/dev/null","sourceNew":"  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* check term presence in index here for symmetry with other SimpleTerm's */\n    TermEnum enumerator = reader.terms(getLuceneTerm(fieldName));\n    try {\n      Term it= enumerator.term(); /* same or following index term */\n      if ((it != null)\n          && it.text().equals(getTermText())\n          && it.field().equals(fieldName)) {\n        mtv.visitMatchingTerm(it);\n      } else {\n        System.out.println(\"No term in \" + fieldName + \" field for: \" + toString());\n      }\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* check term presence in index here for symmetry with other SimpleTerm's */\n    TermEnum enumerator = reader.terms(getLuceneTerm(fieldName));\n    try {\n      Term it= enumerator.term(); /* same or following index term */\n      if ((it != null)\n          && it.text().equals(getTermText())\n          && it.field().equals(fieldName)) {\n        mtv.visitMatchingTerm(it);\n      } else {\n        System.out.println(\"No term in \" + fieldName + \" field for: \" + toString());\n      }\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":"  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* check term presence in index here for symmetry with other SimpleTerm's */\n    TermEnum enumerator = reader.terms(getLuceneTerm(fieldName));\n    try {\n      Term it= enumerator.term(); /* same or following index term */\n      if ((it != null)\n          && it.text().equals(getTermText())\n          && it.field().equals(fieldName)) {\n        mtv.visitMatchingTerm(it);\n      } else {\n        System.out.println(\"No term in \" + fieldName + \" field for: \" + toString());\n      }\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* check term presence in index here for symmetry with other SimpleTerm's */\n    TermEnum enumerator = reader.terms(getLuceneTerm(fieldName));\n    try {\n      Term it= enumerator.term(); /* same or following index term */\n      if ((it != null)\n          && it.text().equals(getTermText())\n          && it.field().equals(fieldName)) {\n        mtv.visitMatchingTerm(it);\n      }\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* check term presence in index here for symmetry with other SimpleTerm's */\n    TermEnum enumerator = reader.terms(getLuceneTerm(fieldName));\n    try {\n      Term it= enumerator.term(); /* same or following index term */\n      if ((it != null)\n          && it.text().equals(getTermText())\n          && it.field().equals(fieldName)) {\n        mtv.visitMatchingTerm(it);\n      } else {\n        System.out.println(\"No term in \" + fieldName + \" field for: \" + toString());\n      }\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SrndTermQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* check term presence in index here for symmetry with other SimpleTerm's */\n    TermEnum enumerator = reader.terms(getLuceneTerm(fieldName));\n    try {\n      Term it= enumerator.term(); /* same or following index term */\n      if ((it != null)\n          && it.text().equals(getTermText())\n          && it.field().equals(fieldName)) {\n        mtv.visitMatchingTerm(it);\n      }\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    /* check term presence in index here for symmetry with other SimpleTerm's */\n    TermEnum enumerator = reader.terms(getLuceneTerm(fieldName));\n    try {\n      Term it= enumerator.term(); /* same or following index term */\n      if ((it != null)\n          && it.text().equals(getTermText())\n          && it.field().equals(fieldName)) {\n        mtv.visitMatchingTerm(it);\n      }\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d04b321158481d3895702b3cbf6821a3083e6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["d04b321158481d3895702b3cbf6821a3083e6c15"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"d04b321158481d3895702b3cbf6821a3083e6c15":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d04b321158481d3895702b3cbf6821a3083e6c15"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}