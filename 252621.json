{"path":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","commits":[{"id":"11982a7b6834a8571852448312db4624c32990b5","date":1321300684,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf795ee457272965bd751f513787065bbf0a650a","date":1385015231,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n    if (calcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf, calcDistinct);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n    if (calcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf, calcDistinct);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n    if (calcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf, calcDistinct);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n    if (calcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<String, StatsValues>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf, calcDistinct);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n    if (calcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n    if (calcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(sf, calcDistinct);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n    if (calcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    count += (Long) stv.get(\"count\");\n    missing += (Long) stv.get(\"missing\");\n    if (calcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n\n    updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    updateTypeSpecificStats(stv);\n\n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n\n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n\n    if (computeCardinality) {\n      byte[] data = (byte[]) stv.get(\"cardinality\");\n      hll.union(HLL.fromBytes(data));\n    }\n\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a241b378f80f0ecccceb7c02478cd48fcd6a4e56","date":1431536086,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n\n    if (computeCardinality) {\n      byte[] data = (byte[]) stv.get(\"cardinality\");\n      HLL other = HLL.fromBytes(data);\n      if (hll.getType().equals(HLLType.EMPTY)) {\n        // The HLL.union method goes out of it's way not to modify the \"other\" HLL.\n        // Which means in the case of merging into an \"EMPTY\" HLL (garunteed to happen at\n        // least once in every coordination of shard requests) it always clones all\n        // of the internal storage -- but since we're going to throw \"other\" away after\n        // the merge, this just means a short term doubling of RAM that we can skip.\n        hll = other;\n      } else {\n        hll.union(other);\n      }\n    }\n\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n\n    if (computeCardinality) {\n      byte[] data = (byte[]) stv.get(\"cardinality\");\n      hll.union(HLL.fromBytes(data));\n    }\n\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n\n    if (computeCardinality) {\n      byte[] data = (byte[]) stv.get(\"cardinality\");\n      HLL other = HLL.fromBytes(data);\n      if (hll.getType().equals(HLLType.EMPTY)) {\n        // The HLL.union method goes out of it's way not to modify the \"other\" HLL.\n        // Which means in the case of merging into an \"EMPTY\" HLL (garunteed to happen at\n        // least once in every coordination of shard requests) it always clones all\n        // of the internal storage -- but since we're going to throw \"other\" away after\n        // the merge, this just means a short term doubling of RAM that we can skip.\n        hll = other;\n      } else {\n        hll.union(other);\n      }\n    }\n\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n\n    if (computeCardinality) {\n      byte[] data = (byte[]) stv.get(\"cardinality\");\n      HLL other = HLL.fromBytes(data);\n      if (hll.getType().equals(HLLType.EMPTY)) {\n        // The HLL.union method goes out of it's way not to modify the \"other\" HLL.\n        // Which means in the case of merging into an \"EMPTY\" HLL (garunteed to happen at\n        // least once in every coordination of shard requests) it always clones all\n        // of the internal storage -- but since we're going to throw \"other\" away after\n        // the merge, this just means a short term doubling of RAM that we can skip.\n        hll = other;\n      } else {\n        hll.union(other);\n      }\n    }\n\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":"  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n\n    if (computeCardinality) {\n      byte[] data = (byte[]) stv.get(\"cardinality\");\n      HLL other = HLL.fromBytes(data);\n      if (hll.getType().equals(HLLType.EMPTY)) {\n        // The HLL.union method goes out of it's way not to modify the \"other\" HLL.\n        // Which means in the case of merging into an \"EMPTY\" HLL (garunteed to happen at\n        // least once in every coordination of shard requests) it always clones all\n        // of the internal storage -- but since we're going to throw \"other\" away after\n        // the merge, this just means a short term doubling of RAM that we can skip.\n        hll = other;\n      } else {\n        hll.union(other);\n      }\n    }\n\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n\n    if (computeCardinality) {\n      byte[] data = (byte[]) stv.get(\"cardinality\");\n      HLL other = HLL.fromBytes(data);\n      if (hll.getType().equals(HLLType.EMPTY)) {\n        // The HLL.union method goes out of it's way not to modify the \"other\" HLL.\n        // Which means in the case of merging into an \"EMPTY\" HLL (garunteed to happen at\n        // least once in every coordination of shard requests) it always clones all\n        // of the internal storage -- but since we're going to throw \"other\" away after\n        // the merge, this just means a short term doubling of RAM that we can skip.\n        hll = other;\n      } else {\n        hll.union(other);\n      }\n    }\n\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#accumulate(NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void accumulate(NamedList stv) {\n    if (computeCount) {\n      count += (Long) stv.get(\"count\");\n    }\n    if (computeMissing) {\n      missing += (Long) stv.get(\"missing\");\n    }\n    if (computeCalcDistinct) {\n      distinctValues.addAll((Collection<T>) stv.get(\"distinctValues\"));\n      countDistinct = distinctValues.size();\n    }\n    \n    if (computeMinOrMax) {\n      updateMinMax((T) stv.get(\"min\"), (T) stv.get(\"max\"));\n    }\n\n    if (computeCardinality) {\n      byte[] data = (byte[]) stv.get(\"cardinality\");\n      HLL other = HLL.fromBytes(data);\n      if (hll.getType().equals(HLLType.EMPTY)) {\n        // The HLL.union method goes out of it's way not to modify the \"other\" HLL.\n        // Which means in the case of merging into an \"EMPTY\" HLL (garunteed to happen at\n        // least once in every coordination of shard requests) it always clones all\n        // of the internal storage -- but since we're going to throw \"other\" away after\n        // the merge, this just means a short term doubling of RAM that we can skip.\n        hll = other;\n      } else {\n        hll.union(other);\n      }\n    }\n\n    updateTypeSpecificStats(stv);\n    \n    NamedList f = (NamedList) stv.get(FACETS);\n    if (f == null) {\n      return;\n    }\n    \n    for (int i = 0; i < f.size(); i++) {\n      String field = f.getName(i);\n      NamedList vals = (NamedList) f.getVal(i);\n      Map<String, StatsValues> addTo = facets.get(field);\n      if (addTo == null) {\n        addTo = new HashMap<>();\n        facets.put(field, addTo);\n      }\n      for (int j = 0; j < vals.size(); j++) {\n        String val = vals.getName(j);\n        StatsValues vvals = addTo.get(val);\n        if (vvals == null) {\n          vvals = StatsValuesFactory.createStatsValues(statsField);\n          addTo.put(val, vvals);\n        }\n        vvals.accumulate((NamedList) vals.getVal(j));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["11982a7b6834a8571852448312db4624c32990b5","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bf795ee457272965bd751f513787065bbf0a650a"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a241b378f80f0ecccceb7c02478cd48fcd6a4e56","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["a241b378f80f0ecccceb7c02478cd48fcd6a4e56"],"a241b378f80f0ecccceb7c02478cd48fcd6a4e56":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"bf795ee457272965bd751f513787065bbf0a650a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"283ff02f401ec3e7a2fad73643970f052383fb0c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["283ff02f401ec3e7a2fad73643970f052383fb0c","1002283cfd29923d517db7c33e07bb54aac7acd4"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7530de27b87b961b51f01bd1299b7004d46e8823","bf795ee457272965bd751f513787065bbf0a650a"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"7530de27b87b961b51f01bd1299b7004d46e8823":["11982a7b6834a8571852448312db4624c32990b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"11982a7b6834a8571852448312db4624c32990b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"b94236357aaa22b76c10629851fe4e376e0cea82":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["a241b378f80f0ecccceb7c02478cd48fcd6a4e56"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a241b378f80f0ecccceb7c02478cd48fcd6a4e56":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"bf795ee457272965bd751f513787065bbf0a650a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["4a4e2c829188fb99886a64558664d79c9ac0fdf1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"283ff02f401ec3e7a2fad73643970f052383fb0c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11982a7b6834a8571852448312db4624c32990b5"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bf795ee457272965bd751f513787065bbf0a650a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"11982a7b6834a8571852448312db4624c32990b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}