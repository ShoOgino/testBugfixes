{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(origReader);\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(origReader);\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(origReader);\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04ecceea775208973388bb5bcc129d661ca1f9b6","date":1327925961,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(SlowCompositeReaderWrapper.wrap(origReader));\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(origReader);\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(SlowCompositeReaderWrapper.wrap(origReader));\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(origReader);\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b","date":1328624680,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelAtomicReader pr = new ParallelAtomicReader.Builder(true)\n      .add(SlowCompositeReaderWrapper.wrap(origReader)).build();\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(SlowCompositeReaderWrapper.wrap(origReader));\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b385e33541f6749e71618c9ab36fad908a7ed0","date":1328629771,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(SlowCompositeReaderWrapper.wrap(origReader));\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelAtomicReader pr = new ParallelAtomicReader.Builder(true)\n      .add(SlowCompositeReaderWrapper.wrap(origReader)).build();\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelAtomicReader pr = new ParallelAtomicReader(SlowCompositeReaderWrapper.wrap(origReader));\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelReader pr = new ParallelReader(true);\n    pr.add(SlowCompositeReaderWrapper.wrap(origReader));\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#testComplementsWithParallerReader().mjava","sourceNew":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelAtomicReader pr = new ParallelAtomicReader(SlowCompositeReaderWrapper.wrap(origReader));\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","sourceOld":"  /**\n   * Test that complements does not cause a failure when using a parallel reader\n   */\n  @Test\n  public void testComplementsWithParallerReader() throws Exception {\n    IndexReader origReader = indexReader; \n    ParallelAtomicReader pr = new ParallelAtomicReader(SlowCompositeReaderWrapper.wrap(origReader));\n    indexReader = pr;\n    try {\n      doTestComplements();\n    } finally {\n      indexReader = origReader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6e09a3a223be07d75777515a717312813221fe58"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04ecceea775208973388bb5bcc129d661ca1f9b6":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"6e09a3a223be07d75777515a717312813221fe58":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["89f15687f60bd49cd3d9de427e85c17fd9397d61","04ecceea775208973388bb5bcc129d661ca1f9b6"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"08b385e33541f6749e71618c9ab36fad908a7ed0":["6e09a3a223be07d75777515a717312813221fe58"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ecf541c11d0df215aa1ea806f826d88fb9b5b9b":["08b385e33541f6749e71618c9ab36fad908a7ed0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"04ecceea775208973388bb5bcc129d661ca1f9b6":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6e09a3a223be07d75777515a717312813221fe58":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ecf541c11d0df215aa1ea806f826d88fb9b5b9b"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["04ecceea775208973388bb5bcc129d661ca1f9b6","d083e83f225b11e5fdd900e83d26ddb385b6955c","5cab9a86bd67202d20b6adc463008c8e982b070a","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}