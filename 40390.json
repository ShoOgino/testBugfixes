{"path":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#assertOpenACLUnsafeAllover(SolrZkClient,String,List[String]).mjava","commits":[{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#assertOpenACLUnsafeAllover(SolrZkClient,String,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertOpenACLUnsafeAllover(SolrZkClient zkClient, String path, List<String> verifiedList) throws Exception {\n    List<ACL> acls = zkClient.getSolrZooKeeper().getACL(path, new Stat());\n    if (log.isInfoEnabled()) {\n      log.info(\"Verifying \" + path);\n    }\n    assertEquals(\"Path \" + path + \" does not have OPEN_ACL_UNSAFE\", ZooDefs.Ids.OPEN_ACL_UNSAFE, acls);\n    verifiedList.add(path);\n    List<String> children = zkClient.getChildren(path, null, false);\n    for (String child : children) {\n      assertOpenACLUnsafeAllover(zkClient, path + ((path.endsWith(\"/\"))?\"\":\"/\") + child, verifiedList);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#assertOpenACLUnsafeAllover(SolrZkClient,String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#assertOpenACLUnsafeAllover(SolrZkClient,String,List[String]).mjava","sourceNew":"  protected void assertOpenACLUnsafeAllover(SolrZkClient zkClient, String path, List<String> verifiedList) throws Exception {\n    List<ACL> acls = zkClient.getSolrZooKeeper().getACL(path, new Stat());\n    if (log.isInfoEnabled()) {\n      log.info(\"Verifying \" + path);\n    }\n    if (ZooDefs.CONFIG_NODE.equals(path)) {\n      // Treat this node specially, from the ZK docs:\n      // The dynamic configuration is stored in a special znode ZooDefs.CONFIG_NODE = /zookeeper/config.\n      // This node by default is read only for all users, except super user and\n      // users that's explicitly configured for write access.\n      assertEquals(\"Path \" + path + \" does not have READ_ACL_UNSAFE\", ZooDefs.Ids.READ_ACL_UNSAFE, acls);\n    } else {\n      assertEquals(\"Path \" + path + \" does not have OPEN_ACL_UNSAFE\", ZooDefs.Ids.OPEN_ACL_UNSAFE, acls);\n    }\n    verifiedList.add(path);\n    List<String> children = zkClient.getChildren(path, null, false);\n    for (String child : children) {\n      assertOpenACLUnsafeAllover(zkClient, path + ((path.endsWith(\"/\")) ? \"\" : \"/\") + child, verifiedList);\n    }\n  }\n\n","sourceOld":"  protected void assertOpenACLUnsafeAllover(SolrZkClient zkClient, String path, List<String> verifiedList) throws Exception {\n    List<ACL> acls = zkClient.getSolrZooKeeper().getACL(path, new Stat());\n    if (log.isInfoEnabled()) {\n      log.info(\"Verifying \" + path);\n    }\n    assertEquals(\"Path \" + path + \" does not have OPEN_ACL_UNSAFE\", ZooDefs.Ids.OPEN_ACL_UNSAFE, acls);\n    verifiedList.add(path);\n    List<String> children = zkClient.getChildren(path, null, false);\n    for (String child : children) {\n      assertOpenACLUnsafeAllover(zkClient, path + ((path.endsWith(\"/\"))?\"\":\"/\") + child, verifiedList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#assertOpenACLUnsafeAllover(SolrZkClient,String,List[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OutOfBoxZkACLAndCredentialsProvidersTest#assertOpenACLUnsafeAllover(SolrZkClient,String,List[String]).mjava","sourceNew":"  protected void assertOpenACLUnsafeAllover(SolrZkClient zkClient, String path, List<String> verifiedList) throws Exception {\n    List<ACL> acls = zkClient.getSolrZooKeeper().getACL(path, new Stat());\n    if (log.isInfoEnabled()) {\n      log.info(\"Verifying {}\", path);\n    }\n    if (ZooDefs.CONFIG_NODE.equals(path)) {\n      // Treat this node specially, from the ZK docs:\n      // The dynamic configuration is stored in a special znode ZooDefs.CONFIG_NODE = /zookeeper/config.\n      // This node by default is read only for all users, except super user and\n      // users that's explicitly configured for write access.\n      assertEquals(\"Path \" + path + \" does not have READ_ACL_UNSAFE\", ZooDefs.Ids.READ_ACL_UNSAFE, acls);\n    } else {\n      assertEquals(\"Path \" + path + \" does not have OPEN_ACL_UNSAFE\", ZooDefs.Ids.OPEN_ACL_UNSAFE, acls);\n    }\n    verifiedList.add(path);\n    List<String> children = zkClient.getChildren(path, null, false);\n    for (String child : children) {\n      assertOpenACLUnsafeAllover(zkClient, path + ((path.endsWith(\"/\")) ? \"\" : \"/\") + child, verifiedList);\n    }\n  }\n\n","sourceOld":"  protected void assertOpenACLUnsafeAllover(SolrZkClient zkClient, String path, List<String> verifiedList) throws Exception {\n    List<ACL> acls = zkClient.getSolrZooKeeper().getACL(path, new Stat());\n    if (log.isInfoEnabled()) {\n      log.info(\"Verifying \" + path);\n    }\n    if (ZooDefs.CONFIG_NODE.equals(path)) {\n      // Treat this node specially, from the ZK docs:\n      // The dynamic configuration is stored in a special znode ZooDefs.CONFIG_NODE = /zookeeper/config.\n      // This node by default is read only for all users, except super user and\n      // users that's explicitly configured for write access.\n      assertEquals(\"Path \" + path + \" does not have READ_ACL_UNSAFE\", ZooDefs.Ids.READ_ACL_UNSAFE, acls);\n    } else {\n      assertEquals(\"Path \" + path + \" does not have OPEN_ACL_UNSAFE\", ZooDefs.Ids.OPEN_ACL_UNSAFE, acls);\n    }\n    verifiedList.add(path);\n    List<String> children = zkClient.getChildren(path, null, false);\n    for (String child : children) {\n      assertOpenACLUnsafeAllover(zkClient, path + ((path.endsWith(\"/\")) ? \"\" : \"/\") + child, verifiedList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["c83f985d9828d30801541f1eed26aa3169646baf"],"c83f985d9828d30801541f1eed26aa3169646baf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c83f985d9828d30801541f1eed26aa3169646baf"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"c83f985d9828d30801541f1eed26aa3169646baf":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}