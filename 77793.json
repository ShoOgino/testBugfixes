{"path":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","commits":[{"id":"e77feb4ffb7321af961c838aeafdd07ef1f307d4","date":1305577750,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = new CachingCollector(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = new CachingCollector(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6703e55954db440ab8a2bc2a615c4fa9f66b602b","date":1305691248,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = new CachingCollector(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = new CachingCollector(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"/dev/null","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalCollectorOnReplay().mjava","sourceNew":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  public void testIllegalCollectorOnReplay() throws Exception {\n    // tests that the Collector passed to replay() has an out-of-order mode that\n    // is valid with the Collector passed to the ctor\n    \n    // 'src' Collector does not support out-of-order\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    cc.replay(new NoOpCollector(false)); // this call should not fail\n\n    // 'src' Collector supports out-of-order\n    cc = CachingCollector.create(new NoOpCollector(true), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    for (int i = 0; i < 10; i++) cc.collect(i);\n    cc.replay(new NoOpCollector(true)); // this call should not fail\n    try {\n      cc.replay(new NoOpCollector(false)); // this call should fail\n      fail(\"should have failed if an in-order Collector was given to replay(), \" +\n      \t\t\"while CachingCollector was initialized with out-of-order collection\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["e77feb4ffb7321af961c838aeafdd07ef1f307d4"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"e77feb4ffb7321af961c838aeafdd07ef1f307d4":["6703e55954db440ab8a2bc2a615c4fa9f66b602b"],"6703e55954db440ab8a2bc2a615c4fa9f66b602b":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e77feb4ffb7321af961c838aeafdd07ef1f307d4","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}