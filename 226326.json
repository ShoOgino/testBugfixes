{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","commits":[{"id":"59aedb6464136dd3cd73d343e814ba8acf3da155","date":1350729779,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"/dev/null","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5),\n        }));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"414aae1db83a83d247caa9514e383e4ca3d43da5","date":1350824365,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5),\n        }));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5),\n        }));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"/dev/null","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5),\n        }));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"889901f1b564e80868c57d5f3743f4ddbb4ce44a","date":1375181138,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(shuffle(\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5),\n        }));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":["59aedb6464136dd3cd73d343e814ba8acf3da155"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(shuffle(\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5),\n        }));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqPayloadArrayIterator(shuffle(\n          new TermFreqPayload(\"hambone\", 6),\n          new TermFreqPayload(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqArrayIterator(shuffle(\n          new TermFreq(\"hambone\", 6),\n          new TermFreq(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new TermFreqPayloadArrayIterator(shuffle(\n          new TermFreqPayload(\"hambone\", 6),\n          new TermFreqPayload(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e0095ef720d1b8e7406847147af69f19af3ab6","date":1383131477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, false);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33f87fe6faf49dfc1e66f45e841e24838c2f725c","date":1383142987,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, false);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = _TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = TestUtil.createTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = TestUtil.createTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = TestUtil.getTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    File tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n    tmpDir.mkdir();\n\n    File path = new File(tmpDir, \"suggester\");\n\n    OutputStream os = new FileOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = new FileInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n    a.close();\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n    a.close();\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n    IOUtils.close(a, tempDir);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    AnalyzingSuggester suggester = new AnalyzingSuggester(a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e859719dc778fb66d3d21e7be08cd408fc2bde98","date":1446717611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) {\n          }\n        };\n      }\n    };\n\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n    IOUtils.close(a, tempDir);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) throws IOException {\n          }\n        };\n      }\n    };\n\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n    IOUtils.close(a, tempDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fac252ef8e3d0bbff9303ffbf675e824a729dfaf","date":1537347776,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testDupSurfaceFormsMissingResults().mjava","sourceNew":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(r -> {}, new CannedTokenStream(\n            token(\"hairy\", 1, 1),\n            token(\"smelly\", 0, 1),\n            token(\"dog\", 1, 1)));\n      }\n    };\n\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n    IOUtils.close(a, tempDir);\n  }\n\n","sourceOld":"  public void testDupSurfaceFormsMissingResults() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, true);\n        \n        return new TokenStreamComponents(tokenizer) {\n\n          @Override\n          public TokenStream getTokenStream() {\n            return new CannedTokenStream(new Token[] {\n                token(\"hairy\", 1, 1),\n                token(\"smelly\", 0, 1),\n                token(\"dog\", 1, 1),\n              });\n          }\n         \n          @Override\n          protected void setReader(final Reader reader) {\n          }\n        };\n      }\n    };\n\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", a, a, 0, 256, -1, true);\n\n    suggester.build(new InputArrayIterator(shuffle(\n          new Input(\"hambone\", 6),\n          new Input(\"nellie\", 5))));\n\n    List<LookupResult> results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n\n    // Try again after save/load:\n    Path tmpDir = createTempDir(\"AnalyzingSuggesterTest\");\n\n    Path path = tmpDir.resolve(\"suggester\");\n\n    OutputStream os = Files.newOutputStream(path);\n    suggester.store(os);\n    os.close();\n\n    InputStream is = Files.newInputStream(path);\n    suggester.load(is);\n    is.close();\n\n    results = suggester.lookup(\"nellie\", false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"hambone\", results.get(0).key);\n    assertEquals(6, results.get(0).value);\n    assertEquals(\"nellie\", results.get(1).key);\n    assertEquals(5, results.get(1).value);\n    IOUtils.close(a, tempDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59aedb6464136dd3cd73d343e814ba8acf3da155":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["33f87fe6faf49dfc1e66f45e841e24838c2f725c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"414aae1db83a83d247caa9514e383e4ca3d43da5":["59aedb6464136dd3cd73d343e814ba8acf3da155"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"33f87fe6faf49dfc1e66f45e841e24838c2f725c":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","a56958d7f71a28824f20031ffbb2e13502a0274e"],"62e52115b56781006682fd92c6938efaf174304d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","414aae1db83a83d247caa9514e383e4ca3d43da5"],"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["414aae1db83a83d247caa9514e383e4ca3d43da5"],"889901f1b564e80868c57d5f3743f4ddbb4ce44a":["414aae1db83a83d247caa9514e383e4ca3d43da5"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["f4abec28b874149a7223e32cc7a01704c27790de"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["889901f1b564e80868c57d5f3743f4ddbb4ce44a"]},"commit2Childs":{"59aedb6464136dd3cd73d343e814ba8acf3da155":["414aae1db83a83d247caa9514e383e4ca3d43da5"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"414aae1db83a83d247caa9514e383e4ca3d43da5":["62e52115b56781006682fd92c6938efaf174304d","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"33f87fe6faf49dfc1e66f45e841e24838c2f725c":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"62e52115b56781006682fd92c6938efaf174304d":[],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59aedb6464136dd3cd73d343e814ba8acf3da155","62e52115b56781006682fd92c6938efaf174304d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"889901f1b564e80868c57d5f3743f4ddbb4ce44a":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["33f87fe6faf49dfc1e66f45e841e24838c2f725c"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","62e52115b56781006682fd92c6938efaf174304d","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}