{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a93d0c51fc69418718fea466699e1790d145ae32","date":1378756747,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, (SimpleTextTerms) terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp, maxDoc);\n        termsCache.put(field, (SimpleTextTerms) terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp);\n        termsCache.put(field, (SimpleTextTerms) terms);\n      }\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    SimpleTextTerms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp, maxDoc);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp, maxDoc);\n        termsCache.put(field, (SimpleTextTerms) terms);\n      }\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader#terms(String).mjava","sourceNew":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    SimpleTextTerms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp, maxDoc);\n        termsCache.put(field, terms);\n      }\n    }\n    return terms;\n  }\n\n","sourceOld":"  @Override\n  synchronized public Terms terms(String field) throws IOException {\n    Terms terms = termsCache.get(field);\n    if (terms == null) {\n      Long fp = fields.get(field);\n      if (fp == null) {\n        return null;\n      } else {\n        terms = new SimpleTextTerms(field, fp, maxDoc);\n        termsCache.put(field, (SimpleTextTerms) terms);\n      }\n    }\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["3995f83351082af8ae83bb017e63c56818fc1568","d943163030bbd7a9caf93cb5fea92257390a2a99"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["3995f83351082af8ae83bb017e63c56818fc1568"],"a93d0c51fc69418718fea466699e1790d145ae32":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3995f83351082af8ae83bb017e63c56818fc1568":["a93d0c51fc69418718fea466699e1790d145ae32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d943163030bbd7a9caf93cb5fea92257390a2a99"]},"commit2Childs":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a93d0c51fc69418718fea466699e1790d145ae32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a93d0c51fc69418718fea466699e1790d145ae32":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}