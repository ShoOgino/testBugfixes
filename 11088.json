{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","sourceNew":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue\n            .add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","sourceOld":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue\n            .add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9773480aa9e800d0a232ab6ccac265e874b0c51","date":1349461188,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","sourceNew":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","sourceOld":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue\n            .add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","sourceNew":"  void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","sourceNew":"  void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","sourceNew":null,"sourceOld":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9773480aa9e800d0a232ab6ccac265e874b0c51":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7af110b00ea8df9429309d83e38e0533d82e144f":["d9773480aa9e800d0a232ab6ccac265e874b0c51"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d9773480aa9e800d0a232ab6ccac265e874b0c51","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["d9773480aa9e800d0a232ab6ccac265e874b0c51","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7af110b00ea8df9429309d83e38e0533d82e144f"]},"commit2Childs":{"d9773480aa9e800d0a232ab6ccac265e874b0c51":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d9773480aa9e800d0a232ab6ccac265e874b0c51"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}