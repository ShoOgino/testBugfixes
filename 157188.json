{"path":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","commits":[{"id":"69cad0546debf9ce9d44e309ecfa26760fecd5d8","date":1425846082,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginRegistry#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info, solrCore);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.tag, name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info, solrCore);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.tag, name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info, solrCore);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.tag, name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      log.info(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n          infos.stream().map(i -> i.name).collect(Collectors.toList()));\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      log.info(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n          infos.stream().map(i -> i.name).collect(Collectors.toList()));\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      log.debug(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n          infos.stream().map(i -> i.name).collect(Collectors.toList()));\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      log.info(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n          infos.stream().map(i -> i.name).collect(Collectors.toList()));\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      log.debug(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n          infos.stream().map(i -> i.name).collect(Collectors.toList()));\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      log.debug(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n          infos.stream().map(i -> i.name).collect(Collectors.toList()));\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n        }\n      }\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      if (log.isDebugEnabled()) {\n        log.debug(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n            infos.stream().map(i -> i.name).collect(Collectors.toList()));\n      }\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      log.debug(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n          infos.stream().map(i -> i.name).collect(Collectors.toList()));\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag#init(Map[String,T],SolrCore,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) {\n        log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n      }\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      if (log.isDebugEnabled()) {\n        log.debug(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n            infos.stream().map(i -> i.name).collect(Collectors.toList()));\n      }\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes the plugins after reading the meta data from {@link org.apache.solr.core.SolrConfig}.\n   *\n   * @param defaults These will be registered if not explicitly specified\n   */\n  void init(Map<String, T> defaults, SolrCore solrCore, List<PluginInfo> infos) {\n    core = solrCore;\n    for (PluginInfo info : infos) {\n      PluginHolder<T> o = createPlugin(info);\n      String name = info.name;\n      if (meta.clazz.equals(SolrRequestHandler.class)) name = RequestHandlers.normalize(info.name);\n      PluginHolder<T> old = put(name, o);\n      if (old != null) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Multiple entries of {} with name {}\", meta.getCleanTag(), name);\n        }\n      }\n    }\n    if (infos.size() > 0) { // Aggregate logging\n      if (log.isDebugEnabled()) {\n        log.debug(\"[{}] Initialized {} plugins of type {}: {}\", solrCore.getName(), infos.size(), meta.getCleanTag(),\n            infos.stream().map(i -> i.name).collect(Collectors.toList()));\n      }\n    }\n    for (Map.Entry<String, T> e : defaults.entrySet()) {\n      if (!contains(e.getKey())) {\n        put(e.getKey(), new PluginHolder<T>(null, e.getValue()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"126d6ad24eed13163ba0959435d5a80e5672837c":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["126d6ad24eed13163ba0959435d5a80e5672837c"],"140be51d03394488536f4aacedace29f9b318347":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["0d62172dd2fc1195c7e475550ac394a9948a18ae"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","69cad0546debf9ce9d44e309ecfa26760fecd5d8"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["140be51d03394488536f4aacedace29f9b318347","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69cad0546debf9ce9d44e309ecfa26760fecd5d8":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}