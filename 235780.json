{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_select(List[T],double,int,int).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_select(List[T],double,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_select(List[T],double,int,int).mjava","sourceNew":"  private static <T extends Comparable<T>> void select(List<T> list, double place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place < result.low) {\n      select(list, place, begin, result.low);\n    } else if (place > result.high) {\n      select(list, place, result.high, end);\n    } else {\n      if (result.low == (int) (Math.floor(place)) && result.low > begin) {\n        select(list, result.low, begin, result.low);\n      }\n      if (result.high == (int) (Math.ceil(place)) && result.high < end) {\n        select(list, result.high, result.high, end);\n      }\n    }\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> void select(List<T> list, double place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place < result.low) {\n      select(list, place, begin, result.low);\n    } else if (place > result.high) {\n      select(list, place, result.high, end);\n    } else {\n      if (result.low == (int) (Math.floor(place)) && result.low > begin) {\n        select(list, result.low, begin, result.low);\n      }\n      if (result.high == (int) (Math.ceil(place)) && result.high < end) {\n        select(list, result.high, result.high, end);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_select(List[T],double,int,int).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator#[T-extends-Comparable[T]]_select(List[T],double,int,int).mjava","sourceNew":"  private static <T extends Comparable<T>> void select(List<T> list, double place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    OrdinalCalculator.Point result = partition(list, begin, end, split);\n\n    if (place < result.low) {\n      select(list, place, begin, result.low);\n    } else if (place > result.high) {\n      select(list, place, result.high, end);\n    } else {\n      if (result.low == (int) (Math.floor(place)) && result.low > begin) {\n        select(list, result.low, begin, result.low);\n      }\n      if (result.high == (int) (Math.ceil(place)) && result.high < end) {\n        select(list, result.high, result.high, end);\n      }\n    }\n  }\n\n","sourceOld":"  private static <T extends Comparable<T>> void select(List<T> list, double place, int begin, int end) {\n    T split;\n    if (end - begin < 10) {\n      split = list.get((int) (Math.random() * (end - begin + 1)) + begin);\n    } else {\n      split = split(list, begin, end);\n    }\n\n    Point result = partition(list, begin, end, split);\n\n    if (place < result.low) {\n      select(list, place, begin, result.low);\n    } else if (place > result.high) {\n      select(list, place, result.high, end);\n    } else {\n      if (result.low == (int) (Math.floor(place)) && result.low > begin) {\n        select(list, result.low, begin, result.low);\n      }\n      if (result.high == (int) (Math.ceil(place)) && result.high < end) {\n        select(list, result.high, result.high, end);\n      }\n    }\n  }\n\n","bugFix":["ff403346522eaa9de75403763e297e83a3ea585c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"]},"commit2Childs":{"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}