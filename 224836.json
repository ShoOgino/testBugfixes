{"path":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#testConcurrentQueries().mjava","commits":[{"id":"c99002731351c8c955238845b0038682148eec53","date":1596830766,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#testConcurrentQueries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConcurrentQueries() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(FIRST_COLLECTION);\n\n    CollectionAdminRequest.createCollection(FIRST_COLLECTION, 1, 1).process(client);\n    cluster.waitForActiveCollection(FIRST_COLLECTION, 1, 1);\n\n    SolrDispatchFilter solrDispatchFilter = cluster.getJettySolrRunner(0).getSolrDispatchFilter();\n\n    RequestRateLimiter.RateLimiterConfig rateLimiterConfig = new RequestRateLimiter.RateLimiterConfig(SolrRequest.SolrRequestType.QUERY,\n        true, 1, DEFAULT_SLOT_ACQUISITION_TIMEOUT_MS, 5 /* allowedRequests */, true /* isSlotBorrowing */);\n    // We are fine with a null FilterConfig here since we ensure that MockBuilder never invokes its parent here\n    RateLimitManager.Builder builder = new MockBuilder(null /* dummy FilterConfig */, new MockRequestRateLimiter(rateLimiterConfig, 5));\n    RateLimitManager rateLimitManager = builder.build();\n\n    solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n\n    processTest(client);\n\n    MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n\n    assertEquals(25, mockQueryRateLimiter.incomingRequestCount.get());\n    assertTrue(\"Incoming accepted new request count did not match. Expected 5 incoming \" + mockQueryRateLimiter.acceptedNewRequestCount.get(),\n        mockQueryRateLimiter.acceptedNewRequestCount.get() < 25);\n    assertTrue(\"Incoming rejected new request count did not match. Expected 20 incoming \" + mockQueryRateLimiter.rejectedRequestCount.get(),\n        mockQueryRateLimiter.rejectedRequestCount.get() > 0);\n    assertEquals(mockQueryRateLimiter.incomingRequestCount.get(),\n        mockQueryRateLimiter.acceptedNewRequestCount.get() + mockQueryRateLimiter.rejectedRequestCount.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb0add11bccdea6f8a289cec694aa9f3895ef4e","date":1597165973,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#testConcurrentQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#testConcurrentQueries().mjava","sourceNew":"  @Test\n  public void testConcurrentQueries() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(FIRST_COLLECTION);\n\n    CollectionAdminRequest.createCollection(FIRST_COLLECTION, 1, 1).process(client);\n    cluster.waitForActiveCollection(FIRST_COLLECTION, 1, 1);\n\n    SolrDispatchFilter solrDispatchFilter = cluster.getJettySolrRunner(0).getSolrDispatchFilter();\n\n    RequestRateLimiter.RateLimiterConfig rateLimiterConfig = new RequestRateLimiter.RateLimiterConfig(SolrRequest.SolrRequestType.QUERY,\n        true, 1, DEFAULT_SLOT_ACQUISITION_TIMEOUT_MS, 5 /* allowedRequests */, true /* isSlotBorrowing */);\n    // We are fine with a null FilterConfig here since we ensure that MockBuilder never invokes its parent here\n    RateLimitManager.Builder builder = new MockBuilder(null /* dummy FilterConfig */, new MockRequestRateLimiter(rateLimiterConfig, 5));\n    RateLimitManager rateLimitManager = builder.build();\n\n    solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n\n    int numDocs = TEST_NIGHTLY ? 10000 : 100;\n\n    processTest(client, numDocs, 350 /* number of queries */);\n\n    MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n\n    assertEquals(350, mockQueryRateLimiter.incomingRequestCount.get());\n\n    assertTrue(mockQueryRateLimiter.acceptedNewRequestCount.get() > 0);\n    assertTrue((mockQueryRateLimiter.acceptedNewRequestCount.get() == mockQueryRateLimiter.incomingRequestCount.get()\n        || mockQueryRateLimiter.rejectedRequestCount.get() > 0));\n    assertEquals(mockQueryRateLimiter.incomingRequestCount.get(),\n        mockQueryRateLimiter.acceptedNewRequestCount.get() + mockQueryRateLimiter.rejectedRequestCount.get());\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentQueries() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(FIRST_COLLECTION);\n\n    CollectionAdminRequest.createCollection(FIRST_COLLECTION, 1, 1).process(client);\n    cluster.waitForActiveCollection(FIRST_COLLECTION, 1, 1);\n\n    SolrDispatchFilter solrDispatchFilter = cluster.getJettySolrRunner(0).getSolrDispatchFilter();\n\n    RequestRateLimiter.RateLimiterConfig rateLimiterConfig = new RequestRateLimiter.RateLimiterConfig(SolrRequest.SolrRequestType.QUERY,\n        true, 1, DEFAULT_SLOT_ACQUISITION_TIMEOUT_MS, 5 /* allowedRequests */, true /* isSlotBorrowing */);\n    // We are fine with a null FilterConfig here since we ensure that MockBuilder never invokes its parent here\n    RateLimitManager.Builder builder = new MockBuilder(null /* dummy FilterConfig */, new MockRequestRateLimiter(rateLimiterConfig, 5));\n    RateLimitManager rateLimitManager = builder.build();\n\n    solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n\n    processTest(client);\n\n    MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n\n    assertEquals(25, mockQueryRateLimiter.incomingRequestCount.get());\n    assertTrue(\"Incoming accepted new request count did not match. Expected 5 incoming \" + mockQueryRateLimiter.acceptedNewRequestCount.get(),\n        mockQueryRateLimiter.acceptedNewRequestCount.get() < 25);\n    assertTrue(\"Incoming rejected new request count did not match. Expected 20 incoming \" + mockQueryRateLimiter.rejectedRequestCount.get(),\n        mockQueryRateLimiter.rejectedRequestCount.get() > 0);\n    assertEquals(mockQueryRateLimiter.incomingRequestCount.get(),\n        mockQueryRateLimiter.acceptedNewRequestCount.get() + mockQueryRateLimiter.rejectedRequestCount.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2460e6297ab2074eb39fc76a9806e0a0b640c88c","date":1601285226,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#testConcurrentQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/TestRequestRateLimiter#testConcurrentQueries().mjava","sourceNew":"  @Test\n  public void testConcurrentQueries() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(FIRST_COLLECTION);\n\n    CollectionAdminRequest.createCollection(FIRST_COLLECTION, 1, 1).process(client);\n    cluster.waitForActiveCollection(FIRST_COLLECTION, 1, 1);\n\n    SolrDispatchFilter solrDispatchFilter = cluster.getJettySolrRunner(0).getSolrDispatchFilter();\n\n    RateLimiterConfig rateLimiterConfig = new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY,\n        true, 1, DEFAULT_SLOT_ACQUISITION_TIMEOUT_MS, 5 /* allowedRequests */, true /* isSlotBorrowing */);\n    // We are fine with a null FilterConfig here since we ensure that MockBuilder never invokes its parent here\n    RateLimitManager.Builder builder = new MockBuilder(null /* dummy SolrZkClient */, new MockRequestRateLimiter(rateLimiterConfig, 5));\n    RateLimitManager rateLimitManager = builder.build();\n\n    solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n\n    int numDocs = TEST_NIGHTLY ? 10000 : 100;\n\n    processTest(client, numDocs, 350 /* number of queries */);\n\n    MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n\n    assertEquals(350, mockQueryRateLimiter.incomingRequestCount.get());\n\n    assertTrue(mockQueryRateLimiter.acceptedNewRequestCount.get() > 0);\n    assertTrue((mockQueryRateLimiter.acceptedNewRequestCount.get() == mockQueryRateLimiter.incomingRequestCount.get()\n        || mockQueryRateLimiter.rejectedRequestCount.get() > 0));\n    assertEquals(mockQueryRateLimiter.incomingRequestCount.get(),\n        mockQueryRateLimiter.acceptedNewRequestCount.get() + mockQueryRateLimiter.rejectedRequestCount.get());\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentQueries() throws Exception {\n    CloudSolrClient client = cluster.getSolrClient();\n    client.setDefaultCollection(FIRST_COLLECTION);\n\n    CollectionAdminRequest.createCollection(FIRST_COLLECTION, 1, 1).process(client);\n    cluster.waitForActiveCollection(FIRST_COLLECTION, 1, 1);\n\n    SolrDispatchFilter solrDispatchFilter = cluster.getJettySolrRunner(0).getSolrDispatchFilter();\n\n    RequestRateLimiter.RateLimiterConfig rateLimiterConfig = new RequestRateLimiter.RateLimiterConfig(SolrRequest.SolrRequestType.QUERY,\n        true, 1, DEFAULT_SLOT_ACQUISITION_TIMEOUT_MS, 5 /* allowedRequests */, true /* isSlotBorrowing */);\n    // We are fine with a null FilterConfig here since we ensure that MockBuilder never invokes its parent here\n    RateLimitManager.Builder builder = new MockBuilder(null /* dummy FilterConfig */, new MockRequestRateLimiter(rateLimiterConfig, 5));\n    RateLimitManager rateLimitManager = builder.build();\n\n    solrDispatchFilter.replaceRateLimitManager(rateLimitManager);\n\n    int numDocs = TEST_NIGHTLY ? 10000 : 100;\n\n    processTest(client, numDocs, 350 /* number of queries */);\n\n    MockRequestRateLimiter mockQueryRateLimiter = (MockRequestRateLimiter) rateLimitManager.getRequestRateLimiter(SolrRequest.SolrRequestType.QUERY);\n\n    assertEquals(350, mockQueryRateLimiter.incomingRequestCount.get());\n\n    assertTrue(mockQueryRateLimiter.acceptedNewRequestCount.get() > 0);\n    assertTrue((mockQueryRateLimiter.acceptedNewRequestCount.get() == mockQueryRateLimiter.incomingRequestCount.get()\n        || mockQueryRateLimiter.rejectedRequestCount.get() > 0));\n    assertEquals(mockQueryRateLimiter.incomingRequestCount.get(),\n        mockQueryRateLimiter.acceptedNewRequestCount.get() + mockQueryRateLimiter.rejectedRequestCount.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2460e6297ab2074eb39fc76a9806e0a0b640c88c":["0fb0add11bccdea6f8a289cec694aa9f3895ef4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c99002731351c8c955238845b0038682148eec53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0fb0add11bccdea6f8a289cec694aa9f3895ef4e":["c99002731351c8c955238845b0038682148eec53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2460e6297ab2074eb39fc76a9806e0a0b640c88c"]},"commit2Childs":{"2460e6297ab2074eb39fc76a9806e0a0b640c88c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c99002731351c8c955238845b0038682148eec53"],"c99002731351c8c955238845b0038682148eec53":["0fb0add11bccdea6f8a289cec694aa9f3895ef4e"],"0fb0add11bccdea6f8a289cec694aa9f3895ef4e":["2460e6297ab2074eb39fc76a9806e0a0b640c88c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}