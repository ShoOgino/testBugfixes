{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"345334974b9d01795dd7ee84115310d2e30587b2","date":1344540064,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    SolrServer lastClient = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastClient + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastClient.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastClient = cjetty.client.solrClient;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.toString(), cjetty.client.solrClient.toString());\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getShards().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    \n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042c474f8983c7bfede807d97ad9faf73ff694cc","date":1355859039,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean,boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":"  /* Returns a non-null string if replicas within the same shard are not consistent.\n   * If expectFailure==false, the exact differences found will be logged since this would be an unexpected failure.\n   * verbose causes extra debugging into to be displayed, even if everything is consistent.\n   */\n  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n\n      try {\n        SolrParams query = params(\"q\",\"*:*\", \"rows\",\"0\", \"distrib\",\"false\", \"tests\",\"checkShardConsistency\"); // \"tests\" is just a tag that won't do anything except be echoed in logs\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (!expectFailure || verbose) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"100000\");\n            query.set(\"sort\",\"id asc\");\n            query.set(\"tests\",\"checkShardConsistency/showDiff\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(String,boolean).mjava","sourceNew":null,"sourceOld":"  protected String checkShardConsistency(String shard, boolean verbose)\n      throws Exception {\n    \n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    if (solrJetties == null) {\n      throw new RuntimeException(\"shard not found:\" + shard + \" keys:\"\n          + shardToJetty.keySet());\n    }\n    long num = -1;\n    long lastNum = -1;\n    String failMessage = null;\n    if (verbose) System.err.println(\"check const of \" + shard);\n    int cnt = 0;\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    assertEquals(\n        \"The client count does not match up with the shard count for slice:\"\n            + shard,\n        zkStateReader.getClusterState().getSlice(DEFAULT_COLLECTION, shard)\n            .getReplicasMap().size(), solrJetties.size());\n\n    CloudJettyRunner lastJetty = null;\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      if (verbose) System.err.println(\"client\" + cnt++);\n      if (verbose) System.err.println(\"PROPS:\" + props);\n      \n      try {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        num = cjetty.client.solrClient.query(query).getResults().getNumFound();\n      } catch (SolrServerException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      } catch (SolrException e) {\n        if (verbose) System.err.println(\"error contacting client: \"\n            + e.getMessage() + \"\\n\");\n        continue;\n      }\n      \n      boolean live = false;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      if (zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        live = true;\n      }\n      if (verbose) System.err.println(\" live:\" + live);\n      \n      if (verbose) System.err.println(\" num:\" + num + \"\\n\");\n      \n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(\n          ZkStateReader.ACTIVE);\n      if (active && live) {\n        if (lastNum > -1 && lastNum != num && failMessage == null) {\n          failMessage = shard + \" is not consistent.  Got \" + lastNum + \" from \" + lastJetty.url + \"lastClient\"\n              + \" and got \" + num + \" from \" + cjetty.url;\n\n          if (verbose || true) {\n            System.err.println(\"######\" + failMessage);\n            SolrQuery query = new SolrQuery(\"*:*\");\n            query.set(\"distrib\", false);\n            query.set(\"fl\",\"id,_version_\");\n            query.set(\"rows\",\"1000\");\n            query.set(\"sort\",\"id asc\");\n\n            SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();\n            SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();\n\n            showDiff(lst1, lst2, lastJetty.url, cjetty.url);\n          }\n\n        }\n        lastNum = num;\n        lastJetty = cjetty;\n      }\n    }\n    return failMessage;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","042c474f8983c7bfede807d97ad9faf73ff694cc"],"345334974b9d01795dd7ee84115310d2e30587b2":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"fa64435b5902ce266c23755a4a00691a3285dab8":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["fa64435b5902ce266c23755a4a00691a3285dab8"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["345334974b9d01795dd7ee84115310d2e30587b2"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","345334974b9d01795dd7ee84115310d2e30587b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"042c474f8983c7bfede807d97ad9faf73ff694cc":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"f2126b84bd093fa3d921582a109a0ee578c28126":["fa64435b5902ce266c23755a4a00691a3285dab8","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","345334974b9d01795dd7ee84115310d2e30587b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042c474f8983c7bfede807d97ad9faf73ff694cc"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"345334974b9d01795dd7ee84115310d2e30587b2":["6013b4c7388f1627659c8f96c44abd10a294d3a6","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"fa64435b5902ce266c23755a4a00691a3285dab8":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","042c474f8983c7bfede807d97ad9faf73ff694cc","f2126b84bd093fa3d921582a109a0ee578c28126"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["fa64435b5902ce266c23755a4a00691a3285dab8","05a14b2611ead08655a2b2bdc61632eb31316e57"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"042c474f8983c7bfede807d97ad9faf73ff694cc":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["345334974b9d01795dd7ee84115310d2e30587b2","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","05a14b2611ead08655a2b2bdc61632eb31316e57","c7869f64c874ebf7f317d22c00baf2b6857797a6","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}