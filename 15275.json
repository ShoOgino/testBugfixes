{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteNonSnapshotIndexFiles(Directory,Collection[SnapshotMetaData]).mjava","commits":[{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteNonSnapshotIndexFiles(Directory,Collection[SnapshotMetaData]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes all files not corresponding to a configured snapshot in the specified index directory.\n   *\n   * @param dir The index directory to search for.\n   * @throws IOException in case of I/O errors.\n   */\n  public static void deleteNonSnapshotIndexFiles (Directory dir, Collection<SnapshotMetaData> snapshots) throws IOException {\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    Map<String, Integer> refCounts = buildRefCounts(snapshots, commits);\n    Set<Long> snapshotGenNumbers = snapshots.stream()\n                                            .map(SnapshotMetaData::getGenerationNumber)\n                                            .collect(Collectors.toSet());\n    for (IndexCommit ic : commits) {\n      if (!snapshotGenNumbers.contains(ic.getGeneration())) {\n        deleteIndexFiles(dir,refCounts, ic);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteNonSnapshotIndexFiles(Directory,Collection[SnapshotMetaData]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method deletes all files not corresponding to a configured snapshot in the specified index directory.\n   *\n   * @param dir The index directory to search for.\n   * @throws IOException in case of I/O errors.\n   */\n  public static void deleteNonSnapshotIndexFiles (Directory dir, Collection<SnapshotMetaData> snapshots) throws IOException {\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    Map<String, Integer> refCounts = buildRefCounts(snapshots, commits);\n    Set<Long> snapshotGenNumbers = snapshots.stream()\n                                            .map(SnapshotMetaData::getGenerationNumber)\n                                            .collect(Collectors.toSet());\n    for (IndexCommit ic : commits) {\n      if (!snapshotGenNumbers.contains(ic.getGeneration())) {\n        deleteIndexFiles(dir,refCounts, ic);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e13696c44d3e2405098726359ab81dab178e7bc","date":1476726926,"type":4,"author":"Hrishikesh Gadre","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#deleteNonSnapshotIndexFiles(Directory,Collection[SnapshotMetaData]).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method deletes all files not corresponding to a configured snapshot in the specified index directory.\n   *\n   * @param dir The index directory to search for.\n   * @throws IOException in case of I/O errors.\n   */\n  public static void deleteNonSnapshotIndexFiles (Directory dir, Collection<SnapshotMetaData> snapshots) throws IOException {\n    List<IndexCommit> commits = DirectoryReader.listCommits(dir);\n    Map<String, Integer> refCounts = buildRefCounts(snapshots, commits);\n    Set<Long> snapshotGenNumbers = snapshots.stream()\n                                            .map(SnapshotMetaData::getGenerationNumber)\n                                            .collect(Collectors.toSet());\n    for (IndexCommit ic : commits) {\n      if (!snapshotGenNumbers.contains(ic.getGeneration())) {\n        deleteIndexFiles(dir,refCounts, ic);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e13696c44d3e2405098726359ab81dab178e7bc":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e13696c44d3e2405098726359ab81dab178e7bc"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3e13696c44d3e2405098726359ab81dab178e7bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["3e13696c44d3e2405098726359ab81dab178e7bc","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}