{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testHostAttribute().mjava","commits":[{"id":"00473ada9520f7423d1a7b4cfdb16f49856ddcac","date":1540213439,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testHostAttribute().mjava","pathOld":"/dev/null","sourceNew":"  public void testHostAttribute() {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testHostAttribute.json\");\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.219:63219_solr\", \"127.0.0.219:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testHostAttribute().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testHostAttribute().mjava","sourceNew":"  public void testHostAttribute() {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testHostAttribute.json\");\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.219:63219_solr\", \"127.0.0.219:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n    }\n  }\n\n","sourceOld":"  public void testHostAttribute() {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testHostAttribute.json\");\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.219:63219_solr\", \"127.0.0.219:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testHostAttribute().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testHostAttribute().mjava","sourceNew":"  public void testHostAttribute() {\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testHostAttribute.json\");\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.219:63219_solr\", \"127.0.0.219:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n    }\n  }\n\n","sourceOld":"  public void testHostAttribute() {\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testHostAttribute.json\");\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.219:63219_solr\", \"127.0.0.219:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testHostAttribute().mjava","sourceNew":null,"sourceOld":"  public void testHostAttribute() {\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testHostAttribute.json\");\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.219:63219_solr\", \"127.0.0.219:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"00473ada9520f7423d1a7b4cfdb16f49856ddcac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["9ba1b632c041956c93c41aa1143d16a567014891"],"00473ada9520f7423d1a7b4cfdb16f49856ddcac":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}