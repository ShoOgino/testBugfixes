{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48419e0df1475bc7b18833208ff3ea0105f79c1b","date":1495161343,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiException e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","bugFix":null,"bugIntro":["b984c4a3e5721930d85be5fcfe2014714e495a8e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b984c4a3e5721930d85be5fcfe2014714e495a8e","date":1495161817,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiException e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","bugFix":["48419e0df1475bc7b18833208ff3ea0105f79c1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c538b3eeebd03c2067a2fa5be92f073a08b6f41","date":1496264014,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.emptyMap());\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.emptyMap());\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.emptyMap());\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.emptyMap());\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new ContentStreamBase.StringStream(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.emptyMap());\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.emptyMap());\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new ContentStreamBase.StringStream(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.emptyMap());\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#makeCall(ApiBag,String,SolrRequest.METHOD,String,CoreContainer).mjava","sourceNew":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.emptyMap());\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new ContentStreamBase.StringStream(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","sourceOld":"  public static Pair<SolrQueryRequest, SolrQueryResponse> makeCall(final ApiBag apiBag, String path,\n                                                                   final SolrRequest.METHOD method,\n                                                                   final String payload, final CoreContainer cc) throws Exception {\n    SolrParams queryParams = new MultiMapSolrParams(Collections.EMPTY_MAP);\n    if (path.indexOf('?') > 0) {\n      String queryStr = path.substring(path.indexOf('?') + 1);\n      path = path.substring(0, path.indexOf('?'));\n      queryParams = SolrRequestParsers.parseQueryString(queryStr);\n    }\n    final HashMap<String, String> parts = new HashMap<>();\n    Api api = apiBag.lookup(path, method.toString(), parts);\n    if (api == null) throw new RuntimeException(\"No handler at path :\" + path);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null, queryParams) {\n      @Override\n      public List<CommandOperation> getCommands(boolean validateInput) {\n        if (payload == null) return Collections.emptyList();\n        return ApiBag.getCommandOperations(new StringReader(payload), api.getCommandSchema(), true);\n      }\n\n      @Override\n      public Map<String, String> getPathTemplateValues() {\n        return parts;\n      }\n\n      @Override\n      public String getHttpMethod() {\n        return method.toString();\n      }\n    };\n    try {\n      api.call(req, rsp);\n    } catch (ApiBag.ExceptionWithErrObject e) {\n      throw new RuntimeException(e.getMessage() + Utils.toJSONString(e.getErrs()), e);\n\n    }\n    return new Pair<>(req, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"48419e0df1475bc7b18833208ff3ea0105f79c1b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["b984c4a3e5721930d85be5fcfe2014714e495a8e"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"b984c4a3e5721930d85be5fcfe2014714e495a8e":["48419e0df1475bc7b18833208ff3ea0105f79c1b"],"28288370235ed02234a64753cdbf0c6ec096304a":["b984c4a3e5721930d85be5fcfe2014714e495a8e","4d3fc88a06a44fc3112186e9be4562b36713955d"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["b984c4a3e5721930d85be5fcfe2014714e495a8e","4c538b3eeebd03c2067a2fa5be92f073a08b6f41"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"48419e0df1475bc7b18833208ff3ea0105f79c1b":["b984c4a3e5721930d85be5fcfe2014714e495a8e"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["e9017cf144952056066919f1ebc7897ff9bd71b1","48419e0df1475bc7b18833208ff3ea0105f79c1b","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"b984c4a3e5721930d85be5fcfe2014714e495a8e":["4c538b3eeebd03c2067a2fa5be92f073a08b6f41","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}