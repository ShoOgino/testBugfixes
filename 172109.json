{"path":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#inform(IndexSchema).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void inform(final IndexSchema schema) {\n    codec = new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = schema.getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = schema.getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene45Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene45Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene45Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene42Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene46Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene45Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13c0d2271b68b77948ffb1638422f718c79778c0","date":1383607272,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene46Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene46Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();\n        if (postingsFormatName != null) {\n          return PostingsFormat.forName(postingsFormatName);\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField fieldOrNull = core.getLatestSchema().getFieldOrNull(field);\n        if (fieldOrNull == null) {\n          throw new IllegalArgumentException(\"no such field \" + field);\n        }\n        String docValuesFormatName = fieldOrNull.getType().getDocValuesFormat();\n        if (docValuesFormatName != null) {\n          return DocValuesFormat.forName(docValuesFormatName);\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278","08970e5b8411182a29412c177eff67ec1110095b","73bb5a57dc75b54a39494f99986599cae7dff417"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene49Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene46Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":["8435160e9702b19398118ddf76b61c846612b6a4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene410Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene49Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene50Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene410Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene53Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene50Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene54Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene53Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene60Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene54Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","date":1452119871,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene60Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    codec = new Lucene60Codec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c23672acbb5104509c1c2d6e3dda7a08eaf091f","date":1463128188,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene60Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene60Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene60Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene60Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene70Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene70Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene62Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene70Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.info(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.info(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene60Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6930fc653c2b86e857fce0af7ec99993593d0d89","date":1535014305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene80Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene70Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938935e3efe6aaecb925448d7f992783247366de","date":1554389977,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene80Codec(compressionMode, Lucene50PostingsFormat.FSTLoadMode.AUTO) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene80Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene80Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene80Codec(compressionMode, Lucene50PostingsFormat.FSTLoadMode.AUTO) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene84Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene80Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: {}\", compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: {}\", compressionMode);\n    }\n    codec = new Lucene84Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: \" + compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: \" + compressionMode);\n    }\n    codec = new Lucene84Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: {}\", compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: {}\", compressionMode);\n    }\n    codec = new Lucene86Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: {}\", compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: {}\", compressionMode);\n    }\n    codec = new Lucene84Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: {}\", compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: {}\", compressionMode);\n    }\n    codec = new Lucene86Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: {}\", compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: {}\", compressionMode);\n    }\n    codec = new Lucene86Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SchemaCodecFactory#init(NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: {}\", compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: {}\", compressionMode);\n    }\n    codec = new Lucene87Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public void init(NamedList args) {\n    super.init(args);\n    assert codec == null;\n    String compressionModeStr = (String)args.get(COMPRESSION_MODE);\n    Mode compressionMode;\n    if (compressionModeStr != null) {\n      try {\n        compressionMode = Mode.valueOf(compressionModeStr.toUpperCase(Locale.ROOT));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \n            \"Invalid compressionMode: '\" + compressionModeStr + \n            \"'. Value must be one of \" + Arrays.toString(Mode.values()));\n      }\n      log.debug(\"Using compressionMode: {}\", compressionMode);\n    } else {\n      compressionMode = SOLR_DEFAULT_COMPRESSION_MODE;\n      log.debug(\"Using default compressionMode: {}\", compressionMode);\n    }\n    codec = new Lucene86Codec(compressionMode) {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String postingsFormatName = schemaField.getType().getPostingsFormat();\n          if (postingsFormatName != null) {\n            return PostingsFormat.forName(postingsFormatName);\n          }\n        }\n        return super.getPostingsFormatForField(field);\n      }\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        final SchemaField schemaField = core.getLatestSchema().getFieldOrNull(field);\n        if (schemaField != null) {\n          String docValuesFormatName = schemaField.getType().getDocValuesFormat();\n          if (docValuesFormatName != null) {\n            return DocValuesFormat.forName(docValuesFormatName);\n          }\n        }\n        return super.getDocValuesFormatForField(field);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["773bf150032d3ef6c95997a154fb914b82875cb8"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","084884d4602f4d1c7411eab29e897e349ce62675"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["938935e3efe6aaecb925448d7f992783247366de"],"6930fc653c2b86e857fce0af7ec99993593d0d89":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"0ad30c6a479e764150a3316e57263319775f1df2":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","3d33e731a93d4b57e662ff094f64f94a745422d4"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","0ad30c6a479e764150a3316e57263319775f1df2"],"11a746437bc5c0a0b3df0337ed249c387c812871":["08970e5b8411182a29412c177eff67ec1110095b"],"773bf150032d3ef6c95997a154fb914b82875cb8":["140be51d03394488536f4aacedace29f9b318347"],"140be51d03394488536f4aacedace29f9b318347":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","126d6ad24eed13163ba0959435d5a80e5672837c"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a870f9917149dc600c4ad4417d615c1795de5864"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["08970e5b8411182a29412c177eff67ec1110095b","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"938935e3efe6aaecb925448d7f992783247366de":["6930fc653c2b86e857fce0af7ec99993593d0d89"],"8435160e9702b19398118ddf76b61c846612b6a4":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["08970e5b8411182a29412c177eff67ec1110095b","11a746437bc5c0a0b3df0337ed249c387c812871"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"a870f9917149dc600c4ad4417d615c1795de5864":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","1967bed916cc89da82a1c2085f27976da6d08cbd"],"084884d4602f4d1c7411eab29e897e349ce62675":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"13c0d2271b68b77948ffb1638422f718c79778c0":["8435160e9702b19398118ddf76b61c846612b6a4"],"126d6ad24eed13163ba0959435d5a80e5672837c":["d470c8182e92b264680e34081b75e70a9f2b3c89","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["13c0d2271b68b77948ffb1638422f718c79778c0"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","9c23672acbb5104509c1c2d6e3dda7a08eaf091f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"]},"commit2Childs":{"75237075d8425856bf4bbf52a6be4f9162b8187d":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a870f9917149dc600c4ad4417d615c1795de5864"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["6930fc653c2b86e857fce0af7ec99993593d0d89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"6930fc653c2b86e857fce0af7ec99993593d0d89":["938935e3efe6aaecb925448d7f992783247366de"],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9c23672acbb5104509c1c2d6e3dda7a08eaf091f","3d33e731a93d4b57e662ff094f64f94a745422d4"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","126d6ad24eed13163ba0959435d5a80e5672837c"],"08970e5b8411182a29412c177eff67ec1110095b":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"773bf150032d3ef6c95997a154fb914b82875cb8":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"140be51d03394488536f4aacedace29f9b318347":["773bf150032d3ef6c95997a154fb914b82875cb8"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["140be51d03394488536f4aacedace29f9b318347"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"938935e3efe6aaecb925448d7f992783247366de":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"8435160e9702b19398118ddf76b61c846612b6a4":["13c0d2271b68b77948ffb1638422f718c79778c0"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8435160e9702b19398118ddf76b61c846612b6a4"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"a870f9917149dc600c4ad4417d615c1795de5864":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"13c0d2271b68b77948ffb1638422f718c79778c0":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}