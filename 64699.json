{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    String collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    String collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/RenameCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(CoreAdminParams.NAME);\n    String target = message.getStr(CollectionAdminParams.TARGET);\n\n    if (ocmh.zkStateReader.aliasesManager != null) { // not a mock ZkStateReader\n      ocmh.zkStateReader.aliasesManager.update();\n    }\n\n    if (extCollectionName == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"both collection 'name' and 'target' name must be specified\");\n    }\n    Aliases aliases = ocmh.zkStateReader.getAliases();\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = aliases.resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    if (!state.hasCollection(collectionName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"source collection '\" + collectionName + \"' not found.\");\n    }\n    if (ocmh.zkStateReader.getAliases().hasAlias(target)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"target alias '\" + target + \"' exists: \"\n          + ocmh.zkStateReader.getAliases().getCollectionAliasListMap().get(target));\n    }\n\n    ocmh.zkStateReader.aliasesManager.applyModificationAndExportToZk(a -> a.cloneWithRename(extCollectionName, target));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}