{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#createSegGraph(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#createSegGraph(String).mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#createSegGraph(String).mjava","sourceNew":"  /**\n   * Create the {@link SegGraph} for a sentence.\n   * \n   * @param sentence input sentence, without start and end markers\n   * @return {@link SegGraph} corresponding to the input sentence.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private SegGraph createSegGraph(String sentence) {\n    int i = 0, j;\n    int length = sentence.length();\n    int foundIndex;\n    int[] charTypeArray = getCharTypes(sentence);\n    StringBuilder wordBuf = new StringBuilder();\n    SegToken token;\n    int frequency = 0; // the number of times word appears.\n    boolean hasFullWidth;\n    int wordType;\n    char[] charArray;\n\n    SegGraph segGraph = new SegGraph();\n    while (i < length) {\n      hasFullWidth = false;\n      switch (charTypeArray[i]) {\n        case CharType.SPACE_LIKE:\n          i++;\n          break;\n        case CharType.HANZI:\n          j = i + 1;\n          wordBuf.delete(0, wordBuf.length());\n          // It doesn't matter if a single Chinese character (Hanzi) can form a phrase or not, \n          // it will store that single Chinese character (Hanzi) in the SegGraph.  Otherwise, it will \n          // cause word division.\n          wordBuf.append(sentence.charAt(i));\n          charArray = new char[] { sentence.charAt(i) };\n          frequency = wordDict.getFrequency(charArray);\n          token = new SegToken(charArray, i, j, WordType.CHINESE_WORD,\n              frequency);\n          segGraph.addToken(token);\n\n          foundIndex = wordDict.getPrefixMatch(charArray);\n          while (j <= length && foundIndex != -1) {\n            if (wordDict.isEqual(charArray, foundIndex) && charArray.length > 1) {\n              // It is the phrase we are looking for; In other words, we have found a phrase SegToken\n              // from i to j.  It is not a monosyllabic word (single word).\n              frequency = wordDict.getFrequency(charArray);\n              token = new SegToken(charArray, i, j, WordType.CHINESE_WORD,\n                  frequency);\n              segGraph.addToken(token);\n            }\n\n            while (j < length && charTypeArray[j] == CharType.SPACE_LIKE)\n              j++;\n\n            if (j < length && charTypeArray[j] == CharType.HANZI) {\n              wordBuf.append(sentence.charAt(j));\n              charArray = new char[wordBuf.length()];\n              wordBuf.getChars(0, charArray.length, charArray, 0);\n              // idArray has been found (foundWordIndex!=-1) as a prefix before.  \n              // Therefore, idArray after it has been lengthened can only appear after foundWordIndex.  \n              // So start searching after foundWordIndex.\n              foundIndex = wordDict.getPrefixMatch(charArray, foundIndex);\n              j++;\n            } else {\n              break;\n            }\n          }\n          i++;\n          break;\n        case CharType.FULLWIDTH_LETTER:\n          hasFullWidth = true; /* intentional fallthrough */\n        case CharType.LETTER:\n          j = i + 1;\n          while (j < length\n              && (charTypeArray[j] == CharType.LETTER || charTypeArray[j] == CharType.FULLWIDTH_LETTER)) {\n            if (charTypeArray[j] == CharType.FULLWIDTH_LETTER)\n              hasFullWidth = true;\n            j++;\n          }\n          // Found a Token from i to j. Type is LETTER char string.\n          charArray = Utility.STRING_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          wordType = hasFullWidth ? WordType.FULLWIDTH_STRING : WordType.STRING;\n          token = new SegToken(charArray, i, j, wordType, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        case CharType.FULLWIDTH_DIGIT:\n          hasFullWidth = true; /* intentional fallthrough */\n        case CharType.DIGIT:\n          j = i + 1;\n          while (j < length\n              && (charTypeArray[j] == CharType.DIGIT || charTypeArray[j] == CharType.FULLWIDTH_DIGIT)) {\n            if (charTypeArray[j] == CharType.FULLWIDTH_DIGIT)\n              hasFullWidth = true;\n            j++;\n          }\n          // Found a Token from i to j. Type is NUMBER char string.\n          charArray = Utility.NUMBER_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          wordType = hasFullWidth ? WordType.FULLWIDTH_NUMBER : WordType.NUMBER;\n          token = new SegToken(charArray, i, j, wordType, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        case CharType.DELIMITER:\n          j = i + 1;\n          // No need to search the weight for the punctuation.  Picking the highest frequency will work.\n          frequency = Utility.MAX_FREQUENCE;\n          charArray = new char[] { sentence.charAt(i) };\n          token = new SegToken(charArray, i, j, WordType.DELIMITER, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        default:\n          j = i + 1;\n          // Treat the unrecognized char symbol as unknown string.\n          // For example, any symbol not in GB2312 is treated as one of these.\n          charArray = Utility.STRING_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          token = new SegToken(charArray, i, j, WordType.STRING, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n      }\n    }\n\n    // Add two more Tokens: \"beginning xx beginning\"\n    charArray = Utility.START_CHAR_ARRAY;\n    frequency = wordDict.getFrequency(charArray);\n    token = new SegToken(charArray, -1, 0, WordType.SENTENCE_BEGIN, frequency);\n    segGraph.addToken(token);\n\n    // \"end xx end\"\n    charArray = Utility.END_CHAR_ARRAY;\n    frequency = wordDict.getFrequency(charArray);\n    token = new SegToken(charArray, length, length + 1, WordType.SENTENCE_END,\n        frequency);\n    segGraph.addToken(token);\n\n    return segGraph;\n  }\n\n","sourceOld":"  /**\n   * Create the {@link SegGraph} for a sentence.\n   * \n   * @param sentence input sentence, without start and end markers\n   * @return {@link SegGraph} corresponding to the input sentence.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private SegGraph createSegGraph(String sentence) {\n    int i = 0, j;\n    int length = sentence.length();\n    int foundIndex;\n    int[] charTypeArray = getCharTypes(sentence);\n    StringBuilder wordBuf = new StringBuilder();\n    SegToken token;\n    int frequency = 0; // the number of times word appears.\n    boolean hasFullWidth;\n    int wordType;\n    char[] charArray;\n\n    SegGraph segGraph = new SegGraph();\n    while (i < length) {\n      hasFullWidth = false;\n      switch (charTypeArray[i]) {\n        case CharType.SPACE_LIKE:\n          i++;\n          break;\n        case CharType.HANZI:\n          j = i + 1;\n          wordBuf.delete(0, wordBuf.length());\n          // It doesn't matter if a single Chinese character (Hanzi) can form a phrase or not, \n          // it will store that single Chinese character (Hanzi) in the SegGraph.  Otherwise, it will \n          // cause word division.\n          wordBuf.append(sentence.charAt(i));\n          charArray = new char[] { sentence.charAt(i) };\n          frequency = wordDict.getFrequency(charArray);\n          token = new SegToken(charArray, i, j, WordType.CHINESE_WORD,\n              frequency);\n          segGraph.addToken(token);\n\n          foundIndex = wordDict.getPrefixMatch(charArray);\n          while (j <= length && foundIndex != -1) {\n            if (wordDict.isEqual(charArray, foundIndex) && charArray.length > 1) {\n              // It is the phrase we are looking for; In other words, we have found a phrase SegToken\n              // from i to j.  It is not a monosyllabic word (single word).\n              frequency = wordDict.getFrequency(charArray);\n              token = new SegToken(charArray, i, j, WordType.CHINESE_WORD,\n                  frequency);\n              segGraph.addToken(token);\n            }\n\n            while (j < length && charTypeArray[j] == CharType.SPACE_LIKE)\n              j++;\n\n            if (j < length && charTypeArray[j] == CharType.HANZI) {\n              wordBuf.append(sentence.charAt(j));\n              charArray = new char[wordBuf.length()];\n              wordBuf.getChars(0, charArray.length, charArray, 0);\n              // idArray has been found (foundWordIndex!=-1) as a prefix before.  \n              // Therefore, idArray after it has been lengthened can only appear after foundWordIndex.  \n              // So start searching after foundWordIndex.\n              foundIndex = wordDict.getPrefixMatch(charArray, foundIndex);\n              j++;\n            } else {\n              break;\n            }\n          }\n          i++;\n          break;\n        case CharType.FULLWIDTH_LETTER:\n          hasFullWidth = true; /* intentional fallthrough */\n        case CharType.LETTER:\n          j = i + 1;\n          while (j < length\n              && (charTypeArray[j] == CharType.LETTER || charTypeArray[j] == CharType.FULLWIDTH_LETTER)) {\n            if (charTypeArray[j] == CharType.FULLWIDTH_LETTER)\n              hasFullWidth = true;\n            j++;\n          }\n          // Found a Token from i to j. Type is LETTER char string.\n          charArray = Utility.STRING_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          wordType = hasFullWidth ? WordType.FULLWIDTH_STRING : WordType.STRING;\n          token = new SegToken(charArray, i, j, wordType, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        case CharType.FULLWIDTH_DIGIT:\n          hasFullWidth = true; /* intentional fallthrough */\n        case CharType.DIGIT:\n          j = i + 1;\n          while (j < length\n              && (charTypeArray[j] == CharType.DIGIT || charTypeArray[j] == CharType.FULLWIDTH_DIGIT)) {\n            if (charTypeArray[j] == CharType.FULLWIDTH_DIGIT)\n              hasFullWidth = true;\n            j++;\n          }\n          // Found a Token from i to j. Type is NUMBER char string.\n          charArray = Utility.NUMBER_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          wordType = hasFullWidth ? WordType.FULLWIDTH_NUMBER : WordType.NUMBER;\n          token = new SegToken(charArray, i, j, wordType, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        case CharType.DELIMITER:\n          j = i + 1;\n          // No need to search the weight for the punctuation.  Picking the highest frequency will work.\n          frequency = Utility.MAX_FREQUENCE;\n          charArray = new char[] { sentence.charAt(i) };\n          token = new SegToken(charArray, i, j, WordType.DELIMITER, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        default:\n          j = i + 1;\n          // Treat the unrecognized char symbol as unknown string.\n          // For example, any symbol not in GB2312 is treated as one of these.\n          charArray = Utility.STRING_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          token = new SegToken(charArray, i, j, WordType.STRING, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n      }\n    }\n\n    // Add two more Tokens: \"beginning xx beginning\"\n    charArray = Utility.START_CHAR_ARRAY;\n    frequency = wordDict.getFrequency(charArray);\n    token = new SegToken(charArray, -1, 0, WordType.SENTENCE_BEGIN, frequency);\n    segGraph.addToken(token);\n\n    // \"end xx end\"\n    charArray = Utility.END_CHAR_ARRAY;\n    frequency = wordDict.getFrequency(charArray);\n    token = new SegToken(charArray, length, length + 1, WordType.SENTENCE_END,\n        frequency);\n    segGraph.addToken(token);\n\n    return segGraph;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bf529f7fed34c3c76abb3bda2ecc9a01a0822aa","date":1527084763,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#createSegGraph(String).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/HHMMSegmenter#createSegGraph(String).mjava","sourceNew":"  /**\n   * Create the {@link SegGraph} for a sentence.\n   *\n   * @param sentence input sentence, without start and end markers\n   * @return {@link SegGraph} corresponding to the input sentence.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private SegGraph createSegGraph(String sentence) {\n    int i = 0, j;\n    int length = sentence.length();\n    int foundIndex;\n    int[] charTypeArray = getCharTypes(sentence);\n    StringBuilder wordBuf = new StringBuilder();\n    SegToken token;\n    int frequency = 0; // the number of times word appears.\n    boolean hasFullWidth;\n    int wordType;\n    char[] charArray;\n\n    SegGraph segGraph = new SegGraph();\n    while (i < length) {\n      hasFullWidth = false;\n      switch (charTypeArray[i]) {\n        case CharType.SPACE_LIKE:\n          i++;\n          break;\n        case CharType.SURROGATE:\n          int state = Character.codePointAt(sentence, i);\n          int count = Character.charCount(state);\n          charArray = new char[count];\n          sentence.getChars(i, i + count, charArray, 0);\n          token = new SegToken(charArray, i, i + count, WordType.CHINESE_WORD, 0);\n          segGraph.addToken(token);\n          i += count;\n          break;\n        case CharType.HANZI:\n          j = i + 1;\n          wordBuf.delete(0, wordBuf.length());\n          // It doesn't matter if a single Chinese character (Hanzi) can form a phrase or not,\n          // it will store that single Chinese character (Hanzi) in the SegGraph.  Otherwise, it will\n          // cause word division.\n          wordBuf.append(sentence.charAt(i));\n          charArray = new char[] { sentence.charAt(i) };\n          frequency = wordDict.getFrequency(charArray);\n          token = new SegToken(charArray, i, j, WordType.CHINESE_WORD,\n              frequency);\n          segGraph.addToken(token);\n\n          foundIndex = wordDict.getPrefixMatch(charArray);\n          while (j <= length && foundIndex != -1) {\n            if (wordDict.isEqual(charArray, foundIndex) && charArray.length > 1) {\n              // It is the phrase we are looking for; In other words, we have found a phrase SegToken\n              // from i to j.  It is not a monosyllabic word (single word).\n              frequency = wordDict.getFrequency(charArray);\n              token = new SegToken(charArray, i, j, WordType.CHINESE_WORD,\n                  frequency);\n              segGraph.addToken(token);\n            }\n\n            while (j < length && charTypeArray[j] == CharType.SPACE_LIKE)\n              j++;\n\n            if (j < length && charTypeArray[j] == CharType.HANZI) {\n              wordBuf.append(sentence.charAt(j));\n              charArray = new char[wordBuf.length()];\n              wordBuf.getChars(0, charArray.length, charArray, 0);\n              // idArray has been found (foundWordIndex!=-1) as a prefix before.  \n              // Therefore, idArray after it has been lengthened can only appear after foundWordIndex.  \n              // So start searching after foundWordIndex.\n              foundIndex = wordDict.getPrefixMatch(charArray, foundIndex);\n              j++;\n            } else {\n              break;\n            }\n          }\n          i++;\n          break;\n        case CharType.FULLWIDTH_LETTER:\n          hasFullWidth = true; /* intentional fallthrough */\n        case CharType.LETTER:\n          j = i + 1;\n          while (j < length\n              && (charTypeArray[j] == CharType.LETTER || charTypeArray[j] == CharType.FULLWIDTH_LETTER)) {\n            if (charTypeArray[j] == CharType.FULLWIDTH_LETTER)\n              hasFullWidth = true;\n            j++;\n          }\n          // Found a Token from i to j. Type is LETTER char string.\n          charArray = Utility.STRING_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          wordType = hasFullWidth ? WordType.FULLWIDTH_STRING : WordType.STRING;\n          token = new SegToken(charArray, i, j, wordType, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        case CharType.FULLWIDTH_DIGIT:\n          hasFullWidth = true; /* intentional fallthrough */\n        case CharType.DIGIT:\n          j = i + 1;\n          while (j < length\n              && (charTypeArray[j] == CharType.DIGIT || charTypeArray[j] == CharType.FULLWIDTH_DIGIT)) {\n            if (charTypeArray[j] == CharType.FULLWIDTH_DIGIT)\n              hasFullWidth = true;\n            j++;\n          }\n          // Found a Token from i to j. Type is NUMBER char string.\n          charArray = Utility.NUMBER_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          wordType = hasFullWidth ? WordType.FULLWIDTH_NUMBER : WordType.NUMBER;\n          token = new SegToken(charArray, i, j, wordType, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        case CharType.DELIMITER:\n          j = i + 1;\n          // No need to search the weight for the punctuation.  Picking the highest frequency will work.\n          frequency = Utility.MAX_FREQUENCE;\n          charArray = new char[] { sentence.charAt(i) };\n          token = new SegToken(charArray, i, j, WordType.DELIMITER, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        default:\n          j = i + 1;\n          // Treat the unrecognized char symbol as unknown string.\n          // For example, any symbol not in GB2312 is treated as one of these.\n          charArray = Utility.STRING_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          token = new SegToken(charArray, i, j, WordType.STRING, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n      }\n    }\n\n    // Add two more Tokens: \"beginning xx beginning\"\n    charArray = Utility.START_CHAR_ARRAY;\n    frequency = wordDict.getFrequency(charArray);\n    token = new SegToken(charArray, -1, 0, WordType.SENTENCE_BEGIN, frequency);\n    segGraph.addToken(token);\n\n    // \"end xx end\"\n    charArray = Utility.END_CHAR_ARRAY;\n    frequency = wordDict.getFrequency(charArray);\n    token = new SegToken(charArray, length, length + 1, WordType.SENTENCE_END,\n        frequency);\n    segGraph.addToken(token);\n\n    return segGraph;\n  }\n\n","sourceOld":"  /**\n   * Create the {@link SegGraph} for a sentence.\n   * \n   * @param sentence input sentence, without start and end markers\n   * @return {@link SegGraph} corresponding to the input sentence.\n   */\n  @SuppressWarnings(\"fallthrough\")\n  private SegGraph createSegGraph(String sentence) {\n    int i = 0, j;\n    int length = sentence.length();\n    int foundIndex;\n    int[] charTypeArray = getCharTypes(sentence);\n    StringBuilder wordBuf = new StringBuilder();\n    SegToken token;\n    int frequency = 0; // the number of times word appears.\n    boolean hasFullWidth;\n    int wordType;\n    char[] charArray;\n\n    SegGraph segGraph = new SegGraph();\n    while (i < length) {\n      hasFullWidth = false;\n      switch (charTypeArray[i]) {\n        case CharType.SPACE_LIKE:\n          i++;\n          break;\n        case CharType.HANZI:\n          j = i + 1;\n          wordBuf.delete(0, wordBuf.length());\n          // It doesn't matter if a single Chinese character (Hanzi) can form a phrase or not, \n          // it will store that single Chinese character (Hanzi) in the SegGraph.  Otherwise, it will \n          // cause word division.\n          wordBuf.append(sentence.charAt(i));\n          charArray = new char[] { sentence.charAt(i) };\n          frequency = wordDict.getFrequency(charArray);\n          token = new SegToken(charArray, i, j, WordType.CHINESE_WORD,\n              frequency);\n          segGraph.addToken(token);\n\n          foundIndex = wordDict.getPrefixMatch(charArray);\n          while (j <= length && foundIndex != -1) {\n            if (wordDict.isEqual(charArray, foundIndex) && charArray.length > 1) {\n              // It is the phrase we are looking for; In other words, we have found a phrase SegToken\n              // from i to j.  It is not a monosyllabic word (single word).\n              frequency = wordDict.getFrequency(charArray);\n              token = new SegToken(charArray, i, j, WordType.CHINESE_WORD,\n                  frequency);\n              segGraph.addToken(token);\n            }\n\n            while (j < length && charTypeArray[j] == CharType.SPACE_LIKE)\n              j++;\n\n            if (j < length && charTypeArray[j] == CharType.HANZI) {\n              wordBuf.append(sentence.charAt(j));\n              charArray = new char[wordBuf.length()];\n              wordBuf.getChars(0, charArray.length, charArray, 0);\n              // idArray has been found (foundWordIndex!=-1) as a prefix before.  \n              // Therefore, idArray after it has been lengthened can only appear after foundWordIndex.  \n              // So start searching after foundWordIndex.\n              foundIndex = wordDict.getPrefixMatch(charArray, foundIndex);\n              j++;\n            } else {\n              break;\n            }\n          }\n          i++;\n          break;\n        case CharType.FULLWIDTH_LETTER:\n          hasFullWidth = true; /* intentional fallthrough */\n        case CharType.LETTER:\n          j = i + 1;\n          while (j < length\n              && (charTypeArray[j] == CharType.LETTER || charTypeArray[j] == CharType.FULLWIDTH_LETTER)) {\n            if (charTypeArray[j] == CharType.FULLWIDTH_LETTER)\n              hasFullWidth = true;\n            j++;\n          }\n          // Found a Token from i to j. Type is LETTER char string.\n          charArray = Utility.STRING_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          wordType = hasFullWidth ? WordType.FULLWIDTH_STRING : WordType.STRING;\n          token = new SegToken(charArray, i, j, wordType, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        case CharType.FULLWIDTH_DIGIT:\n          hasFullWidth = true; /* intentional fallthrough */\n        case CharType.DIGIT:\n          j = i + 1;\n          while (j < length\n              && (charTypeArray[j] == CharType.DIGIT || charTypeArray[j] == CharType.FULLWIDTH_DIGIT)) {\n            if (charTypeArray[j] == CharType.FULLWIDTH_DIGIT)\n              hasFullWidth = true;\n            j++;\n          }\n          // Found a Token from i to j. Type is NUMBER char string.\n          charArray = Utility.NUMBER_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          wordType = hasFullWidth ? WordType.FULLWIDTH_NUMBER : WordType.NUMBER;\n          token = new SegToken(charArray, i, j, wordType, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        case CharType.DELIMITER:\n          j = i + 1;\n          // No need to search the weight for the punctuation.  Picking the highest frequency will work.\n          frequency = Utility.MAX_FREQUENCE;\n          charArray = new char[] { sentence.charAt(i) };\n          token = new SegToken(charArray, i, j, WordType.DELIMITER, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n        default:\n          j = i + 1;\n          // Treat the unrecognized char symbol as unknown string.\n          // For example, any symbol not in GB2312 is treated as one of these.\n          charArray = Utility.STRING_CHAR_ARRAY;\n          frequency = wordDict.getFrequency(charArray);\n          token = new SegToken(charArray, i, j, WordType.STRING, frequency);\n          segGraph.addToken(token);\n          i = j;\n          break;\n      }\n    }\n\n    // Add two more Tokens: \"beginning xx beginning\"\n    charArray = Utility.START_CHAR_ARRAY;\n    frequency = wordDict.getFrequency(charArray);\n    token = new SegToken(charArray, -1, 0, WordType.SENTENCE_BEGIN, frequency);\n    segGraph.addToken(token);\n\n    // \"end xx end\"\n    charArray = Utility.END_CHAR_ARRAY;\n    frequency = wordDict.getFrequency(charArray);\n    token = new SegToken(charArray, length, length + 1, WordType.SENTENCE_END,\n        frequency);\n    segGraph.addToken(token);\n\n    return segGraph;\n  }\n\n","bugFix":["05ff0cc6e864c7d71a48579f2acfca4f58943568","55fa7b85159e79f79dfdca119db7f0f4cb6a2a74"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bf529f7fed34c3c76abb3bda2ecc9a01a0822aa":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bf529f7fed34c3c76abb3bda2ecc9a01a0822aa"]},"commit2Childs":{"0bf529f7fed34c3c76abb3bda2ecc9a01a0822aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0bf529f7fed34c3c76abb3bda2ecc9a01a0822aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}