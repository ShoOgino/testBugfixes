{"path":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      nameVsFile.put((String) map.get(NAME), map);\n    }\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileCache(nameVsFile.keySet());\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue;\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name);\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**The local conf files are compared with the conf files in the master. If they are\n   * same (by checksum) do not copy\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      nameVsFile.put((String) map.get(NAME), map);\n    }\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileCache(nameVsFile.keySet());\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue;\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name);\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      nameVsFile.put((String) map.get(NAME), map);\n    }\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileCache(nameVsFile.keySet());\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue;\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name);\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are\n   * same (by checksum) do not copy.\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      nameVsFile.put((String) map.get(NAME), map);\n    }\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileCache(nameVsFile.keySet());\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue;\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name);\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**The local conf files are compared with the conf files in the master. If they are\n   * same (by checksum) do not copy\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      nameVsFile.put((String) map.get(NAME), map);\n    }\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileCache(nameVsFile.keySet());\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue;\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name);\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are\n   * same (by checksum) do not copy.\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    for (Map<String, Object> map : confFilesToDownload) {\n      nameVsFile.put((String) map.get(NAME), map);\n    }\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileCache(nameVsFile.keySet());\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue;\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name);\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getModifiedConfFiles(List[Map[String,Object]]).mjava","sourceNew":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","sourceOld":"  /**\n   * The local conf files are compared with the conf files in the master. If they are same (by checksum) do not copy.\n   *\n   * @param confFilesToDownload The list of files obtained from master\n   *\n   * @return a list of configuration files which have changed on the master and need to be downloaded.\n   */\n  private Collection<Map<String, Object>> getModifiedConfFiles(List<Map<String, Object>> confFilesToDownload) {\n    if (confFilesToDownload == null || confFilesToDownload.isEmpty())\n      return Collections.EMPTY_LIST;\n    //build a map with alias/name as the key\n    Map<String, Map<String, Object>> nameVsFile = new HashMap<String, Map<String, Object>>();\n    NamedList names = new NamedList();\n    for (Map<String, Object> map : confFilesToDownload) {\n      //if alias is present that is the name the file may have in the slave\n      String name = (String) (map.get(ALIAS) == null ? map.get(NAME) : map.get(ALIAS));\n      nameVsFile.put(name, map);\n      names.add(name, null);\n    }\n    //get the details of the local conf files with the same alias/name\n    List<Map<String, Object>> localFilesInfo = replicationHandler.getConfFileInfoFromCache(names, confFileInfoCache);\n    //compare their size/checksum to see if\n    for (Map<String, Object> fileInfo : localFilesInfo) {\n      String name = (String) fileInfo.get(NAME);\n      Map<String, Object> m = nameVsFile.get(name);\n      if (m == null) continue; // the file is not even present locally (so must be downloaded)\n      if (m.get(CHECKSUM).equals(fileInfo.get(CHECKSUM))) {\n        nameVsFile.remove(name); //checksums are same so the file need not be downloaded\n      }\n    }\n    return nameVsFile.isEmpty() ? Collections.EMPTY_LIST : nameVsFile.values();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["8620c64e323e74078214cf931e505179d14c888e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"ad94625fb8d088209f46650c8097196fec67f00c":["9be231d18ef58129524215a1d30331523320b744"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"9be231d18ef58129524215a1d30331523320b744":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["9be231d18ef58129524215a1d30331523320b744"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}