{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","commits":[{"id":"35626481458234c265343dd28af158e8b0099068","date":1427831707,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {\n    BytesRef term;\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n\n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasFreqs, boolean hasPositions) throws Exception {\n    BytesRef term;\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum, hasFreqs);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n\n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {\n    BytesRef term;\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n\n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasFreqs, boolean hasPositions) throws Exception {\n    BytesRef term;\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum, hasFreqs);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n\n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {\n    BytesRef term;\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n\n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs),\n            rightDocs = rightTermsEnum.postings(rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"086ffe31d8fba0110227db122974163709ecc1b4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["0f4464508ee83288c8c4585b533f9faaa93aa314","086ffe31d8fba0110227db122974163709ecc1b4"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35626481458234c265343dd28af158e8b0099068"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"35626481458234c265343dd28af158e8b0099068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b4e3cd382d0d075a0f1725649c084bb6510c483","35626481458234c265343dd28af158e8b0099068"],"35626481458234c265343dd28af158e8b0099068":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}