{"path":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(Object,Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(Object,Object).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(Object,Object).mjava","sourceNew":"  @Override\n  protected boolean lessThan(Object objA, Object objB) {\n    ShardDoc docA = (ShardDoc)objA;\n    ShardDoc docB = (ShardDoc)objB;\n\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","sourceOld":"  @Override\n  protected boolean lessThan(Object objA, Object objB) {\n    ShardDoc docA = (ShardDoc)objA;\n    ShardDoc docB = (ShardDoc)objB;\n\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(Object,Object).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(Object,Object).mjava","sourceNew":"  @Override\n  protected boolean lessThan(Object objA, Object objB) {\n    ShardDoc docA = (ShardDoc)objA;\n    ShardDoc docB = (ShardDoc)objB;\n\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","sourceOld":"  @Override\n  protected boolean lessThan(Object objA, Object objB) {\n    ShardDoc docA = (ShardDoc)objA;\n    ShardDoc docB = (ShardDoc)objB;\n\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(Object,Object).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(Object,Object).mjava","sourceNew":"  @Override\n  protected boolean lessThan(Object objA, Object objB) {\n    ShardDoc docA = (ShardDoc)objA;\n    ShardDoc docB = (ShardDoc)objB;\n\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","sourceOld":"  @Override\n  protected boolean lessThan(Object objA, Object objB) {\n    ShardDoc docA = (ShardDoc)objA;\n    ShardDoc docB = (ShardDoc)objB;\n\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(ShardDoc,ShardDoc).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#lessThan(Object,Object).mjava","sourceNew":"  @Override\n  protected boolean lessThan(ShardDoc docA, ShardDoc docB) {\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","sourceOld":"  @Override\n  protected boolean lessThan(Object objA, Object objB) {\n    ShardDoc docA = (ShardDoc)objA;\n    ShardDoc docB = (ShardDoc)objB;\n\n    // If these docs are from the same shard, then the relative order\n    // is how they appeared in the response from that shard.    \n    if (docA.shard == docB.shard) {\n      // if docA has a smaller position, it should be \"larger\" so it\n      // comes before docB.\n      // This will handle sorting by docid within the same shard\n\n      // comment this out to test comparators.\n      return !(docA.orderInShard < docB.orderInShard);\n    }\n\n\n    // run comparators\n    final int n = comparators.length;\n    int c = 0;\n    for (int i = 0; i < n && c == 0; i++) {\n      c = (fields[i].getReverse()) ? comparators[i].compare(docB, docA)\n          : comparators[i].compare(docA, docB);\n    }\n\n    // solve tiebreaks by comparing shards (similar to using docid)\n    // smaller docid's beat larger ids, so reverse the natural ordering\n    if (c == 0) {\n      c = -docA.shard.compareTo(docB.shard);\n    }\n\n    return c < 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ccc08aa684aee4964baee0644a6ba047bfd70829"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}