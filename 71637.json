{"path":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"/dev/null","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"/dev/null","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c538b3eeebd03c2067a2fa5be92f073a08b6f41","date":1496264014,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"114b665752b215f36836a7c5411f7c433b4d1352","date":1497007372,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecb39e783dd104116a9502e8b0ab3df89f35ac19","date":1499167547,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27","date":1499843247,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n              ocmh.zkStateReader,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f100e4a037a938ee4b027674f1ca80fc208badf","date":1500526196,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll.getName(), shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll.getName(), shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n              ocmh.zkStateReader,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n              ocmh.zkStateReader,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll.getName(), shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n              ocmh.zkStateReader,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n              ocmh.zkStateReader,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bccf7971a36bd151490117582a0a1a695081ead3","date":1502778995,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(() -> ocmh.overseer.getZkController().getCoreContainer(),\n              ocmh.zkStateReader,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getClusterDataProvider(), ocmh.overseer.getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getClusterDataProvider(), ocmh.overseer.getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), countDownLatch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), countDownLatch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager(), ocmh.overseer.getCoreContainer()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"427295870ac138112ed6ab0973a2dbe42e0a1a2d","date":1510742913,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        PolicyHelper.getPolicySessionRef(ocmh.overseer.getSolrCloudManager()).decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        ocmh.policySessionRef.decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d907c28c7fe6305eaec1756d51365f5149e1e41d","date":1512533044,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    final Long policyVersionBefore = PolicyHelper.REF_VERSION.get();\n    AtomicLong policyVersionAfter  = new AtomicLong(-1);\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          if (policyVersionBefore == null && PolicyHelper.REF_VERSION.get() != null) {\n            policyVersionAfter.set(PolicyHelper.REF_VERSION.get());\n          }\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (policyVersionAfter.get() > -1) {\n        PolicyHelper.REF_VERSION.remove();\n        PolicyHelper.getPolicySessionRef(ocmh.overseer.getSolrCloudManager()).decref(policyVersionAfter.get());\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = assignReplicaDetails(ocmh.cloudManager, clusterState, message, sessionWrapper);\n\n    String collection = message.getStr(COLLECTION_PROP);\n    DocCollection coll = clusterState.getCollection(collection);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(\"timeout\", 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      if (CreateShardCmd.usePolicyFramework(coll, ocmh)) {\n        if (node == null) {\n          if(coll.getPolicyName() != null) message.getProperties().put(Policy.POLICY, coll.getPolicyName());\n          node = Assign.identifyNodes(ocmh,\n              clusterState,\n              Collections.emptyList(),\n              collection,\n              message,\n              Collections.singletonList(shard),\n              replicaType == Replica.Type.NRT ? 0 : 1,\n              replicaType == Replica.Type.TLOG ? 0 : 1,\n              replicaType == Replica.Type.PULL ? 0 : 1\n          ).get(0).node;\n          sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));\n        }\n      } else {\n        node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n            ocmh.overseer.getSolrCloudManager()).get(0).nodeName;// TODO: use replica type in this logic too\n      }\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, shard, replicaType);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = assignReplicaDetails(ocmh.cloudManager, clusterState, message, sessionWrapper);\n\n    String collection = message.getStr(COLLECTION_PROP);\n    DocCollection coll = clusterState.getCollection(collection);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = assignReplicaDetails(ocmh.cloudManager, clusterState, message, sessionWrapper);\n\n    String collection = message.getStr(COLLECTION_PROP);\n    DocCollection coll = clusterState.getCollection(collection);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = assignReplicaDetails(ocmh.cloudManager, clusterState, message, sessionWrapper);\n\n    String collection = message.getStr(COLLECTION_PROP);\n    DocCollection coll = clusterState.getCollection(collection);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws IOException, InterruptedException {\n    log.debug(\"addReplica() : {}\", Utils.toJSONString(message));\n    boolean waitForFinalState = message.getBool(WAIT_FOR_FINAL_STATE, false);\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    final String asyncId = message.getStr(ASYNC);\n\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    message = assignReplicaDetails(ocmh.cloudManager, clusterState, message, sessionWrapper);\n\n    String collection = message.getStr(COLLECTION_PROP);\n    DocCollection coll = clusterState.getCollection(collection);\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    String coreNodeName = message.getStr(CoreAdminParams.CORE_NODE_NAME);\n    int timeout = message.getInt(TIMEOUT, 10 * 60); // 10 minutes\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    boolean parallel = message.getBool(\"parallel\", false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node,\n            ZkStateReader.REPLICA_TYPE, replicaType.name());\n        if (coreNodeName != null) {\n          props = props.plus(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n        }\n        try {\n          Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception updating Overseer state queue\", e);\n        }\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String ulogDir = message.getStr(CoreAdminParams.ULOG_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    params.set(CoreAdminParams.REPLICA_TYPE, replicaType.name());\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (ulogDir != null) {\n      params.set(CoreAdminParams.ULOG_DIR, ulogDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    if (coreNodeName != null) {\n      params.set(CoreAdminParams.CORE_NODE_NAME, coreNodeName);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (sessionWrapper.get() != null) {\n        sessionWrapper.get().release();\n      }\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel || waitForFinalState) {\n      if (waitForFinalState) {\n        SolrCloseableLatch latch = new SolrCloseableLatch(1, ocmh);\n        ActiveReplicaWatcher watcher = new ActiveReplicaWatcher(collection, null, Collections.singletonList(coreName), latch);\n        try {\n          zkStateReader.registerCollectionStateWatcher(collection, watcher);\n          runnable.run();\n          if (!latch.await(timeout, TimeUnit.SECONDS)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Timeout waiting \" + timeout + \" seconds for replica to become active.\");\n          }\n        } finally {\n          zkStateReader.removeCollectionStateWatcher(collection, watcher);\n        }\n      } else {\n        runnable.run();\n      }\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"2bcfee499548996a6e5448bbf93b8f276d010270":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["61c45e99cf6676da48f19d7511c73712ad39402b"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a52341299179de5479672f7cf518bf4b173f34b3","b869898f50ca80263bac2e3ae0949f7700e5c977"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"114b665752b215f36836a7c5411f7c433b4d1352":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["264e2d8faf5f86cbad34a372b65c98e3d9f2bb27"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["28288370235ed02234a64753cdbf0c6ec096304a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["114b665752b215f36836a7c5411f7c433b4d1352","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a52341299179de5479672f7cf518bf4b173f34b3","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"61c45e99cf6676da48f19d7511c73712ad39402b":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["bccf7971a36bd151490117582a0a1a695081ead3"],"bccf7971a36bd151490117582a0a1a695081ead3":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["0806aac02ecbbdc6b5d9705ae15da193219c7af4","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["61c45e99cf6676da48f19d7511c73712ad39402b","4c538b3eeebd03c2067a2fa5be92f073a08b6f41"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a52341299179de5479672f7cf518bf4b173f34b3":["9f100e4a037a938ee4b027674f1ca80fc208badf","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"427295870ac138112ed6ab0973a2dbe42e0a1a2d":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["2bcfee499548996a6e5448bbf93b8f276d010270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["427295870ac138112ed6ab0973a2dbe42e0a1a2d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bcfee499548996a6e5448bbf93b8f276d010270":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["bccf7971a36bd151490117582a0a1a695081ead3"],"114b665752b215f36836a7c5411f7c433b4d1352":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["427295870ac138112ed6ab0973a2dbe42e0a1a2d"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"264e2d8faf5f86cbad34a372b65c98e3d9f2bb27":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["264e2d8faf5f86cbad34a372b65c98e3d9f2bb27","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["114b665752b215f36836a7c5411f7c433b4d1352"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["4c538b3eeebd03c2067a2fa5be92f073a08b6f41","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"bccf7971a36bd151490117582a0a1a695081ead3":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["2bcfee499548996a6e5448bbf93b8f276d010270"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a52341299179de5479672f7cf518bf4b173f34b3":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"427295870ac138112ed6ab0973a2dbe42e0a1a2d":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}