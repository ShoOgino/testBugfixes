{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testIndirectUpdateStream().mjava","commits":[{"id":"d959ec4c6f38b465c2b853271aecb516e06e7d94","date":1580403663,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testIndirectUpdateStream().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndirectUpdateStream() throws Exception {\n    { // WRITE_X user should be able to update X via a (dummy) stream from Y...\n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_Y,\n                                                   params(\"qt\", \"/stream\", \"expr\",\n                                                          \"update(\"+COLLECTION_X+\",batchSize=1,\" +\n                                                          \"tuple(id='42',a_i=1,b_i=5))\"));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(1, tuples.size());\n      assertEquals(1L, tuples.get(0).get(\"totalIndexed\"));\n    }\n    \n    { // Now add some \"real\" docs directly to Y...\n      final UpdateRequest update = setBasicAuthCredentials(new UpdateRequest(), WRITE_Y_USER);\n      for (int i = 1; i <= 42; i++) {\n        update.add(sdoc(\"id\",i+\"y\",\"foo_i\",\"\"+i));\n      }\n      assertEquals(\"initial docs in Y\",\n                   0, update.commit(cluster.getSolrClient(), COLLECTION_Y).getStatus());\n    }\n\n    { // WRITE_X user should be able to update X via a (search) stream from Y (routed via Y)\n      final String expr\n        = \"update(\"+COLLECTION_X+\", batchSize=50,                   \" // note batch size\n        + \"       search(\"+COLLECTION_Y+\",                          \"\n        + \"              q=\\\"foo_i:[* TO 10]\\\",                     \" // 10 matches = 1 batch\n        + \"              rows=100,                                  \"\n        + \"              fl=\\\"id,foo_i\\\",                           \"\n        + \"              sort=\\\"foo_i desc\\\"))                      \"\n        ;\n      \n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_Y, // NOTE: Y route\n                                                   params(\"qt\", \"/stream\",\n                                                          \"expr\", expr));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(1, tuples.size());\n      assertEquals(10L, tuples.get(0).get(\"batchIndexed\"));\n      assertEquals(10L, tuples.get(0).get(\"totalIndexed\"));\n    }\n\n    { // WRITE_X user should be able to update X via a (search) stream from Y (routed via X)...\n      final String expr\n        = \"update(\"+COLLECTION_X+\", batchSize=5,                    \" // note batch size\n        + \"       search(\"+COLLECTION_Y+\",                          \"\n        + \"              q=\\\"foo_i:[30 TO *]\\\",                     \" // 13 matches = 3 batches\n        + \"              rows=100,                                  \"\n        + \"              fl=\\\"id,foo_i\\\",                           \"\n        + \"              sort=\\\"foo_i desc\\\"))                      \"\n        ;\n      \n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_X, // NOTE: X route\n                                                   params(\"qt\", \"/stream\",\n                                                          \"expr\", expr));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(3, tuples.size());\n      \n      assertEquals( 5L, tuples.get(0).get(\"batchIndexed\"));\n      assertEquals( 5L, tuples.get(0).get(\"totalIndexed\"));\n      \n      assertEquals( 5L, tuples.get(1).get(\"batchIndexed\"));\n      assertEquals(10L, tuples.get(1).get(\"totalIndexed\"));\n      \n      assertEquals( 3L, tuples.get(2).get(\"batchIndexed\"));\n      assertEquals(13L, tuples.get(2).get(\"totalIndexed\"));\n    }\n\n    assertEquals(1L + 10L + 13L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140a95988ddfbe87c2376f5fed6acae475ea11fc","date":1580924964,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testIndirectUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testIndirectUpdateStream().mjava","sourceNew":"  public void testIndirectUpdateStream() throws Exception {\n    { // WRITE_X user should be able to update X via a (dummy) stream from Y...\n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_Y,\n                                                   params(\"qt\", \"/stream\", \"expr\",\n                                                          \"update(\"+COLLECTION_X+\",batchSize=1,\" +\n                                                          \"tuple(id=42,a_i=1,b_i=5))\"));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(1, tuples.size());\n      assertEquals(1L, tuples.get(0).get(\"totalIndexed\"));\n    }\n    \n    { // Now add some \"real\" docs directly to Y...\n      final UpdateRequest update = setBasicAuthCredentials(new UpdateRequest(), WRITE_Y_USER);\n      for (int i = 1; i <= 42; i++) {\n        update.add(sdoc(\"id\",i+\"y\",\"foo_i\",\"\"+i));\n      }\n      assertEquals(\"initial docs in Y\",\n                   0, update.commit(cluster.getSolrClient(), COLLECTION_Y).getStatus());\n    }\n\n    { // WRITE_X user should be able to update X via a (search) stream from Y (routed via Y)\n      final String expr\n        = \"update(\"+COLLECTION_X+\", batchSize=50,                   \" // note batch size\n        + \"       search(\"+COLLECTION_Y+\",                          \"\n        + \"              q=\\\"foo_i:[* TO 10]\\\",                     \" // 10 matches = 1 batch\n        + \"              rows=100,                                  \"\n        + \"              fl=\\\"id,foo_i,_version_\\\",                 \" // pruneVersionField default true\n        + \"              sort=\\\"foo_i desc\\\"))                      \"\n        ;\n      \n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_Y, // NOTE: Y route\n                                                   params(\"qt\", \"/stream\",\n                                                          \"expr\", expr));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(1, tuples.size());\n      assertEquals(10L, tuples.get(0).get(\"batchIndexed\"));\n      assertEquals(10L, tuples.get(0).get(\"totalIndexed\"));\n    }\n\n    { // WRITE_X user should be able to update X via a (search) stream from Y (routed via X)...\n      final String expr\n        = \"update(\"+COLLECTION_X+\", batchSize=5,                    \" // note batch size\n        + \"       search(\"+COLLECTION_Y+\",                          \"\n        + \"              q=\\\"foo_i:[30 TO *]\\\",                     \" // 13 matches = 3 batches\n        + \"              rows=100,                                  \"\n        + \"              fl=\\\"id,foo_i\\\",                           \"\n        + \"              sort=\\\"foo_i desc\\\"))                      \"\n        ;\n      \n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_X, // NOTE: X route\n                                                   params(\"qt\", \"/stream\",\n                                                          \"expr\", expr));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(3, tuples.size());\n      \n      assertEquals( 5L, tuples.get(0).get(\"batchIndexed\"));\n      assertEquals( 5L, tuples.get(0).get(\"totalIndexed\"));\n      \n      assertEquals( 5L, tuples.get(1).get(\"batchIndexed\"));\n      assertEquals(10L, tuples.get(1).get(\"totalIndexed\"));\n      \n      assertEquals( 3L, tuples.get(2).get(\"batchIndexed\"));\n      assertEquals(13L, tuples.get(2).get(\"totalIndexed\"));\n    }\n\n    assertEquals(1L + 10L + 13L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n  }\n\n","sourceOld":"  public void testIndirectUpdateStream() throws Exception {\n    { // WRITE_X user should be able to update X via a (dummy) stream from Y...\n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_Y,\n                                                   params(\"qt\", \"/stream\", \"expr\",\n                                                          \"update(\"+COLLECTION_X+\",batchSize=1,\" +\n                                                          \"tuple(id='42',a_i=1,b_i=5))\"));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(1, tuples.size());\n      assertEquals(1L, tuples.get(0).get(\"totalIndexed\"));\n    }\n    \n    { // Now add some \"real\" docs directly to Y...\n      final UpdateRequest update = setBasicAuthCredentials(new UpdateRequest(), WRITE_Y_USER);\n      for (int i = 1; i <= 42; i++) {\n        update.add(sdoc(\"id\",i+\"y\",\"foo_i\",\"\"+i));\n      }\n      assertEquals(\"initial docs in Y\",\n                   0, update.commit(cluster.getSolrClient(), COLLECTION_Y).getStatus());\n    }\n\n    { // WRITE_X user should be able to update X via a (search) stream from Y (routed via Y)\n      final String expr\n        = \"update(\"+COLLECTION_X+\", batchSize=50,                   \" // note batch size\n        + \"       search(\"+COLLECTION_Y+\",                          \"\n        + \"              q=\\\"foo_i:[* TO 10]\\\",                     \" // 10 matches = 1 batch\n        + \"              rows=100,                                  \"\n        + \"              fl=\\\"id,foo_i\\\",                           \"\n        + \"              sort=\\\"foo_i desc\\\"))                      \"\n        ;\n      \n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_Y, // NOTE: Y route\n                                                   params(\"qt\", \"/stream\",\n                                                          \"expr\", expr));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(1, tuples.size());\n      assertEquals(10L, tuples.get(0).get(\"batchIndexed\"));\n      assertEquals(10L, tuples.get(0).get(\"totalIndexed\"));\n    }\n\n    { // WRITE_X user should be able to update X via a (search) stream from Y (routed via X)...\n      final String expr\n        = \"update(\"+COLLECTION_X+\", batchSize=5,                    \" // note batch size\n        + \"       search(\"+COLLECTION_Y+\",                          \"\n        + \"              q=\\\"foo_i:[30 TO *]\\\",                     \" // 13 matches = 3 batches\n        + \"              rows=100,                                  \"\n        + \"              fl=\\\"id,foo_i\\\",                           \"\n        + \"              sort=\\\"foo_i desc\\\"))                      \"\n        ;\n      \n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_X, // NOTE: X route\n                                                   params(\"qt\", \"/stream\",\n                                                          \"expr\", expr));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(3, tuples.size());\n      \n      assertEquals( 5L, tuples.get(0).get(\"batchIndexed\"));\n      assertEquals( 5L, tuples.get(0).get(\"totalIndexed\"));\n      \n      assertEquals( 5L, tuples.get(1).get(\"batchIndexed\"));\n      assertEquals(10L, tuples.get(1).get(\"totalIndexed\"));\n      \n      assertEquals( 3L, tuples.get(2).get(\"batchIndexed\"));\n      assertEquals(13L, tuples.get(2).get(\"totalIndexed\"));\n    }\n\n    assertEquals(1L + 10L + 13L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140a95988ddfbe87c2376f5fed6acae475ea11fc"]},"commit2Childs":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["140a95988ddfbe87c2376f5fed6acae475ea11fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}