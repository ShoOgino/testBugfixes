{"path":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertTrue(blue.get(\"numFound\") + \" is not equal to \" + \"5\", blue\n            .get(\"numFound\").toString().equals(\"5\") == true);\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestion != null);\n    assertTrue(\"theSuggestion Size: \" + theSuggestion.size() + \" is not: \" + 5,\n            theSuggestion.size() == 5);\n    //we know there are at least 5, but now only get 3\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(3));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertTrue(blue.get(\"numFound\") + \" is not equal to \" + \"3\", blue\n            .get(\"numFound\").toString().equals(\"3\") == true);\n    SimpleOrderedMap theSuggestions;\n    int idx = blue.indexOf(\"suggestion\", 0);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    assertTrue(idx + \" does not equal: \" + -1, idx == -1);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b65a5358ab784aed1eada0d344601b7d994ea64a","6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e75a1d96274371d7e4cf859ebf69f72ada2e353","date":1214265552,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertTrue(blue.get(\"numFound\") + \" is not equal to \" + \"5\", blue\n            .get(\"numFound\").toString().equals(\"5\") == true);\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestion != null);\n    assertTrue(\"theSuggestion Size: \" + theSuggestion.size() + \" is not: \" + 5,\n            theSuggestion.size() == 5);\n    //we know there are at least 5, but now only get 3\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(3));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertTrue(blue.get(\"numFound\") + \" is not equal to \" + \"3\", blue\n            .get(\"numFound\").toString().equals(\"3\") == true);\n    SimpleOrderedMap theSuggestions;\n    int idx = blue.indexOf(\"suggestion\", 0);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    assertTrue(idx + \" does not equal: \" + -1, idx == -1);\n  }\n\n","sourceOld":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertTrue(blue.get(\"numFound\") + \" is not equal to \" + \"5\", blue\n            .get(\"numFound\").toString().equals(\"5\") == true);\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestion != null);\n    assertTrue(\"theSuggestion Size: \" + theSuggestion.size() + \" is not: \" + 5,\n            theSuggestion.size() == 5);\n    //we know there are at least 5, but now only get 3\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(3));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertTrue(blue.get(\"numFound\") + \" is not equal to \" + \"3\", blue\n            .get(\"numFound\").toString().equals(\"3\") == true);\n    SimpleOrderedMap theSuggestions;\n    int idx = blue.indexOf(\"suggestion\", 0);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    assertTrue(idx + \" does not equal: \" + -1, idx == -1);\n\n\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65a5358ab784aed1eada0d344601b7d994ea64a","date":1252448553,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","sourceOld":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertTrue(\"command is null and it shouldn't be\", cmdExec != null);\n    assertTrue(cmdExec + \" is not equal to \" + \"build\",\n            cmdExec.equals(\"build\") == true);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertTrue(blue.get(\"numFound\") + \" is not equal to \" + \"5\", blue\n            .get(\"numFound\").toString().equals(\"5\") == true);\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestion != null);\n    assertTrue(\"theSuggestion Size: \" + theSuggestion.size() + \" is not: \" + 5,\n            theSuggestion.size() == 5);\n    //we know there are at least 5, but now only get 3\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(3));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    assertTrue(\"spellCheck is null and it shouldn't be\", spellCheck != null);\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    assertTrue(\"suggestions is null and it shouldn't be\", suggestions != null);\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertTrue(blue.get(\"numFound\") + \" is not equal to \" + \"3\", blue\n            .get(\"numFound\").toString().equals(\"3\") == true);\n    SimpleOrderedMap theSuggestions;\n    int idx = blue.indexOf(\"suggestion\", 0);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    theSuggestions = (SimpleOrderedMap) blue.get(\"suggestion\", idx);\n    assertTrue(\"theSuggestion is null and it shouldn't be: \" + blue,\n            theSuggestions != null);\n    assertTrue(\"theSuggestions Size: \" + theSuggestions.size() + \" is not: \" + 2,\n            theSuggestions.size() == 2);//the word and the frequency\n\n    idx = blue.indexOf(\"suggestion\", idx + 1);\n    assertTrue(idx + \" does not equal: \" + -1, idx == -1);\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","sourceOld":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b65a5358ab784aed1eada0d344601b7d994ea64a"],"b65a5358ab784aed1eada0d344601b7d994ea64a":["6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75a1d96274371d7e4cf859ebf69f72ada2e353":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["6e75a1d96274371d7e4cf859ebf69f72ada2e353"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b65a5358ab784aed1eada0d344601b7d994ea64a":["ad94625fb8d088209f46650c8097196fec67f00c"],"6e75a1d96274371d7e4cf859ebf69f72ada2e353":["b65a5358ab784aed1eada0d344601b7d994ea64a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}