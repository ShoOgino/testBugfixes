{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(BKDConfig,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","commits":[{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(BKDConfig,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int,int,int[],MutablePointValues,int,int,BytesRef,BytesRef).mjava","sourceNew":"  /** Sort points on the given dimension. */\n  public static void sortByDim(BKDConfig config, int sortedDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    final int start = sortedDim * config.bytesPerDim + commonPrefixLengths[sortedDim];\n    final int dimEnd =  sortedDim * config.bytesPerDim + config.bytesPerDim;\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + start, pivot.offset + dimEnd, scratch2.bytes,\n            scratch2.offset + start, scratch2.offset + dimEnd);\n        if (cmp == 0) {\n          cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + config.packedIndexBytesLength, pivot.offset + config.packedBytesLength,\n              scratch2.bytes, scratch2.offset + config.packedIndexBytesLength, scratch2.offset + config.packedBytesLength);\n          if (cmp == 0) {\n            cmp = pivotDoc - reader.getDocID(j);\n          }\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort points on the given dimension. */\n  public static void sortByDim(int numDataDim, int numIndexDim, int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n                               MutablePointValues reader, int from, int to,\n                               BytesRef scratch1, BytesRef scratch2) {\n\n    final int start = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int dimEnd =  sortedDim * bytesPerDim + bytesPerDim;\n    final int dataStart = numIndexDim * bytesPerDim;\n    final int dataEnd = dataStart + (numDataDim - numIndexDim) * bytesPerDim;\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + start, pivot.offset + dimEnd, scratch2.bytes,\n            scratch2.offset + start, scratch2.offset + dimEnd);\n        if (cmp == 0) {\n          cmp = Arrays.compareUnsigned(pivot.bytes, pivot.offset + dataStart, pivot.offset + dataEnd,\n              scratch2.bytes, scratch2.offset + dataStart, scratch2.offset + dataEnd);\n          if (cmp == 0) {\n            cmp = pivotDoc - reader.getDocID(j);\n          }\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}