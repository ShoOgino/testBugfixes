{"path":"lucene/monitor/src/test/org/apache/lucene/monitor/TestMonitor#testUpdateReporting().mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestMonitor#testUpdateReporting().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateReporting() throws IOException {\n\n    List<MonitorQuery> queries = new ArrayList<>(10400);\n    for (int i = 0; i < 10355; i++) {\n      queries.add(new MonitorQuery(Integer.toString(i), MonitorTestBase.parse(\"test\")));\n    }\n\n    final int[] expectedSizes = new int[]{5001, 5001, 353};\n    final AtomicInteger callCount = new AtomicInteger();\n    final AtomicInteger updateCount = new AtomicInteger();\n\n    MonitorUpdateListener listener = new MonitorUpdateListener() {\n\n      @Override\n      public void afterUpdate(List<MonitorQuery> updates) {\n        int calls = callCount.getAndIncrement();\n        updateCount.addAndGet(updates.size());\n        assertEquals(expectedSizes[calls], updates.size());\n      }\n    };\n\n    try (Monitor monitor = new Monitor(ANALYZER)) {\n      monitor.addQueryIndexUpdateListener(listener);\n      monitor.register(queries);\n      assertEquals(10355, updateCount.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/monitor/src/test/org/apache/lucene/monitor/TestMonitor#testUpdateReporting().mjava","pathOld":"lucene/monitor/src/test/org/apache/lucene/monitor/TestMonitor#testUpdateReporting().mjava","sourceNew":"  // takes huge amounts of ram. TODO: what is this test doing?\n  @Nightly\n  public void testUpdateReporting() throws IOException {\n\n    List<MonitorQuery> queries = new ArrayList<>(10400);\n    for (int i = 0; i < 10355; i++) {\n      queries.add(new MonitorQuery(Integer.toString(i), MonitorTestBase.parse(\"test\")));\n    }\n\n    final int[] expectedSizes = new int[]{5001, 5001, 353};\n    final AtomicInteger callCount = new AtomicInteger();\n    final AtomicInteger updateCount = new AtomicInteger();\n\n    MonitorUpdateListener listener = new MonitorUpdateListener() {\n\n      @Override\n      public void afterUpdate(List<MonitorQuery> updates) {\n        int calls = callCount.getAndIncrement();\n        updateCount.addAndGet(updates.size());\n        assertEquals(expectedSizes[calls], updates.size());\n      }\n    };\n\n    try (Monitor monitor = new Monitor(ANALYZER)) {\n      monitor.addQueryIndexUpdateListener(listener);\n      monitor.register(queries);\n      assertEquals(10355, updateCount.get());\n    }\n  }\n\n","sourceOld":"  public void testUpdateReporting() throws IOException {\n\n    List<MonitorQuery> queries = new ArrayList<>(10400);\n    for (int i = 0; i < 10355; i++) {\n      queries.add(new MonitorQuery(Integer.toString(i), MonitorTestBase.parse(\"test\")));\n    }\n\n    final int[] expectedSizes = new int[]{5001, 5001, 353};\n    final AtomicInteger callCount = new AtomicInteger();\n    final AtomicInteger updateCount = new AtomicInteger();\n\n    MonitorUpdateListener listener = new MonitorUpdateListener() {\n\n      @Override\n      public void afterUpdate(List<MonitorQuery> updates) {\n        int calls = callCount.getAndIncrement();\n        updateCount.addAndGet(updates.size());\n        assertEquals(expectedSizes[calls], updates.size());\n      }\n    };\n\n    try (Monitor monitor = new Monitor(ANALYZER)) {\n      monitor.addQueryIndexUpdateListener(listener);\n      monitor.register(queries);\n      assertEquals(10355, updateCount.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}