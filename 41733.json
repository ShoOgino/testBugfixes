{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#get(CategoryPath).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#get(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#get(CategoryPath).mjava","sourceNew":"  /**\n   * Lookup a category in the cache, returning its ordinal, or a negative\n   * number if the category is not in the cache.\n   * <P>\n   * It is up to the caller to remember what a negative response means:\n   * If the caller knows the cache is <I>complete</I> (it was initially\n   * fed with all the categories, and since then put() never returned true)\n   * it means the category does not exist. Otherwise, the category might\n   * still exist, but just be missing from the cache.\n   */\n  public int get(CategoryPath categoryPath);\n\n","sourceOld":"  /**\n   * Lookup a category in the cache, returning its ordinal, or a negative\n   * number if the category is not in the cache.\n   * <P>\n   * It is up to the caller to remember what a negative response means:\n   * If the caller knows the cache is <I>complete</I> (it was initially\n   * fed with all the categories, and since then put() never returned true)\n   * it means the category does not exist. Otherwise, the category might\n   * still exist, but just be missing from the cache.\n   */\n  public int get(CategoryPath categoryPath);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#get(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#get(CategoryPath).mjava","sourceNew":"  /**\n   * Lookup a category in the cache, returning its ordinal, or a negative\n   * number if the category is not in the cache.\n   * <P>\n   * It is up to the caller to remember what a negative response means:\n   * If the caller knows the cache is <I>complete</I> (it was initially\n   * fed with all the categories, and since then put() never returned true)\n   * it means the category does not exist. Otherwise, the category might\n   * still exist, but just be missing from the cache.\n   */\n  public int get(FacetLabel categoryPath);\n\n","sourceOld":"  /**\n   * Lookup a category in the cache, returning its ordinal, or a negative\n   * number if the category is not in the cache.\n   * <P>\n   * It is up to the caller to remember what a negative response means:\n   * If the caller knows the cache is <I>complete</I> (it was initially\n   * fed with all the categories, and since then put() never returned true)\n   * it means the category does not exist. Otherwise, the category might\n   * still exist, but just be missing from the cache.\n   */\n  public int get(CategoryPath categoryPath);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache#get(CategoryPath).mjava","sourceNew":null,"sourceOld":"  /**\n   * Lookup a category in the cache, returning its ordinal, or a negative\n   * number if the category is not in the cache.\n   * <P>\n   * It is up to the caller to remember what a negative response means:\n   * If the caller knows the cache is <I>complete</I> (it was initially\n   * fed with all the categories, and since then put() never returned true)\n   * it means the category does not exist. Otherwise, the category might\n   * still exist, but just be missing from the cache.\n   */\n  public int get(CategoryPath categoryPath);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}