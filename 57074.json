{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17bb09a766d49e4c0bb1049cebc1cf10236004f7","date":1463076873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done.\n   * If a Calendar is passed in, there might be problems if it is not created via {@link #newCal()}.\n   */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = YEAR_LEVEL +1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done.\n   * If a Calendar is passed in, there might be problems if it is not created via {@link #newCal()}.\n   */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = YEAR_LEVEL +1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done.\n   * If a Calendar is passed in, there might be problems if it is not created via {@link #newCal()}.\n   */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = YEAR_LEVEL +1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toShape(Calendar).mjava","sourceNew":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done.\n   * If a Calendar is passed in, there might be problems if it is not created via {@link #newCal()}.\n   */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = YEAR_LEVEL +1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Converts the Calendar into a Shape.\n   * The isSet() state of the Calendar is re-instated when done. */\n  public UnitNRShape toShape(Calendar cal) {\n    // Convert a Calendar into a stack of cell numbers\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    try {\n      int[] valStack = new int[maxLevels];//starts at level 1, not 0\n      int len = 0;\n      if (calPrecField >= Calendar.YEAR) {//year or better precision\n        int year = cal.get(Calendar.YEAR);\n        int yearAdj = cal.get(Calendar.ERA) == 0 ? AD_YEAR_BASE - (year - 1) : AD_YEAR_BASE + year;\n\n        valStack[len++] = yearAdj / 1000_000;\n        yearAdj -= valStack[len-1] * 1000_000;\n        valStack[len++] = yearAdj / 1000;\n        yearAdj -= valStack[len-1] * 1000;\n        valStack[len++] = yearAdj;\n        for (int level = yearLevel+1; level < FIELD_BY_LEVEL.length; level++) {\n          int field = FIELD_BY_LEVEL[level];\n          if (field > calPrecField)\n            break;\n          valStack[len++] = cal.get(field) - cal.getActualMinimum(field);\n        }\n      }\n\n      return toShape(valStack, len);\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["af2638813028b254a88b418ebeafb541afb49653","17bb09a766d49e4c0bb1049cebc1cf10236004f7"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["af2638813028b254a88b418ebeafb541afb49653","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["0ad30c6a479e764150a3316e57263319775f1df2","17bb09a766d49e4c0bb1049cebc1cf10236004f7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}