{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return (proxyPort != -1) ? proxyPort : conns[0].getLocalPort();\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","date":1420472758,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return (proxyPort != -1) ? proxyPort : ((ServerConnector) conns[0]).getLocalPort();\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return (proxyPort != -1) ? proxyPort : conns[0].getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return ((ServerConnector) conns[0]).getLocalPort();\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return (proxyPort != -1) ? proxyPort : ((ServerConnector) conns[0]).getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getFirstConnectorPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   *\n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return ((ServerConnector) conns[0]).getLocalPort();\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  private int getFirstConnectorPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return ((ServerConnector) conns[0]).getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84f20f331d8001864545c7021812d8c6509c7593":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["14d5815ecbef89580f5c48990bcd433f04f8563a"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","14d5815ecbef89580f5c48990bcd433f04f8563a"],"84f20f331d8001864545c7021812d8c6509c7593":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}