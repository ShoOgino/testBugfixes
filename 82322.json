{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    return new TermQuery(new Term(field.getName(), br));\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    return new TermQuery(new Term(field.getName(), br));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    return new TermQuery(new Term(field.getName(), br));\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    return new TermQuery(new Term(field.getName(), br));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    return new TermQuery(new Term(field.getName(), br));\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    return new TermQuery(new Term(field.getName(), br));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffced88b5e83e2ec0a42723404a647e766d96b8c","date":1361398349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return new ConstantScoreQuery(new FieldCacheTermsFilter(field.getName(), br));\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    return new TermQuery(new Term(field.getName(), br));\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return new ConstantScoreQuery(new FieldCacheTermsFilter(field.getName(), br));\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br.toBytesRef()));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRef br = new BytesRef();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","bugFix":["e6d5c544b159d10e466963873aff1582863f2b6e","ffced88b5e83e2ec0a42723404a647e766d96b8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br.toBytesRef()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getFieldQuery(QParser,SchemaField,String).mjava","sourceNew":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a Query instance for doing searches against a field.\n   * @param parser The {@link org.apache.solr.search.QParser} calling the method\n   * @param field The {@link org.apache.solr.schema.SchemaField} of the field to search\n   * @param externalVal The String representation of the value to search\n   * @return The {@link org.apache.lucene.search.Query} instance.  This implementation returns a {@link org.apache.lucene.search.TermQuery} but overriding queries may not\n   * \n   */\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal) {\n    BytesRefBuilder br = new BytesRefBuilder();\n    readableToIndexed(externalVal, br);\n    if (field.hasDocValues() && !field.indexed()) {\n      // match-only\n      return getRangeQuery(parser, field, externalVal, externalVal, true, true);\n    } else {\n      return new TermQuery(new Term(field.getName(), br));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["38b5bd3ae837751f57f363e9a41b833794222814","0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["38b5bd3ae837751f57f363e9a41b833794222814"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"c26f00b574427b55127e869b935845554afde1fa":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["38b5bd3ae837751f57f363e9a41b833794222814"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"38b5bd3ae837751f57f363e9a41b833794222814":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","0c81907bd971f786e378654d32b80da32b0e950d"],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}