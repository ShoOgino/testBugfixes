{"path":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String tmpIODir = System.getProperty(\"tempDir\");\n    String userName = System.getProperty(\"user.name\");\n    String path = tmpIODir + File.separator + \"lazyDir\" + userName;\n    File file = new File(path);\n    _TestUtil.rmDir(file);\n    FSDirectory tmpDir = FSDirectory.open(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriter writer = new IndexWriter(tmpDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 50;\n    Set lazyFieldNames = new HashSet();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections.EMPTY_SET, lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader != null);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n    System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}