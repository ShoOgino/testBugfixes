{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","sourceNew":"  /**\n   * Ensures slop of 0 works for exact matches, but not reversed\n   */\n  public void testExact() throws Exception {\n    // slop is zero by default\n    query.add(new Term(\"field\", \"four\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"exact match\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reverse not exact\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Ensures slop of 0 works for exact matches, but not reversed\n   */\n  public void testExact() throws Exception {\n    // slop is zero by default\n    query.add(new Term(\"field\", \"four\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"exact match\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reverse not exact\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","sourceNew":"  /**\n   * Ensures slop of 0 works for exact matches, but not reversed\n   */\n  public void testExact() throws Exception {\n    // slop is zero by default\n    query.add(new Term(\"field\", \"four\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"exact match\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reverse not exact\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Ensures slop of 0 works for exact matches, but not reversed\n   */\n  public void testExact() throws Exception {\n    // slop is zero by default\n    query.add(new Term(\"field\", \"four\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"exact match\", 1, hits.length);\n    QueryUtils.check(random, query,searcher);\n\n\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reverse not exact\", 0, hits.length);\n    QueryUtils.check(random, query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","sourceNew":"  /**\n   * Ensures slop of 0 works for exact matches, but not reversed\n   */\n  public void testExact() throws Exception {\n    // slop is zero by default\n    query.add(new Term(\"field\", \"four\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"exact match\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"reverse not exact\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Ensures slop of 0 works for exact matches, but not reversed\n   */\n  public void testExact() throws Exception {\n    // slop is zero by default\n    query.add(new Term(\"field\", \"four\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"exact match\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"reverse not exact\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testExact().mjava","sourceNew":"  /**\n   * Ensures slop of 0 works for exact matches, but not reversed\n   */\n  public void testExact() throws Exception {\n    // slop is zero by default\n    query = new PhraseQuery(\"field\", \"four\", \"five\");\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"exact match\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery(\"field\", \"two\", \"one\");\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"reverse not exact\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Ensures slop of 0 works for exact matches, but not reversed\n   */\n  public void testExact() throws Exception {\n    // slop is zero by default\n    query.add(new Term(\"field\", \"four\"));\n    query.add(new Term(\"field\", \"five\"));\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"exact match\", 1, hits.length);\n    QueryUtils.check(random(), query,searcher);\n\n\n    query = new PhraseQuery();\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"one\"));\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(\"reverse not exact\", 0, hits.length);\n    QueryUtils.check(random(), query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}