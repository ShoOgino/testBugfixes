{"path":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(AtomicReader).mjava","commits":[{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(IndexReaderAndLiveDocs).mjava","sourceNew":"    public static DocMap build(AtomicReader reader) {\n      final int maxDoc = reader.maxDoc();\n      final int numDeletes = reader.numDeletedDocs();\n      final int numDocs = maxDoc - numDeletes;\n      assert reader.getLiveDocs() != null || numDeletes == 0;\n      if (numDeletes == 0) {\n        return new NoDelDocMap(maxDoc);\n      } else if (numDeletes < numDocs) {\n        return buildDelCountDocmap(maxDoc, numDeletes, reader.getLiveDocs(), PackedInts.COMPACT);\n      } else {\n        return buildDirectDocMap(maxDoc, numDocs, reader.getLiveDocs(), PackedInts.COMPACT);\n      }\n    }\n\n","sourceOld":"    public static DocMap build(IndexReaderAndLiveDocs reader) {\n      final int maxDoc = reader.reader.maxDoc();\n      final int numDeletes = reader.numDeletedDocs;\n      final int numDocs = maxDoc - numDeletes;\n      assert reader.liveDocs != null || numDeletes == 0;\n      if (numDeletes == 0) {\n        return new NoDelDocMap(maxDoc);\n      } else if (numDeletes < numDocs) {\n        return buildDelCountDocmap(maxDoc, numDeletes, reader.liveDocs, PackedInts.COMPACT);\n      } else {\n        return buildDirectDocMap(maxDoc, numDocs, reader.liveDocs, PackedInts.COMPACT);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"    public static DocMap build(AtomicReader reader) {\n      final int maxDoc = reader.maxDoc();\n      final int numDeletes = reader.numDeletedDocs();\n      final int numDocs = maxDoc - numDeletes;\n      assert reader.getLiveDocs() != null || numDeletes == 0;\n      if (numDeletes == 0) {\n        return new NoDelDocMap(maxDoc);\n      } else if (numDeletes < numDocs) {\n        return buildDelCountDocmap(maxDoc, numDeletes, reader.getLiveDocs(), PackedInts.COMPACT);\n      } else {\n        return buildDirectDocMap(maxDoc, numDocs, reader.getLiveDocs(), PackedInts.COMPACT);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(AtomicReader).mjava","sourceNew":"    /** Creates a {@link DocMap} instance appropriate for\n     *  this reader. */\n    public static DocMap build(AtomicReader reader) {\n      final int maxDoc = reader.maxDoc();\n      final int numDeletes = reader.numDeletedDocs();\n      final int numDocs = maxDoc - numDeletes;\n      assert reader.getLiveDocs() != null || numDeletes == 0;\n      if (numDeletes == 0) {\n        return new NoDelDocMap(maxDoc);\n      } else if (numDeletes < numDocs) {\n        return buildDelCountDocmap(maxDoc, numDeletes, reader.getLiveDocs(), PackedInts.COMPACT);\n      } else {\n        return buildDirectDocMap(maxDoc, numDocs, reader.getLiveDocs(), PackedInts.COMPACT);\n      }\n    }\n\n","sourceOld":"    public static DocMap build(AtomicReader reader) {\n      final int maxDoc = reader.maxDoc();\n      final int numDeletes = reader.numDeletedDocs();\n      final int numDocs = maxDoc - numDeletes;\n      assert reader.getLiveDocs() != null || numDeletes == 0;\n      if (numDeletes == 0) {\n        return new NoDelDocMap(maxDoc);\n      } else if (numDeletes < numDocs) {\n        return buildDelCountDocmap(maxDoc, numDeletes, reader.getLiveDocs(), PackedInts.COMPACT);\n      } else {\n        return buildDirectDocMap(maxDoc, numDocs, reader.getLiveDocs(), PackedInts.COMPACT);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0843e8b2ca3aecd360f2e6db0f777d42935ee","date":1361489674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(AtomicReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(AtomicReader).mjava","sourceNew":"    /** Creates a {@link DocMap} instance appropriate for\n     *  this reader. */\n    public static DocMap build(AtomicReader reader) {\n      final int maxDoc = reader.maxDoc();\n      if (!reader.hasDeletions()) {\n        return new NoDelDocMap(maxDoc);\n      }\n      final Bits liveDocs = reader.getLiveDocs();\n      return build(maxDoc, liveDocs);\n    }\n\n","sourceOld":"    /** Creates a {@link DocMap} instance appropriate for\n     *  this reader. */\n    public static DocMap build(AtomicReader reader) {\n      final int maxDoc = reader.maxDoc();\n      final int numDeletes = reader.numDeletedDocs();\n      final int numDocs = maxDoc - numDeletes;\n      assert reader.getLiveDocs() != null || numDeletes == 0;\n      if (numDeletes == 0) {\n        return new NoDelDocMap(maxDoc);\n      } else if (numDeletes < numDocs) {\n        return buildDelCountDocmap(maxDoc, numDeletes, reader.getLiveDocs(), PackedInts.COMPACT);\n      } else {\n        return buildDirectDocMap(maxDoc, numDocs, reader.getLiveDocs(), PackedInts.COMPACT);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState.DocMap#build(AtomicReader).mjava","sourceNew":null,"sourceOld":"    /** Creates a {@link DocMap} instance appropriate for\n     *  this reader. */\n    public static DocMap build(AtomicReader reader) {\n      final int maxDoc = reader.maxDoc();\n      if (!reader.hasDeletions()) {\n        return new NoDelDocMap(maxDoc);\n      }\n      final Bits liveDocs = reader.getLiveDocs();\n      return build(maxDoc, liveDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c95a819869502635864dac0a788f874787e3395b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dff0843e8b2ca3aecd360f2e6db0f777d42935ee":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["c95a819869502635864dac0a788f874787e3395b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["dff0843e8b2ca3aecd360f2e6db0f777d42935ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"c95a819869502635864dac0a788f874787e3395b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c14aed69f37b57db63b1fccc0740b17060a08f2b"],"dff0843e8b2ca3aecd360f2e6db0f777d42935ee":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c95a819869502635864dac0a788f874787e3395b","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["dff0843e8b2ca3aecd360f2e6db0f777d42935ee"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}