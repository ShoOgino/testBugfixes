{"path":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, Type.SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, Type.BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, Type.SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, Type.BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, Type.SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, Type.BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.ShortParser) initFieldType(field, Type.SHORT);\n    else if (parser instanceof FieldCache.ByteParser) initFieldType(field, Type.BYTE);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":null,"sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":null,"sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortField#SortField(String,FieldCache.Parser,boolean).mjava","sourceNew":null,"sourceOld":"  /** Creates a sort, possibly in reverse, by terms in the given field, parsed\n   * to numeric values using a custom {@link FieldCache.Parser}.\n   * @param field  Name of field to sort by.  Must not be null.\n   * @param parser Instance of a {@link FieldCache.Parser},\n   *  which must subclass one of the existing numeric\n   *  parsers from {@link FieldCache}. Sort type is inferred\n   *  by testing which numeric parser the parser subclasses.\n   * @param reverse True if natural order should be reversed.\n   * @throws IllegalArgumentException if the parser fails to\n   *  subclass an existing numeric parser, or field is null\n   */\n  public SortField(String field, FieldCache.Parser parser, boolean reverse) {\n    if (parser instanceof FieldCache.IntParser) initFieldType(field, Type.INT);\n    else if (parser instanceof FieldCache.FloatParser) initFieldType(field, Type.FLOAT);\n    else if (parser instanceof FieldCache.LongParser) initFieldType(field, Type.LONG);\n    else if (parser instanceof FieldCache.DoubleParser) initFieldType(field, Type.DOUBLE);\n    else {\n      throw new IllegalArgumentException(\"Parser instance does not subclass existing numeric parser from FieldCache (got \" + parser + \")\");\n    }\n\n    this.reverse = reverse;\n    this.parser = parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["59a0020b413d44dd79d85d7a66ed5004265fb453","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"56572ec06f1407c066d6b7399413178b33176cd8":["59a0020b413d44dd79d85d7a66ed5004265fb453","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}