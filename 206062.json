{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","sourceNew":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      try {\n        return new ConstantDateExpression(TrieDateField.parseDate(operands));\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a date.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      try {\n        return new ConstantDateExpression(TrieDateField.parseDate(operands));\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a date.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","sourceNew":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      try {\n        return new ConstantDateExpression(DateFormatUtil.parseDate(operands));\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a date.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      try {\n        return new ConstantDateExpression(TrieDateField.parseDate(operands));\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a date.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","sourceNew":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      return new ConstantDateExpression(DateMathParser.parseMath(null, operands));\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      try {\n        return new ConstantDateExpression(DateFormatUtil.parseDate(operands));\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a date.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      return new ConstantDateExpression(DateMathParser.parseMath(null, operands));\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      return new ConstantDateExpression(DateMathParser.parseMath(null, operands));\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/expression/ExpressionFactory#create(String,StatsCollector[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a single expression that contains delegate expressions and/or \n   * a StatsCollector.\n   * StatsCollectors are given as input and not created within the method so that\n   * expressions can share the same StatsCollectors, minimizing computation.\n   * \n   * @param expression String representation of the desired expression\n   * @param statsCollectors List of StatsCollectors to build the expression with. \n   * @return the expression\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static Expression create(String expression, StatsCollector[] statsCollectors) {\n    int paren = expression.indexOf('(');\n    if (paren<=0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The expression [\"+expression+\"] has no arguments and is not supported.\");\n    }\n    String topOperation = expression.substring(0,paren).trim();\n    String operands;\n    try {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')')).trim();\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expression+\"]\",e);\n    }\n    \n    // Builds a statistic, constant or recursively builds an expression tree\n    \n    // Statistic \n    if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n      if (topOperation.equals(AnalyticsParams.STAT_PERCENTILE)) {\n        operands = expression.substring(expression.indexOf(',')+1, expression.lastIndexOf(')')).trim();\n        topOperation = topOperation+\"_\"+expression.substring(expression.indexOf('(')+1, expression.indexOf(',')).trim();\n      }\n      StatsCollector collector = null;\n      // Finds the desired counter and builds an expression around it and the desired statistic.\n      for (StatsCollector c : statsCollectors) {\n        if (c.valueSourceString().equals(operands)) { \n          collector = c;\n          break;\n        }\n      }\n      if (collector == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"ValueSource [\"+operands+\"] in Expression [\"+expression+\"] not found.\");\n      }\n      return new BaseExpression(collector, topOperation);\n    }\n    // Constant\n    if (topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      try {\n        return new ConstantNumberExpression(Double.parseDouble(operands));\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The constant \"+operands+\" cannot be converted into a number.\",e);\n      }\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_DATE)) {\n      return new ConstantDateExpression(DateMathParser.parseMath(null, operands));\n    } else if (topOperation.equals(AnalyticsParams.CONSTANT_STRING)) {\n      operands = expression.substring(paren+1, expression.lastIndexOf(')'));\n      return new ConstantStringExpression(operands);\n    }\n    \n    // Complex Delegating Expressions\n    String[] arguments = getArguments(operands);\n    Expression[] expArgs = new Expression[arguments.length];\n    for (int count = 0; count < arguments.length; count++) {\n      // Recursively builds delegate expressions\n      expArgs[count] = create(arguments[count], statsCollectors);\n    }\n    \n    // Single Delegate Expressions\n    if (expArgs.length==1) {\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.NEGATE)) {\n        return new NegateExpression(expArgs[0]);\n      }\n      if (topOperation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n        return new AbsoluteValueExpression(expArgs[0]);\n      }\n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.REVERSE)) {\n        return new ReverseExpression(expArgs[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments.\");\n    }  else {\n      // Multi Delegate Expressions\n      // Numeric Expression\n      if (topOperation.equals(AnalyticsParams.ADD)) {\n        return new AddExpression(expArgs);\n      } else if (topOperation.equals(AnalyticsParams.MULTIPLY)) {\n        return new MultiplyExpression(expArgs);\n      }\n      // Date Expression\n      else if (topOperation.equals(AnalyticsParams.DATE_MATH)) {\n        return new DateMathExpression(expArgs);\n      } \n      // String Expression\n      else if (topOperation.equals(AnalyticsParams.CONCATENATE)) {\n        return new ConcatenateExpression(expArgs);\n      } \n      // Dual Delegate Expressions\n      else if (expArgs.length==2 && (topOperation.equals(AnalyticsParams.DIVIDE) || topOperation.equals(AnalyticsParams.POWER) \n          || topOperation.equals(AnalyticsParams.LOG))) {\n        // Numeric Expression\n        if (topOperation.equals(AnalyticsParams.DIVIDE)) {\n          return new DivideExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.POWER)) {\n          return new PowerExpression(expArgs[0], expArgs[1]);\n        } else if (topOperation.equals(AnalyticsParams.LOG)) {\n          return new LogExpression(expArgs[0], expArgs[1]);\n        }\n        return null;\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, topOperation+\" does not have the correct number of arguments or is unsupported.\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["d3f6c7717a0f1decd1668144537943efcc70cd95","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["d3f6c7717a0f1decd1668144537943efcc70cd95","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}