{"path":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16cbef32b882ec68df422af3f08845ec82620335","date":1337802266,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.numDocs;\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          state.numDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#SepPostingsWriter(SegmentWriteState,IntStreamFactory,int).mjava","sourceNew":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","sourceOld":"  public SepPostingsWriter(SegmentWriteState state, IntStreamFactory factory, int skipInterval) throws IOException {\n    freqOut = null;\n    freqIndex = null;\n    posOut = null;\n    posIndex = null;\n    payloadOut = null;\n    boolean success = false;\n    try {\n      this.skipInterval = skipInterval;\n      this.skipMinimum = skipInterval; /* set to the same for now */\n      final String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, DOC_EXTENSION);\n      docOut = factory.createOutput(state.directory, docFileName, state.context);\n      docIndex = docOut.index();\n      \n      if (state.fieldInfos.hasFreq()) {\n        final String frqFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FREQ_EXTENSION);\n        freqOut = factory.createOutput(state.directory, frqFileName, state.context);\n        freqIndex = freqOut.index();\n      }\n\n      if (state.fieldInfos.hasProx()) {      \n        final String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, POS_EXTENSION);\n        posOut = factory.createOutput(state.directory, posFileName, state.context);\n        posIndex = posOut.index();\n        \n        // TODO: -- only if at least one field stores payloads?\n        final String payloadFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, PAYLOAD_EXTENSION);\n        payloadOut = state.directory.createOutput(payloadFileName, state.context);\n      }\n      \n      final String skipFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, SKIP_EXTENSION);\n      skipOut = state.directory.createOutput(skipFileName, state.context);\n      \n      totalNumDocs = state.segmentInfo.getDocCount();\n      \n      skipListWriter = new SepSkipListWriter(skipInterval,\n          maxSkipLevels,\n          totalNumDocs,\n          freqOut, docOut,\n          posOut, payloadOut);\n      \n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, skipOut, freqOut, posOut, payloadOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","16cbef32b882ec68df422af3f08845ec82620335"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16cbef32b882ec68df422af3f08845ec82620335":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["16cbef32b882ec68df422af3f08845ec82620335"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16cbef32b882ec68df422af3f08845ec82620335":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}