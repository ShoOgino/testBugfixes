{"path":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testItemOrdering().mjava","commits":[{"id":"3a2591037a85ef083e6588e0b846a5a34ff9b5a3","date":1326403130,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testItemOrdering().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testItemOrdering() {\n    ConcurrentLFUCache<Integer, String> cache = new ConcurrentLFUCache<Integer, String>(100, 90);\n    try {\n      for (int i = 0; i < 50; i++) {\n        cache.put(i + 1, \"\" + (i + 1));\n      }\n      for (int i = 0; i < 44; i++) {\n        cache.get(i + 1);\n        cache.get(i + 1);\n      }\n      cache.get(1);\n      cache.get(1);\n      cache.get(1);\n      cache.get(3);\n      cache.get(3);\n      cache.get(3);\n      cache.get(5);\n      cache.get(5);\n      cache.get(5);\n      cache.get(7);\n      cache.get(7);\n      cache.get(7);\n      cache.get(9);\n      cache.get(9);\n      cache.get(9);\n      cache.get(48);\n      cache.get(48);\n      cache.get(48);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n\n      Map<Integer, String> m;\n\n      m = cache.getMostUsedItems(5);\n      //System.out.println(m);\n      // 50 9 7 5 3 1\n      assertNotNull(m.get(50));\n      assertNotNull(m.get(9));\n      assertNotNull(m.get(7));\n      assertNotNull(m.get(5));\n      assertNotNull(m.get(3));\n\n      m = cache.getLeastUsedItems(5);\n      //System.out.println(m);\n      // 49 47 46 45 2\n      assertNotNull(m.get(49));\n      assertNotNull(m.get(47));\n      assertNotNull(m.get(46));\n      assertNotNull(m.get(45));\n      assertNotNull(m.get(2));\n\n      m = cache.getLeastUsedItems(0);\n      assertTrue(m.isEmpty());\n\n      //test this too\n      m = cache.getMostUsedItems(0);\n      assertTrue(m.isEmpty());\n    } finally {\n      cache.destroy();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testItemOrdering().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testItemOrdering().mjava","sourceNew":"  @Test\n  public void testItemOrdering() {\n    ConcurrentLFUCache<Integer, String> cache = new ConcurrentLFUCache<>(100, 90);\n    try {\n      for (int i = 0; i < 50; i++) {\n        cache.put(i + 1, \"\" + (i + 1));\n      }\n      for (int i = 0; i < 44; i++) {\n        cache.get(i + 1);\n        cache.get(i + 1);\n      }\n      cache.get(1);\n      cache.get(1);\n      cache.get(1);\n      cache.get(3);\n      cache.get(3);\n      cache.get(3);\n      cache.get(5);\n      cache.get(5);\n      cache.get(5);\n      cache.get(7);\n      cache.get(7);\n      cache.get(7);\n      cache.get(9);\n      cache.get(9);\n      cache.get(9);\n      cache.get(48);\n      cache.get(48);\n      cache.get(48);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n\n      Map<Integer, String> m;\n\n      m = cache.getMostUsedItems(5);\n      //System.out.println(m);\n      // 50 9 7 5 3 1\n      assertNotNull(m.get(50));\n      assertNotNull(m.get(9));\n      assertNotNull(m.get(7));\n      assertNotNull(m.get(5));\n      assertNotNull(m.get(3));\n\n      m = cache.getLeastUsedItems(5);\n      //System.out.println(m);\n      // 49 47 46 45 2\n      assertNotNull(m.get(49));\n      assertNotNull(m.get(47));\n      assertNotNull(m.get(46));\n      assertNotNull(m.get(45));\n      assertNotNull(m.get(2));\n\n      m = cache.getLeastUsedItems(0);\n      assertTrue(m.isEmpty());\n\n      //test this too\n      m = cache.getMostUsedItems(0);\n      assertTrue(m.isEmpty());\n    } finally {\n      cache.destroy();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testItemOrdering() {\n    ConcurrentLFUCache<Integer, String> cache = new ConcurrentLFUCache<Integer, String>(100, 90);\n    try {\n      for (int i = 0; i < 50; i++) {\n        cache.put(i + 1, \"\" + (i + 1));\n      }\n      for (int i = 0; i < 44; i++) {\n        cache.get(i + 1);\n        cache.get(i + 1);\n      }\n      cache.get(1);\n      cache.get(1);\n      cache.get(1);\n      cache.get(3);\n      cache.get(3);\n      cache.get(3);\n      cache.get(5);\n      cache.get(5);\n      cache.get(5);\n      cache.get(7);\n      cache.get(7);\n      cache.get(7);\n      cache.get(9);\n      cache.get(9);\n      cache.get(9);\n      cache.get(48);\n      cache.get(48);\n      cache.get(48);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n\n      Map<Integer, String> m;\n\n      m = cache.getMostUsedItems(5);\n      //System.out.println(m);\n      // 50 9 7 5 3 1\n      assertNotNull(m.get(50));\n      assertNotNull(m.get(9));\n      assertNotNull(m.get(7));\n      assertNotNull(m.get(5));\n      assertNotNull(m.get(3));\n\n      m = cache.getLeastUsedItems(5);\n      //System.out.println(m);\n      // 49 47 46 45 2\n      assertNotNull(m.get(49));\n      assertNotNull(m.get(47));\n      assertNotNull(m.get(46));\n      assertNotNull(m.get(45));\n      assertNotNull(m.get(2));\n\n      m = cache.getLeastUsedItems(0);\n      assertTrue(m.isEmpty());\n\n      //test this too\n      m = cache.getMostUsedItems(0);\n      assertTrue(m.isEmpty());\n    } finally {\n      cache.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testItemOrdering().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testItemOrdering() {\n    ConcurrentLFUCache<Integer, String> cache = new ConcurrentLFUCache<>(100, 90);\n    try {\n      for (int i = 0; i < 50; i++) {\n        cache.put(i + 1, \"\" + (i + 1));\n      }\n      for (int i = 0; i < 44; i++) {\n        cache.get(i + 1);\n        cache.get(i + 1);\n      }\n      cache.get(1);\n      cache.get(1);\n      cache.get(1);\n      cache.get(3);\n      cache.get(3);\n      cache.get(3);\n      cache.get(5);\n      cache.get(5);\n      cache.get(5);\n      cache.get(7);\n      cache.get(7);\n      cache.get(7);\n      cache.get(9);\n      cache.get(9);\n      cache.get(9);\n      cache.get(48);\n      cache.get(48);\n      cache.get(48);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n      cache.get(50);\n\n      Map<Integer, String> m;\n\n      m = cache.getMostUsedItems(5);\n      //System.out.println(m);\n      // 50 9 7 5 3 1\n      assertNotNull(m.get(50));\n      assertNotNull(m.get(9));\n      assertNotNull(m.get(7));\n      assertNotNull(m.get(5));\n      assertNotNull(m.get(3));\n\n      m = cache.getLeastUsedItems(5);\n      //System.out.println(m);\n      // 49 47 46 45 2\n      assertNotNull(m.get(49));\n      assertNotNull(m.get(47));\n      assertNotNull(m.get(46));\n      assertNotNull(m.get(45));\n      assertNotNull(m.get(2));\n\n      m = cache.getLeastUsedItems(0);\n      assertTrue(m.isEmpty());\n\n      //test this too\n      m = cache.getMostUsedItems(0);\n      assertTrue(m.isEmpty());\n    } finally {\n      cache.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"4d7d3943904804560937e6239effeebda0f920e4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}