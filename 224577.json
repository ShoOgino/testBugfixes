{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","commits":[{"id":"179b14362375bb921c76d7217b6c558ced472891","date":1509441077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","pathOld":"/dev/null","sourceNew":"  public void testCoresSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}],\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard3':[{'core_node3':{'type':'NRT'}}],\" +\n        \"        'shard4':[{'core_node4':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':4}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2l, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData(dataproviderdata));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      Map m = suggestionInfo.toMap(new LinkedHashMap<>());\n      assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n      assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","sourceNew":"  public void testCoresSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}],\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard3':[{'core_node3':{'type':'NRT'}}],\" +\n        \"        'shard4':[{'core_node4':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':4}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2L, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData(dataproviderdata));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      Map m = suggestionInfo.toMap(new LinkedHashMap<>());\n      assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n      assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    }\n\n  }\n\n","sourceOld":"  public void testCoresSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}],\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard3':[{'core_node3':{'type':'NRT'}}],\" +\n        \"        'shard4':[{'core_node4':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':4}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2l, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData(dataproviderdata));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      Map m = suggestionInfo.toMap(new LinkedHashMap<>());\n      assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n      assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","sourceNew":"  public void testCoresSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}],\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard3':[{'core_node3':{'type':'NRT'}}],\" +\n        \"        'shard4':[{'core_node4':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':4}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2L, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData(dataproviderdata));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"10.0.0.6:7574_solr\", suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      assertEquals(\"/c/mycoll1\", suggestionInfo._get(\"operation/path\", null));\n    }\n\n  }\n\n","sourceOld":"  public void testCoresSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}],\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard3':[{'core_node3':{'type':'NRT'}}],\" +\n        \"        'shard4':[{'core_node4':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':4}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2L, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData(dataproviderdata));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      Map m = suggestionInfo.toMap(new LinkedHashMap<>());\n      assertEquals(\"10.0.0.6:7574_solr\", Utils.getObjectByPath(m, true, \"operation/command/move-replica/targetNode\"));\n      assertEquals(\"POST\", Utils.getObjectByPath(m, true, \"operation/method\"));\n      assertEquals(\"/c/mycoll1\", Utils.getObjectByPath(m, true, \"operation/path\"));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","sourceNew":"  public void testCoresSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testCoresSuggestions.json\"))).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2L, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData((Map) loadFromResource(\"testCoresSuggestions.json\")));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"10.0.0.6:7574_solr\", suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      assertEquals(\"/c/mycoll1\", suggestionInfo._get(\"operation/path\", null));\n    }\n\n  }\n\n","sourceOld":"  public void testCoresSuggestions() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}],\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard3':[{'core_node3':{'type':'NRT'}}],\" +\n        \"        'shard4':[{'core_node4':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':4}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2L, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData(dataproviderdata));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"10.0.0.6:7574_solr\", suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      assertEquals(\"/c/mycoll1\", suggestionInfo._get(\"operation/path\", null));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","sourceNew":"  public void testCoresSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testCoresSuggestions.json\"))).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2L, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData((Map) loadFromResource(\"testCoresSuggestions.json\")));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"10.0.0.6:7574_solr\", suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      assertEquals(\"/c/mycoll1\", suggestionInfo._get(\"operation/path\", null));\n    }\n\n  }\n\n","sourceOld":"  public void testCoresSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testCoresSuggestions.json\"))).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2L, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData((Map) loadFromResource(\"testCoresSuggestions.json\")));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"10.0.0.6:7574_solr\", suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      assertEquals(\"/c/mycoll1\", suggestionInfo._get(\"operation/path\", null));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testCoresSuggestions().mjava","sourceNew":null,"sourceOld":"  public void testCoresSuggestions() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { cores :'<3', node :'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testCoresSuggestions.json\"))).getViolations();\n    assertFalse(violations.isEmpty());\n    assertEquals(2L, violations.get(0).replicaCountDelta.longValue());\n\n    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg,\n        cloudManagerWithData((Map) loadFromResource(\"testCoresSuggestions.json\")));\n    assertEquals(2, l.size());\n    for (Suggester.SuggestionInfo suggestionInfo : l) {\n      assertEquals(\"10.0.0.6:7574_solr\", suggestionInfo._get(\"operation/command/move-replica/targetNode\", null));\n      assertEquals(\"POST\", suggestionInfo._get(\"operation/method\", null));\n      assertEquals(\"/c/mycoll1\", suggestionInfo._get(\"operation/path\", null));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["f5a27e78e3d29dee02bab19ded25336471e96882"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["33ae23947c41339ea2b352422bb762dfb4a17077"],"33ae23947c41339ea2b352422bb762dfb4a17077":["179b14362375bb921c76d7217b6c558ced472891"],"179b14362375bb921c76d7217b6c558ced472891":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a27e78e3d29dee02bab19ded25336471e96882":["6428b274f6593f368c4f838379620e7f5d196d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["179b14362375bb921c76d7217b6c558ced472891"],"6428b274f6593f368c4f838379620e7f5d196d65":["f5a27e78e3d29dee02bab19ded25336471e96882"],"33ae23947c41339ea2b352422bb762dfb4a17077":["6428b274f6593f368c4f838379620e7f5d196d65"],"179b14362375bb921c76d7217b6c558ced472891":["33ae23947c41339ea2b352422bb762dfb4a17077"],"f5a27e78e3d29dee02bab19ded25336471e96882":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}