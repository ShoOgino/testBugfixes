{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testRewrite().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Like {@link #testRewriteAndMtq} but no freestanding MTQ\n   */\n  public void testRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    SpanNearQuery snq = new SpanNearQuery(\n        new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"bravo\")),\n            new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term(\"body\", \"ch\")))}, // REWRITES\n        0, true);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(snq, BooleanClause.Occur.MUST)\n//          .add(new PrefixQuery(new Term(\"body\", \"al\")), BooleanClause.Occur.MUST) // MTQ\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        // add queries for other fields; we shouldn't highlight these because of that.\n        .add(newPhraseQuery(\"title\", \"bravo alpha\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"},\n        snippets);\n\n    // do again, this time with MTQ disabled.  We should only find \"alpha bravo\".\n    highlighter.setHandleMultiTermQuery(false);//disable but leave phrase processing enabled\n\n    topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> charlie - charlie bravo alpha\"},\n        snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testRewrite().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Like {@link #testRewriteAndMtq} but no freestanding MTQ\n   */\n  public void testRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    SpanNearQuery snq = new SpanNearQuery(\n        new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"bravo\")),\n            new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term(\"body\", \"ch\")))}, // REWRITES\n        0, true);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(snq, BooleanClause.Occur.MUST)\n//          .add(new PrefixQuery(new Term(\"body\", \"al\")), BooleanClause.Occur.MUST) // MTQ\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        // add queries for other fields; we shouldn't highlight these because of that.\n        .add(newPhraseQuery(\"title\", \"bravo alpha\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"},\n        snippets);\n\n    // do again, this time with MTQ disabled.  We should only find \"alpha bravo\".\n    highlighter.setHandleMultiTermQuery(false);//disable but leave phrase processing enabled\n\n    topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> charlie - charlie bravo alpha\"},\n        snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testRewrite().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testRewrite().mjava","sourceNew":"  /**\n   * Like {@link #testRewriteAndMtq} but no freestanding MTQ\n   */\n  public void testRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    SpanNearQuery snq = new SpanNearQuery(\n        new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"bravo\")),\n            new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term(\"body\", \"ch\")))}, // REWRITES\n        0, true);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(snq, BooleanClause.Occur.MUST)\n//          .add(new PrefixQuery(new Term(\"body\", \"al\")), BooleanClause.Occur.MUST) // MTQ\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        // add queries for other fields; we shouldn't highlight these because of that.\n        .add(newPhraseQuery(\"title\", \"bravo alpha\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    if (highlighter.getFlags(\"body\").contains(HighlightFlag.WEIGHT_MATCHES)) {\n      assertArrayEquals(new String[]{\"<b>alpha bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n    } else {\n      assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"}, snippets);\n    }\n\n    // do again, this time with MTQ disabled.  We should only find \"alpha bravo\".\n    highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setHandleMultiTermQuery(false);//disable but leave phrase processing enabled\n\n    topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> charlie - charlie bravo alpha\"},\n        snippets);\n  }\n\n","sourceOld":"  /**\n   * Like {@link #testRewriteAndMtq} but no freestanding MTQ\n   */\n  public void testRewrite() throws IOException {\n    indexWriter.addDocument(newDoc(\"alpha bravo charlie - charlie bravo alpha\"));\n    initReaderSearcherHighlighter();\n\n    SpanNearQuery snq = new SpanNearQuery(\n        new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"bravo\")),\n            new SpanMultiTermQueryWrapper<>(new PrefixQuery(new Term(\"body\", \"ch\")))}, // REWRITES\n        0, true);\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(snq, BooleanClause.Occur.MUST)\n//          .add(new PrefixQuery(new Term(\"body\", \"al\")), BooleanClause.Occur.MUST) // MTQ\n        .add(newPhraseQuery(\"body\", \"alpha bravo\"), BooleanClause.Occur.MUST)\n        // add queries for other fields; we shouldn't highlight these because of that.\n        .add(newPhraseQuery(\"title\", \"bravo alpha\"), BooleanClause.Occur.SHOULD)\n        .build();\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha\"},\n        snippets);\n\n    // do again, this time with MTQ disabled.  We should only find \"alpha bravo\".\n    highlighter.setHandleMultiTermQuery(false);//disable but leave phrase processing enabled\n\n    topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\"<b>alpha</b> <b>bravo</b> charlie - charlie bravo alpha\"},\n        snippets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["795822cce6616d4035b5a4bdbb6c113ea2f715ba","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}