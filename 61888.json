{"path":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        QParser nested = parser.subQuery(queryText, \"func\");\n        return nested.getQuery();\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        QParser nested = parser.subQuery(queryText, \"func\");\n        return nested.getQuery();\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        QParser nested = parser.subQuery(queryText, \"func\");\n        return nested.getQuery();\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        QParser nested = parser.subQuery(queryText, \"func\");\n        return nested.getQuery();\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        QParser nested = parser.subQuery(queryText, \"func\");\n        return nested.getQuery();\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        QParser nested = parser.subQuery(queryText, \"func\");\n        return nested.getQuery();\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","date":1332297168,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      } \n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_') {\n      if (\"_val_\".equals(field)) {\n        QParser nested = parser.subQuery(queryText, \"func\");\n        return nested.getQuery();\n      } else if (\"_query_\".equals(field) && parser != null) {\n        return parser.subQuery(queryText, null).getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","bugFix":["e48ed0466fe2d4f8ba58a47caef1174d9e856d13","66ab3886c1d845c59c9e5b23b2fb247b927db498"],"bugIntro":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(analyzer, field, queryText, quoted);\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      } \n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      } \n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108","3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdb67100dc016748799a77218aa409478372d79"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b53e1fdeb877dfb9c1aba24b343170ae7ffe7108":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}