{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateSortedIndex().mjava","commits":[{"id":"977b81ae1627f47e09182475f4256febbe837a59","date":1479315329,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateSortedIndex().mjava","pathOld":"/dev/null","sourceNew":"  // ant test -Dtestcase=TestBackwardsCompatibility -Dtestmethod=testCreateSortedIndex -Dtests.codec=default -Dtests.useSecurityManager=false -Dtests.bwcdir=/tmp/sorted\n  public void testCreateSortedIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"sorted\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer);\n    conf.setMergePolicy(mp);\n    conf.setUseCompoundFile(false);\n    conf.setIndexSort(new Sort(new SortField(\"dateDV\", SortField.Type.LONG, true)));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(random());\n    SimpleDateFormat parser = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.ROOT);\n    parser.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    ParsePosition position = new ParsePosition(0);\n    Field dateDVField = null;\n    for(int i=0;i<50;i++) {\n      Document doc = docs.nextDoc();\n      String dateString = doc.get(\"date\");\n      \n      position.setIndex(0);\n      Date date = parser.parse(dateString, position);\n      if (position.getErrorIndex() != -1) {\n        throw new AssertionError(\"failed to parse \\\"\" + dateString + \"\\\" as date\");\n      }\n      if (position.getIndex() != dateString.length()) {\n        throw new AssertionError(\"failed to parse \\\"\" + dateString + \"\\\" as date\");\n      }\n      if (dateDVField == null) {\n        dateDVField = new NumericDocValuesField(\"dateDV\", 0l);\n        doc.add(dateDVField);\n      }\n      dateDVField.setLongValue(date.getTime());\n      if (i == 250) {\n        writer.commit();\n      }      \n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCreateSortedIndex().mjava","pathOld":"/dev/null","sourceNew":"  // ant test -Dtestcase=TestBackwardsCompatibility -Dtestmethod=testCreateSortedIndex -Dtests.codec=default -Dtests.useSecurityManager=false -Dtests.bwcdir=/tmp/sorted\n  public void testCreateSortedIndex() throws Exception {\n    \n    Path indexDir = getIndexDir().resolve(\"sorted\");\n    Files.deleteIfExists(indexDir);\n    Directory dir = newFSDirectory(indexDir);\n\n    LogByteSizeMergePolicy mp = new LogByteSizeMergePolicy();\n    mp.setNoCFSRatio(1.0);\n    mp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n\n    // TODO: remove randomness\n    IndexWriterConfig conf = new IndexWriterConfig(analyzer);\n    conf.setMergePolicy(mp);\n    conf.setUseCompoundFile(false);\n    conf.setIndexSort(new Sort(new SortField(\"dateDV\", SortField.Type.LONG, true)));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    LineFileDocs docs = new LineFileDocs(random());\n    SimpleDateFormat parser = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.ROOT);\n    parser.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    ParsePosition position = new ParsePosition(0);\n    Field dateDVField = null;\n    for(int i=0;i<50;i++) {\n      Document doc = docs.nextDoc();\n      String dateString = doc.get(\"date\");\n      \n      position.setIndex(0);\n      Date date = parser.parse(dateString, position);\n      if (position.getErrorIndex() != -1) {\n        throw new AssertionError(\"failed to parse \\\"\" + dateString + \"\\\" as date\");\n      }\n      if (position.getIndex() != dateString.length()) {\n        throw new AssertionError(\"failed to parse \\\"\" + dateString + \"\\\" as date\");\n      }\n      if (dateDVField == null) {\n        dateDVField = new NumericDocValuesField(\"dateDV\", 0l);\n        doc.add(dateDVField);\n      }\n      dateDVField.setLongValue(date.getTime());\n      if (i == 250) {\n        writer.commit();\n      }      \n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"977b81ae1627f47e09182475f4256febbe837a59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e859e664a65796dadf8aaf65db6f66f3a885368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","977b81ae1627f47e09182475f4256febbe837a59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["977b81ae1627f47e09182475f4256febbe837a59"]},"commit2Childs":{"977b81ae1627f47e09182475f4256febbe837a59":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["977b81ae1627f47e09182475f4256febbe837a59","2e859e664a65796dadf8aaf65db6f66f3a885368"],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}