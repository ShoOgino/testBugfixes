{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/BaseGroupSelectorTestCase#testGroupHeads().mjava","commits":[{"id":"fdedc06ffe6518d5666d12901a738624563d147d","date":1588593300,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/BaseGroupSelectorTestCase#testGroupHeads().mjava","pathOld":"/dev/null","sourceNew":"  public void testGroupHeads() throws IOException {\n\n    Shard shard = new Shard();\n    indexRandomDocs(shard.writer);\n    IndexSearcher searcher = shard.getIndexSearcher();\n\n    String[] query = new String[]{ \"foo\", \"bar\", \"baz\" };\n    Query topLevel = new TermQuery(new Term(\"text\", query[random().nextInt(query.length)]));\n\n    GroupSelector<T> groupSelector = getGroupSelector();\n    GroupingSearch grouping = new GroupingSearch(groupSelector);\n    grouping.setAllGroups(true);\n    grouping.setAllGroupHeads(true);\n\n    grouping.search(searcher, topLevel, 0, 1);\n    Collection<T> matchingGroups = grouping.getAllMatchingGroups();\n\n    // The number of hits from the top-level query should equal the sum of\n    // the number of hits from the query filtered by each group value in turn\n    int totalHits = searcher.count(topLevel);\n    int groupHits = 0;\n    for (T groupValue : matchingGroups) {\n      Query filtered = new BooleanQuery.Builder()\n          .add(topLevel, BooleanClause.Occur.MUST)\n          .add(filterQuery(groupValue), BooleanClause.Occur.FILTER)\n          .build();\n      groupHits += searcher.count(filtered);\n    }\n    assertEquals(totalHits, groupHits);\n\n    Bits groupHeads = grouping.getAllGroupHeads();\n    int cardinality = 0;\n    for (int i = 0; i < groupHeads.length(); i++) {\n      if (groupHeads.get(i)) {\n        cardinality++;\n      }\n    }\n    assertEquals(matchingGroups.size(), cardinality);   // We should have one set bit per matching group\n\n    // Each group head should correspond to the topdoc of a search filtered by\n    // that group\n    for (T groupValue : matchingGroups) {\n      Query filtered = new BooleanQuery.Builder()\n          .add(topLevel, BooleanClause.Occur.MUST)\n          .add(filterQuery(groupValue), BooleanClause.Occur.FILTER)\n          .build();\n      TopDocs td = searcher.search(filtered, 1);\n      assertTrue(groupHeads.get(td.scoreDocs[0].doc));\n    }\n\n    shard.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdedc06ffe6518d5666d12901a738624563d147d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fdedc06ffe6518d5666d12901a738624563d147d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdedc06ffe6518d5666d12901a738624563d147d"],"fdedc06ffe6518d5666d12901a738624563d147d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}