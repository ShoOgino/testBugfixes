{"path":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e","date":1326766347,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","sourceNew":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","sourceOld":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","sourceNew":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = TestKuromojiTokenizer.readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","sourceOld":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","sourceNew":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = TestKuromojiTokenizer.readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","sourceOld":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadings().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","sourceNew":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = TestJapaneseTokenizer.readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","sourceOld":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = TestKuromojiTokenizer.readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["df594fa0daea908bb30c4f3a453f2bd0a55f9a1e","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["df594fa0daea908bb30c4f3a453f2bd0a55f9a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"df594fa0daea908bb30c4f3a453f2bd0a55f9a1e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["df594fa0daea908bb30c4f3a453f2bd0a55f9a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}