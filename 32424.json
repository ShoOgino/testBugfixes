{"path":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","commits":[{"id":"2408d2a60b59b9f5d910383ce065127078892c04","date":1385328825,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","pathOld":"/dev/null","sourceNew":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    switch (type) {\n      case INTEGER: return Integer.parseInt(val);\n      case DOUBLE:  return Double.parseDouble(val);\n      case FLOAT:   return Float.parseFloat(val);\n      case LONG:    return Long.parseLong(val);\n      case STRING:  return val;\n      case DATE:    return val;\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d840db4e4ec73c3ff5d5457046c6854cc630e26","date":1385608650,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","sourceNew":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  return val;\n        case DATE:    return val;\n      }\n    } catch (Exception e) {\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","sourceOld":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    switch (type) {\n      case INTEGER: return Integer.parseInt(val);\n      case DOUBLE:  return Double.parseDouble(val);\n      case FLOAT:   return Float.parseFloat(val);\n      case LONG:    return Long.parseLong(val);\n      case STRING:  return val;\n      case DATE:    return val;\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","bugFix":null,"bugIntro":["645e9dc687d04dbe961b35c0f3a305c48e892615"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","pathOld":"/dev/null","sourceNew":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  return val;\n        case DATE:    return val;\n      }\n    } catch (Exception e) {\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f7eec39d71193d6fb32f350edca8c406b99322a","date":1390235472,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","sourceNew":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  return val;\n        case DATE:    return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","sourceOld":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  return val;\n        case DATE:    return val;\n      }\n    } catch (Exception e) {\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"645e9dc687d04dbe961b35c0f3a305c48e892615","date":1396352607,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","sourceNew":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n        case DATE:    assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","sourceOld":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  return val;\n        case DATE:    return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","bugFix":["2d840db4e4ec73c3ff5d5457046c6854cc630e26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","sourceNew":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n        case DATE:    assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","sourceOld":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  return val;\n        case DATE:    return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","sourceNew":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n        case DATE:    assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","sourceOld":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='stats']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n        case DATE:    assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["5f7eec39d71193d6fb32f350edca8c406b99322a","645e9dc687d04dbe961b35c0f3a305c48e892615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f7eec39d71193d6fb32f350edca8c406b99322a":["2d840db4e4ec73c3ff5d5457046c6854cc630e26"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d840db4e4ec73c3ff5d5457046c6854cc630e26"],"645e9dc687d04dbe961b35c0f3a305c48e892615":["5f7eec39d71193d6fb32f350edca8c406b99322a"],"2408d2a60b59b9f5d910383ce065127078892c04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d840db4e4ec73c3ff5d5457046c6854cc630e26":["2408d2a60b59b9f5d910383ce065127078892c04"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["645e9dc687d04dbe961b35c0f3a305c48e892615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","2408d2a60b59b9f5d910383ce065127078892c04"],"5f7eec39d71193d6fb32f350edca8c406b99322a":["5eb2511ababf862ea11e10761c70ee560cd84510","645e9dc687d04dbe961b35c0f3a305c48e892615"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"645e9dc687d04dbe961b35c0f3a305c48e892615":["5eb2511ababf862ea11e10761c70ee560cd84510","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"2408d2a60b59b9f5d910383ce065127078892c04":["2d840db4e4ec73c3ff5d5457046c6854cc630e26"],"2d840db4e4ec73c3ff5d5457046c6854cc630e26":["5f7eec39d71193d6fb32f350edca8c406b99322a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}