{"path":"lucene/core/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcce0e518c0546269a896ca6124ba4313059185f","date":1340381078,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#register(TermState,int,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#register(TermState,int,int,long).mjava","sourceNew":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","sourceOld":"  /**\n   * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal\n   * should be derived from a {@link IndexReaderContext}'s leaf ord.\n   */\n  public void register(TermState state, final int ord, final int docFreq, final long totalTermFreq) {\n    assert state != null : \"state must not be null\";\n    assert ord >= 0 && ord < states.length;\n    assert states[ord] == null : \"state for ord: \" + ord\n        + \" already registered\";\n    this.docFreq += docFreq;\n    if (this.totalTermFreq >= 0 && totalTermFreq >= 0)\n      this.totalTermFreq += totalTermFreq;\n    else\n      this.totalTermFreq = -1;\n    states[ord] = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcce0e518c0546269a896ca6124ba4313059185f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","bcce0e518c0546269a896ca6124ba4313059185f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcce0e518c0546269a896ca6124ba4313059185f"]},"commit2Childs":{"bcce0e518c0546269a896ca6124ba4313059185f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bcce0e518c0546269a896ca6124ba4313059185f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}