{"path":"solr/core/src/java/org/apache/solr/logging/log4j2/Log4j2Watcher#getAllLoggers().mjava","commits":[{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/log4j2/Log4j2Watcher#getAllLoggers().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<LoggerInfo> getAllLoggers() {\n    Logger root = LogManager.getRootLogger();\n    LoggerContext ctx = (LoggerContext)LogManager.getContext(false);\n    Map<String,LoggerInfo> map = new HashMap<>(ctx.getLoggers().size());\n\n    //First let's get the explicitly configured loggers\n    Map<String, LoggerConfig> loggers = ctx.getConfiguration().getLoggers();\n    for(Map.Entry<String, LoggerConfig> logger : loggers.entrySet()) {\n      String name = logger.getKey();\n\n      if (logger == root || root.equals(logger) || isRootLogger(name) || \"\".equals(name)) {\n        continue;\n      }\n      map.put(name, new Log4j2Info(name, logger.getValue().getLevel()));\n    }\n\n    for (org.apache.logging.log4j.core.Logger logger : ctx.getLoggers()) {\n      String name = logger.getName();\n      if (logger == root || root.equals(logger) || isRootLogger(name))\n        continue;\n\n      map.put(name, new Log4j2Info(name, logger.getLevel()));\n      while (true) {\n        int dot = name.lastIndexOf(\".\");\n        if (dot < 0)\n          break;\n\n          name = name.substring(0, dot);\n          if (!map.containsKey(name))\n            map.put(name, new Log4j2Info(name, null));\n      }\n    }\n    map.put(LoggerInfo.ROOT_NAME, new Log4j2Info(LoggerInfo.ROOT_NAME, root.getLevel()));\n    return map.values();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/log4j2/Log4j2Watcher#getAllLoggers().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<LoggerInfo> getAllLoggers() {\n    Logger root = LogManager.getRootLogger();\n    LoggerContext ctx = (LoggerContext)LogManager.getContext(false);\n    Map<String,LoggerInfo> map = new HashMap<>(ctx.getLoggers().size());\n\n    //First let's get the explicitly configured loggers\n    Map<String, LoggerConfig> loggers = ctx.getConfiguration().getLoggers();\n    for(Map.Entry<String, LoggerConfig> logger : loggers.entrySet()) {\n      String name = logger.getKey();\n\n      if (logger == root || root.equals(logger) || isRootLogger(name) || \"\".equals(name)) {\n        continue;\n      }\n      map.put(name, new Log4j2Info(name, logger.getValue().getLevel()));\n    }\n\n    for (org.apache.logging.log4j.core.Logger logger : ctx.getLoggers()) {\n      String name = logger.getName();\n      if (logger == root || root.equals(logger) || isRootLogger(name))\n        continue;\n\n      map.put(name, new Log4j2Info(name, logger.getLevel()));\n      while (true) {\n        int dot = name.lastIndexOf(\".\");\n        if (dot < 0)\n          break;\n\n          name = name.substring(0, dot);\n          if (!map.containsKey(name))\n            map.put(name, new Log4j2Info(name, null));\n      }\n    }\n    map.put(LoggerInfo.ROOT_NAME, new Log4j2Info(LoggerInfo.ROOT_NAME, root.getLevel()));\n    return map.values();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}