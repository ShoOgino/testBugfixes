{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    String entityName = context.getEntityAttribute(DataImporter.NAME);\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    Map<String, Object> resolverMap = (Map<String, Object>) resolver\n            .resolve(entityName);\n\n    // Clone resolver map because the resolver map contains common fields or any\n    // others\n    // that the entity processor chooses to keep.\n    Map<String, Object> resolverMapCopy = new HashMap<String, Object>();\n    if (resolverMap != null) {\n      for (Map.Entry<String, Object> entry : resolverMap.entrySet())\n        resolverMapCopy.put(entry.getKey(), entry.getValue());\n    }\n    // Add current row to the copy of resolver map\n    for (Map.Entry<String, Object> entry : row.entrySet())\n      resolverMapCopy.put(entry.getKey(), entry.getValue());\n    // Add this copy to the namespace of the current entity in the resolver\n    resolver.addNamespace(entityName, resolverMapCopy);\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = TemplateString.getVariables(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warning(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n\n      row.put(column, resolver.replaceTokens(expr));\n    }\n\n    // Restore the original resolver map\n    resolver.addNamespace(entityName, resolverMap);\n\n    return row;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["19eb0081c9f2dd6265a0f011506fe2af97493573","19eb0081c9f2dd6265a0f011506fe2af97493573"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    String entityName = context.getEntityAttribute(DataImporter.NAME);\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    Map<String, Object> resolverMap = (Map<String, Object>) resolver\n            .resolve(entityName);\n\n    // Clone resolver map because the resolver map contains common fields or any\n    // others\n    // that the entity processor chooses to keep.\n    Map<String, Object> resolverMapCopy = new HashMap<String, Object>();\n    if (resolverMap != null) {\n      for (Map.Entry<String, Object> entry : resolverMap.entrySet())\n        resolverMapCopy.put(entry.getKey(), entry.getValue());\n    }\n    // Add current row to the copy of resolver map\n    for (Map.Entry<String, Object> entry : row.entrySet())\n      resolverMapCopy.put(entry.getKey(), entry.getValue());\n    // Add this copy to the namespace of the current entity in the resolver\n    resolver.addNamespace(entityName, resolverMapCopy);\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = TemplateString.getVariables(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n\n      row.put(column, resolver.replaceTokens(expr));\n    }\n\n    // Restore the original resolver map\n    resolver.addNamespace(entityName, resolverMap);\n\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    String entityName = context.getEntityAttribute(DataImporter.NAME);\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    Map<String, Object> resolverMap = (Map<String, Object>) resolver\n            .resolve(entityName);\n\n    // Clone resolver map because the resolver map contains common fields or any\n    // others\n    // that the entity processor chooses to keep.\n    Map<String, Object> resolverMapCopy = new HashMap<String, Object>();\n    if (resolverMap != null) {\n      for (Map.Entry<String, Object> entry : resolverMap.entrySet())\n        resolverMapCopy.put(entry.getKey(), entry.getValue());\n    }\n    // Add current row to the copy of resolver map\n    for (Map.Entry<String, Object> entry : row.entrySet())\n      resolverMapCopy.put(entry.getKey(), entry.getValue());\n    // Add this copy to the namespace of the current entity in the resolver\n    resolver.addNamespace(entityName, resolverMapCopy);\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = TemplateString.getVariables(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warning(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n\n      row.put(column, resolver.replaceTokens(expr));\n    }\n\n    // Restore the original resolver map\n    resolver.addNamespace(entityName, resolverMap);\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198","date":1235539651,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = TemplateString.getVariables(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n\n      row.put(column, resolver.replaceTokens(expr));\n    }\n\n\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    String entityName = context.getEntityAttribute(DataImporter.NAME);\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    Map<String, Object> resolverMap = (Map<String, Object>) resolver\n            .resolve(entityName);\n\n    // Clone resolver map because the resolver map contains common fields or any\n    // others\n    // that the entity processor chooses to keep.\n    Map<String, Object> resolverMapCopy = new HashMap<String, Object>();\n    if (resolverMap != null) {\n      for (Map.Entry<String, Object> entry : resolverMap.entrySet())\n        resolverMapCopy.put(entry.getKey(), entry.getValue());\n    }\n    // Add current row to the copy of resolver map\n    for (Map.Entry<String, Object> entry : row.entrySet())\n      resolverMapCopy.put(entry.getKey(), entry.getValue());\n    // Add this copy to the namespace of the current entity in the resolver\n    resolver.addNamespace(entityName, resolverMapCopy);\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = TemplateString.getVariables(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n\n      row.put(column, resolver.replaceTokens(expr));\n    }\n\n    // Restore the original resolver map\n    resolver.addNamespace(entityName, resolverMap);\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d702dc29b81705134f87dde620ab95a6f19cd7","date":1258550646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = TemplateString.getVariables(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n\n      row.put(column, resolver.replaceTokens(expr));\n    }\n\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":["19eb0081c9f2dd6265a0f011506fe2af97493573","19eb0081c9f2dd6265a0f011506fe2af97493573"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateTransformer#transformRow(Map[String,Object],Context).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public Object transformRow(Map<String, Object> row, Context context) {\n\n    VariableResolverImpl resolver = (VariableResolverImpl) context\n            .getVariableResolver();\n    // Add current row to the copy of resolver map\n//    for (Map.Entry<String, Object> entry : row.entrySet())\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String expr = map.get(TEMPLATE);\n      if (expr == null)\n        continue;\n\n      String column = map.get(DataImporter.COLUMN);\n\n      // Verify if all variables can be resolved or not\n      boolean resolvable = true;\n      List<String> variables = getVars(expr);\n      for (String v : variables) {\n        if (resolver.resolve(v) == null) {\n          LOG.warn(\"Unable to resolve variable: \" + v\n                  + \" while parsing expression: \" + expr);\n          resolvable = false;\n        }\n      }\n\n      if (!resolvable)\n        continue;\n      if(variables.size() == 1 && expr.startsWith(\"${\") && expr.endsWith(\"}\")){\n        row.put(column, resolver.resolve(variables.get(0)));\n      } else {\n        row.put(column, resolver.replaceTokens(expr));\n      }\n\n    }\n\n\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"35d702dc29b81705134f87dde620ab95a6f19cd7":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"ad94625fb8d088209f46650c8097196fec67f00c":["35d702dc29b81705134f87dde620ab95a6f19cd7"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"35d702dc29b81705134f87dde620ab95a6f19cd7":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["35d702dc29b81705134f87dde620ab95a6f19cd7"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}